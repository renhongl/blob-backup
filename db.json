{"meta":{"version":1,"warehouse":"2.2.0"},"models":{"Asset":[{"_id":"source/gallery/index.html","path":"gallery/index.html","modified":1,"renderable":0},{"_id":"source/game/index.html","path":"game/index.html","modified":1,"renderable":0},{"_id":"source/home/index.html","path":"home/index.html","modified":1,"renderable":0},{"_id":"source/images/aiting2.png","path":"images/aiting2.png","modified":1,"renderable":0},{"_id":"source/images/aiting7.png","path":"images/aiting7.png","modified":1,"renderable":0},{"_id":"source/images/buyTicket.jpg","path":"images/buyTicket.jpg","modified":1,"renderable":0},{"_id":"source/images/calendar.png","path":"images/calendar.png","modified":1,"renderable":0},{"_id":"source/images/carousel.png","path":"images/carousel.png","modified":1,"renderable":0},{"_id":"source/images/chatRoom1.png","path":"images/chatRoom1.png","modified":1,"renderable":0},{"_id":"source/images/chatHome.png","path":"images/chatHome.png","modified":1,"renderable":0},{"_id":"source/images/chatSearchAndSettings.png","path":"images/chatSearchAndSettings.png","modified":1,"renderable":0},{"_id":"source/images/game1.png","path":"images/game1.png","modified":1,"renderable":0},{"_id":"source/images/game3.png","path":"images/game3.png","modified":1,"renderable":0},{"_id":"source/images/github.png","path":"images/github.png","modified":1,"renderable":0},{"_id":"source/images/game4.png","path":"images/game4.png","modified":1,"renderable":0},{"_id":"source/images/mrui.png","path":"images/mrui.png","modified":1,"renderable":0},{"_id":"source/images/musicPlayer1.png","path":"images/musicPlayer1.png","modified":1,"renderable":0},{"_id":"source/images/musicPlayer2.png","path":"images/musicPlayer2.png","modified":1,"renderable":0},{"_id":"source/images/panda.jpg","path":"images/panda.jpg","modified":1,"renderable":0},{"_id":"source/images/pc1.png","path":"images/pc1.png","modified":1,"renderable":0},{"_id":"source/images/pay.jpg","path":"images/pay.jpg","modified":1,"renderable":0},{"_id":"source/images/pomeloEngine.png","path":"images/pomeloEngine.png","modified":1,"renderable":0},{"_id":"source/images/resetPwd.png","path":"images/resetPwd.png","modified":1,"renderable":0},{"_id":"source/images/signIn.png","path":"images/signIn.png","modified":1,"renderable":0},{"_id":"source/images/signUp.png","path":"images/signUp.png","modified":1,"renderable":0},{"_id":"source/mr/LICENSE","path":"mr/LICENSE","modified":1,"renderable":0},{"_id":"source/mr/README.md","path":"mr/README.md","modified":1,"renderable":0},{"_id":"source/mr/index.css","path":"mr/index.css","modified":1,"renderable":0},{"_id":"source/mr/index.html","path":"mr/index.html","modified":1,"renderable":0},{"_id":"source/source/list.txt","path":"source/list.txt","modified":1,"renderable":0},{"_id":"source/images/addToGroup.png","path":"images/addToGroup.png","modified":1,"renderable":0},{"_id":"source/images/aiting4.png","path":"images/aiting4.png","modified":1,"renderable":0},{"_id":"source/images/chatRoom3.png","path":"images/chatRoom3.png","modified":1,"renderable":0},{"_id":"source/images/docs.png","path":"images/docs.png","modified":1,"renderable":0},{"_id":"source/images/download.png","path":"images/download.png","modified":1,"renderable":0},{"_id":"source/images/drag-verify.png","path":"images/drag-verify.png","modified":1,"renderable":0},{"_id":"source/images/game2.png","path":"images/game2.png","modified":1,"renderable":0},{"_id":"source/images/pomeloEditor.png","path":"images/pomeloEditor.png","modified":1,"renderable":0},{"_id":"source/images/pc2.png","path":"images/pc2.png","modified":1,"renderable":0},{"_id":"themes/xoxo-plus/source/js/xoxo.js","path":"js/xoxo.js","modified":1,"renderable":1},{"_id":"source/game/collect-star/index.html","path":"game/collect-star/index.html","modified":1,"renderable":0},{"_id":"source/game/chess/index.html","path":"game/chess/index.html","modified":1,"renderable":0},{"_id":"source/game/collect-star/main.js","path":"game/collect-star/main.js","modified":1,"renderable":0},{"_id":"source/game/plane/index.html","path":"game/plane/index.html","modified":1,"renderable":0},{"_id":"source/game/plane/main.js","path":"game/plane/main.js","modified":1,"renderable":0},{"_id":"source/game/snake/index.html","path":"game/snake/index.html","modified":1,"renderable":0},{"_id":"source/images/aiting3.png","path":"images/aiting3.png","modified":1,"renderable":0},{"_id":"source/game/player/index.html","path":"game/player/index.html","modified":1,"renderable":0},{"_id":"source/images/aiting5.png","path":"images/aiting5.png","modified":1,"renderable":0},{"_id":"source/home/css/main.css","path":"home/css/main.css","modified":1,"renderable":0},{"_id":"source/images/applicationPlatform.png","path":"images/applicationPlatform.png","modified":1,"renderable":0},{"_id":"source/images/homeAndRoom.png","path":"images/homeAndRoom.png","modified":1,"renderable":0},{"_id":"source/mr/example/button.html","path":"mr/example/button.html","modified":1,"renderable":0},{"_id":"source/mr/example/carousel.html","path":"mr/example/carousel.html","modified":1,"renderable":0},{"_id":"source/mr/example/datepicker.html","path":"mr/example/datepicker.html","modified":1,"renderable":0},{"_id":"source/mr/example/draggable.html","path":"mr/example/draggable.html","modified":1,"renderable":0},{"_id":"source/mr/example/global.css","path":"mr/example/global.css","modified":1,"renderable":0},{"_id":"source/mr/example/index.html","path":"mr/example/index.html","modified":1,"renderable":0},{"_id":"source/mr/example/loading.html","path":"mr/example/loading.html","modified":1,"renderable":0},{"_id":"source/mr/example/message.html","path":"mr/example/message.html","modified":1,"renderable":0},{"_id":"source/mr/example/tab.html","path":"mr/example/tab.html","modified":1,"renderable":0},{"_id":"source/mr/example/menu.html","path":"mr/example/menu.html","modified":1,"renderable":0},{"_id":"source/mr/example/template.html","path":"mr/example/template.html","modified":1,"renderable":0},{"_id":"source/mr/example/tool.js","path":"mr/example/tool.js","modified":1,"renderable":0},{"_id":"source/mr/image/mushroom.png","path":"mr/image/mushroom.png","modified":1,"renderable":0},{"_id":"source/mr/src/mr.css","path":"mr/src/mr.css","modified":1,"renderable":0},{"_id":"source/mr/src/mr.js","path":"mr/src/mr.js","modified":1,"renderable":0},{"_id":"themes/xoxo-plus/source/css/core.less","path":"css/core.less","modified":1,"renderable":1},{"_id":"themes/xoxo-plus/source/css/common.less","path":"css/common.less","modified":1,"renderable":1},{"_id":"themes/xoxo-plus/source/css/highlight.less","path":"css/highlight.less","modified":1,"renderable":1},{"_id":"themes/xoxo-plus/source/css/mixin.less","path":"css/mixin.less","modified":1,"renderable":1},{"_id":"themes/xoxo-plus/source/css/normalize.css","path":"css/normalize.css","modified":1,"renderable":1},{"_id":"themes/xoxo-plus/source/css/variables.less","path":"css/variables.less","modified":1,"renderable":1},{"_id":"themes/xoxo-plus/source/css/xoxo.css.map","path":"css/xoxo.css.map","modified":1,"renderable":1},{"_id":"themes/xoxo-plus/source/css/xoxo.css","path":"css/xoxo.css","modified":1,"renderable":1},{"_id":"themes/xoxo-plus/source/css/xoxo.less","path":"css/xoxo.less","modified":1,"renderable":1},{"_id":"themes/xoxo-plus/source/css/xxoo.css.map","path":"css/xxoo.css.map","modified":1,"renderable":1},{"_id":"themes/xoxo-plus/source/css/xxoo.css","path":"css/xxoo.css","modified":1,"renderable":1},{"_id":"source/images/chatRoom2.png","path":"images/chatRoom2.png","modified":1,"renderable":0},{"_id":"source/game/collect-star/assets/diamond.png","path":"game/collect-star/assets/diamond.png","modified":1,"renderable":0},{"_id":"source/game/collect-star/assets/baddie.png","path":"game/collect-star/assets/baddie.png","modified":1,"renderable":0},{"_id":"source/game/collect-star/assets/dude.png","path":"game/collect-star/assets/dude.png","modified":1,"renderable":0},{"_id":"source/game/collect-star/assets/firstaid.png","path":"game/collect-star/assets/firstaid.png","modified":1,"renderable":0},{"_id":"source/game/collect-star/assets/sky.png","path":"game/collect-star/assets/sky.png","modified":1,"renderable":0},{"_id":"source/game/collect-star/assets/star.png","path":"game/collect-star/assets/star.png","modified":1,"renderable":0},{"_id":"source/game/plane/assets/ao.mp3","path":"game/plane/assets/ao.mp3","modified":1,"renderable":0},{"_id":"source/game/plane/assets/award.png","path":"game/plane/assets/award.png","modified":1,"renderable":0},{"_id":"source/game/plane/assets/bg.jpg","path":"game/plane/assets/bg.jpg","modified":1,"renderable":0},{"_id":"source/game/plane/assets/bullet.png","path":"game/plane/assets/bullet.png","modified":1,"renderable":0},{"_id":"source/game/plane/assets/close.png","path":"game/plane/assets/close.png","modified":1,"renderable":0},{"_id":"source/game/plane/assets/copyright.png","path":"game/plane/assets/copyright.png","modified":1,"renderable":0},{"_id":"source/game/plane/assets/crash1.mp3","path":"game/plane/assets/crash1.mp3","modified":1,"renderable":0},{"_id":"source/game/plane/assets/crash2.mp3","path":"game/plane/assets/crash2.mp3","modified":1,"renderable":0},{"_id":"source/game/plane/assets/deng.mp3","path":"game/plane/assets/deng.mp3","modified":1,"renderable":0},{"_id":"source/game/plane/assets/crash3.mp3","path":"game/plane/assets/crash3.mp3","modified":1,"renderable":0},{"_id":"source/game/plane/assets/enemy1.png","path":"game/plane/assets/enemy1.png","modified":1,"renderable":0},{"_id":"source/game/plane/assets/explode1.png","path":"game/plane/assets/explode1.png","modified":1,"renderable":0},{"_id":"source/game/plane/assets/enemy2.png","path":"game/plane/assets/enemy2.png","modified":1,"renderable":0},{"_id":"source/game/plane/assets/enemy3.png","path":"game/plane/assets/enemy3.png","modified":1,"renderable":0},{"_id":"source/game/plane/assets/explode3.png","path":"game/plane/assets/explode3.png","modified":1,"renderable":0},{"_id":"source/game/plane/assets/explode2.png","path":"game/plane/assets/explode2.png","modified":1,"renderable":0},{"_id":"source/game/plane/assets/fashe.mp3","path":"game/plane/assets/fashe.mp3","modified":1,"renderable":0},{"_id":"source/game/plane/assets/logo.jpg","path":"game/plane/assets/logo.jpg","modified":1,"renderable":0},{"_id":"source/game/plane/assets/mybullet.png","path":"game/plane/assets/mybullet.png","modified":1,"renderable":0},{"_id":"source/game/plane/assets/myexplode.png","path":"game/plane/assets/myexplode.png","modified":1,"renderable":0},{"_id":"source/game/plane/assets/myplane.png","path":"game/plane/assets/myplane.png","modified":1,"renderable":0},{"_id":"source/game/plane/assets/pi.mp3","path":"game/plane/assets/pi.mp3","modified":1,"renderable":0},{"_id":"source/game/plane/assets/preloader.gif","path":"game/plane/assets/preloader.gif","modified":1,"renderable":0},{"_id":"source/game/plane/assets/replaybutton.png","path":"game/plane/assets/replaybutton.png","modified":1,"renderable":0},{"_id":"source/game/plane/assets/sharebutton.png","path":"game/plane/assets/sharebutton.png","modified":1,"renderable":0},{"_id":"source/game/plane/assets/share.png","path":"game/plane/assets/share.png","modified":1,"renderable":0},{"_id":"source/game/plane/assets/startbutton.png","path":"game/plane/assets/startbutton.png","modified":1,"renderable":0},{"_id":"source/images/aiting1.png","path":"images/aiting1.png","modified":1,"renderable":0},{"_id":"source/images/loveFish.png","path":"images/loveFish.png","modified":1,"renderable":0},{"_id":"source/mr/example/config/button.json","path":"mr/example/config/button.json","modified":1,"renderable":0},{"_id":"source/mr/example/config/carousel.json","path":"mr/example/config/carousel.json","modified":1,"renderable":0},{"_id":"source/mr/example/config/draggable.json","path":"mr/example/config/draggable.json","modified":1,"renderable":0},{"_id":"source/mr/example/config/loading.json","path":"mr/example/config/loading.json","modified":1,"renderable":0},{"_id":"source/mr/example/config/menu.json","path":"mr/example/config/menu.json","modified":1,"renderable":0},{"_id":"source/mr/example/icon.html","path":"mr/example/icon.html","modified":1,"renderable":0},{"_id":"source/mr/example/config/message.json","path":"mr/example/config/message.json","modified":1,"renderable":0},{"_id":"source/mr/example/config/tab.json","path":"mr/example/config/tab.json","modified":1,"renderable":0},{"_id":"source/mr/src/component/tool.js","path":"mr/src/component/tool.js","modified":1,"renderable":0},{"_id":"source/game/collect-star/assets/platform.png","path":"game/collect-star/assets/platform.png","modified":1,"renderable":0},{"_id":"source/images/aiting6.png","path":"images/aiting6.png","modified":1,"renderable":0},{"_id":"source/images/faceAndEmoj.png","path":"images/faceAndEmoj.png","modified":1,"renderable":0},{"_id":"source/mr/src/component/draggable/style.css","path":"mr/src/component/draggable/style.css","modified":1,"renderable":0},{"_id":"source/mr/src/component/button/style.css","path":"mr/src/component/button/style.css","modified":1,"renderable":0},{"_id":"source/mr/src/component/button/Button.js","path":"mr/src/component/button/Button.js","modified":1,"renderable":0},{"_id":"source/mr/src/component/button/index.js","path":"mr/src/component/button/index.js","modified":1,"renderable":0},{"_id":"source/mr/src/component/carousel/Carousel.js","path":"mr/src/component/carousel/Carousel.js","modified":1,"renderable":0},{"_id":"source/mr/src/component/carousel/index.js","path":"mr/src/component/carousel/index.js","modified":1,"renderable":0},{"_id":"source/mr/src/component/carousel/style.css","path":"mr/src/component/carousel/style.css","modified":1,"renderable":0},{"_id":"source/mr/src/component/draggable/Draggable.js","path":"mr/src/component/draggable/Draggable.js","modified":1,"renderable":0},{"_id":"source/mr/src/component/draggable/index.js","path":"mr/src/component/draggable/index.js","modified":1,"renderable":0},{"_id":"source/mr/src/component/datepicker/index.js","path":"mr/src/component/datepicker/index.js","modified":1,"renderable":0},{"_id":"source/mr/src/component/datepicker/style.css","path":"mr/src/component/datepicker/style.css","modified":1,"renderable":0},{"_id":"source/mr/src/component/loading/Loading.js","path":"mr/src/component/loading/Loading.js","modified":1,"renderable":0},{"_id":"source/mr/src/component/loading/index.js","path":"mr/src/component/loading/index.js","modified":1,"renderable":0},{"_id":"source/mr/src/component/menu/Menu.js","path":"mr/src/component/menu/Menu.js","modified":1,"renderable":0},{"_id":"source/mr/src/component/loading/style.css","path":"mr/src/component/loading/style.css","modified":1,"renderable":0},{"_id":"source/mr/src/component/menu/style.css","path":"mr/src/component/menu/style.css","modified":1,"renderable":0},{"_id":"source/mr/src/component/message/Message.js","path":"mr/src/component/message/Message.js","modified":1,"renderable":0},{"_id":"source/mr/src/component/menu/index.js","path":"mr/src/component/menu/index.js","modified":1,"renderable":0},{"_id":"source/mr/src/component/tab/style.css","path":"mr/src/component/tab/style.css","modified":1,"renderable":0},{"_id":"source/mr/src/component/message/index.js","path":"mr/src/component/message/index.js","modified":1,"renderable":0},{"_id":"source/mr/src/component/message/style.css","path":"mr/src/component/message/style.css","modified":1,"renderable":0},{"_id":"source/mr/src/component/tab/Tab.js","path":"mr/src/component/tab/Tab.js","modified":1,"renderable":0},{"_id":"source/mr/src/component/tab/index.js","path":"mr/src/component/tab/index.js","modified":1,"renderable":0},{"_id":"source/game/plane/assets/playback.mp3","path":"game/plane/assets/playback.mp3","modified":1,"renderable":0},{"_id":"source/images/bigger-image.png","path":"images/bigger-image.png","modified":1,"renderable":0},{"_id":"source/mr/src/component/datepicker/Datepicker.js","path":"mr/src/component/datepicker/Datepicker.js","modified":1,"renderable":0},{"_id":"source/game/plane/assets/normalback.mp3","path":"game/plane/assets/normalback.mp3","modified":1,"renderable":0},{"_id":"source/mr/src/component/icon/style.css","path":"mr/src/component/icon/style.css","modified":1,"renderable":0},{"_id":"source/game/collect-star/phaser.min.js","path":"game/collect-star/phaser.min.js","modified":1,"renderable":0},{"_id":"source/game/plane/phaser.min.js","path":"game/plane/phaser.min.js","modified":1,"renderable":0},{"_id":"source/game/player/bundle.js","path":"game/player/bundle.js","modified":1,"renderable":0},{"_id":"source/game/player/bundle.js.map","path":"game/player/bundle.js.map","modified":1,"renderable":0}],"Cache":[{"_id":"themes/xoxo-plus/README.md","hash":"aefb918f965825865cb4d49d65065d6b468de24f","modified":1565072653000},{"_id":"themes/xoxo-plus/gulpfile.js","hash":"d5f9cc74e2ea4a5d6de8b7931bf90e6a04a02dc9","modified":1565072653000},{"_id":"themes/xoxo-plus/package.json","hash":"203f579a057fb68bf79182b1da74bc7f52d09a0b","modified":1565072653000},{"_id":"themes/xoxo-plus/_config.yml","hash":"3c3623fe3d7021506a0aa1dd8fed12eef805156e","modified":1573538171167},{"_id":"source/_data/projects.json","hash":"1d70d1c08f2e08d86907808588f7211332d0596a","modified":1572851212502},{"_id":"source/_posts/2018-plan.md","hash":"fba263ebd538d782d283f75b1a20889cf147b2e2","modified":1552880582111},{"_id":"source/_posts/Generator.md","hash":"33519fc69124c7d4431e201d5999c01b2cfd7147","modified":1548833928761},{"_id":"source/_posts/2019-plan.md","hash":"230ada12d3e3c07004c3c727b098fc0e26261103","modified":1572852264524},{"_id":"source/_posts/Class.md","hash":"442ba39dc385a9d202ba631949a7471186e6d5d5","modified":1552895109587},{"_id":"source/_posts/Git使用SSH提交代码.md","hash":"bee6c03f8bdacf20637240ed23bcf24740252f27","modified":1548833952678},{"_id":"source/_posts/Iterator和for...of.md","hash":"ba6cfc3d65f72cdee1b306b9ff760fc781be2538","modified":1548835554661},{"_id":"source/_posts/Javascript标准参考教程重点.md","hash":"a6f027fd87954e220cfd5b7e8735b70ac037932c","modified":1548835629966},{"_id":"source/_posts/Javascript设计模式简述.md","hash":"063c2f71ddbd943625725547a5062d40e7fdc2a1","modified":1552894845221},{"_id":"source/_posts/MongoDB安装.md","hash":"ae2f1ce78f260349553801c6b68053b2de98f37c","modified":1548836553759},{"_id":"source/_posts/Set和Map.md","hash":"48fd70ed493a15d11f3b4023c722f24e59a6fc45","modified":1548839417830},{"_id":"source/_posts/NodeJS刷票程序.md","hash":"498c70c835a0f0b78277e76441be531cc468c441","modified":1548839223019},{"_id":"source/_posts/Promise.md","hash":"7be0470d44c0528fbf0e6e274160430e8287051f","modified":1552894608662},{"_id":"source/_posts/Symbol.md","hash":"0ad75e172ec3f8afff837ccf7df22bf89049b0c9","modified":1552894463700},{"_id":"source/_posts/async和await.md","hash":"fb64303face67c0c5dbd03a6438fc1a80b1cb356","modified":1552895145987},{"_id":"source/_posts/async-function.md","hash":"0e75c01c486aef60e631fcf190f2b609a171f9b1","modified":1560851689145},{"_id":"source/_posts/career-development.md","hash":"aa612d32470fbfa3200ac1de1ca26ab9f53108a4","modified":1552895136653},{"_id":"source/_posts/binaryTree.md","hash":"176045c9145e4e67d4124ce96e967fe5a53b6412","modified":1560937616014},{"_id":"source/_posts/data-structure.md","hash":"3932224b99998e5820471d24c118ce6926689e9b","modified":1560938567976},{"_id":"source/_posts/flux.md","hash":"ae2b94ab006308c2d7721108de83747a6ac46639","modified":1552894926024},{"_id":"source/_posts/heap.md","hash":"159fbd11872b93405eb299582d475de6cce1de72","modified":1560937631849},{"_id":"source/_posts/let和const.md","hash":"e65026adf2343dbea64a009b6a0a900bc6d21155","modified":1552894749056},{"_id":"source/_posts/linkedList.md","hash":"811212b38877cfa1fdcb32225e8511324976d564","modified":1560852751270},{"_id":"source/_posts/queue.md","hash":"8d73c22e82877874ea607809d9caaebc37dc756d","modified":1560852769459},{"_id":"source/_posts/redux.md","hash":"524dc0803d99333b28b52d0db457b95957f20c78","modified":1552894583422},{"_id":"source/_posts/rest参数和扩展运算符.md","hash":"f9d45cea8323ce4a016d0896f208959d56241782","modified":1552894558317},{"_id":"source/_posts/search.md","hash":"4a25303f21786726b9aa7c26a4356dc1ae955692","modified":1560851310346},{"_id":"source/_posts/seqList.md","hash":"b65c09e6483ba203e3670fcabae334f8bca886e9","modified":1560852690533},{"_id":"source/_posts/sort.md","hash":"0da6adb7968da8fe1e1b4b01f2cbfb097693ef35","modified":1561021546951},{"_id":"source/_posts/stack.md","hash":"468bb6026a3227596a0189896fce11ec1b25cd58","modified":1560852720434},{"_id":"source/_posts/webpack全面理解.md","hash":"097beec20b22cc8130c41a53be9e8b5c9fb95669","modified":1552894368992},{"_id":"source/_posts/tree.md","hash":"53dbcdf98063cc2ce643369e14f5f9917fd03b16","modified":1560852669047},{"_id":"source/_posts/中介者模式.md","hash":"bd1edd881fe9b916e71c51521dd4f2d6f1946b53","modified":1572850790535},{"_id":"source/_posts/代理模式.md","hash":"40e64053b11a71aa3b4865d9676e3bc03b216fcc","modified":1572850795369},{"_id":"source/_posts/享元模式.md","hash":"e812555c423434ccac2c2792950b731c6054d3f5","modified":1572850792922},{"_id":"source/_posts/函数式编程.md","hash":"992e25e4724d4049986213433324c2ea0dd8a3a9","modified":1560851679895},{"_id":"source/_posts/单例模式.md","hash":"3d9d434052adbd84464265a845e203623e5eace8","modified":1572850800753},{"_id":"source/_posts/变量的解构赋值.md","hash":"e559ffecb61aafefe35523b0881fea13e7d4d16d","modified":1572850823676},{"_id":"source/_posts/原型模式.md","hash":"afefc991131d69e5572ec1d6c810f4305f4f15be","modified":1572850803079},{"_id":"source/_posts/命令模式.md","hash":"c4758982b0fe225500788e316893a1ab46ed817b","modified":1572850808349},{"_id":"source/_posts/实用工具推荐.md","hash":"61a13320a5ef37155f8163698e77c7b11ea9d2d5","modified":1552892898021},{"_id":"source/_posts/对象的扩展.md","hash":"690cf4089a8db9960d414d54053d0b1901ec700e","modified":1552892826241},{"_id":"source/_posts/应用平台WEB.md","hash":"2816d4069e9f70a0be50a35ef4f46544e9dae121","modified":1552892350094},{"_id":"source/_posts/应用平台桌面版.md","hash":"c9d30d8e3530ec63c4f166a85d41c42507dae0cb","modified":1552892051727},{"_id":"source/_posts/数值的扩展.md","hash":"6ed65af5a3a64af8a1103d8af21d7d141dbe9943","modified":1552891952134},{"_id":"source/_posts/技术选型.md","hash":"0344d411766eaae1a6f11de262dd30fa5a29095d","modified":1552891998770},{"_id":"source/_posts/数组的扩展.md","hash":"6d2022b1c3a0d73ae173ac005aa292acdbf0c69f","modified":1552891884716},{"_id":"source/_posts/模板方法模式.md","hash":"30f5892509311d4b2ff2a3297b97f99e6ea421b8","modified":1572850830312},{"_id":"source/_posts/状态模式.md","hash":"81864a566e12e99fba3b6d8f6992ee414c918a45","modified":1572850833225},{"_id":"source/_posts/爱听播放器.md","hash":"19f6d4a57db242f25056362b306d617ae0f11f25","modified":1552891743846},{"_id":"source/_posts/电脑远程控制工具.md","hash":"a2a32c1cb6f3ec9c540c32ab27a9d0253fe0dd40","modified":1552891584861},{"_id":"source/_posts/策略模式.md","hash":"af798e974483dd74262fb33e0348fe1cebfaeea8","modified":1572850837538},{"_id":"source/_posts/算法练习.md","hash":"ce5ab2a45f8e12c7a95bfebf7c54a375949d2c22","modified":1560851698752},{"_id":"source/_posts/职责链模式.md","hash":"f763c9cd10cc3274e17262762b4ae88939a75551","modified":1572850841203},{"_id":"source/_posts/装饰者模式.md","hash":"cc6fbd0a597f26635a2931ba4becf2b8c79b02cf","modified":1572850844314},{"_id":"source/_posts/观察者模式.md","hash":"26237157cf9cd85d089bc9a2168fada64a3f27b3","modified":1572850847818},{"_id":"source/_posts/迭代器模式.md","hash":"b9ac4a2b25cb3670381772f9d4a70f8ac6b2a08d","modified":1572850852512},{"_id":"source/_posts/适配器模式.md","hash":"5cd151ae0f62f383a31abdde66d3ada763ee8612","modified":1572850854986},{"_id":"source/about/index.md","hash":"58aae55c6a684178670e0173d31f17cfd57f48f7","modified":1572851004538},{"_id":"source/gallery/index.html","hash":"72a6c03207a41764efeaf1cb9a61a6f7f167263b","modified":1562663688981},{"_id":"source/game/index.html","hash":"bd71ed00131045fd1f1e1f414186d71d7277ac7c","modified":1547023973728},{"_id":"source/home/index.html","hash":"7c74b66622b4dea47368c3b2d6f2a0fd78f3f827","modified":1562661118407},{"_id":"source/images/aiting2.png","hash":"b2e4f7458a38d9c3ac0454fb6eab945459e7fb9e","modified":1547023974095},{"_id":"source/images/aiting7.png","hash":"2e2518f2ebb89b72c6b00ae51453fc0c858e4535","modified":1547023974114},{"_id":"source/images/buyTicket.jpg","hash":"e9b1baac8dce5c3ed0a8e9c304f0ede1c704c85c","modified":1547023974122},{"_id":"source/images/calendar.png","hash":"466cd7709a56f4e9013a0e4abb6a68a3460e4f74","modified":1552896034467},{"_id":"source/images/carousel.png","hash":"31a484678f465e3f0f5604202d40741b8b9ae363","modified":1552896344585},{"_id":"source/images/chatRoom1.png","hash":"35a9b9ccf2b40bfbd1da9304f4430257f22553d9","modified":1547023974127},{"_id":"source/images/chatHome.png","hash":"25ec7a1e3e7789b33c66719c580e54a5bfc33929","modified":1547023974125},{"_id":"source/images/chatSearchAndSettings.png","hash":"8558c748e7a20b164f189dc289a97ff14fc8a06f","modified":1547023974138},{"_id":"source/images/game1.png","hash":"dd94b35d8d2f2e31a8bb904eb53e807a1156bfe1","modified":1547023974151},{"_id":"source/images/game3.png","hash":"8bb2d20b1367eb19d51d3cd8a36b2cab4e7cd9db","modified":1547023974157},{"_id":"source/images/github.png","hash":"1d86bb419169476b48cbdbf580412b603006bc1a","modified":1552896669043},{"_id":"source/images/game4.png","hash":"1e775ebbfdca251c0d879532323e3411843dfa63","modified":1547023974159},{"_id":"source/categories/index.md","hash":"45422da9fe2ff74cd55459b7552373c23d093215","modified":1573537995946},{"_id":"source/images/mrui.png","hash":"8ecfebf21e869d85e82e3e396c7d81a677b546c6","modified":1561694500902},{"_id":"source/images/musicPlayer1.png","hash":"04992c45d838ec90848b9713225aad0f4a61369a","modified":1547023974170},{"_id":"source/images/musicPlayer2.png","hash":"827395aad188a4d1a0b0a669d07312f255558974","modified":1547023974173},{"_id":"source/images/panda.jpg","hash":"ae75af25063e1158f396bf9ce9c3e95a63ca7760","modified":1547023974175},{"_id":"source/images/pc1.png","hash":"2d84a6df8e500b89e30b35757a5a26e9d78ffbeb","modified":1547023974181},{"_id":"source/images/pay.jpg","hash":"aca9013aeebf0aac0e9a43d60b5fc9c1f42fa19a","modified":1547023974178},{"_id":"source/images/pomeloEngine.png","hash":"668bed805eca0f9f44d5c98433e5aab7aa5a9556","modified":1561694500921},{"_id":"source/images/resetPwd.png","hash":"a6aabf10ea4c6026fd375f421346ef8df1547b09","modified":1547023974188},{"_id":"source/images/signIn.png","hash":"49db05fc60d85d17836cebb035695854230d0c55","modified":1547023974190},{"_id":"source/links/index.md","hash":"d1e2461a5537d04df174d76a39d2d0418db2a562","modified":1547098862499},{"_id":"source/images/signUp.png","hash":"bdd3c6d16ca71f1f6c2190d6305b6a14be5f402d","modified":1547023974192},{"_id":"source/mr/LICENSE","hash":"a8e501bfc74e1a58a4ca0b5dded4efc522efb599","modified":1547023974200},{"_id":"source/mr/README.md","hash":"0cfb9e9d6a303e52544e3cf4819760853b39969e","modified":1547023974203},{"_id":"source/mr/.gitignore","hash":"c03dd16a74e7294de750d762e83d77586a29876d","modified":1547023974196},{"_id":"source/mr/index.css","hash":"5e5acc84a0772ad86c613573ff92c539ffe0f056","modified":1547023974348},{"_id":"source/mr/index.html","hash":"6422668a57255016166f514264d92b57fa58d637","modified":1547023974356},{"_id":"source/projects/index.md","hash":"9cf2e03c080c8c1fe4f2d150cfb88cd974c84e2e","modified":1572851669589},{"_id":"source/search/index.md","hash":"a68e2bbf8a31117eb9a60bae6faa6581948c3b2e","modified":1547023975511},{"_id":"source/source/list.txt","hash":"130878ddbd1a56d4fcfa9e3093bdd66c2eda5bb3","modified":1547023975514},{"_id":"source/tags/index.md","hash":"0946c0af02e7abf858f6e17ad4ffc901a3a7a568","modified":1573537928321},{"_id":"themes/xoxo-plus/layout/index.ejs","hash":"bc4c04e523b9152cb7e5f2b2c689e7a718f6bdd2","modified":1565072653000},{"_id":"themes/xoxo-plus/layout/layout.ejs","hash":"c50f54fc42cc61cd13cc72b32bb429457ab6e847","modified":1565072653000},{"_id":"themes/xoxo-plus/layout/archive.ejs","hash":"bd98c4a500422340d829b918b86963f810607205","modified":1565072653000},{"_id":"themes/xoxo-plus/layout/tag.ejs","hash":"f35efdf7de89401ab24cc7b1712ca7702a8591ff","modified":1565072653000},{"_id":"themes/xoxo-plus/layout/page.ejs","hash":"1c5ff3315838aadde35454cf0430a564878b6670","modified":1565072653000},{"_id":"themes/xoxo-plus/layout/tags.ejs","hash":"8402fbce88c88d900c015505845d776d0296c7c5","modified":1573537612434},{"_id":"themes/xoxo-plus/languages/default.yml","hash":"e44dfd1305ccc06b94f04de434ada89697e03e55","modified":1565072653000},{"_id":"themes/xoxo-plus/languages/en.yml","hash":"75b950e8e515b782a189c29210a9322e9af414f6","modified":1565072653000},{"_id":"themes/xoxo-plus/languages/zh-CN.yml","hash":"5772afddf6caf059fafad0c15b7b36ffdef0105a","modified":1565072653000},{"_id":"themes/xoxo-plus/languages/zh-TW.yml","hash":"12e322c9f08dd2370785581b990baa43e9b9153f","modified":1565072653000},{"_id":"source/images/addToGroup.png","hash":"e78d011d76b0c5f97df9ea7f08449bc4063ae47f","modified":1547023974087},{"_id":"source/images/aiting4.png","hash":"8c57b66004d13c144dd6899fa8a4dbdbd4351534","modified":1547023974102},{"_id":"source/images/chatRoom3.png","hash":"d4008d148dd6833dbafc892d6fcee48b1bbe9db6","modified":1547023974134},{"_id":"source/images/docs.png","hash":"a71ec28c7ce95d6feb0d885adc26e75ff87c3e65","modified":1547023974140},{"_id":"source/images/download.png","hash":"0a874cfbd8152e01751e228c58403086eb95a225","modified":1547023974143},{"_id":"source/images/drag-verify.png","hash":"ca579fe8091ee206b7701c7a933eda5406e7fb60","modified":1552896264220},{"_id":"source/images/game2.png","hash":"b834540535870ce68df0cde024d0d7b21c559592","modified":1547023974154},{"_id":"source/images/pomeloEditor.png","hash":"4b59af3ac00b4e9895490a840be984daf1e14d0e","modified":1561694500904},{"_id":"source/images/pc2.png","hash":"d99f58466e06d20cea1906d1f0ff398c3f7be7d1","modified":1547023974185},{"_id":"themes/xoxo-plus/layout/post.ejs","hash":"b6868476e127de9bbc02d8a574ca7aba93740fbe","modified":1573538336684},{"_id":"themes/xoxo-plus/source/js/xoxo.js","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1565072653000},{"_id":"source/game/collect-star/index.html","hash":"69e77ab754076cc33a8e41a030adc28727f828c9","modified":1547023973590},{"_id":"source/game/chess/index.html","hash":"0e4034bbf89d38bb28266f33a06c9066df22c7e6","modified":1547023973563},{"_id":"source/game/collect-star/main.js","hash":"9b0520d91dabfe10142ce83b98981188e9d0bd3d","modified":1547023973645},{"_id":"source/game/plane/index.html","hash":"250320bf83e8a08fc79c60381016e3d555faf8a7","modified":1547023973810},{"_id":"source/game/plane/main.js","hash":"e3718f676d0d26b1c9f32daedf3bfe672559394c","modified":1547023973864},{"_id":"source/game/snake/index.html","hash":"8ef88157b5d48fdf93b48ab630e23fe2ad3e2aa3","modified":1547023974077},{"_id":"source/images/aiting3.png","hash":"69532e5153893b5b45ee97b35acad946f142bf3b","modified":1547023974097},{"_id":"source/game/player/index.html","hash":"53c147cc952d6668ccfb9895620db734c0012402","modified":1547023974074},{"_id":"source/images/aiting5.png","hash":"269bd3260178829dd3bd9b2004ec3ef7e3d601ca","modified":1547023974106},{"_id":"source/home/css/main.css","hash":"2738d6d82f8cc64faeeeca3a8893200076eb051f","modified":1562660182370},{"_id":"source/images/applicationPlatform.png","hash":"3ac7bb753d76078c816c939ff8279cf6abfd9477","modified":1547023974118},{"_id":"source/images/homeAndRoom.png","hash":"2d27990fe68125c68d57f581af691589fc13a157","modified":1547023974162},{"_id":"source/mr/example/button.html","hash":"168c2a9710ced659e05b3c1a7b80bcdaabc5c712","modified":1547023974206},{"_id":"source/mr/example/carousel.html","hash":"9a7321459e40b39d120aea763ee1a2d4c595ee46","modified":1547023974210},{"_id":"source/mr/example/datepicker.html","hash":"ef2729363a87269d5f437428cbddc4f7e97d50db","modified":1547023974236},{"_id":"source/mr/example/draggable.html","hash":"ab6986311a1b4127c3bf6bc1a35e1c1a17b0b5cb","modified":1547023974241},{"_id":"source/mr/example/global.css","hash":"5e04080a54bc5bc017f29d020f0dbfe930dfb060","modified":1547023974245},{"_id":"source/mr/example/index.html","hash":"435ed8431e84bce0b399a296f4c08f7525fd683c","modified":1547023974257},{"_id":"source/mr/example/loading.html","hash":"e021dacd1a6d654dc16525fb5ff43c141228608f","modified":1547023974261},{"_id":"source/mr/example/message.html","hash":"01186059cb20c7e04bb8c84af35deb367fe384b2","modified":1547023974273},{"_id":"source/mr/example/tab.html","hash":"eddca3e18aae7a5b9563ac37b0f537eeb8d1880c","modified":1547023974278},{"_id":"source/mr/example/menu.html","hash":"bd0f4da5ff6912dd8d254dbadfa71268b37a92f4","modified":1547023974266},{"_id":"source/mr/example/template.html","hash":"50b130fc2a109b512e7c92a4603f2caefd1f781a","modified":1547023974282},{"_id":"source/mr/example/tool.js","hash":"839d10e2c3976d9a27a807c9d6e64d2a7f574019","modified":1547023974340},{"_id":"source/mr/image/mushroom.png","hash":"a754dcee48d1a97f9be29fb7630f3132bd4187f9","modified":1547023974344},{"_id":"source/mr/src/mr.css","hash":"f7ab0d21685e933e9bcc1e32ff24e1d135f49e61","modified":1547023975444},{"_id":"source/mr/src/mr.js","hash":"045526fad83a0d05e7fc63bc2fdc60ee2cc58c4b","modified":1547023975501},{"_id":"themes/xoxo-plus/layout/partials/analytics.ejs","hash":"df9871e7d66f1b703c5b757df94fd0f3fd5ea1b6","modified":1565072653000},{"_id":"themes/xoxo-plus/layout/partials/activity.ejs","hash":"b4d63ae07c0cf39b3a96cfd81a3a5b9e6813bfac","modified":1565072653000},{"_id":"themes/xoxo-plus/layout/partials/archive-post.ejs","hash":"464086c3fd545aa2e059acade02e8382985e22e8","modified":1565072653000},{"_id":"themes/xoxo-plus/layout/partials/archive.ejs","hash":"b5c154d8e0f1930e4261ec63d3a0952ff03fd075","modified":1565072653000},{"_id":"themes/xoxo-plus/layout/partials/baidu_url_js_push.ejs","hash":"a9fe47c76a031e562be3d419f75a49b4a2fd07d7","modified":1565072653000},{"_id":"themes/xoxo-plus/layout/partials/copyright.ejs","hash":"80791921ca6d72f32368275aa88fb56ea99b0ef6","modified":1565072653000},{"_id":"themes/xoxo-plus/layout/partials/disqus.ejs","hash":"efdd456a2ee49d2a2eb8ada28cee68a637121e50","modified":1565072653000},{"_id":"themes/xoxo-plus/layout/partials/footer.ejs","hash":"b8bc46d384cf4a45397e6a729b0103136b7359c4","modified":1565072653000},{"_id":"themes/xoxo-plus/layout/partials/head.ejs","hash":"a4155da1a44ba0c0c1b7ab2f41433bf70f4a3711","modified":1565072653000},{"_id":"themes/xoxo-plus/layout/partials/js.ejs","hash":"281e2504e687db6dc65c0fa6a2e6ff747efbc324","modified":1565072653000},{"_id":"themes/xoxo-plus/layout/partials/links.ejs","hash":"6b72d2262acbb0876edc163da0a083dfda1510d2","modified":1565072653000},{"_id":"themes/xoxo-plus/layout/partials/nav.ejs","hash":"be469503577655040ca03a43bf093d8d5b74c512","modified":1565072653000},{"_id":"themes/xoxo-plus/layout/partials/paper.ejs","hash":"0d2f96f0b8ce4e2d53543200af551e21cbbd94df","modified":1565072653000},{"_id":"themes/xoxo-plus/layout/partials/prenext.ejs","hash":"8ca2261a9fc465b1f1921569ac59b9aa4c83a8c1","modified":1565072653000},{"_id":"themes/xoxo-plus/layout/partials/project.ejs","hash":"fe4143d06f2b81c0f24d8178fac35772b965aaff","modified":1565072653000},{"_id":"themes/xoxo-plus/layout/partials/recent-posts.ejs","hash":"1e743751f0480b3b65f8365199bdd228ac5494bc","modified":1565072653000},{"_id":"themes/xoxo-plus/layout/partials/scripts.ejs","hash":"edc7c81143cd624719a43d2b3edb325fd3cd8019","modified":1565072653000},{"_id":"themes/xoxo-plus/layout/partials/share.ejs","hash":"9f2999f988c94f7b481599f68752db20a7316104","modified":1565072653000},{"_id":"themes/xoxo-plus/layout/partials/search.ejs","hash":"1a03040e44ab0b91064c3d22a5a8d7cb70a379ca","modified":1565072653000},{"_id":"themes/xoxo-plus/layout/partials/toc.ejs","hash":"be02b5e03ecf4cac8d0fe22854a4c7632d36a6a5","modified":1565072653000},{"_id":"themes/xoxo-plus/scripts/tags/center-quote.js","hash":"535fc542781021c4326dec24d8495cbb1387634a","modified":1565072653000},{"_id":"themes/xoxo-plus/scripts/tags/lazy-image.js","hash":"451f6faf1ce5600774b81d8a7ca5826165333b12","modified":1565072653000},{"_id":"themes/xoxo-plus/scripts/tags/note.js","hash":"64de4e9d01cf3b491ffc7d53afdf148ee5ad9779","modified":1565072653000},{"_id":"themes/xoxo-plus/source/css/core.less","hash":"cc7bd8065e0d45bdec12a98d33c3c8d770c81fa0","modified":1565072653000},{"_id":"themes/xoxo-plus/source/css/common.less","hash":"e436b6b577a1ae4d786ca016c534d3cec14c9247","modified":1565072653000},{"_id":"themes/xoxo-plus/source/css/highlight.less","hash":"a7ae4e53c04249f69a2b878fe5e56bf1d23a8b9d","modified":1565072653000},{"_id":"themes/xoxo-plus/source/css/mixin.less","hash":"e7336eca0285aa1189ad47bf6dc7f59fde60e67c","modified":1565072653000},{"_id":"themes/xoxo-plus/source/css/normalize.css","hash":"ebe0759bf259b6caeadee6137973481046ac5636","modified":1565072653000},{"_id":"themes/xoxo-plus/source/css/variables.less","hash":"52aafe1e3a907a85b69b2cf02f14e5e9973b8388","modified":1565072653000},{"_id":"themes/xoxo-plus/source/css/xoxo.css.map","hash":"9e43c4ab3dede729c344ad4e6c1bbf9ad0bee6a9","modified":1565072653000},{"_id":"themes/xoxo-plus/source/css/xoxo.css","hash":"5705f0ca54325a6c9c944249ec30a84df81bd1ee","modified":1565072653000},{"_id":"themes/xoxo-plus/source/css/xoxo.less","hash":"43d9ab1c0fa6d73faeb64910b3e1e07cae63d489","modified":1565072653000},{"_id":"themes/xoxo-plus/source/css/xxoo.css.map","hash":"d07fe1cc9edd53ca13b3e43ada5ac9788da609a9","modified":1565072653000},{"_id":"themes/xoxo-plus/source/css/xxoo.css","hash":"c3d0d559499adea9e89892b5d714f4ab00e0ffa9","modified":1565072653000},{"_id":"source/images/chatRoom2.png","hash":"3778f3f4fa6bd736d4ea40b5d44f5fe28e5d4c9b","modified":1547023974130},{"_id":"source/activity/index.md","hash":"8d218a368af205aaba4a653c7a8651bf1d8f5f76","modified":1573538462028},{"_id":"source/game/collect-star/assets/diamond.png","hash":"5ec6d179c59de491476869b89bd65328a6d4f9b1","modified":1547023973574},{"_id":"source/game/collect-star/assets/baddie.png","hash":"6c66d5b5f4b3a5a8e5789915f557369bafcddf7f","modified":1547023973572},{"_id":"source/game/collect-star/assets/dude.png","hash":"a5e49e1fb387940238476131533fbbd4dcdb4b69","modified":1547023973577},{"_id":"source/game/collect-star/assets/firstaid.png","hash":"d3e2ea91ce1dd7e5233edc468350809736b4b971","modified":1547023973579},{"_id":"source/game/collect-star/assets/sky.png","hash":"cb2c00f93ff533a91e87b0b5faba30db853fa5df","modified":1547023973585},{"_id":"source/game/collect-star/assets/star.png","hash":"92bb9f3b52cf011d129bbc5a3797666c6c560422","modified":1547023973588},{"_id":"source/game/plane/assets/ao.mp3","hash":"b352c565efc4f3f3fa2ba1d39766adbf344573e8","modified":1547023973733},{"_id":"source/game/plane/assets/award.png","hash":"0925e77b2888de906ccf1a29d530b5f650ad965e","modified":1547023973736},{"_id":"source/game/plane/assets/bg.jpg","hash":"ffe9007a908b65354934a7f6caf86e408545f70e","modified":1547023973738},{"_id":"source/game/plane/assets/bullet.png","hash":"367e66f42d46b47fe0dfcc01be7615588707875c","modified":1547023973740},{"_id":"source/game/plane/assets/close.png","hash":"cd6d9791f22ea6852756735b8612d10ba36e2c3b","modified":1547023973742},{"_id":"source/game/plane/assets/copyright.png","hash":"4e87c381d17ba8d06b50d119a2a89e1f22623737","modified":1547023973744},{"_id":"source/game/plane/assets/crash1.mp3","hash":"6f8764a4bbcfc15de87dcbdda3df30dacfc45dd5","modified":1547023973746},{"_id":"source/game/plane/assets/crash2.mp3","hash":"fd675483974d1030d53f9998323523209ef3773c","modified":1547023973748},{"_id":"source/game/plane/assets/deng.mp3","hash":"92fd8def3a96d462996e40ec7cbbd74e636519d1","modified":1547023973753},{"_id":"source/game/plane/assets/crash3.mp3","hash":"72949b9be0c3528edc8e124fd77c6cfe581eec65","modified":1547023973751},{"_id":"source/game/plane/assets/enemy1.png","hash":"44b74db50678b8a2f1fe324f1f137c3e6b5f0af7","modified":1547023973755},{"_id":"source/game/plane/assets/explode1.png","hash":"012f9daa8547619a61f547542bbb05db088a2d33","modified":1547023973761},{"_id":"source/game/plane/assets/enemy2.png","hash":"8266b9c3efac157710b66fffaa2845e4f34abad8","modified":1547023973757},{"_id":"source/game/plane/assets/enemy3.png","hash":"65b852c0da58e168e513f48d08272cec80470b37","modified":1547023973759},{"_id":"source/game/plane/assets/explode3.png","hash":"db9aeea2ec36ea89df86580228fa1d24fec24df2","modified":1547023973765},{"_id":"source/game/plane/assets/explode2.png","hash":"6c06bd1e9914062a273049414086508ddf481e98","modified":1547023973763},{"_id":"source/game/plane/assets/fashe.mp3","hash":"940c3135f565a2bb13e627d809b5eaa7ba640cac","modified":1547023973768},{"_id":"source/game/plane/assets/logo.jpg","hash":"88a2e96dfe1141f7945d21fb8cf4063c5ad925e6","modified":1547023973772},{"_id":"source/game/plane/assets/mybullet.png","hash":"cf0fb7a49ae34d3fb391ec16700aaf14320a4604","modified":1547023973774},{"_id":"source/game/plane/assets/myexplode.png","hash":"a90d23e510ee40df57f30c9ec5cd8692170af233","modified":1547023973777},{"_id":"source/game/plane/assets/myplane.png","hash":"f1c0d5668c316c29628fe1781d679bfb7eafc1e9","modified":1547023973779},{"_id":"source/game/plane/assets/pi.mp3","hash":"e31685e7a6537e77e66b06f5e45c2e1043cd87c7","modified":1547023973790},{"_id":"source/game/plane/assets/preloader.gif","hash":"2974f4bf37231205a256f2648189a461e74869c0","modified":1547023973799},{"_id":"source/game/plane/assets/replaybutton.png","hash":"480c6ad9ed932d1b2d9da3a98c2c1ab84724ec11","modified":1547023973802},{"_id":"source/game/plane/assets/sharebutton.png","hash":"2c5f8bdbd5af461d1cf78b73ea65ca05840fcfad","modified":1547023973807},{"_id":"source/game/plane/assets/share.png","hash":"956757b9f16dc59eaf65e05133fd1880079ad863","modified":1547023973805},{"_id":"source/game/plane/assets/startbutton.png","hash":"48980340f52552e927bfdd1b7eff6688065c2fb3","modified":1547023973808},{"_id":"source/images/aiting1.png","hash":"df3bedace086cd5ef306c9e4ee33bb4536b54f5c","modified":1547023974090},{"_id":"source/images/loveFish.png","hash":"ec116844e1ee94f2204800ab7935bc42b90ca78c","modified":1547023974166},{"_id":"source/mr/example/config/button.json","hash":"3f7d049b5a800b23e5155ce4a225fa1914c8448a","modified":1547023974214},{"_id":"source/mr/example/config/carousel.json","hash":"a3f0dfa162443db589fe13c90b0232c9ac1f7230","modified":1547023974217},{"_id":"source/mr/example/config/draggable.json","hash":"699bdadf0420cc761f7bbcf838e3eebd7ec7a200","modified":1547023974220},{"_id":"source/mr/example/config/loading.json","hash":"8fac380ff13e83bf2ce7b4c86125d9650da798d1","modified":1547023974224},{"_id":"source/mr/example/config/menu.json","hash":"3e00744f296b88f3268b0123bc76e6fe66c9adf4","modified":1547023974227},{"_id":"source/mr/example/icon.html","hash":"88738de9fcdf62d0eae85c476f30a46442d23e0f","modified":1547023974248},{"_id":"source/mr/example/config/message.json","hash":"c6c507dd97d8a6f6e4f798ff10484751ab9a46e0","modified":1547023974229},{"_id":"source/mr/example/config/tab.json","hash":"a47ecc659de737c29e6ea39ebeb6e4b5d40d1993","modified":1547023974233},{"_id":"source/mr/src/component/tool.js","hash":"b5ab651cd1803732c30e384cd173f165bcbcd7e8","modified":1547023975438},{"_id":"source/game/collect-star/assets/platform.png","hash":"a5e554225aacbfe0fc73a64eb951fc30d21c0852","modified":1547023973582},{"_id":"source/images/aiting6.png","hash":"cf1234aa1abad78faa8506653ce6dced75325d73","modified":1547023974110},{"_id":"source/images/faceAndEmoj.png","hash":"7bf7c089338135e1ee590d4e8e311d11d83ad414","modified":1547023974147},{"_id":"source/mr/src/component/draggable/style.css","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1547023974866},{"_id":"source/mr/src/component/button/style.css","hash":"335a5e4dddda66a77537557af7b00080957d30f9","modified":1547023974479},{"_id":"source/mr/src/component/button/Button.js","hash":"aca67fbd637684e34ef951199eac27998c87afb0","modified":1547023974415},{"_id":"source/mr/src/component/button/index.js","hash":"d7872dad8a22f2e52833156452d0b457fe205394","modified":1547023974476},{"_id":"source/mr/src/component/carousel/Carousel.js","hash":"3a2cf421705eae5ed9dede0d2fd2ed8191d3ee97","modified":1547023974538},{"_id":"source/mr/src/component/carousel/index.js","hash":"6cf83aa81ece7ce0dc2e385e6e894a28257b0b7d","modified":1547023974598},{"_id":"source/mr/src/component/carousel/style.css","hash":"e8c3f3d5689a63a813177fb197568128222a2fcd","modified":1547023974603},{"_id":"source/mr/src/component/draggable/Draggable.js","hash":"ec1a632d082ae076d52900727af74644c037298b","modified":1547023974797},{"_id":"source/mr/src/component/draggable/index.js","hash":"2d7939749c05d312c04d2c83b203850fa9a75dde","modified":1547023974863},{"_id":"source/mr/src/component/datepicker/index.js","hash":"9d4b3d4e8ec4a4786e9cb2cc2af34bb70b4368fa","modified":1547023974729},{"_id":"source/mr/src/component/datepicker/style.css","hash":"444e206b5e9bd6f67b36cc8a01edc16ca186a698","modified":1547023974732},{"_id":"source/mr/src/component/loading/Loading.js","hash":"c8fb5750a69e4f7a7c08a69b138fc3179565db62","modified":1547023974938},{"_id":"source/mr/src/component/loading/index.js","hash":"5215aea559124ca63572911f31166a489c5e92b1","modified":1547023974998},{"_id":"source/mr/src/component/menu/Menu.js","hash":"8ed621276839912c4f9954e2491f877fd75fa0c9","modified":1547023975063},{"_id":"source/mr/src/component/loading/style.css","hash":"72df6791eeaff7d26e511e8fcfea296b3826676d","modified":1547023975003},{"_id":"source/mr/src/component/menu/style.css","hash":"14c7a9af21c846fa27cbc76246e79e8310c57fb8","modified":1547023975125},{"_id":"source/mr/src/component/message/Message.js","hash":"ac089e0b333cb7ac3dd63fc62ebaf92fcccde177","modified":1547023975181},{"_id":"source/mr/src/component/menu/index.js","hash":"0d9a805d00850332e5477b3fd5b6cf19eb0e86b4","modified":1547023975122},{"_id":"source/mr/src/component/tab/style.css","hash":"dab90248ccf64d6b6e05bb7c8a1289e13f556911","modified":1547023975378},{"_id":"source/mr/src/component/message/index.js","hash":"252e9d38150f9ad6098184b651e327a219fb79dd","modified":1547023975242},{"_id":"source/mr/src/component/message/style.css","hash":"c49f91b407aa063e03009d6ff46de5f8b5f2476d","modified":1547023975245},{"_id":"source/mr/src/component/tab/Tab.js","hash":"90add83d7e410b759c52001764db30391c670124","modified":1547023975303},{"_id":"source/mr/src/component/tab/index.js","hash":"71d832a2eace9052f57630b8586adffaf312c530","modified":1547023975374},{"_id":"source/game/plane/assets/playback.mp3","hash":"5e9c6680f6da8fa3660457a3269f98d2ababec91","modified":1547023973793},{"_id":"source/images/bigger-image.png","hash":"c6c93af040ab45abf35200bce6ffb17f3d47af94","modified":1552896308205},{"_id":"source/mr/src/component/datepicker/Datepicker.js","hash":"1c244e6b48aa395d404f0dd5858bb0f36f338b3b","modified":1547023974664},{"_id":"source/game/plane/assets/normalback.mp3","hash":"6f3c8366413d2c8a2731fecfd21850af718e61c9","modified":1547023973784},{"_id":"source/mr/src/component/icon/style.css","hash":"e76ab8ac655d8055c303c9a7348cb7d57e2ce8f1","modified":1547023974869},{"_id":"source/game/collect-star/phaser.min.js","hash":"226fd52d2fe3d445c56859b5f623f16ec254cf29","modified":1547023973706},{"_id":"source/game/plane/phaser.min.js","hash":"226fd52d2fe3d445c56859b5f623f16ec254cf29","modified":1547023973932},{"_id":"source/game/player/bundle.js","hash":"be73884f03ab8cb926ec9876904a018a628aa218","modified":1547023974034},{"_id":"source/game/player/bundle.js.map","hash":"9d7db9c812ce3b70ec3b7d7c8fe4ac83e472cad0","modified":1547023974068}],"Category":[],"Data":[{"_id":"projects","data":[{"name":"AiTing","url":"https://github.com/renhongl/aiting","desc":"HTML5客户端音乐播放器"},{"name":"AiLiao","url":"https://github.com/renhongl/ailiao","desc":"网页聊天软件"},{"name":"Pomelo Editor","url":"https://renhongl.github.io/markdown-editor/","desc":"功能强大的在线Markdown编辑器"}]}],"Page":[{"title":"about","date":"2018-12-31T13:46:48.000Z","_content":"\n\n欢迎访问柚子的博客。\n\n\n## 关于我\n\n本科毕业，四年前端工作者。\n\n\n* [Git Hub](https://github.com/renhongl)\n\n\n* [Code Pen](https://codepen.io/renhongl/)\n\n\n## 联系我\n\nGmail: liangrenhong2017@gmail.com\n\nQQ 邮箱: 1075220132@qq.com\n\nQQ: 1075220132\n\n\n\n\n\n","source":"about/index.md","raw":"---\ntitle: about\ndate: 2018-12-31 21:46:48\n---\n\n\n欢迎访问柚子的博客。\n\n\n## 关于我\n\n本科毕业，四年前端工作者。\n\n\n* [Git Hub](https://github.com/renhongl)\n\n\n* [Code Pen](https://codepen.io/renhongl/)\n\n\n## 联系我\n\nGmail: liangrenhong2017@gmail.com\n\nQQ 邮箱: 1075220132@qq.com\n\nQQ: 1075220132\n\n\n\n\n\n","updated":"2019-11-04T07:03:24.538Z","path":"about/index.html","comments":1,"layout":"page","_id":"ck2vg6gtz00014cobkhm6bqxm","content":"<p>欢迎访问柚子的博客。</p>\n<h2 id=\"关于我\"><a href=\"#关于我\" class=\"headerlink\" title=\"关于我\"></a>关于我</h2><p>本科毕业，四年前端工作者。</p>\n<ul>\n<li><a href=\"https://github.com/renhongl\">Git Hub</a></li>\n</ul>\n<ul>\n<li><a href=\"https://codepen.io/renhongl/\" target=\"_blank\" rel=\"noopener\">Code Pen</a></li>\n</ul>\n<h2 id=\"联系我\"><a href=\"#联系我\" class=\"headerlink\" title=\"联系我\"></a>联系我</h2><p>Gmail: <a href=\"mailto:liangrenhong2017@gmail.com\" target=\"_blank\" rel=\"noopener\">liangrenhong2017@gmail.com</a></p>\n<p>QQ 邮箱: <a href=\"mailto:1075220132@qq.com\" target=\"_blank\" rel=\"noopener\">1075220132@qq.com</a></p>\n<p>QQ: 1075220132</p>\n","site":{"data":{"projects":[{"name":"AiTing","url":"https://github.com/renhongl/aiting","desc":"HTML5客户端音乐播放器"},{"name":"AiLiao","url":"https://github.com/renhongl/ailiao","desc":"网页聊天软件"},{"name":"Pomelo Editor","url":"https://renhongl.github.io/markdown-editor/","desc":"功能强大的在线Markdown编辑器"}]}},"excerpt":"","more":"<p>欢迎访问柚子的博客。</p>\n<h2 id=\"关于我\"><a href=\"#关于我\" class=\"headerlink\" title=\"关于我\"></a>关于我</h2><p>本科毕业，四年前端工作者。</p>\n<ul>\n<li><a href=\"https://github.com/renhongl\">Git Hub</a></li>\n</ul>\n<ul>\n<li><a href=\"https://codepen.io/renhongl/\" target=\"_blank\" rel=\"noopener\">Code Pen</a></li>\n</ul>\n<h2 id=\"联系我\"><a href=\"#联系我\" class=\"headerlink\" title=\"联系我\"></a>联系我</h2><p>Gmail: <a href=\"mailto:liangrenhong2017@gmail.com\" target=\"_blank\" rel=\"noopener\">liangrenhong2017@gmail.com</a></p>\n<p>QQ 邮箱: <a href=\"mailto:1075220132@qq.com\" target=\"_blank\" rel=\"noopener\">1075220132@qq.com</a></p>\n<p>QQ: 1075220132</p>\n"},{"title":"categories","date":"2019-11-12T05:53:06.000Z","type":"categories","_content":"","source":"categories/index.md","raw":"---\ntitle: categories\ndate: 2019-11-12 13:53:06\ntype: \"categories\"\n---\n","updated":"2019-11-12T05:53:15.946Z","path":"categories/index.html","comments":1,"layout":"page","_id":"ck2vg6gu500034cob3d50pocr","content":"","site":{"data":{"projects":[{"name":"AiTing","url":"https://github.com/renhongl/aiting","desc":"HTML5客户端音乐播放器"},{"name":"AiLiao","url":"https://github.com/renhongl/ailiao","desc":"网页聊天软件"},{"name":"Pomelo Editor","url":"https://renhongl.github.io/markdown-editor/","desc":"功能强大的在线Markdown编辑器"}]}},"excerpt":"","more":""},{"title":"links","date":"2018-12-31T14:21:47.000Z","_content":"\n\n\n# 同事\n\n[littlesistermogu](https://littlesistermogu.github.io/): 蘑菇的博客\n\n\n","source":"links/index.md","raw":"---\ntitle: links\ndate: 2018-12-31 22:21:47\n---\n\n\n\n# 同事\n\n[littlesistermogu](https://littlesistermogu.github.io/): 蘑菇的博客\n\n\n","updated":"2019-01-10T05:41:02.499Z","path":"links/index.html","comments":1,"layout":"page","_id":"ck2vg6gub00064cob2fbmbzyj","content":"<h1 id=\"同事\"><a href=\"#同事\" class=\"headerlink\" title=\"同事\"></a>同事</h1><p><a href=\"https://littlesistermogu.github.io/\" target=\"_blank\" rel=\"noopener\">littlesistermogu</a>: 蘑菇的博客</p>\n","site":{"data":{"projects":[{"name":"AiTing","url":"https://github.com/renhongl/aiting","desc":"HTML5客户端音乐播放器"},{"name":"AiLiao","url":"https://github.com/renhongl/ailiao","desc":"网页聊天软件"},{"name":"Pomelo Editor","url":"https://renhongl.github.io/markdown-editor/","desc":"功能强大的在线Markdown编辑器"}]}},"excerpt":"","more":"<h1 id=\"同事\"><a href=\"#同事\" class=\"headerlink\" title=\"同事\"></a>同事</h1><p><a href=\"https://littlesistermogu.github.io/\" target=\"_blank\" rel=\"noopener\">littlesistermogu</a>: 蘑菇的博客</p>\n"},{"title":"projects","date":"2018-12-31T14:34:41.000Z","_content":"\n\n# 网站\n\n[AiLiao](https://renhongl.github.io/2016/11/24/%E5%BA%94%E7%94%A8%E5%B9%B3%E5%8F%B0WEB/): 网页版聊天软件。\n\n[Online Markdown Editor](https://renhongl.github.io/markdown-editor/): 功能强大的在线Markdown编辑器。\n\n[Wang Yi Yun Online](https://renhongl.github.io/wangyiyun-online/): 基于网易云API实现的网页播放器。\n\n[Pomelo Engine](https://renhongl.github.io/pomelo-engine/): 使用Javascript开发的2d游戏引擎。\n\n# 客户端\n\n[AiTing](https://renhongl.github.io/2017/01/21/%E7%88%B1%E5%90%AC%E6%92%AD%E6%94%BE%E5%99%A8/): 使用web技术开发的桌面音乐播放器。\n\n[Wang Yi Yun App](https://renhongl.github.io/wangyiyun-online/): 适配客户端的播放器。\n\n[Chat Room](https://renhongl.github.io/2016/11/15/%E5%BA%94%E7%94%A8%E5%B9%B3%E5%8F%B0%E6%A1%8C%E9%9D%A2%E7%89%88/): 使用web技术开发的桌面聊天室。\n\n\n# 库\n\n[MR UI](https://renhongl.github.io/mr/): ES6写的UI库\n\n\n# 游戏\n\n[五子棋](https://renhongl.github.io/game/chess/): HTM5五子棋游戏\n\n<!-- [收集星星](https://renhongl.github.io/game/collect-star/): Phaser(一个游戏引擎) demo -->\n\n[微信打飞机](https://renhongl.github.io/game/plane/): Phaser 开发的打飞机小游戏\n\n[贪吃蛇](https://renhongl.github.io/game/snake/): HTML5做的贪吃蛇\n\n\n\n\n\n\n","source":"projects/index.md","raw":"---\ntitle: projects\ndate: 2018-12-31 22:34:41\n---\n\n\n# 网站\n\n[AiLiao](https://renhongl.github.io/2016/11/24/%E5%BA%94%E7%94%A8%E5%B9%B3%E5%8F%B0WEB/): 网页版聊天软件。\n\n[Online Markdown Editor](https://renhongl.github.io/markdown-editor/): 功能强大的在线Markdown编辑器。\n\n[Wang Yi Yun Online](https://renhongl.github.io/wangyiyun-online/): 基于网易云API实现的网页播放器。\n\n[Pomelo Engine](https://renhongl.github.io/pomelo-engine/): 使用Javascript开发的2d游戏引擎。\n\n# 客户端\n\n[AiTing](https://renhongl.github.io/2017/01/21/%E7%88%B1%E5%90%AC%E6%92%AD%E6%94%BE%E5%99%A8/): 使用web技术开发的桌面音乐播放器。\n\n[Wang Yi Yun App](https://renhongl.github.io/wangyiyun-online/): 适配客户端的播放器。\n\n[Chat Room](https://renhongl.github.io/2016/11/15/%E5%BA%94%E7%94%A8%E5%B9%B3%E5%8F%B0%E6%A1%8C%E9%9D%A2%E7%89%88/): 使用web技术开发的桌面聊天室。\n\n\n# 库\n\n[MR UI](https://renhongl.github.io/mr/): ES6写的UI库\n\n\n# 游戏\n\n[五子棋](https://renhongl.github.io/game/chess/): HTM5五子棋游戏\n\n<!-- [收集星星](https://renhongl.github.io/game/collect-star/): Phaser(一个游戏引擎) demo -->\n\n[微信打飞机](https://renhongl.github.io/game/plane/): Phaser 开发的打飞机小游戏\n\n[贪吃蛇](https://renhongl.github.io/game/snake/): HTML5做的贪吃蛇\n\n\n\n\n\n\n","updated":"2019-11-04T07:14:29.589Z","path":"projects/index.html","comments":1,"layout":"page","_id":"ck2vg6gy6003t4coba6o4x9a8","content":"<h1 id=\"网站\"><a href=\"#网站\" class=\"headerlink\" title=\"网站\"></a>网站</h1><p><a href=\"https://renhongl.github.io/2016/11/24/%E5%BA%94%E7%94%A8%E5%B9%B3%E5%8F%B0WEB/\" target=\"_blank\" rel=\"noopener\">AiLiao</a>: 网页版聊天软件。</p>\n<p><a href=\"https://renhongl.github.io/markdown-editor/\" target=\"_blank\" rel=\"noopener\">Online Markdown Editor</a>: 功能强大的在线Markdown编辑器。</p>\n<p><a href=\"https://renhongl.github.io/wangyiyun-online/\" target=\"_blank\" rel=\"noopener\">Wang Yi Yun Online</a>: 基于网易云API实现的网页播放器。</p>\n<p><a href=\"https://renhongl.github.io/pomelo-engine/\" target=\"_blank\" rel=\"noopener\">Pomelo Engine</a>: 使用Javascript开发的2d游戏引擎。</p>\n<h1 id=\"客户端\"><a href=\"#客户端\" class=\"headerlink\" title=\"客户端\"></a>客户端</h1><p><a href=\"https://renhongl.github.io/2017/01/21/%E7%88%B1%E5%90%AC%E6%92%AD%E6%94%BE%E5%99%A8/\" target=\"_blank\" rel=\"noopener\">AiTing</a>: 使用web技术开发的桌面音乐播放器。</p>\n<p><a href=\"https://renhongl.github.io/wangyiyun-online/\" target=\"_blank\" rel=\"noopener\">Wang Yi Yun App</a>: 适配客户端的播放器。</p>\n<p><a href=\"https://renhongl.github.io/2016/11/15/%E5%BA%94%E7%94%A8%E5%B9%B3%E5%8F%B0%E6%A1%8C%E9%9D%A2%E7%89%88/\" target=\"_blank\" rel=\"noopener\">Chat Room</a>: 使用web技术开发的桌面聊天室。</p>\n<h1 id=\"库\"><a href=\"#库\" class=\"headerlink\" title=\"库\"></a>库</h1><p><a href=\"https://renhongl.github.io/mr/\" target=\"_blank\" rel=\"noopener\">MR UI</a>: ES6写的UI库</p>\n<h1 id=\"游戏\"><a href=\"#游戏\" class=\"headerlink\" title=\"游戏\"></a>游戏</h1><p><a href=\"https://renhongl.github.io/game/chess/\" target=\"_blank\" rel=\"noopener\">五子棋</a>: HTM5五子棋游戏</p>\n<!-- [收集星星](https://renhongl.github.io/game/collect-star/): Phaser(一个游戏引擎) demo -->\n<p><a href=\"https://renhongl.github.io/game/plane/\" target=\"_blank\" rel=\"noopener\">微信打飞机</a>: Phaser 开发的打飞机小游戏</p>\n<p><a href=\"https://renhongl.github.io/game/snake/\" target=\"_blank\" rel=\"noopener\">贪吃蛇</a>: HTML5做的贪吃蛇</p>\n","site":{"data":{"projects":[{"name":"AiTing","url":"https://github.com/renhongl/aiting","desc":"HTML5客户端音乐播放器"},{"name":"AiLiao","url":"https://github.com/renhongl/ailiao","desc":"网页聊天软件"},{"name":"Pomelo Editor","url":"https://renhongl.github.io/markdown-editor/","desc":"功能强大的在线Markdown编辑器"}]}},"excerpt":"","more":"<h1 id=\"网站\"><a href=\"#网站\" class=\"headerlink\" title=\"网站\"></a>网站</h1><p><a href=\"https://renhongl.github.io/2016/11/24/%E5%BA%94%E7%94%A8%E5%B9%B3%E5%8F%B0WEB/\" target=\"_blank\" rel=\"noopener\">AiLiao</a>: 网页版聊天软件。</p>\n<p><a href=\"https://renhongl.github.io/markdown-editor/\" target=\"_blank\" rel=\"noopener\">Online Markdown Editor</a>: 功能强大的在线Markdown编辑器。</p>\n<p><a href=\"https://renhongl.github.io/wangyiyun-online/\" target=\"_blank\" rel=\"noopener\">Wang Yi Yun Online</a>: 基于网易云API实现的网页播放器。</p>\n<p><a href=\"https://renhongl.github.io/pomelo-engine/\" target=\"_blank\" rel=\"noopener\">Pomelo Engine</a>: 使用Javascript开发的2d游戏引擎。</p>\n<h1 id=\"客户端\"><a href=\"#客户端\" class=\"headerlink\" title=\"客户端\"></a>客户端</h1><p><a href=\"https://renhongl.github.io/2017/01/21/%E7%88%B1%E5%90%AC%E6%92%AD%E6%94%BE%E5%99%A8/\" target=\"_blank\" rel=\"noopener\">AiTing</a>: 使用web技术开发的桌面音乐播放器。</p>\n<p><a href=\"https://renhongl.github.io/wangyiyun-online/\" target=\"_blank\" rel=\"noopener\">Wang Yi Yun App</a>: 适配客户端的播放器。</p>\n<p><a href=\"https://renhongl.github.io/2016/11/15/%E5%BA%94%E7%94%A8%E5%B9%B3%E5%8F%B0%E6%A1%8C%E9%9D%A2%E7%89%88/\" target=\"_blank\" rel=\"noopener\">Chat Room</a>: 使用web技术开发的桌面聊天室。</p>\n<h1 id=\"库\"><a href=\"#库\" class=\"headerlink\" title=\"库\"></a>库</h1><p><a href=\"https://renhongl.github.io/mr/\" target=\"_blank\" rel=\"noopener\">MR UI</a>: ES6写的UI库</p>\n<h1 id=\"游戏\"><a href=\"#游戏\" class=\"headerlink\" title=\"游戏\"></a>游戏</h1><p><a href=\"https://renhongl.github.io/game/chess/\" target=\"_blank\" rel=\"noopener\">五子棋</a>: HTM5五子棋游戏</p>\n<!-- [收集星星](https://renhongl.github.io/game/collect-star/): Phaser(一个游戏引擎) demo -->\n<p><a href=\"https://renhongl.github.io/game/plane/\" target=\"_blank\" rel=\"noopener\">微信打飞机</a>: Phaser 开发的打飞机小游戏</p>\n<p><a href=\"https://renhongl.github.io/game/snake/\" target=\"_blank\" rel=\"noopener\">贪吃蛇</a>: HTML5做的贪吃蛇</p>\n"},{"title":"search","type":"search","_content":"","source":"search/index.md","raw":"---\ntitle: search\ntype: search\n---\n","date":"2019-03-20T09:56:55.620Z","updated":"2019-01-09T08:52:55.511Z","path":"search/index.html","comments":1,"layout":"page","_id":"ck2vg6gy8003v4cobq2y1jj2h","content":"","site":{"data":{"projects":[{"name":"AiTing","url":"https://github.com/renhongl/aiting","desc":"HTML5客户端音乐播放器"},{"name":"AiLiao","url":"https://github.com/renhongl/ailiao","desc":"网页聊天软件"},{"name":"Pomelo Editor","url":"https://renhongl.github.io/markdown-editor/","desc":"功能强大的在线Markdown编辑器"}]}},"excerpt":"","more":""},{"title":"tags","date":"2019-01-07T14:46:43.000Z","type":"tags","_content":"","source":"tags/index.md","raw":"---\ntitle: tags\ndate: 2019-01-07 22:46:43\ntype: \"tags\"\n---\n","updated":"2019-11-12T05:52:08.321Z","path":"tags/index.html","comments":1,"layout":"page","_id":"ck2vg6gyb003y4cobqq4ribmz","content":"","site":{"data":{"projects":[{"name":"AiTing","url":"https://github.com/renhongl/aiting","desc":"HTML5客户端音乐播放器"},{"name":"AiLiao","url":"https://github.com/renhongl/ailiao","desc":"网页聊天软件"},{"name":"Pomelo Editor","url":"https://renhongl.github.io/markdown-editor/","desc":"功能强大的在线Markdown编辑器"}]}},"excerpt":"","more":""},{"title":"activity","date":"2019-11-12T06:00:17.000Z","type":"activity","_content":"","source":"activity/index.md","raw":"---\ntitle: activity\ndate: 2019-11-12 14:00:17\ntype: \"activity\"\n---\n","updated":"2019-11-12T06:01:02.028Z","path":"activity/index.html","comments":1,"layout":"page","_id":"ck2vg6gzd004c4cob5le1yzzp","content":"","site":{"data":{"projects":[{"name":"AiTing","url":"https://github.com/renhongl/aiting","desc":"HTML5客户端音乐播放器"},{"name":"AiLiao","url":"https://github.com/renhongl/ailiao","desc":"网页聊天软件"},{"name":"Pomelo Editor","url":"https://renhongl.github.io/markdown-editor/","desc":"功能强大的在线Markdown编辑器"}]}},"excerpt":"","more":""}],"Post":[{"title":"Generator函数","date":"2017-07-10T13:16:52.000Z","_content":"\n# 基本用法\n\n```js\nfunction* helloWorldGenerator() {\n  yield 'hello';\n  yield 'world';\n  return 'ending';\n}\n\nvar hwg = helloWorldGenerator();\nhwg.next();//{value: 'hello', done: false}\nhwg.next();//{value: 'world', done: false}\nhwg.next();//{value: 'ending',  done: true}\nhwg.nexe();//{value: undefined, done: true}\n```\n\n","source":"_posts/Generator.md","raw":"---\ntitle: Generator函数\ndate: 2017-07-10 21:16:52\ntags: ES6\n---\n\n# 基本用法\n\n```js\nfunction* helloWorldGenerator() {\n  yield 'hello';\n  yield 'world';\n  return 'ending';\n}\n\nvar hwg = helloWorldGenerator();\nhwg.next();//{value: 'hello', done: false}\nhwg.next();//{value: 'world', done: false}\nhwg.next();//{value: 'ending',  done: true}\nhwg.nexe();//{value: undefined, done: true}\n```\n\n","slug":"Generator","published":1,"updated":"2019-01-30T07:38:48.761Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ck2vg6gtu00004cobdqiv43ad","content":"<h1 id=\"基本用法\"><a href=\"#基本用法\" class=\"headerlink\" title=\"基本用法\"></a>基本用法</h1><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span>* <span class=\"title\">helloWorldGenerator</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">yield</span> <span class=\"string\">'hello'</span>;</span><br><span class=\"line\">  <span class=\"keyword\">yield</span> <span class=\"string\">'world'</span>;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> <span class=\"string\">'ending'</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">var</span> hwg = helloWorldGenerator();</span><br><span class=\"line\">hwg.next();<span class=\"comment\">//&#123;value: 'hello', done: false&#125;</span></span><br><span class=\"line\">hwg.next();<span class=\"comment\">//&#123;value: 'world', done: false&#125;</span></span><br><span class=\"line\">hwg.next();<span class=\"comment\">//&#123;value: 'ending',  done: true&#125;</span></span><br><span class=\"line\">hwg.nexe();<span class=\"comment\">//&#123;value: undefined, done: true&#125;</span></span><br></pre></td></tr></table></figure>\n","site":{"data":{"projects":[{"name":"AiTing","url":"https://github.com/renhongl/aiting","desc":"HTML5客户端音乐播放器"},{"name":"AiLiao","url":"https://github.com/renhongl/ailiao","desc":"网页聊天软件"},{"name":"Pomelo Editor","url":"https://renhongl.github.io/markdown-editor/","desc":"功能强大的在线Markdown编辑器"}]}},"excerpt":"","more":"<h1 id=\"基本用法\"><a href=\"#基本用法\" class=\"headerlink\" title=\"基本用法\"></a>基本用法</h1><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span>* <span class=\"title\">helloWorldGenerator</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">yield</span> <span class=\"string\">'hello'</span>;</span><br><span class=\"line\">  <span class=\"keyword\">yield</span> <span class=\"string\">'world'</span>;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> <span class=\"string\">'ending'</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">var</span> hwg = helloWorldGenerator();</span><br><span class=\"line\">hwg.next();<span class=\"comment\">//&#123;value: 'hello', done: false&#125;</span></span><br><span class=\"line\">hwg.next();<span class=\"comment\">//&#123;value: 'world', done: false&#125;</span></span><br><span class=\"line\">hwg.next();<span class=\"comment\">//&#123;value: 'ending',  done: true&#125;</span></span><br><span class=\"line\">hwg.nexe();<span class=\"comment\">//&#123;value: undefined, done: true&#125;</span></span><br></pre></td></tr></table></figure>\n"},{"title":"Class","date":"2017-06-14T11:16:52.000Z","_content":"\n\n# 什么是Class\n\nJavascript没有类的概念，要生成一个实例对象，是通过构造函数。\n\n\n\n# 传统写法：\n\n```js\nfunction Person(name, age) {\n  this.name = name;\n  this.age = age;\n}\n\nPerson.prototype.toString = function() {\n  return '(' + this.name + ', ' + this.age + ')';\n}\n\nPerson.prototype.getName = function() {\n  return this.name;\n}\n\nlet p = new Person('lrh', 18);\np.toString();//\"(lrh, 18)\"\np.getName();//\"lrh\"\n```\n\n# 使用ES6的Class语法:\n\n```js\nclass Person{\n  constructor(name, age) {\n    this.name = name;\n    this.age = age;\n  }\n  \n  toString() {\n    return '(' + this.name + ', ' + this.age + ')';\n  }\n  \n  getName() {\n    return this.name;\n  }\n}\n\nlet p = new Person('lrh', 19);\np.toString();//\"(lrh, 18)\"\np.getName();//\"lrh\"\n```\n\n# 私有方法:\n\n1. 使用**下划线**\" _ \"区别方法名，但是外部还是可以调用这个方法。\n\n    ```js\n     class Person{\n      constructor(name, age) {\n        this.name = name;\n        this.age = age;\n      }\n      \n      _getAge() {\n        return this.age;\n      }\n      \n      getInfor() {\n        return this.name + ', ' + this._getAge();\n      }\n    }\n    let p = new Person('lrh', 18);\n    p.getInfor();//\"lrh, 18\"\n    ```\n\n2. 将私有方法移出类，因为在类中方法都是对外可见的。\n\n     ```js\n     class Person{\n       constructor(name, age) {\n         this.name = name;\n         this.age = age;\n       }\n       \n       getInfor() {\n         return this.name + ', ' + getAge.call(this);\n       }\n     }\n     \n     function getAge() {\n       return this.age;\n     }\n     \n     let p = new Person('lrh', 19);\n     p.getInfor();\n     p.getAge();//TypeError: p.getAge is not a function\n     ```\n\n3. 利用Symbol的唯一性，设置私有变量。\n\n     ```js\n     const getAge = Symbol();\n     \n     class Person{\n       constructor(name, age) {\n         this.name = name;\n         this.age = age;\n       }\n       \n       [getAge]() {\n         return this.age;\n       }\n       \n       getInfor() {\n         return this.name + ', ' + this[getAge]();\n       }\n     }\n     \n     let p = new Person('lrh', 18);\n     p.getInfor();\n     ```\n\n   ​\n\n# 私有属性\n\n1. 使用#表示，但是还只是提案，babel都不支持。\n\n     ```js\n     class Person{\n       #type = 'Student';\n       constructor(name, age) {\n         this.name = name;\n         this.age = age;\n       }\n       \n       getInfor() {\n         return this.name + ', ' + this.age + ', ' + this.#type; \n       }\n     }\n     \n     let p = new Person('lrh', 18);\n     p.getInfor();\n     ```\n\n# 取值函数（getter）和存值函数（setter）\n\n1. 拦截了该属性的存取行为。\n\n   ```js\n   //getter，setter对应的属性应该是一个_开头的私有属性，只有使用getter，setter的方式可以读取和修改\n   class Person{\n     constructor(name, age, gender) {\n       this.name = name;\n       this.age = age;\n       this._gender = gender;\n     }\n     \n     get gender() {\n       console.log('getter');\n       return this._gender;\n     }\n     \n     set gender(value) {\n       console.log('setter');\n       this._gender = value;\n     }\n   }\n\n   let p = new Person('lrh', 18, 'male');\n   p.gender;\n   p.gender = 'female';\n   p.gender;\n   ```\n\n   ​\n\n# 静态方法\n\n1. 在方法前加上static关键字，this指向类而不是实例。只能通过类调用。\n\n   ```js\n   class Person{\n     static getRandom() {\n     \treturn Math.random();\n     }\n   \t\n     constructor(name, age) {\n       this.name = name;\n       this.age = age;\n     }\n   }\n\n   Person.getRandom();//0.36116181991876695\n   ```\n\n# 静态属性与实例属性\n\n1. 是ES7的提案，需要安装ES7的转码：`npm install --save-dev babel-preset-stage-2`\n\n   ```js\n   //实例属性\n   class Person{\n     type = 'Student';\n     constructor() {\n       console.log(this.type);\n     }\n   }\n   new Person();//Student\n\n   //静态属性\n   class Person{\n     static type = 'Student';\n     constructor() {\n       console.log(Person.type);\n     }\n   }\n   new Person();//Student\n   ```\n\n   ​","source":"_posts/Class.md","raw":"---\ntitle: Class\ndate: 2017-06-14 19:16:52\ntags: ES6\n---\n\n\n# 什么是Class\n\nJavascript没有类的概念，要生成一个实例对象，是通过构造函数。\n\n\n\n# 传统写法：\n\n```js\nfunction Person(name, age) {\n  this.name = name;\n  this.age = age;\n}\n\nPerson.prototype.toString = function() {\n  return '(' + this.name + ', ' + this.age + ')';\n}\n\nPerson.prototype.getName = function() {\n  return this.name;\n}\n\nlet p = new Person('lrh', 18);\np.toString();//\"(lrh, 18)\"\np.getName();//\"lrh\"\n```\n\n# 使用ES6的Class语法:\n\n```js\nclass Person{\n  constructor(name, age) {\n    this.name = name;\n    this.age = age;\n  }\n  \n  toString() {\n    return '(' + this.name + ', ' + this.age + ')';\n  }\n  \n  getName() {\n    return this.name;\n  }\n}\n\nlet p = new Person('lrh', 19);\np.toString();//\"(lrh, 18)\"\np.getName();//\"lrh\"\n```\n\n# 私有方法:\n\n1. 使用**下划线**\" _ \"区别方法名，但是外部还是可以调用这个方法。\n\n    ```js\n     class Person{\n      constructor(name, age) {\n        this.name = name;\n        this.age = age;\n      }\n      \n      _getAge() {\n        return this.age;\n      }\n      \n      getInfor() {\n        return this.name + ', ' + this._getAge();\n      }\n    }\n    let p = new Person('lrh', 18);\n    p.getInfor();//\"lrh, 18\"\n    ```\n\n2. 将私有方法移出类，因为在类中方法都是对外可见的。\n\n     ```js\n     class Person{\n       constructor(name, age) {\n         this.name = name;\n         this.age = age;\n       }\n       \n       getInfor() {\n         return this.name + ', ' + getAge.call(this);\n       }\n     }\n     \n     function getAge() {\n       return this.age;\n     }\n     \n     let p = new Person('lrh', 19);\n     p.getInfor();\n     p.getAge();//TypeError: p.getAge is not a function\n     ```\n\n3. 利用Symbol的唯一性，设置私有变量。\n\n     ```js\n     const getAge = Symbol();\n     \n     class Person{\n       constructor(name, age) {\n         this.name = name;\n         this.age = age;\n       }\n       \n       [getAge]() {\n         return this.age;\n       }\n       \n       getInfor() {\n         return this.name + ', ' + this[getAge]();\n       }\n     }\n     \n     let p = new Person('lrh', 18);\n     p.getInfor();\n     ```\n\n   ​\n\n# 私有属性\n\n1. 使用#表示，但是还只是提案，babel都不支持。\n\n     ```js\n     class Person{\n       #type = 'Student';\n       constructor(name, age) {\n         this.name = name;\n         this.age = age;\n       }\n       \n       getInfor() {\n         return this.name + ', ' + this.age + ', ' + this.#type; \n       }\n     }\n     \n     let p = new Person('lrh', 18);\n     p.getInfor();\n     ```\n\n# 取值函数（getter）和存值函数（setter）\n\n1. 拦截了该属性的存取行为。\n\n   ```js\n   //getter，setter对应的属性应该是一个_开头的私有属性，只有使用getter，setter的方式可以读取和修改\n   class Person{\n     constructor(name, age, gender) {\n       this.name = name;\n       this.age = age;\n       this._gender = gender;\n     }\n     \n     get gender() {\n       console.log('getter');\n       return this._gender;\n     }\n     \n     set gender(value) {\n       console.log('setter');\n       this._gender = value;\n     }\n   }\n\n   let p = new Person('lrh', 18, 'male');\n   p.gender;\n   p.gender = 'female';\n   p.gender;\n   ```\n\n   ​\n\n# 静态方法\n\n1. 在方法前加上static关键字，this指向类而不是实例。只能通过类调用。\n\n   ```js\n   class Person{\n     static getRandom() {\n     \treturn Math.random();\n     }\n   \t\n     constructor(name, age) {\n       this.name = name;\n       this.age = age;\n     }\n   }\n\n   Person.getRandom();//0.36116181991876695\n   ```\n\n# 静态属性与实例属性\n\n1. 是ES7的提案，需要安装ES7的转码：`npm install --save-dev babel-preset-stage-2`\n\n   ```js\n   //实例属性\n   class Person{\n     type = 'Student';\n     constructor() {\n       console.log(this.type);\n     }\n   }\n   new Person();//Student\n\n   //静态属性\n   class Person{\n     static type = 'Student';\n     constructor() {\n       console.log(Person.type);\n     }\n   }\n   new Person();//Student\n   ```\n\n   ​","slug":"Class","published":1,"updated":"2019-03-18T07:45:09.587Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ck2vg6gu100024cobldi5p54l","content":"<h1 id=\"什么是Class\"><a href=\"#什么是Class\" class=\"headerlink\" title=\"什么是Class\"></a>什么是Class</h1><p>Javascript没有类的概念，要生成一个实例对象，是通过构造函数。</p>\n<h1 id=\"传统写法：\"><a href=\"#传统写法：\" class=\"headerlink\" title=\"传统写法：\"></a>传统写法：</h1><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">Person</span>(<span class=\"params\">name, age</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">this</span>.name = name;</span><br><span class=\"line\">  <span class=\"keyword\">this</span>.age = age;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">Person.prototype.toString = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> <span class=\"string\">'('</span> + <span class=\"keyword\">this</span>.name + <span class=\"string\">', '</span> + <span class=\"keyword\">this</span>.age + <span class=\"string\">')'</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">Person.prototype.getName = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> <span class=\"keyword\">this</span>.name;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">let</span> p = <span class=\"keyword\">new</span> Person(<span class=\"string\">'lrh'</span>, <span class=\"number\">18</span>);</span><br><span class=\"line\">p.toString();<span class=\"comment\">//\"(lrh, 18)\"</span></span><br><span class=\"line\">p.getName();<span class=\"comment\">//\"lrh\"</span></span><br></pre></td></tr></table></figure>\n<h1 id=\"使用ES6的Class语法\"><a href=\"#使用ES6的Class语法\" class=\"headerlink\" title=\"使用ES6的Class语法:\"></a>使用ES6的Class语法:</h1><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Person</span></span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">constructor</span>(name, age) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">this</span>.name = name;</span><br><span class=\"line\">    <span class=\"keyword\">this</span>.age = age;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  </span><br><span class=\"line\">  toString() &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"string\">'('</span> + <span class=\"keyword\">this</span>.name + <span class=\"string\">', '</span> + <span class=\"keyword\">this</span>.age + <span class=\"string\">')'</span>;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  </span><br><span class=\"line\">  getName() &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"keyword\">this</span>.name;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">let</span> p = <span class=\"keyword\">new</span> Person(<span class=\"string\">'lrh'</span>, <span class=\"number\">19</span>);</span><br><span class=\"line\">p.toString();<span class=\"comment\">//\"(lrh, 18)\"</span></span><br><span class=\"line\">p.getName();<span class=\"comment\">//\"lrh\"</span></span><br></pre></td></tr></table></figure>\n<h1 id=\"私有方法\"><a href=\"#私有方法\" class=\"headerlink\" title=\"私有方法:\"></a>私有方法:</h1><ol>\n<li><p>使用<strong>下划线</strong>“ _ “区别方法名，但是外部还是可以调用这个方法。</p>\n <figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Person</span></span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">constructor</span>(name, age) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">this</span>.name = name;</span><br><span class=\"line\">    <span class=\"keyword\">this</span>.age = age;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  </span><br><span class=\"line\">  _getAge() &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"keyword\">this</span>.age;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  </span><br><span class=\"line\">  getInfor() &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"keyword\">this</span>.name + <span class=\"string\">', '</span> + <span class=\"keyword\">this</span>._getAge();</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">let</span> p = <span class=\"keyword\">new</span> Person(<span class=\"string\">'lrh'</span>, <span class=\"number\">18</span>);</span><br><span class=\"line\">p.getInfor();<span class=\"comment\">//\"lrh, 18\"</span></span><br></pre></td></tr></table></figure>\n</li>\n<li><p>将私有方法移出类，因为在类中方法都是对外可见的。</p>\n  <figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Person</span></span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">constructor</span>(name, age) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">this</span>.name = name;</span><br><span class=\"line\">    <span class=\"keyword\">this</span>.age = age;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  </span><br><span class=\"line\">  getInfor() &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"keyword\">this</span>.name + <span class=\"string\">', '</span> + getAge.call(<span class=\"keyword\">this</span>);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">getAge</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> <span class=\"keyword\">this</span>.age;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">let</span> p = <span class=\"keyword\">new</span> Person(<span class=\"string\">'lrh'</span>, <span class=\"number\">19</span>);</span><br><span class=\"line\">p.getInfor();</span><br><span class=\"line\">p.getAge();<span class=\"comment\">//TypeError: p.getAge is not a function</span></span><br></pre></td></tr></table></figure>\n</li>\n<li><p>利用Symbol的唯一性，设置私有变量。</p>\n  <figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> getAge = <span class=\"built_in\">Symbol</span>();</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Person</span></span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">constructor</span>(name, age) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">this</span>.name = name;</span><br><span class=\"line\">    <span class=\"keyword\">this</span>.age = age;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  </span><br><span class=\"line\">  [getAge]() &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"keyword\">this</span>.age;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  </span><br><span class=\"line\">  getInfor() &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"keyword\">this</span>.name + <span class=\"string\">', '</span> + <span class=\"keyword\">this</span>[getAge]();</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">let</span> p = <span class=\"keyword\">new</span> Person(<span class=\"string\">'lrh'</span>, <span class=\"number\">18</span>);</span><br><span class=\"line\">p.getInfor();</span><br></pre></td></tr></table></figure>\n<p>​</p>\n</li>\n</ol>\n<h1 id=\"私有属性\"><a href=\"#私有属性\" class=\"headerlink\" title=\"私有属性\"></a>私有属性</h1><ol>\n<li><p>使用#表示，但是还只是提案，babel都不支持。</p>\n  <figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Person</span></span>&#123;</span><br><span class=\"line\">  #type = 'Student';</span><br><span class=\"line\">  <span class=\"keyword\">constructor</span>(name, age) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">this</span>.name = name;</span><br><span class=\"line\">    <span class=\"keyword\">this</span>.age = age;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  </span><br><span class=\"line\">  getInfor() &#123;</span><br><span class=\"line\">    return this.name + ', ' + this.age + ', ' + this.#type; </span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">let</span> p = <span class=\"keyword\">new</span> Person(<span class=\"string\">'lrh'</span>, <span class=\"number\">18</span>);</span><br><span class=\"line\">p.getInfor();</span><br></pre></td></tr></table></figure>\n</li>\n</ol>\n<h1 id=\"取值函数（getter）和存值函数（setter）\"><a href=\"#取值函数（getter）和存值函数（setter）\" class=\"headerlink\" title=\"取值函数（getter）和存值函数（setter）\"></a>取值函数（getter）和存值函数（setter）</h1><ol>\n<li><p>拦截了该属性的存取行为。</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//getter，setter对应的属性应该是一个_开头的私有属性，只有使用getter，setter的方式可以读取和修改</span></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Person</span></span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">constructor</span>(name, age, gender) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">this</span>.name = name;</span><br><span class=\"line\">    <span class=\"keyword\">this</span>.age = age;</span><br><span class=\"line\">    <span class=\"keyword\">this</span>._gender = gender;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  </span><br><span class=\"line\">  get gender() &#123;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"string\">'getter'</span>);</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"keyword\">this</span>._gender;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  </span><br><span class=\"line\">  set gender(value) &#123;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"string\">'setter'</span>);</span><br><span class=\"line\">    <span class=\"keyword\">this</span>._gender = value;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">let</span> p = <span class=\"keyword\">new</span> Person(<span class=\"string\">'lrh'</span>, <span class=\"number\">18</span>, <span class=\"string\">'male'</span>);</span><br><span class=\"line\">p.gender;</span><br><span class=\"line\">p.gender = <span class=\"string\">'female'</span>;</span><br><span class=\"line\">p.gender;</span><br></pre></td></tr></table></figure>\n<p>​</p>\n</li>\n</ol>\n<h1 id=\"静态方法\"><a href=\"#静态方法\" class=\"headerlink\" title=\"静态方法\"></a>静态方法</h1><ol>\n<li><p>在方法前加上static关键字，this指向类而不是实例。只能通过类调用。</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Person</span></span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">static</span> getRandom() &#123;</span><br><span class=\"line\">  \t<span class=\"keyword\">return</span> <span class=\"built_in\">Math</span>.random();</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">\t</span><br><span class=\"line\">  <span class=\"keyword\">constructor</span>(name, age) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">this</span>.name = name;</span><br><span class=\"line\">    <span class=\"keyword\">this</span>.age = age;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">Person.getRandom();<span class=\"comment\">//0.36116181991876695</span></span><br></pre></td></tr></table></figure>\n</li>\n</ol>\n<h1 id=\"静态属性与实例属性\"><a href=\"#静态属性与实例属性\" class=\"headerlink\" title=\"静态属性与实例属性\"></a>静态属性与实例属性</h1><ol>\n<li><p>是ES7的提案，需要安装ES7的转码：<code>npm install --save-dev babel-preset-stage-2</code></p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//实例属性</span></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Person</span></span>&#123;</span><br><span class=\"line\">  type = <span class=\"string\">'Student'</span>;</span><br><span class=\"line\">  <span class=\"keyword\">constructor</span>() &#123;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"keyword\">this</span>.type);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">new</span> Person();<span class=\"comment\">//Student</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//静态属性</span></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Person</span></span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">static</span> type = <span class=\"string\">'Student'</span>;</span><br><span class=\"line\">  <span class=\"keyword\">constructor</span>() &#123;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(Person.type);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">new</span> Person();<span class=\"comment\">//Student</span></span><br></pre></td></tr></table></figure>\n<p>​</p>\n</li>\n</ol>\n","site":{"data":{"projects":[{"name":"AiTing","url":"https://github.com/renhongl/aiting","desc":"HTML5客户端音乐播放器"},{"name":"AiLiao","url":"https://github.com/renhongl/ailiao","desc":"网页聊天软件"},{"name":"Pomelo Editor","url":"https://renhongl.github.io/markdown-editor/","desc":"功能强大的在线Markdown编辑器"}]}},"excerpt":"","more":"<h1 id=\"什么是Class\"><a href=\"#什么是Class\" class=\"headerlink\" title=\"什么是Class\"></a>什么是Class</h1><p>Javascript没有类的概念，要生成一个实例对象，是通过构造函数。</p>\n<h1 id=\"传统写法：\"><a href=\"#传统写法：\" class=\"headerlink\" title=\"传统写法：\"></a>传统写法：</h1><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">Person</span>(<span class=\"params\">name, age</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">this</span>.name = name;</span><br><span class=\"line\">  <span class=\"keyword\">this</span>.age = age;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">Person.prototype.toString = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> <span class=\"string\">'('</span> + <span class=\"keyword\">this</span>.name + <span class=\"string\">', '</span> + <span class=\"keyword\">this</span>.age + <span class=\"string\">')'</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">Person.prototype.getName = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> <span class=\"keyword\">this</span>.name;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">let</span> p = <span class=\"keyword\">new</span> Person(<span class=\"string\">'lrh'</span>, <span class=\"number\">18</span>);</span><br><span class=\"line\">p.toString();<span class=\"comment\">//\"(lrh, 18)\"</span></span><br><span class=\"line\">p.getName();<span class=\"comment\">//\"lrh\"</span></span><br></pre></td></tr></table></figure>\n<h1 id=\"使用ES6的Class语法\"><a href=\"#使用ES6的Class语法\" class=\"headerlink\" title=\"使用ES6的Class语法:\"></a>使用ES6的Class语法:</h1><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Person</span></span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">constructor</span>(name, age) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">this</span>.name = name;</span><br><span class=\"line\">    <span class=\"keyword\">this</span>.age = age;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  </span><br><span class=\"line\">  toString() &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"string\">'('</span> + <span class=\"keyword\">this</span>.name + <span class=\"string\">', '</span> + <span class=\"keyword\">this</span>.age + <span class=\"string\">')'</span>;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  </span><br><span class=\"line\">  getName() &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"keyword\">this</span>.name;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">let</span> p = <span class=\"keyword\">new</span> Person(<span class=\"string\">'lrh'</span>, <span class=\"number\">19</span>);</span><br><span class=\"line\">p.toString();<span class=\"comment\">//\"(lrh, 18)\"</span></span><br><span class=\"line\">p.getName();<span class=\"comment\">//\"lrh\"</span></span><br></pre></td></tr></table></figure>\n<h1 id=\"私有方法\"><a href=\"#私有方法\" class=\"headerlink\" title=\"私有方法:\"></a>私有方法:</h1><ol>\n<li><p>使用<strong>下划线</strong>“ _ “区别方法名，但是外部还是可以调用这个方法。</p>\n <figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Person</span></span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">constructor</span>(name, age) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">this</span>.name = name;</span><br><span class=\"line\">    <span class=\"keyword\">this</span>.age = age;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  </span><br><span class=\"line\">  _getAge() &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"keyword\">this</span>.age;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  </span><br><span class=\"line\">  getInfor() &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"keyword\">this</span>.name + <span class=\"string\">', '</span> + <span class=\"keyword\">this</span>._getAge();</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">let</span> p = <span class=\"keyword\">new</span> Person(<span class=\"string\">'lrh'</span>, <span class=\"number\">18</span>);</span><br><span class=\"line\">p.getInfor();<span class=\"comment\">//\"lrh, 18\"</span></span><br></pre></td></tr></table></figure>\n</li>\n<li><p>将私有方法移出类，因为在类中方法都是对外可见的。</p>\n  <figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Person</span></span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">constructor</span>(name, age) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">this</span>.name = name;</span><br><span class=\"line\">    <span class=\"keyword\">this</span>.age = age;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  </span><br><span class=\"line\">  getInfor() &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"keyword\">this</span>.name + <span class=\"string\">', '</span> + getAge.call(<span class=\"keyword\">this</span>);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">getAge</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> <span class=\"keyword\">this</span>.age;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">let</span> p = <span class=\"keyword\">new</span> Person(<span class=\"string\">'lrh'</span>, <span class=\"number\">19</span>);</span><br><span class=\"line\">p.getInfor();</span><br><span class=\"line\">p.getAge();<span class=\"comment\">//TypeError: p.getAge is not a function</span></span><br></pre></td></tr></table></figure>\n</li>\n<li><p>利用Symbol的唯一性，设置私有变量。</p>\n  <figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> getAge = <span class=\"built_in\">Symbol</span>();</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Person</span></span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">constructor</span>(name, age) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">this</span>.name = name;</span><br><span class=\"line\">    <span class=\"keyword\">this</span>.age = age;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  </span><br><span class=\"line\">  [getAge]() &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"keyword\">this</span>.age;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  </span><br><span class=\"line\">  getInfor() &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"keyword\">this</span>.name + <span class=\"string\">', '</span> + <span class=\"keyword\">this</span>[getAge]();</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">let</span> p = <span class=\"keyword\">new</span> Person(<span class=\"string\">'lrh'</span>, <span class=\"number\">18</span>);</span><br><span class=\"line\">p.getInfor();</span><br></pre></td></tr></table></figure>\n<p>​</p>\n</li>\n</ol>\n<h1 id=\"私有属性\"><a href=\"#私有属性\" class=\"headerlink\" title=\"私有属性\"></a>私有属性</h1><ol>\n<li><p>使用#表示，但是还只是提案，babel都不支持。</p>\n  <figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Person</span></span>&#123;</span><br><span class=\"line\">  #type = 'Student';</span><br><span class=\"line\">  <span class=\"keyword\">constructor</span>(name, age) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">this</span>.name = name;</span><br><span class=\"line\">    <span class=\"keyword\">this</span>.age = age;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  </span><br><span class=\"line\">  getInfor() &#123;</span><br><span class=\"line\">    return this.name + ', ' + this.age + ', ' + this.#type; </span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">let</span> p = <span class=\"keyword\">new</span> Person(<span class=\"string\">'lrh'</span>, <span class=\"number\">18</span>);</span><br><span class=\"line\">p.getInfor();</span><br></pre></td></tr></table></figure>\n</li>\n</ol>\n<h1 id=\"取值函数（getter）和存值函数（setter）\"><a href=\"#取值函数（getter）和存值函数（setter）\" class=\"headerlink\" title=\"取值函数（getter）和存值函数（setter）\"></a>取值函数（getter）和存值函数（setter）</h1><ol>\n<li><p>拦截了该属性的存取行为。</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//getter，setter对应的属性应该是一个_开头的私有属性，只有使用getter，setter的方式可以读取和修改</span></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Person</span></span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">constructor</span>(name, age, gender) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">this</span>.name = name;</span><br><span class=\"line\">    <span class=\"keyword\">this</span>.age = age;</span><br><span class=\"line\">    <span class=\"keyword\">this</span>._gender = gender;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  </span><br><span class=\"line\">  get gender() &#123;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"string\">'getter'</span>);</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"keyword\">this</span>._gender;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  </span><br><span class=\"line\">  set gender(value) &#123;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"string\">'setter'</span>);</span><br><span class=\"line\">    <span class=\"keyword\">this</span>._gender = value;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">let</span> p = <span class=\"keyword\">new</span> Person(<span class=\"string\">'lrh'</span>, <span class=\"number\">18</span>, <span class=\"string\">'male'</span>);</span><br><span class=\"line\">p.gender;</span><br><span class=\"line\">p.gender = <span class=\"string\">'female'</span>;</span><br><span class=\"line\">p.gender;</span><br></pre></td></tr></table></figure>\n<p>​</p>\n</li>\n</ol>\n<h1 id=\"静态方法\"><a href=\"#静态方法\" class=\"headerlink\" title=\"静态方法\"></a>静态方法</h1><ol>\n<li><p>在方法前加上static关键字，this指向类而不是实例。只能通过类调用。</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Person</span></span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">static</span> getRandom() &#123;</span><br><span class=\"line\">  \t<span class=\"keyword\">return</span> <span class=\"built_in\">Math</span>.random();</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">\t</span><br><span class=\"line\">  <span class=\"keyword\">constructor</span>(name, age) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">this</span>.name = name;</span><br><span class=\"line\">    <span class=\"keyword\">this</span>.age = age;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">Person.getRandom();<span class=\"comment\">//0.36116181991876695</span></span><br></pre></td></tr></table></figure>\n</li>\n</ol>\n<h1 id=\"静态属性与实例属性\"><a href=\"#静态属性与实例属性\" class=\"headerlink\" title=\"静态属性与实例属性\"></a>静态属性与实例属性</h1><ol>\n<li><p>是ES7的提案，需要安装ES7的转码：<code>npm install --save-dev babel-preset-stage-2</code></p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//实例属性</span></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Person</span></span>&#123;</span><br><span class=\"line\">  type = <span class=\"string\">'Student'</span>;</span><br><span class=\"line\">  <span class=\"keyword\">constructor</span>() &#123;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"keyword\">this</span>.type);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">new</span> Person();<span class=\"comment\">//Student</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//静态属性</span></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Person</span></span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">static</span> type = <span class=\"string\">'Student'</span>;</span><br><span class=\"line\">  <span class=\"keyword\">constructor</span>() &#123;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(Person.type);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">new</span> Person();<span class=\"comment\">//Student</span></span><br></pre></td></tr></table></figure>\n<p>​</p>\n</li>\n</ol>\n"},{"title":"2018年学习计划","date":"2018-02-09T03:11:46.000Z","_content":"\n# 2018学习计划\n\n## Javascript:\n\n* [x] Javascript标准参考教程\n* [x] JavaScript设计模式与开发实践\n* [x] Javascript编程精解\n* [x] ES6\n\n## Python:\n\n* [x] python基础(廖雪峰网络教程)\n* [x] 精通python网络爬虫\n* [ ] python爬虫开发与项目实战\n* [x] django(网络教程)\n* [x] flask web开发实战\n\n## Nodejs:\n\n* [ ] ~~nodejs权威指南~~\n\n## React:\n\n* [x] react英文官网\n* [x] 深入浅出react和redux\n* [x] react redux\n* [x]  react router\n* [x] redux thunk\n* [x] redux saga\n* [x] react jest\n\n## Webpack:\n\n* [x]  webpack英文官网\n\n## Linux:\n\n* [ ]  linux shell编程从初学到精通\n\n## 架构:\n\n* [ ] 软件架构设计\n\n## 项目管理:\n\n* [x] 事业发展\n* [x] 技术选型\n\n## 英语:\n\n* [ ] 使用百词斩，每天背25个单词\n* [ ] 使用流利说每天听说30分钟\n\n## 2018目标:\n\n* [x] 完成基于原生js的 UI插件Mr UI开发\n* [ ]  ~~使用python django为Mr UI开发后台~~\n* [ ] 使用python flask开发简书后台\n* [ ] 使用python爬虫为简书项目挖取数据\n* [ ]  ~~对node有全面深入的理解~~\n* [x] 对react及redux有全面深入的理解\n* [ ] 熟练使用python编写各种爬虫\n* [x] 熟练掌握es6, es7语法\n* [ ] 正常无抵触的阅读全英文文档\n* [x] 学会使用Axure设计原型\n* [ ] 使用react, redux, router, saga模仿开发简书网站\n* [ ] 使用python为简书网站做后台\n\n## 技术提升计划\n\n### 学习\n\n1.  前端开发技能：\n\n    1.  Javascript编程精解（熟悉Javascript基础知识）\n    2.  Javascript设计模式（提升Javascirpt编程能力）\n    3.  React and Redux（掌握一门流行框架）\n2.  程序员基础技能：\n\n    1.  高级语言程序设计（Javascript加一门后端语言）\n    2.  数据结构\n    3.  算法分析与设计\n3.  良好的编码习惯：\n\n    1.  阅读几篇和编程语言相关的编码规范\n\n### 练习\n\n1.  锻炼思维\n2.  在掌握基础技能的基础上，在leetcode练习算法","source":"_posts/2018-plan.md","raw":"---\ntitle: 2018年学习计划\ndate: 2018-02-09 11:11:46\ntags: 计划\n---\n\n# 2018学习计划\n\n## Javascript:\n\n* [x] Javascript标准参考教程\n* [x] JavaScript设计模式与开发实践\n* [x] Javascript编程精解\n* [x] ES6\n\n## Python:\n\n* [x] python基础(廖雪峰网络教程)\n* [x] 精通python网络爬虫\n* [ ] python爬虫开发与项目实战\n* [x] django(网络教程)\n* [x] flask web开发实战\n\n## Nodejs:\n\n* [ ] ~~nodejs权威指南~~\n\n## React:\n\n* [x] react英文官网\n* [x] 深入浅出react和redux\n* [x] react redux\n* [x]  react router\n* [x] redux thunk\n* [x] redux saga\n* [x] react jest\n\n## Webpack:\n\n* [x]  webpack英文官网\n\n## Linux:\n\n* [ ]  linux shell编程从初学到精通\n\n## 架构:\n\n* [ ] 软件架构设计\n\n## 项目管理:\n\n* [x] 事业发展\n* [x] 技术选型\n\n## 英语:\n\n* [ ] 使用百词斩，每天背25个单词\n* [ ] 使用流利说每天听说30分钟\n\n## 2018目标:\n\n* [x] 完成基于原生js的 UI插件Mr UI开发\n* [ ]  ~~使用python django为Mr UI开发后台~~\n* [ ] 使用python flask开发简书后台\n* [ ] 使用python爬虫为简书项目挖取数据\n* [ ]  ~~对node有全面深入的理解~~\n* [x] 对react及redux有全面深入的理解\n* [ ] 熟练使用python编写各种爬虫\n* [x] 熟练掌握es6, es7语法\n* [ ] 正常无抵触的阅读全英文文档\n* [x] 学会使用Axure设计原型\n* [ ] 使用react, redux, router, saga模仿开发简书网站\n* [ ] 使用python为简书网站做后台\n\n## 技术提升计划\n\n### 学习\n\n1.  前端开发技能：\n\n    1.  Javascript编程精解（熟悉Javascript基础知识）\n    2.  Javascript设计模式（提升Javascirpt编程能力）\n    3.  React and Redux（掌握一门流行框架）\n2.  程序员基础技能：\n\n    1.  高级语言程序设计（Javascript加一门后端语言）\n    2.  数据结构\n    3.  算法分析与设计\n3.  良好的编码习惯：\n\n    1.  阅读几篇和编程语言相关的编码规范\n\n### 练习\n\n1.  锻炼思维\n2.  在掌握基础技能的基础上，在leetcode练习算法","slug":"2018-plan","published":1,"updated":"2019-03-18T03:43:02.111Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ck2vg6gu900054cob5k0bd0vm","content":"<h1 id=\"2018学习计划\"><a href=\"#2018学习计划\" class=\"headerlink\" title=\"2018学习计划\"></a>2018学习计划</h1><h2 id=\"Javascript\"><a href=\"#Javascript\" class=\"headerlink\" title=\"Javascript:\"></a>Javascript:</h2><ul>\n<li style=\"list-style: none\"><input type=\"checkbox\" checked> Javascript标准参考教程</li>\n<li style=\"list-style: none\"><input type=\"checkbox\" checked> JavaScript设计模式与开发实践</li>\n<li style=\"list-style: none\"><input type=\"checkbox\" checked> Javascript编程精解</li>\n<li style=\"list-style: none\"><input type=\"checkbox\" checked> ES6</li>\n</ul>\n<h2 id=\"Python\"><a href=\"#Python\" class=\"headerlink\" title=\"Python:\"></a>Python:</h2><ul>\n<li style=\"list-style: none\"><input type=\"checkbox\" checked> python基础(廖雪峰网络教程)</li>\n<li style=\"list-style: none\"><input type=\"checkbox\" checked> 精通python网络爬虫</li>\n<li style=\"list-style: none\"><input type=\"checkbox\"> python爬虫开发与项目实战</li>\n<li style=\"list-style: none\"><input type=\"checkbox\" checked> django(网络教程)</li>\n<li style=\"list-style: none\"><input type=\"checkbox\" checked> flask web开发实战</li>\n</ul>\n<h2 id=\"Nodejs\"><a href=\"#Nodejs\" class=\"headerlink\" title=\"Nodejs:\"></a>Nodejs:</h2><ul>\n<li style=\"list-style: none\"><input type=\"checkbox\"> <del>nodejs权威指南</del></li>\n</ul>\n<h2 id=\"React\"><a href=\"#React\" class=\"headerlink\" title=\"React:\"></a>React:</h2><ul>\n<li style=\"list-style: none\"><input type=\"checkbox\" checked> react英文官网</li>\n<li style=\"list-style: none\"><input type=\"checkbox\" checked> 深入浅出react和redux</li>\n<li style=\"list-style: none\"><input type=\"checkbox\" checked> react redux</li>\n<li style=\"list-style: none\"><input type=\"checkbox\" checked> react router</li>\n<li style=\"list-style: none\"><input type=\"checkbox\" checked> redux thunk</li>\n<li style=\"list-style: none\"><input type=\"checkbox\" checked> redux saga</li>\n<li style=\"list-style: none\"><input type=\"checkbox\" checked> react jest</li>\n</ul>\n<h2 id=\"Webpack\"><a href=\"#Webpack\" class=\"headerlink\" title=\"Webpack:\"></a>Webpack:</h2><ul>\n<li style=\"list-style: none\"><input type=\"checkbox\" checked> webpack英文官网</li>\n</ul>\n<h2 id=\"Linux\"><a href=\"#Linux\" class=\"headerlink\" title=\"Linux:\"></a>Linux:</h2><ul>\n<li style=\"list-style: none\"><input type=\"checkbox\"> linux shell编程从初学到精通</li>\n</ul>\n<h2 id=\"架构\"><a href=\"#架构\" class=\"headerlink\" title=\"架构:\"></a>架构:</h2><ul>\n<li style=\"list-style: none\"><input type=\"checkbox\"> 软件架构设计</li>\n</ul>\n<h2 id=\"项目管理\"><a href=\"#项目管理\" class=\"headerlink\" title=\"项目管理:\"></a>项目管理:</h2><ul>\n<li style=\"list-style: none\"><input type=\"checkbox\" checked> 事业发展</li>\n<li style=\"list-style: none\"><input type=\"checkbox\" checked> 技术选型</li>\n</ul>\n<h2 id=\"英语\"><a href=\"#英语\" class=\"headerlink\" title=\"英语:\"></a>英语:</h2><ul>\n<li style=\"list-style: none\"><input type=\"checkbox\"> 使用百词斩，每天背25个单词</li>\n<li style=\"list-style: none\"><input type=\"checkbox\"> 使用流利说每天听说30分钟</li>\n</ul>\n<h2 id=\"2018目标\"><a href=\"#2018目标\" class=\"headerlink\" title=\"2018目标:\"></a>2018目标:</h2><ul>\n<li style=\"list-style: none\"><input type=\"checkbox\" checked> 完成基于原生js的 UI插件Mr UI开发</li>\n<li style=\"list-style: none\"><input type=\"checkbox\"> <del>使用python django为Mr UI开发后台</del></li>\n<li style=\"list-style: none\"><input type=\"checkbox\"> 使用python flask开发简书后台</li>\n<li style=\"list-style: none\"><input type=\"checkbox\"> 使用python爬虫为简书项目挖取数据</li>\n<li style=\"list-style: none\"><input type=\"checkbox\"> <del>对node有全面深入的理解</del></li>\n<li style=\"list-style: none\"><input type=\"checkbox\" checked> 对react及redux有全面深入的理解</li>\n<li style=\"list-style: none\"><input type=\"checkbox\"> 熟练使用python编写各种爬虫</li>\n<li style=\"list-style: none\"><input type=\"checkbox\" checked> 熟练掌握es6, es7语法</li>\n<li style=\"list-style: none\"><input type=\"checkbox\"> 正常无抵触的阅读全英文文档</li>\n<li style=\"list-style: none\"><input type=\"checkbox\" checked> 学会使用Axure设计原型</li>\n<li style=\"list-style: none\"><input type=\"checkbox\"> 使用react, redux, router, saga模仿开发简书网站</li>\n<li style=\"list-style: none\"><input type=\"checkbox\"> 使用python为简书网站做后台</li>\n</ul>\n<h2 id=\"技术提升计划\"><a href=\"#技术提升计划\" class=\"headerlink\" title=\"技术提升计划\"></a>技术提升计划</h2><h3 id=\"学习\"><a href=\"#学习\" class=\"headerlink\" title=\"学习\"></a>学习</h3><ol>\n<li><p>前端开发技能：</p>\n<ol>\n<li>Javascript编程精解（熟悉Javascript基础知识）</li>\n<li>Javascript设计模式（提升Javascirpt编程能力）</li>\n<li>React and Redux（掌握一门流行框架）</li>\n</ol>\n</li>\n<li><p>程序员基础技能：</p>\n<ol>\n<li>高级语言程序设计（Javascript加一门后端语言）</li>\n<li>数据结构</li>\n<li>算法分析与设计</li>\n</ol>\n</li>\n<li><p>良好的编码习惯：</p>\n<ol>\n<li>阅读几篇和编程语言相关的编码规范</li>\n</ol>\n</li>\n</ol>\n<h3 id=\"练习\"><a href=\"#练习\" class=\"headerlink\" title=\"练习\"></a>练习</h3><ol>\n<li>锻炼思维</li>\n<li>在掌握基础技能的基础上，在leetcode练习算法</li>\n</ol>\n","site":{"data":{"projects":[{"name":"AiTing","url":"https://github.com/renhongl/aiting","desc":"HTML5客户端音乐播放器"},{"name":"AiLiao","url":"https://github.com/renhongl/ailiao","desc":"网页聊天软件"},{"name":"Pomelo Editor","url":"https://renhongl.github.io/markdown-editor/","desc":"功能强大的在线Markdown编辑器"}]}},"excerpt":"","more":"<h1 id=\"2018学习计划\"><a href=\"#2018学习计划\" class=\"headerlink\" title=\"2018学习计划\"></a>2018学习计划</h1><h2 id=\"Javascript\"><a href=\"#Javascript\" class=\"headerlink\" title=\"Javascript:\"></a>Javascript:</h2><ul>\n<li style=\"list-style: none\"><input type=\"checkbox\" checked> Javascript标准参考教程</li>\n<li style=\"list-style: none\"><input type=\"checkbox\" checked> JavaScript设计模式与开发实践</li>\n<li style=\"list-style: none\"><input type=\"checkbox\" checked> Javascript编程精解</li>\n<li style=\"list-style: none\"><input type=\"checkbox\" checked> ES6</li>\n</ul>\n<h2 id=\"Python\"><a href=\"#Python\" class=\"headerlink\" title=\"Python:\"></a>Python:</h2><ul>\n<li style=\"list-style: none\"><input type=\"checkbox\" checked> python基础(廖雪峰网络教程)</li>\n<li style=\"list-style: none\"><input type=\"checkbox\" checked> 精通python网络爬虫</li>\n<li style=\"list-style: none\"><input type=\"checkbox\"> python爬虫开发与项目实战</li>\n<li style=\"list-style: none\"><input type=\"checkbox\" checked> django(网络教程)</li>\n<li style=\"list-style: none\"><input type=\"checkbox\" checked> flask web开发实战</li>\n</ul>\n<h2 id=\"Nodejs\"><a href=\"#Nodejs\" class=\"headerlink\" title=\"Nodejs:\"></a>Nodejs:</h2><ul>\n<li style=\"list-style: none\"><input type=\"checkbox\"> <del>nodejs权威指南</del></li>\n</ul>\n<h2 id=\"React\"><a href=\"#React\" class=\"headerlink\" title=\"React:\"></a>React:</h2><ul>\n<li style=\"list-style: none\"><input type=\"checkbox\" checked> react英文官网</li>\n<li style=\"list-style: none\"><input type=\"checkbox\" checked> 深入浅出react和redux</li>\n<li style=\"list-style: none\"><input type=\"checkbox\" checked> react redux</li>\n<li style=\"list-style: none\"><input type=\"checkbox\" checked> react router</li>\n<li style=\"list-style: none\"><input type=\"checkbox\" checked> redux thunk</li>\n<li style=\"list-style: none\"><input type=\"checkbox\" checked> redux saga</li>\n<li style=\"list-style: none\"><input type=\"checkbox\" checked> react jest</li>\n</ul>\n<h2 id=\"Webpack\"><a href=\"#Webpack\" class=\"headerlink\" title=\"Webpack:\"></a>Webpack:</h2><ul>\n<li style=\"list-style: none\"><input type=\"checkbox\" checked> webpack英文官网</li>\n</ul>\n<h2 id=\"Linux\"><a href=\"#Linux\" class=\"headerlink\" title=\"Linux:\"></a>Linux:</h2><ul>\n<li style=\"list-style: none\"><input type=\"checkbox\"> linux shell编程从初学到精通</li>\n</ul>\n<h2 id=\"架构\"><a href=\"#架构\" class=\"headerlink\" title=\"架构:\"></a>架构:</h2><ul>\n<li style=\"list-style: none\"><input type=\"checkbox\"> 软件架构设计</li>\n</ul>\n<h2 id=\"项目管理\"><a href=\"#项目管理\" class=\"headerlink\" title=\"项目管理:\"></a>项目管理:</h2><ul>\n<li style=\"list-style: none\"><input type=\"checkbox\" checked> 事业发展</li>\n<li style=\"list-style: none\"><input type=\"checkbox\" checked> 技术选型</li>\n</ul>\n<h2 id=\"英语\"><a href=\"#英语\" class=\"headerlink\" title=\"英语:\"></a>英语:</h2><ul>\n<li style=\"list-style: none\"><input type=\"checkbox\"> 使用百词斩，每天背25个单词</li>\n<li style=\"list-style: none\"><input type=\"checkbox\"> 使用流利说每天听说30分钟</li>\n</ul>\n<h2 id=\"2018目标\"><a href=\"#2018目标\" class=\"headerlink\" title=\"2018目标:\"></a>2018目标:</h2><ul>\n<li style=\"list-style: none\"><input type=\"checkbox\" checked> 完成基于原生js的 UI插件Mr UI开发</li>\n<li style=\"list-style: none\"><input type=\"checkbox\"> <del>使用python django为Mr UI开发后台</del></li>\n<li style=\"list-style: none\"><input type=\"checkbox\"> 使用python flask开发简书后台</li>\n<li style=\"list-style: none\"><input type=\"checkbox\"> 使用python爬虫为简书项目挖取数据</li>\n<li style=\"list-style: none\"><input type=\"checkbox\"> <del>对node有全面深入的理解</del></li>\n<li style=\"list-style: none\"><input type=\"checkbox\" checked> 对react及redux有全面深入的理解</li>\n<li style=\"list-style: none\"><input type=\"checkbox\"> 熟练使用python编写各种爬虫</li>\n<li style=\"list-style: none\"><input type=\"checkbox\" checked> 熟练掌握es6, es7语法</li>\n<li style=\"list-style: none\"><input type=\"checkbox\"> 正常无抵触的阅读全英文文档</li>\n<li style=\"list-style: none\"><input type=\"checkbox\" checked> 学会使用Axure设计原型</li>\n<li style=\"list-style: none\"><input type=\"checkbox\"> 使用react, redux, router, saga模仿开发简书网站</li>\n<li style=\"list-style: none\"><input type=\"checkbox\"> 使用python为简书网站做后台</li>\n</ul>\n<h2 id=\"技术提升计划\"><a href=\"#技术提升计划\" class=\"headerlink\" title=\"技术提升计划\"></a>技术提升计划</h2><h3 id=\"学习\"><a href=\"#学习\" class=\"headerlink\" title=\"学习\"></a>学习</h3><ol>\n<li><p>前端开发技能：</p>\n<ol>\n<li>Javascript编程精解（熟悉Javascript基础知识）</li>\n<li>Javascript设计模式（提升Javascirpt编程能力）</li>\n<li>React and Redux（掌握一门流行框架）</li>\n</ol>\n</li>\n<li><p>程序员基础技能：</p>\n<ol>\n<li>高级语言程序设计（Javascript加一门后端语言）</li>\n<li>数据结构</li>\n<li>算法分析与设计</li>\n</ol>\n</li>\n<li><p>良好的编码习惯：</p>\n<ol>\n<li>阅读几篇和编程语言相关的编码规范</li>\n</ol>\n</li>\n</ol>\n<h3 id=\"练习\"><a href=\"#练习\" class=\"headerlink\" title=\"练习\"></a>练习</h3><ol>\n<li>锻炼思维</li>\n<li>在掌握基础技能的基础上，在leetcode练习算法</li>\n</ol>\n"},{"title":"2019年学习计划","date":"2019-03-15T03:11:46.000Z","_content":"\n## Javascript \n\n* <input type=\"checkbox\" disabled/> 使用javascript开发编程语言\n* <input type=\"checkbox\" checked disabled/> 使用javascript开发2d游戏引擎\n* <input type=\"checkbox\" disabled/> 使用javascript开发jquery\n\n## 数据结构与算法\n\n* <input type=\"checkbox\" disabled/> 熟练使用数据结构\n* <input type=\"checkbox\" disabled/> 熟练使用搜索算法\n* <input type=\"checkbox\" disabled/> 熟练排使用序算法\n* <input type=\"checkbox\" disabled/> 熟悉更深层次算法\n\n## 设计模式\n\n* <input type=\"checkbox\" disabled/> 熟练运用设计模式在项目中\n\n## 后端\n\n* <input type=\"checkbox\" disabled/> 熟练使用flask\n* <input type=\"checkbox\" disabled/> 熟练使用docker部署flask应用\n* <input type=\"checkbox\" disabled/> 熟练使用ubuntu操作系统\n* <input type=\"checkbox\" disabled/> 熟练使用koa写node中间件\n\n## 架构及管理\n\n* <input type=\"checkbox\" disabled/> 学习标准软件架构流程\n* <input type=\"checkbox\" disabled/> 使用所学知识做一款较好的软件\n* <input type=\"checkbox\" disabled/> 学习如何领导团队\n\n## 项目\n\n* <input type=\"checkbox\" checked disabled/> 完成Makedown编辑器的开发\n\n","source":"_posts/2019-plan.md","raw":"---\ntitle: 2019年学习计划\ndate: 2019-03-15 11:11:46\ntags: 计划\n---\n\n## Javascript \n\n* <input type=\"checkbox\" disabled/> 使用javascript开发编程语言\n* <input type=\"checkbox\" checked disabled/> 使用javascript开发2d游戏引擎\n* <input type=\"checkbox\" disabled/> 使用javascript开发jquery\n\n## 数据结构与算法\n\n* <input type=\"checkbox\" disabled/> 熟练使用数据结构\n* <input type=\"checkbox\" disabled/> 熟练使用搜索算法\n* <input type=\"checkbox\" disabled/> 熟练排使用序算法\n* <input type=\"checkbox\" disabled/> 熟悉更深层次算法\n\n## 设计模式\n\n* <input type=\"checkbox\" disabled/> 熟练运用设计模式在项目中\n\n## 后端\n\n* <input type=\"checkbox\" disabled/> 熟练使用flask\n* <input type=\"checkbox\" disabled/> 熟练使用docker部署flask应用\n* <input type=\"checkbox\" disabled/> 熟练使用ubuntu操作系统\n* <input type=\"checkbox\" disabled/> 熟练使用koa写node中间件\n\n## 架构及管理\n\n* <input type=\"checkbox\" disabled/> 学习标准软件架构流程\n* <input type=\"checkbox\" disabled/> 使用所学知识做一款较好的软件\n* <input type=\"checkbox\" disabled/> 学习如何领导团队\n\n## 项目\n\n* <input type=\"checkbox\" checked disabled/> 完成Makedown编辑器的开发\n\n","slug":"2019-plan","published":1,"updated":"2019-11-04T07:24:24.524Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ck2vg6guc00074coburm402bf","content":"<h2 id=\"Javascript\"><a href=\"#Javascript\" class=\"headerlink\" title=\"Javascript\"></a>Javascript</h2><ul>\n<li><input type=\"checkbox\" disabled> 使用javascript开发编程语言</li>\n<li><input type=\"checkbox\" checked disabled> 使用javascript开发2d游戏引擎</li>\n<li><input type=\"checkbox\" disabled> 使用javascript开发jquery</li>\n</ul>\n<h2 id=\"数据结构与算法\"><a href=\"#数据结构与算法\" class=\"headerlink\" title=\"数据结构与算法\"></a>数据结构与算法</h2><ul>\n<li><input type=\"checkbox\" disabled> 熟练使用数据结构</li>\n<li><input type=\"checkbox\" disabled> 熟练使用搜索算法</li>\n<li><input type=\"checkbox\" disabled> 熟练排使用序算法</li>\n<li><input type=\"checkbox\" disabled> 熟悉更深层次算法</li>\n</ul>\n<h2 id=\"设计模式\"><a href=\"#设计模式\" class=\"headerlink\" title=\"设计模式\"></a>设计模式</h2><ul>\n<li><input type=\"checkbox\" disabled> 熟练运用设计模式在项目中</li>\n</ul>\n<h2 id=\"后端\"><a href=\"#后端\" class=\"headerlink\" title=\"后端\"></a>后端</h2><ul>\n<li><input type=\"checkbox\" disabled> 熟练使用flask</li>\n<li><input type=\"checkbox\" disabled> 熟练使用docker部署flask应用</li>\n<li><input type=\"checkbox\" disabled> 熟练使用ubuntu操作系统</li>\n<li><input type=\"checkbox\" disabled> 熟练使用koa写node中间件</li>\n</ul>\n<h2 id=\"架构及管理\"><a href=\"#架构及管理\" class=\"headerlink\" title=\"架构及管理\"></a>架构及管理</h2><ul>\n<li><input type=\"checkbox\" disabled> 学习标准软件架构流程</li>\n<li><input type=\"checkbox\" disabled> 使用所学知识做一款较好的软件</li>\n<li><input type=\"checkbox\" disabled> 学习如何领导团队</li>\n</ul>\n<h2 id=\"项目\"><a href=\"#项目\" class=\"headerlink\" title=\"项目\"></a>项目</h2><ul>\n<li><input type=\"checkbox\" checked disabled> 完成Makedown编辑器的开发</li>\n</ul>\n","site":{"data":{"projects":[{"name":"AiTing","url":"https://github.com/renhongl/aiting","desc":"HTML5客户端音乐播放器"},{"name":"AiLiao","url":"https://github.com/renhongl/ailiao","desc":"网页聊天软件"},{"name":"Pomelo Editor","url":"https://renhongl.github.io/markdown-editor/","desc":"功能强大的在线Markdown编辑器"}]}},"excerpt":"","more":"<h2 id=\"Javascript\"><a href=\"#Javascript\" class=\"headerlink\" title=\"Javascript\"></a>Javascript</h2><ul>\n<li><input type=\"checkbox\" disabled> 使用javascript开发编程语言</li>\n<li><input type=\"checkbox\" checked disabled> 使用javascript开发2d游戏引擎</li>\n<li><input type=\"checkbox\" disabled> 使用javascript开发jquery</li>\n</ul>\n<h2 id=\"数据结构与算法\"><a href=\"#数据结构与算法\" class=\"headerlink\" title=\"数据结构与算法\"></a>数据结构与算法</h2><ul>\n<li><input type=\"checkbox\" disabled> 熟练使用数据结构</li>\n<li><input type=\"checkbox\" disabled> 熟练使用搜索算法</li>\n<li><input type=\"checkbox\" disabled> 熟练排使用序算法</li>\n<li><input type=\"checkbox\" disabled> 熟悉更深层次算法</li>\n</ul>\n<h2 id=\"设计模式\"><a href=\"#设计模式\" class=\"headerlink\" title=\"设计模式\"></a>设计模式</h2><ul>\n<li><input type=\"checkbox\" disabled> 熟练运用设计模式在项目中</li>\n</ul>\n<h2 id=\"后端\"><a href=\"#后端\" class=\"headerlink\" title=\"后端\"></a>后端</h2><ul>\n<li><input type=\"checkbox\" disabled> 熟练使用flask</li>\n<li><input type=\"checkbox\" disabled> 熟练使用docker部署flask应用</li>\n<li><input type=\"checkbox\" disabled> 熟练使用ubuntu操作系统</li>\n<li><input type=\"checkbox\" disabled> 熟练使用koa写node中间件</li>\n</ul>\n<h2 id=\"架构及管理\"><a href=\"#架构及管理\" class=\"headerlink\" title=\"架构及管理\"></a>架构及管理</h2><ul>\n<li><input type=\"checkbox\" disabled> 学习标准软件架构流程</li>\n<li><input type=\"checkbox\" disabled> 使用所学知识做一款较好的软件</li>\n<li><input type=\"checkbox\" disabled> 学习如何领导团队</li>\n</ul>\n<h2 id=\"项目\"><a href=\"#项目\" class=\"headerlink\" title=\"项目\"></a>项目</h2><ul>\n<li><input type=\"checkbox\" checked disabled> 完成Makedown编辑器的开发</li>\n</ul>\n"},{"title":"Iterator和for...of","date":"2017-06-16T12:29:38.000Z","_content":"\n\n# Iterator（遍历器）\n\n为各种不同的数据结构提供统一的访问机制。\n\n任何数据结构只要部署了Iterator接口，就可以完成遍历操作。\n\n遍历操作：依次处理该数据结构的所有成员。\n\n\n\n\n# 遍历过程\n\n1. 创建一个指针对象，指向当前数据结构的起始位置。\n\n2. 第一次调用指针对象的next方法，可以将指针指向数据结构的第一个成员。\n\n3. 第二次调用指针对象的next方法，可以将指针指向数据结构的第二个成员。\n\n4. 不断调用指针对象的next方法，直到它指向数据结构的结束位置。\n\n   ​\n\n# for...of循环\n\n使用for...of循环遍历某种数据结构时，该循环会自动寻找这种数据结构默认的遍历器接口。\n\n默认的遍历器接口部署在数据结构的Symbol.iterator属性上。\n\n即只要一个数据结构具有Symbol.iterator属性，就认为是可遍历的(iterable)。\n\nSymbol.iterator属性是一个函数，执行这个函数会返回一个遍历器。\n\n\n\n# 原生具备Iterator接口的数据结构\n\n* Array\n* Map\n* Set\n* String\n* TypedArray\n* arguments\n* NodeList\n\n\n\n# 除了for...of，其他会调用默认遍历器接口的情况\n\n1. 结构赋值\n2. 扩展运算符\n3. yield*\n4. Array.from()\n5. Map(), Set(), WeakMap(), WeakSet()\n6. Promise.all()\n7. Promise.race()\n\n\n\n# Iterator接口最简单实现\n\n为Symbol.iterator创建一个Generator函数。","source":"_posts/Iterator和for...of.md","raw":"---\ntitle: Iterator和for...of\ndate: 2017-06-16 20:29:38\ntags: ES6\n---\n\n\n# Iterator（遍历器）\n\n为各种不同的数据结构提供统一的访问机制。\n\n任何数据结构只要部署了Iterator接口，就可以完成遍历操作。\n\n遍历操作：依次处理该数据结构的所有成员。\n\n\n\n\n# 遍历过程\n\n1. 创建一个指针对象，指向当前数据结构的起始位置。\n\n2. 第一次调用指针对象的next方法，可以将指针指向数据结构的第一个成员。\n\n3. 第二次调用指针对象的next方法，可以将指针指向数据结构的第二个成员。\n\n4. 不断调用指针对象的next方法，直到它指向数据结构的结束位置。\n\n   ​\n\n# for...of循环\n\n使用for...of循环遍历某种数据结构时，该循环会自动寻找这种数据结构默认的遍历器接口。\n\n默认的遍历器接口部署在数据结构的Symbol.iterator属性上。\n\n即只要一个数据结构具有Symbol.iterator属性，就认为是可遍历的(iterable)。\n\nSymbol.iterator属性是一个函数，执行这个函数会返回一个遍历器。\n\n\n\n# 原生具备Iterator接口的数据结构\n\n* Array\n* Map\n* Set\n* String\n* TypedArray\n* arguments\n* NodeList\n\n\n\n# 除了for...of，其他会调用默认遍历器接口的情况\n\n1. 结构赋值\n2. 扩展运算符\n3. yield*\n4. Array.from()\n5. Map(), Set(), WeakMap(), WeakSet()\n6. Promise.all()\n7. Promise.race()\n\n\n\n# Iterator接口最简单实现\n\n为Symbol.iterator创建一个Generator函数。","slug":"Iterator和for...of","published":1,"updated":"2019-01-30T08:05:54.661Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ck2vg6guf00084cob9osud2t2","content":"<h1 id=\"Iterator（遍历器）\"><a href=\"#Iterator（遍历器）\" class=\"headerlink\" title=\"Iterator（遍历器）\"></a>Iterator（遍历器）</h1><p>为各种不同的数据结构提供统一的访问机制。</p>\n<p>任何数据结构只要部署了Iterator接口，就可以完成遍历操作。</p>\n<p>遍历操作：依次处理该数据结构的所有成员。</p>\n<h1 id=\"遍历过程\"><a href=\"#遍历过程\" class=\"headerlink\" title=\"遍历过程\"></a>遍历过程</h1><ol>\n<li><p>创建一个指针对象，指向当前数据结构的起始位置。</p>\n</li>\n<li><p>第一次调用指针对象的next方法，可以将指针指向数据结构的第一个成员。</p>\n</li>\n<li><p>第二次调用指针对象的next方法，可以将指针指向数据结构的第二个成员。</p>\n</li>\n<li><p>不断调用指针对象的next方法，直到它指向数据结构的结束位置。</p>\n<p>​</p>\n</li>\n</ol>\n<h1 id=\"for…of循环\"><a href=\"#for…of循环\" class=\"headerlink\" title=\"for…of循环\"></a>for…of循环</h1><p>使用for…of循环遍历某种数据结构时，该循环会自动寻找这种数据结构默认的遍历器接口。</p>\n<p>默认的遍历器接口部署在数据结构的Symbol.iterator属性上。</p>\n<p>即只要一个数据结构具有Symbol.iterator属性，就认为是可遍历的(iterable)。</p>\n<p>Symbol.iterator属性是一个函数，执行这个函数会返回一个遍历器。</p>\n<h1 id=\"原生具备Iterator接口的数据结构\"><a href=\"#原生具备Iterator接口的数据结构\" class=\"headerlink\" title=\"原生具备Iterator接口的数据结构\"></a>原生具备Iterator接口的数据结构</h1><ul>\n<li>Array</li>\n<li>Map</li>\n<li>Set</li>\n<li>String</li>\n<li>TypedArray</li>\n<li>arguments</li>\n<li>NodeList</li>\n</ul>\n<h1 id=\"除了for…of，其他会调用默认遍历器接口的情况\"><a href=\"#除了for…of，其他会调用默认遍历器接口的情况\" class=\"headerlink\" title=\"除了for…of，其他会调用默认遍历器接口的情况\"></a>除了for…of，其他会调用默认遍历器接口的情况</h1><ol>\n<li>结构赋值</li>\n<li>扩展运算符</li>\n<li>yield*</li>\n<li>Array.from()</li>\n<li>Map(), Set(), WeakMap(), WeakSet()</li>\n<li>Promise.all()</li>\n<li>Promise.race()</li>\n</ol>\n<h1 id=\"Iterator接口最简单实现\"><a href=\"#Iterator接口最简单实现\" class=\"headerlink\" title=\"Iterator接口最简单实现\"></a>Iterator接口最简单实现</h1><p>为Symbol.iterator创建一个Generator函数。</p>\n","site":{"data":{"projects":[{"name":"AiTing","url":"https://github.com/renhongl/aiting","desc":"HTML5客户端音乐播放器"},{"name":"AiLiao","url":"https://github.com/renhongl/ailiao","desc":"网页聊天软件"},{"name":"Pomelo Editor","url":"https://renhongl.github.io/markdown-editor/","desc":"功能强大的在线Markdown编辑器"}]}},"excerpt":"","more":"<h1 id=\"Iterator（遍历器）\"><a href=\"#Iterator（遍历器）\" class=\"headerlink\" title=\"Iterator（遍历器）\"></a>Iterator（遍历器）</h1><p>为各种不同的数据结构提供统一的访问机制。</p>\n<p>任何数据结构只要部署了Iterator接口，就可以完成遍历操作。</p>\n<p>遍历操作：依次处理该数据结构的所有成员。</p>\n<h1 id=\"遍历过程\"><a href=\"#遍历过程\" class=\"headerlink\" title=\"遍历过程\"></a>遍历过程</h1><ol>\n<li><p>创建一个指针对象，指向当前数据结构的起始位置。</p>\n</li>\n<li><p>第一次调用指针对象的next方法，可以将指针指向数据结构的第一个成员。</p>\n</li>\n<li><p>第二次调用指针对象的next方法，可以将指针指向数据结构的第二个成员。</p>\n</li>\n<li><p>不断调用指针对象的next方法，直到它指向数据结构的结束位置。</p>\n<p>​</p>\n</li>\n</ol>\n<h1 id=\"for…of循环\"><a href=\"#for…of循环\" class=\"headerlink\" title=\"for…of循环\"></a>for…of循环</h1><p>使用for…of循环遍历某种数据结构时，该循环会自动寻找这种数据结构默认的遍历器接口。</p>\n<p>默认的遍历器接口部署在数据结构的Symbol.iterator属性上。</p>\n<p>即只要一个数据结构具有Symbol.iterator属性，就认为是可遍历的(iterable)。</p>\n<p>Symbol.iterator属性是一个函数，执行这个函数会返回一个遍历器。</p>\n<h1 id=\"原生具备Iterator接口的数据结构\"><a href=\"#原生具备Iterator接口的数据结构\" class=\"headerlink\" title=\"原生具备Iterator接口的数据结构\"></a>原生具备Iterator接口的数据结构</h1><ul>\n<li>Array</li>\n<li>Map</li>\n<li>Set</li>\n<li>String</li>\n<li>TypedArray</li>\n<li>arguments</li>\n<li>NodeList</li>\n</ul>\n<h1 id=\"除了for…of，其他会调用默认遍历器接口的情况\"><a href=\"#除了for…of，其他会调用默认遍历器接口的情况\" class=\"headerlink\" title=\"除了for…of，其他会调用默认遍历器接口的情况\"></a>除了for…of，其他会调用默认遍历器接口的情况</h1><ol>\n<li>结构赋值</li>\n<li>扩展运算符</li>\n<li>yield*</li>\n<li>Array.from()</li>\n<li>Map(), Set(), WeakMap(), WeakSet()</li>\n<li>Promise.all()</li>\n<li>Promise.race()</li>\n</ol>\n<h1 id=\"Iterator接口最简单实现\"><a href=\"#Iterator接口最简单实现\" class=\"headerlink\" title=\"Iterator接口最简单实现\"></a>Iterator接口最简单实现</h1><p>为Symbol.iterator创建一个Generator函数。</p>\n"},{"title":"Git使用SSH提交代码","date":"2016-12-14T13:28:09.000Z","_content":"\n# 简介\n\n如果经常提交代码，每次都要输入密码就很麻烦，使用SSH连接后，就不用输入密码了。\n\n- 配置全局用户名和邮箱：\n\t- `git config --global user.name \"renhongl\"`\n\t- `git config --global user.email \"1075220132@qq.com\"`\n- 先检查本地有没有ssh key设置，查看~/这个文件夹下有没有.ssh文件夹，有的话就删除掉。\n- 在~路径下生成新的ssh key:\n\t- `ssh-keygen -t rsa -C \"1075220132@qq.com\"`\n- 三次回车后就生成了ssh key，在~/.ssh/文件夹下面，复制id_rsa.pub这个文件里所有的内容，粘贴到GitHub网站settings/keys里面，保存。\n- 测试ssh key是否配置成功：\n\t- `$ ssh -T git@github.com`\n- 然后输入yes,如果出现 \"Hi xxx! You've successfully authenticated, but GitHub does not provide shell access.\"就表示配置好了。\n- 配置完成后，在Github上克隆项目时，使用SSH方式，远程地址就设置成SSH方式了，push的时候就不用输入密码了。","source":"_posts/Git使用SSH提交代码.md","raw":"---\ntitle: Git使用SSH提交代码\ndate: 2016-12-14 21:28:09\ntags:\n    - Git\n---\n\n# 简介\n\n如果经常提交代码，每次都要输入密码就很麻烦，使用SSH连接后，就不用输入密码了。\n\n- 配置全局用户名和邮箱：\n\t- `git config --global user.name \"renhongl\"`\n\t- `git config --global user.email \"1075220132@qq.com\"`\n- 先检查本地有没有ssh key设置，查看~/这个文件夹下有没有.ssh文件夹，有的话就删除掉。\n- 在~路径下生成新的ssh key:\n\t- `ssh-keygen -t rsa -C \"1075220132@qq.com\"`\n- 三次回车后就生成了ssh key，在~/.ssh/文件夹下面，复制id_rsa.pub这个文件里所有的内容，粘贴到GitHub网站settings/keys里面，保存。\n- 测试ssh key是否配置成功：\n\t- `$ ssh -T git@github.com`\n- 然后输入yes,如果出现 \"Hi xxx! You've successfully authenticated, but GitHub does not provide shell access.\"就表示配置好了。\n- 配置完成后，在Github上克隆项目时，使用SSH方式，远程地址就设置成SSH方式了，push的时候就不用输入密码了。","slug":"Git使用SSH提交代码","published":1,"updated":"2019-01-30T07:39:12.678Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ck2vg6gum000b4cobwrj2wtpp","content":"<h1 id=\"简介\"><a href=\"#简介\" class=\"headerlink\" title=\"简介\"></a>简介</h1><p>如果经常提交代码，每次都要输入密码就很麻烦，使用SSH连接后，就不用输入密码了。</p>\n<ul>\n<li>配置全局用户名和邮箱：<ul>\n<li><code>git config --global user.name &quot;renhongl&quot;</code></li>\n<li><code>git config --global user.email &quot;1075220132@qq.com&quot;</code></li>\n</ul>\n</li>\n<li>先检查本地有没有ssh key设置，查看~/这个文件夹下有没有.ssh文件夹，有的话就删除掉。</li>\n<li>在~路径下生成新的ssh key:<ul>\n<li><code>ssh-keygen -t rsa -C &quot;1075220132@qq.com&quot;</code></li>\n</ul>\n</li>\n<li>三次回车后就生成了ssh key，在~/.ssh/文件夹下面，复制id_rsa.pub这个文件里所有的内容，粘贴到GitHub网站settings/keys里面，保存。</li>\n<li>测试ssh key是否配置成功：<ul>\n<li><code>$ ssh -T git@github.com</code></li>\n</ul>\n</li>\n<li>然后输入yes,如果出现 “Hi xxx! You’ve successfully authenticated, but GitHub does not provide shell access.”就表示配置好了。</li>\n<li>配置完成后，在Github上克隆项目时，使用SSH方式，远程地址就设置成SSH方式了，push的时候就不用输入密码了。</li>\n</ul>\n","site":{"data":{"projects":[{"name":"AiTing","url":"https://github.com/renhongl/aiting","desc":"HTML5客户端音乐播放器"},{"name":"AiLiao","url":"https://github.com/renhongl/ailiao","desc":"网页聊天软件"},{"name":"Pomelo Editor","url":"https://renhongl.github.io/markdown-editor/","desc":"功能强大的在线Markdown编辑器"}]}},"excerpt":"","more":"<h1 id=\"简介\"><a href=\"#简介\" class=\"headerlink\" title=\"简介\"></a>简介</h1><p>如果经常提交代码，每次都要输入密码就很麻烦，使用SSH连接后，就不用输入密码了。</p>\n<ul>\n<li>配置全局用户名和邮箱：<ul>\n<li><code>git config --global user.name &quot;renhongl&quot;</code></li>\n<li><code>git config --global user.email &quot;1075220132@qq.com&quot;</code></li>\n</ul>\n</li>\n<li>先检查本地有没有ssh key设置，查看~/这个文件夹下有没有.ssh文件夹，有的话就删除掉。</li>\n<li>在~路径下生成新的ssh key:<ul>\n<li><code>ssh-keygen -t rsa -C &quot;1075220132@qq.com&quot;</code></li>\n</ul>\n</li>\n<li>三次回车后就生成了ssh key，在~/.ssh/文件夹下面，复制id_rsa.pub这个文件里所有的内容，粘贴到GitHub网站settings/keys里面，保存。</li>\n<li>测试ssh key是否配置成功：<ul>\n<li><code>$ ssh -T git@github.com</code></li>\n</ul>\n</li>\n<li>然后输入yes,如果出现 “Hi xxx! You’ve successfully authenticated, but GitHub does not provide shell access.”就表示配置好了。</li>\n<li>配置完成后，在Github上克隆项目时，使用SSH方式，远程地址就设置成SSH方式了，push的时候就不用输入密码了。</li>\n</ul>\n"},{"title":"Javascript标准参考教程重点","date":"2017-02-04T14:00:06.000Z","_content":"\n# 简介\n\n记一些容易忘记的语法。\n\n\n# 标签(label)用法\n\n  ```js\n  //判断数组二中是否有数组一中的元素\n  var itHas = false;\n  var index = -1;\n  var item = '';\n  var arr1 = ['zhagnsanfeng', 'sunwukong', 'zhubajie'];\n  var arr2 = ['liangrenhong', 'zhubajie', 'xiaofeng'];\n  verify:\n      for(var i = 0, len1 = arr1.length; i < len1; i++) {\n          for(var j = 0, len2 = arr2.length; j < len2; j++) {\n              if(arr1[i] === arr2[j]) {\n                  itHas = true;\n                  index = j;\n                  item = arr2[j];\n                  break verify;\n              }\n          }\n      }\n  console.log(itHas, index, item);\n  ```\n\n当查找到一个符合的之后，就退出循环，这样可以节省时间。\n如果在break之后不使用标签，只能跳出内层循环。\n\n# for...in遍历对象属性\n\n  ```js\n  function Person() {\n      this.name = 'lrh';\n      this.age = '18'\n  }\n\n  Person.prototype.gender = 'boy';\n\n  var person = new Person();\n\n  for(var p in person) {\n      console.log(p);\n  }\n  //name\n  //age\n  //gender\n  ```\n\n使用for...in遍历会遍历出实例自身的属性以及继承的属性。\n如果非要用for...in那就在遍历时加上hasOwnProperty方法判断：\n\n  ```js\n  function Person() {\n      this.name = 'lrh';\n      this.age = '18'\n  }\n\n  Person.prototype.gender = 'boy';\n\n  var person = new Person();\n\n  for(var p in person) {\n      if(person.hasOwnProperty(p)) {\n          console.log(p);\n      }\n  }\n  //name\n  //age\n  ```\n\n# in运算符\n\n用于检测对象是否包含某个属性\n\n  ```js\n  var person = {\n      name: 'lrh'\n  };\n\n  'name' in person;//true\n  ```\n\n# 闭包\n\n- 定义在一个函数内部的函数。\n- 将函数内部与函数外部连接起来的一座桥梁。\n- 可以读取函数内部的变量。\n- 让函数内部变量一直保持在内存中。\n\n    ```js\n    function count(number) {\n        return function () {\n            console.log(number++);\n        }\n    }\n\n    var add = count(5);\n    add();\n    add();\n    add();\n    ```\n\n- 封装对象的私有属性和私有方法。\n\n    ```js\n    function Person(name) {\n        var _gender;\n\n        function setGender(gender) {\n            _gender = gender\n        }\n\n        function getGender() {\n            return _gender;\n        }\n\n        return {\n            name: name,\n            getGender: getGender,\n            setGender: setGender\n        }\n    }\n\n    var p1 = new Person('lrh');\n    p1.setGender('boy');\n    p1.getGender();//boy\n    ```\n\n# 数组\n\nmap方法对数组的所有成员一次调用一个函数，根据函数结果返回一个新数组。\nmap方法接受一个函数做为参数，调用时会将其传入三个参数，分辨是当前成员，当前位置，数组本身。\nmap方法还可以接受第二个参数，表示回调函数执行时this所指向的对象。\n\nforEach方法与map方法类似，但是一般不返回值。如果需要有返回值，一般使用map方法。\nforEach方法不能中断执行，总是会遍历完所有成员，这时可以使用for循环代替。\n\nfilter方法返回结构为true的成员。\n\nsome方法，只要有一个成员的返回值为true，那么整个some方法的返回值就是true。\n\nevery方法，每个数组成员的返回值是true，every方法才会返回true。\n\nreduce方法，依次处理数组的每个成员，最终累计成一个值。\n\n# 字符串\n\nsubstring方法用于从原字符串取出子字符串并返回，不改变原字符串。它与slice作用相同，但有一些奇怪的规则，因此不建议使用这个方法，优先使用slice。\n\n如果第二个参数大于第一个参数，substring方法会自动更换两个参数的位置。\n\n如果参数是负数，substring方法会自动将负数转为0。\n\n\n# 对象的拷贝-浅拷贝\n\n确保拷贝后的对象，与原对象具有同样的prototype原型对象。\n确保拷贝后的对象，与原对象具有同样的属性。\n\n  ```js\n  function copyObject(orig) {\n      var copy = Object.create(Object.getPrototypeOf(orig));\n      copyOwnPropertiesFrom(copy, orig);\n      return copy;\n  }\n\n  function copyOwnPropertiesFrom(target, source) {\n      Object\n          .getOwnPropertyNames(source)\n          .forEach(function(propKey) {\n              var desc = Object.getOwnPropertyDescriptor(source, propKey);\n              Object.defineProperty(target, propKey, desc);\n          });\n          \n      return target;\n  }\n  ```\n\n\n\n","source":"_posts/Javascript标准参考教程重点.md","raw":"---\ntitle: Javascript标准参考教程重点\ndate: 2017-02-04 22:00:06\ntags:\n    - Javascript\n---\n\n# 简介\n\n记一些容易忘记的语法。\n\n\n# 标签(label)用法\n\n  ```js\n  //判断数组二中是否有数组一中的元素\n  var itHas = false;\n  var index = -1;\n  var item = '';\n  var arr1 = ['zhagnsanfeng', 'sunwukong', 'zhubajie'];\n  var arr2 = ['liangrenhong', 'zhubajie', 'xiaofeng'];\n  verify:\n      for(var i = 0, len1 = arr1.length; i < len1; i++) {\n          for(var j = 0, len2 = arr2.length; j < len2; j++) {\n              if(arr1[i] === arr2[j]) {\n                  itHas = true;\n                  index = j;\n                  item = arr2[j];\n                  break verify;\n              }\n          }\n      }\n  console.log(itHas, index, item);\n  ```\n\n当查找到一个符合的之后，就退出循环，这样可以节省时间。\n如果在break之后不使用标签，只能跳出内层循环。\n\n# for...in遍历对象属性\n\n  ```js\n  function Person() {\n      this.name = 'lrh';\n      this.age = '18'\n  }\n\n  Person.prototype.gender = 'boy';\n\n  var person = new Person();\n\n  for(var p in person) {\n      console.log(p);\n  }\n  //name\n  //age\n  //gender\n  ```\n\n使用for...in遍历会遍历出实例自身的属性以及继承的属性。\n如果非要用for...in那就在遍历时加上hasOwnProperty方法判断：\n\n  ```js\n  function Person() {\n      this.name = 'lrh';\n      this.age = '18'\n  }\n\n  Person.prototype.gender = 'boy';\n\n  var person = new Person();\n\n  for(var p in person) {\n      if(person.hasOwnProperty(p)) {\n          console.log(p);\n      }\n  }\n  //name\n  //age\n  ```\n\n# in运算符\n\n用于检测对象是否包含某个属性\n\n  ```js\n  var person = {\n      name: 'lrh'\n  };\n\n  'name' in person;//true\n  ```\n\n# 闭包\n\n- 定义在一个函数内部的函数。\n- 将函数内部与函数外部连接起来的一座桥梁。\n- 可以读取函数内部的变量。\n- 让函数内部变量一直保持在内存中。\n\n    ```js\n    function count(number) {\n        return function () {\n            console.log(number++);\n        }\n    }\n\n    var add = count(5);\n    add();\n    add();\n    add();\n    ```\n\n- 封装对象的私有属性和私有方法。\n\n    ```js\n    function Person(name) {\n        var _gender;\n\n        function setGender(gender) {\n            _gender = gender\n        }\n\n        function getGender() {\n            return _gender;\n        }\n\n        return {\n            name: name,\n            getGender: getGender,\n            setGender: setGender\n        }\n    }\n\n    var p1 = new Person('lrh');\n    p1.setGender('boy');\n    p1.getGender();//boy\n    ```\n\n# 数组\n\nmap方法对数组的所有成员一次调用一个函数，根据函数结果返回一个新数组。\nmap方法接受一个函数做为参数，调用时会将其传入三个参数，分辨是当前成员，当前位置，数组本身。\nmap方法还可以接受第二个参数，表示回调函数执行时this所指向的对象。\n\nforEach方法与map方法类似，但是一般不返回值。如果需要有返回值，一般使用map方法。\nforEach方法不能中断执行，总是会遍历完所有成员，这时可以使用for循环代替。\n\nfilter方法返回结构为true的成员。\n\nsome方法，只要有一个成员的返回值为true，那么整个some方法的返回值就是true。\n\nevery方法，每个数组成员的返回值是true，every方法才会返回true。\n\nreduce方法，依次处理数组的每个成员，最终累计成一个值。\n\n# 字符串\n\nsubstring方法用于从原字符串取出子字符串并返回，不改变原字符串。它与slice作用相同，但有一些奇怪的规则，因此不建议使用这个方法，优先使用slice。\n\n如果第二个参数大于第一个参数，substring方法会自动更换两个参数的位置。\n\n如果参数是负数，substring方法会自动将负数转为0。\n\n\n# 对象的拷贝-浅拷贝\n\n确保拷贝后的对象，与原对象具有同样的prototype原型对象。\n确保拷贝后的对象，与原对象具有同样的属性。\n\n  ```js\n  function copyObject(orig) {\n      var copy = Object.create(Object.getPrototypeOf(orig));\n      copyOwnPropertiesFrom(copy, orig);\n      return copy;\n  }\n\n  function copyOwnPropertiesFrom(target, source) {\n      Object\n          .getOwnPropertyNames(source)\n          .forEach(function(propKey) {\n              var desc = Object.getOwnPropertyDescriptor(source, propKey);\n              Object.defineProperty(target, propKey, desc);\n          });\n          \n      return target;\n  }\n  ```\n\n\n\n","slug":"Javascript标准参考教程重点","published":1,"updated":"2019-01-30T08:07:09.966Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ck2vg6gup000d4cobjt97wnnw","content":"<h1 id=\"简介\"><a href=\"#简介\" class=\"headerlink\" title=\"简介\"></a>简介</h1><p>记一些容易忘记的语法。</p>\n<h1 id=\"标签-label-用法\"><a href=\"#标签-label-用法\" class=\"headerlink\" title=\"标签(label)用法\"></a>标签(label)用法</h1>  <figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//判断数组二中是否有数组一中的元素</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> itHas = <span class=\"literal\">false</span>;</span><br><span class=\"line\"><span class=\"keyword\">var</span> index = <span class=\"number\">-1</span>;</span><br><span class=\"line\"><span class=\"keyword\">var</span> item = <span class=\"string\">''</span>;</span><br><span class=\"line\"><span class=\"keyword\">var</span> arr1 = [<span class=\"string\">'zhagnsanfeng'</span>, <span class=\"string\">'sunwukong'</span>, <span class=\"string\">'zhubajie'</span>];</span><br><span class=\"line\"><span class=\"keyword\">var</span> arr2 = [<span class=\"string\">'liangrenhong'</span>, <span class=\"string\">'zhubajie'</span>, <span class=\"string\">'xiaofeng'</span>];</span><br><span class=\"line\">verify:</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"keyword\">var</span> i = <span class=\"number\">0</span>, len1 = arr1.length; i &lt; len1; i++) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">for</span>(<span class=\"keyword\">var</span> j = <span class=\"number\">0</span>, len2 = arr2.length; j &lt; len2; j++) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">if</span>(arr1[i] === arr2[j]) &#123;</span><br><span class=\"line\">                itHas = <span class=\"literal\">true</span>;</span><br><span class=\"line\">                index = j;</span><br><span class=\"line\">                item = arr2[j];</span><br><span class=\"line\">                <span class=\"keyword\">break</span> verify;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(itHas, index, item);</span><br></pre></td></tr></table></figure>\n<p>当查找到一个符合的之后，就退出循环，这样可以节省时间。<br>如果在break之后不使用标签，只能跳出内层循环。</p>\n<h1 id=\"for…in遍历对象属性\"><a href=\"#for…in遍历对象属性\" class=\"headerlink\" title=\"for…in遍历对象属性\"></a>for…in遍历对象属性</h1>  <figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">Person</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">this</span>.name = <span class=\"string\">'lrh'</span>;</span><br><span class=\"line\">    <span class=\"keyword\">this</span>.age = <span class=\"string\">'18'</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">Person.prototype.gender = <span class=\"string\">'boy'</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">var</span> person = <span class=\"keyword\">new</span> Person();</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">for</span>(<span class=\"keyword\">var</span> p <span class=\"keyword\">in</span> person) &#123;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(p);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">//name</span></span><br><span class=\"line\"><span class=\"comment\">//age</span></span><br><span class=\"line\"><span class=\"comment\">//gender</span></span><br></pre></td></tr></table></figure>\n<p>使用for…in遍历会遍历出实例自身的属性以及继承的属性。<br>如果非要用for…in那就在遍历时加上hasOwnProperty方法判断：</p>\n  <figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">Person</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">this</span>.name = <span class=\"string\">'lrh'</span>;</span><br><span class=\"line\">    <span class=\"keyword\">this</span>.age = <span class=\"string\">'18'</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">Person.prototype.gender = <span class=\"string\">'boy'</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">var</span> person = <span class=\"keyword\">new</span> Person();</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">for</span>(<span class=\"keyword\">var</span> p <span class=\"keyword\">in</span> person) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(person.hasOwnProperty(p)) &#123;</span><br><span class=\"line\">        <span class=\"built_in\">console</span>.log(p);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">//name</span></span><br><span class=\"line\"><span class=\"comment\">//age</span></span><br></pre></td></tr></table></figure>\n<h1 id=\"in运算符\"><a href=\"#in运算符\" class=\"headerlink\" title=\"in运算符\"></a>in运算符</h1><p>用于检测对象是否包含某个属性</p>\n  <figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> person = &#123;</span><br><span class=\"line\">    name: <span class=\"string\">'lrh'</span></span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"string\">'name'</span> <span class=\"keyword\">in</span> person;<span class=\"comment\">//true</span></span><br></pre></td></tr></table></figure>\n<h1 id=\"闭包\"><a href=\"#闭包\" class=\"headerlink\" title=\"闭包\"></a>闭包</h1><ul>\n<li>定义在一个函数内部的函数。</li>\n<li>将函数内部与函数外部连接起来的一座桥梁。</li>\n<li>可以读取函数内部的变量。</li>\n<li><p>让函数内部变量一直保持在内存中。</p>\n  <figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">count</span>(<span class=\"params\">number</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">        <span class=\"built_in\">console</span>.log(number++);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">var</span> add = count(<span class=\"number\">5</span>);</span><br><span class=\"line\">add();</span><br><span class=\"line\">add();</span><br><span class=\"line\">add();</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>封装对象的私有属性和私有方法。</p>\n  <figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">Person</span>(<span class=\"params\">name</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> _gender;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">setGender</span>(<span class=\"params\">gender</span>) </span>&#123;</span><br><span class=\"line\">        _gender = gender</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">getGender</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> _gender;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">return</span> &#123;</span><br><span class=\"line\">        name: name,</span><br><span class=\"line\">        getGender: getGender,</span><br><span class=\"line\">        setGender: setGender</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">var</span> p1 = <span class=\"keyword\">new</span> Person(<span class=\"string\">'lrh'</span>);</span><br><span class=\"line\">p1.setGender(<span class=\"string\">'boy'</span>);</span><br><span class=\"line\">p1.getGender();<span class=\"comment\">//boy</span></span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n<h1 id=\"数组\"><a href=\"#数组\" class=\"headerlink\" title=\"数组\"></a>数组</h1><p>map方法对数组的所有成员一次调用一个函数，根据函数结果返回一个新数组。<br>map方法接受一个函数做为参数，调用时会将其传入三个参数，分辨是当前成员，当前位置，数组本身。<br>map方法还可以接受第二个参数，表示回调函数执行时this所指向的对象。</p>\n<p>forEach方法与map方法类似，但是一般不返回值。如果需要有返回值，一般使用map方法。<br>forEach方法不能中断执行，总是会遍历完所有成员，这时可以使用for循环代替。</p>\n<p>filter方法返回结构为true的成员。</p>\n<p>some方法，只要有一个成员的返回值为true，那么整个some方法的返回值就是true。</p>\n<p>every方法，每个数组成员的返回值是true，every方法才会返回true。</p>\n<p>reduce方法，依次处理数组的每个成员，最终累计成一个值。</p>\n<h1 id=\"字符串\"><a href=\"#字符串\" class=\"headerlink\" title=\"字符串\"></a>字符串</h1><p>substring方法用于从原字符串取出子字符串并返回，不改变原字符串。它与slice作用相同，但有一些奇怪的规则，因此不建议使用这个方法，优先使用slice。</p>\n<p>如果第二个参数大于第一个参数，substring方法会自动更换两个参数的位置。</p>\n<p>如果参数是负数，substring方法会自动将负数转为0。</p>\n<h1 id=\"对象的拷贝-浅拷贝\"><a href=\"#对象的拷贝-浅拷贝\" class=\"headerlink\" title=\"对象的拷贝-浅拷贝\"></a>对象的拷贝-浅拷贝</h1><p>确保拷贝后的对象，与原对象具有同样的prototype原型对象。<br>确保拷贝后的对象，与原对象具有同样的属性。</p>\n  <figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">copyObject</span>(<span class=\"params\">orig</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> copy = <span class=\"built_in\">Object</span>.create(<span class=\"built_in\">Object</span>.getPrototypeOf(orig));</span><br><span class=\"line\">    copyOwnPropertiesFrom(copy, orig);</span><br><span class=\"line\">    <span class=\"keyword\">return</span> copy;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">copyOwnPropertiesFrom</span>(<span class=\"params\">target, source</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"built_in\">Object</span></span><br><span class=\"line\">        .getOwnPropertyNames(source)</span><br><span class=\"line\">        .forEach(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">propKey</span>) </span>&#123;</span><br><span class=\"line\">            <span class=\"keyword\">var</span> desc = <span class=\"built_in\">Object</span>.getOwnPropertyDescriptor(source, propKey);</span><br><span class=\"line\">            <span class=\"built_in\">Object</span>.defineProperty(target, propKey, desc);</span><br><span class=\"line\">        &#125;);</span><br><span class=\"line\">        </span><br><span class=\"line\">    <span class=\"keyword\">return</span> target;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n","site":{"data":{"projects":[{"name":"AiTing","url":"https://github.com/renhongl/aiting","desc":"HTML5客户端音乐播放器"},{"name":"AiLiao","url":"https://github.com/renhongl/ailiao","desc":"网页聊天软件"},{"name":"Pomelo Editor","url":"https://renhongl.github.io/markdown-editor/","desc":"功能强大的在线Markdown编辑器"}]}},"excerpt":"","more":"<h1 id=\"简介\"><a href=\"#简介\" class=\"headerlink\" title=\"简介\"></a>简介</h1><p>记一些容易忘记的语法。</p>\n<h1 id=\"标签-label-用法\"><a href=\"#标签-label-用法\" class=\"headerlink\" title=\"标签(label)用法\"></a>标签(label)用法</h1>  <figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//判断数组二中是否有数组一中的元素</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> itHas = <span class=\"literal\">false</span>;</span><br><span class=\"line\"><span class=\"keyword\">var</span> index = <span class=\"number\">-1</span>;</span><br><span class=\"line\"><span class=\"keyword\">var</span> item = <span class=\"string\">''</span>;</span><br><span class=\"line\"><span class=\"keyword\">var</span> arr1 = [<span class=\"string\">'zhagnsanfeng'</span>, <span class=\"string\">'sunwukong'</span>, <span class=\"string\">'zhubajie'</span>];</span><br><span class=\"line\"><span class=\"keyword\">var</span> arr2 = [<span class=\"string\">'liangrenhong'</span>, <span class=\"string\">'zhubajie'</span>, <span class=\"string\">'xiaofeng'</span>];</span><br><span class=\"line\">verify:</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"keyword\">var</span> i = <span class=\"number\">0</span>, len1 = arr1.length; i &lt; len1; i++) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">for</span>(<span class=\"keyword\">var</span> j = <span class=\"number\">0</span>, len2 = arr2.length; j &lt; len2; j++) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">if</span>(arr1[i] === arr2[j]) &#123;</span><br><span class=\"line\">                itHas = <span class=\"literal\">true</span>;</span><br><span class=\"line\">                index = j;</span><br><span class=\"line\">                item = arr2[j];</span><br><span class=\"line\">                <span class=\"keyword\">break</span> verify;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(itHas, index, item);</span><br></pre></td></tr></table></figure>\n<p>当查找到一个符合的之后，就退出循环，这样可以节省时间。<br>如果在break之后不使用标签，只能跳出内层循环。</p>\n<h1 id=\"for…in遍历对象属性\"><a href=\"#for…in遍历对象属性\" class=\"headerlink\" title=\"for…in遍历对象属性\"></a>for…in遍历对象属性</h1>  <figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">Person</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">this</span>.name = <span class=\"string\">'lrh'</span>;</span><br><span class=\"line\">    <span class=\"keyword\">this</span>.age = <span class=\"string\">'18'</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">Person.prototype.gender = <span class=\"string\">'boy'</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">var</span> person = <span class=\"keyword\">new</span> Person();</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">for</span>(<span class=\"keyword\">var</span> p <span class=\"keyword\">in</span> person) &#123;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(p);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">//name</span></span><br><span class=\"line\"><span class=\"comment\">//age</span></span><br><span class=\"line\"><span class=\"comment\">//gender</span></span><br></pre></td></tr></table></figure>\n<p>使用for…in遍历会遍历出实例自身的属性以及继承的属性。<br>如果非要用for…in那就在遍历时加上hasOwnProperty方法判断：</p>\n  <figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">Person</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">this</span>.name = <span class=\"string\">'lrh'</span>;</span><br><span class=\"line\">    <span class=\"keyword\">this</span>.age = <span class=\"string\">'18'</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">Person.prototype.gender = <span class=\"string\">'boy'</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">var</span> person = <span class=\"keyword\">new</span> Person();</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">for</span>(<span class=\"keyword\">var</span> p <span class=\"keyword\">in</span> person) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(person.hasOwnProperty(p)) &#123;</span><br><span class=\"line\">        <span class=\"built_in\">console</span>.log(p);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">//name</span></span><br><span class=\"line\"><span class=\"comment\">//age</span></span><br></pre></td></tr></table></figure>\n<h1 id=\"in运算符\"><a href=\"#in运算符\" class=\"headerlink\" title=\"in运算符\"></a>in运算符</h1><p>用于检测对象是否包含某个属性</p>\n  <figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> person = &#123;</span><br><span class=\"line\">    name: <span class=\"string\">'lrh'</span></span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"string\">'name'</span> <span class=\"keyword\">in</span> person;<span class=\"comment\">//true</span></span><br></pre></td></tr></table></figure>\n<h1 id=\"闭包\"><a href=\"#闭包\" class=\"headerlink\" title=\"闭包\"></a>闭包</h1><ul>\n<li>定义在一个函数内部的函数。</li>\n<li>将函数内部与函数外部连接起来的一座桥梁。</li>\n<li>可以读取函数内部的变量。</li>\n<li><p>让函数内部变量一直保持在内存中。</p>\n  <figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">count</span>(<span class=\"params\">number</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">        <span class=\"built_in\">console</span>.log(number++);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">var</span> add = count(<span class=\"number\">5</span>);</span><br><span class=\"line\">add();</span><br><span class=\"line\">add();</span><br><span class=\"line\">add();</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>封装对象的私有属性和私有方法。</p>\n  <figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">Person</span>(<span class=\"params\">name</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> _gender;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">setGender</span>(<span class=\"params\">gender</span>) </span>&#123;</span><br><span class=\"line\">        _gender = gender</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">getGender</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> _gender;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">return</span> &#123;</span><br><span class=\"line\">        name: name,</span><br><span class=\"line\">        getGender: getGender,</span><br><span class=\"line\">        setGender: setGender</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">var</span> p1 = <span class=\"keyword\">new</span> Person(<span class=\"string\">'lrh'</span>);</span><br><span class=\"line\">p1.setGender(<span class=\"string\">'boy'</span>);</span><br><span class=\"line\">p1.getGender();<span class=\"comment\">//boy</span></span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n<h1 id=\"数组\"><a href=\"#数组\" class=\"headerlink\" title=\"数组\"></a>数组</h1><p>map方法对数组的所有成员一次调用一个函数，根据函数结果返回一个新数组。<br>map方法接受一个函数做为参数，调用时会将其传入三个参数，分辨是当前成员，当前位置，数组本身。<br>map方法还可以接受第二个参数，表示回调函数执行时this所指向的对象。</p>\n<p>forEach方法与map方法类似，但是一般不返回值。如果需要有返回值，一般使用map方法。<br>forEach方法不能中断执行，总是会遍历完所有成员，这时可以使用for循环代替。</p>\n<p>filter方法返回结构为true的成员。</p>\n<p>some方法，只要有一个成员的返回值为true，那么整个some方法的返回值就是true。</p>\n<p>every方法，每个数组成员的返回值是true，every方法才会返回true。</p>\n<p>reduce方法，依次处理数组的每个成员，最终累计成一个值。</p>\n<h1 id=\"字符串\"><a href=\"#字符串\" class=\"headerlink\" title=\"字符串\"></a>字符串</h1><p>substring方法用于从原字符串取出子字符串并返回，不改变原字符串。它与slice作用相同，但有一些奇怪的规则，因此不建议使用这个方法，优先使用slice。</p>\n<p>如果第二个参数大于第一个参数，substring方法会自动更换两个参数的位置。</p>\n<p>如果参数是负数，substring方法会自动将负数转为0。</p>\n<h1 id=\"对象的拷贝-浅拷贝\"><a href=\"#对象的拷贝-浅拷贝\" class=\"headerlink\" title=\"对象的拷贝-浅拷贝\"></a>对象的拷贝-浅拷贝</h1><p>确保拷贝后的对象，与原对象具有同样的prototype原型对象。<br>确保拷贝后的对象，与原对象具有同样的属性。</p>\n  <figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">copyObject</span>(<span class=\"params\">orig</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> copy = <span class=\"built_in\">Object</span>.create(<span class=\"built_in\">Object</span>.getPrototypeOf(orig));</span><br><span class=\"line\">    copyOwnPropertiesFrom(copy, orig);</span><br><span class=\"line\">    <span class=\"keyword\">return</span> copy;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">copyOwnPropertiesFrom</span>(<span class=\"params\">target, source</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"built_in\">Object</span></span><br><span class=\"line\">        .getOwnPropertyNames(source)</span><br><span class=\"line\">        .forEach(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">propKey</span>) </span>&#123;</span><br><span class=\"line\">            <span class=\"keyword\">var</span> desc = <span class=\"built_in\">Object</span>.getOwnPropertyDescriptor(source, propKey);</span><br><span class=\"line\">            <span class=\"built_in\">Object</span>.defineProperty(target, propKey, desc);</span><br><span class=\"line\">        &#125;);</span><br><span class=\"line\">        </span><br><span class=\"line\">    <span class=\"keyword\">return</span> target;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n"},{"title":"MongoDB安装","date":"2017-01-05T14:11:56.000Z","_content":"\n# 简介\n\n记录一些和Mongo DB有关的笔记（部分修改自runoob）。\n\n\n# 安装Mongo后的基本配置\nMongoDB将数据目录存储在 db 目录下。但是这个数据目录不会主动创建，在安装完成后需要创建它。请注意，数据目录应该放在根目录下（(如： C:\\ 或者 D:\\ 等 )。\n在本教程中，已经在C：盘 安装了 mongodb，现在创建一个data的目录然后在data目录里创建db目录。\n\n  ```bash\n  c:\\>cd c:\\\n\n  c:\\>mkdir data\n\n  c:\\>cd data\n\n  c:\\data>mkdir db\n\n  c:\\data>cd db\n\n  c:\\data\\db>\n  ```\n\n也可以通过window的资源管理器中创建这些目录，而不一定通过命令行。\n\n为了从命令提示符下运行MongoDB服务器，必须从MongoDB目录的bin目录中执行mongod.exe文件。为了方便，可以将mongod.exe添加到环境变量中。\n\n  ```bash\n  mongod.exe --dbpath c:\\data\\db\n  ```\n\n如果执行成功，会输出如下信息：\n\n  ```bash\n  2015-09-25T15:54:09.212+0800 I CONTROL  Hotfix KB2731284 or later update is not\n  installed, will zero-out data files\n  2015-09-25T15:54:09.229+0800 I JOURNAL  [initandlisten] journal dir=c:\\data\\db\\j\n  ournal\n  2015-09-25T15:54:09.237+0800 I JOURNAL  [initandlisten] recover : no journal fil\n  es present, no recovery needed\n  2015-09-25T15:54:09.290+0800 I JOURNAL  [durability] Durability thread started\n  2015-09-25T15:54:09.294+0800 I CONTROL  [initandlisten] MongoDB starting : pid=2\n  488 port=27017 dbpath=c:\\data\\db 64-bit host=WIN-1VONBJOCE88\n  2015-09-25T15:54:09.296+0800 I CONTROL  [initandlisten] targetMinOS: Windows 7/W\n  indows Server 2008 R2\n  2015-09-25T15:54:09.298+0800 I CONTROL  [initandlisten] db version v3.0.6\n  ……\n  ```\n\n# 将MongoDB作为服务启动\n\n请注意，必须有**管理权限**才能运行下面的命令。执行以下命令将MongoDB服务器作为Windows服务运行：\n\n  ```bash\n  mongod.exe --bind_ip 127.0.0.1 --logpath C:\\data\\dbConf\\mongodb.log --logappend --dbpath \n  C:\\data\\db --port 27017 --serviceName mongo --serviceDisplayName mongo --install\n  ```\n\n参数说明：\n\n  ```bash\n  --bind_ip 绑定服务IP，若绑定127.0.0.1，则只能本机访问，不指定默认本地所有IP\n  --logpath\t定MongoDB日志文件，注意是指定文件不是目录\n  --logappend\t使用追加的方式写日志\n  --dbpath\t指定数据库路径\n  --port\t指定服务端口号，默认端口27017\n  --serviceName\t指定服务名称\n  --serviceDisplayName\t指定服务名称，有多个mongodb服务时执行。\n  --install\t指定作为一个Windows服务安装。\n  ```\n\n再次强调，必须使用通过管理员方式打开的控制台，才能成功。如果不知道怎么通过管理员身份打开控制台，请进入c:/Windows/System32/找到cmd.exe，右键点击使用管理员身份运行。\n\n安装完之后，继续运行：\n\n  ```bash\n  net start mongo (mongo是刚才的服务名称)\n  ```\n\n如果出现类似**启动服务成功**的提示，那么就完成了；如果出现**没有此服务**的提示，那就是没有安装成功，需要检查以上步骤。\n\n# MongoDB后台管理 Shell\n安装完成后，想要测试数据库是否可以连接，可以使用MongoDB自带的js shell，打开一个cmd，输入`mongo`即可连接。\n\n","source":"_posts/MongoDB安装.md","raw":"---\ntitle: MongoDB安装\ndate: 2017-01-05 22:11:56\ntags:\n    - Mongo\n---\n\n# 简介\n\n记录一些和Mongo DB有关的笔记（部分修改自runoob）。\n\n\n# 安装Mongo后的基本配置\nMongoDB将数据目录存储在 db 目录下。但是这个数据目录不会主动创建，在安装完成后需要创建它。请注意，数据目录应该放在根目录下（(如： C:\\ 或者 D:\\ 等 )。\n在本教程中，已经在C：盘 安装了 mongodb，现在创建一个data的目录然后在data目录里创建db目录。\n\n  ```bash\n  c:\\>cd c:\\\n\n  c:\\>mkdir data\n\n  c:\\>cd data\n\n  c:\\data>mkdir db\n\n  c:\\data>cd db\n\n  c:\\data\\db>\n  ```\n\n也可以通过window的资源管理器中创建这些目录，而不一定通过命令行。\n\n为了从命令提示符下运行MongoDB服务器，必须从MongoDB目录的bin目录中执行mongod.exe文件。为了方便，可以将mongod.exe添加到环境变量中。\n\n  ```bash\n  mongod.exe --dbpath c:\\data\\db\n  ```\n\n如果执行成功，会输出如下信息：\n\n  ```bash\n  2015-09-25T15:54:09.212+0800 I CONTROL  Hotfix KB2731284 or later update is not\n  installed, will zero-out data files\n  2015-09-25T15:54:09.229+0800 I JOURNAL  [initandlisten] journal dir=c:\\data\\db\\j\n  ournal\n  2015-09-25T15:54:09.237+0800 I JOURNAL  [initandlisten] recover : no journal fil\n  es present, no recovery needed\n  2015-09-25T15:54:09.290+0800 I JOURNAL  [durability] Durability thread started\n  2015-09-25T15:54:09.294+0800 I CONTROL  [initandlisten] MongoDB starting : pid=2\n  488 port=27017 dbpath=c:\\data\\db 64-bit host=WIN-1VONBJOCE88\n  2015-09-25T15:54:09.296+0800 I CONTROL  [initandlisten] targetMinOS: Windows 7/W\n  indows Server 2008 R2\n  2015-09-25T15:54:09.298+0800 I CONTROL  [initandlisten] db version v3.0.6\n  ……\n  ```\n\n# 将MongoDB作为服务启动\n\n请注意，必须有**管理权限**才能运行下面的命令。执行以下命令将MongoDB服务器作为Windows服务运行：\n\n  ```bash\n  mongod.exe --bind_ip 127.0.0.1 --logpath C:\\data\\dbConf\\mongodb.log --logappend --dbpath \n  C:\\data\\db --port 27017 --serviceName mongo --serviceDisplayName mongo --install\n  ```\n\n参数说明：\n\n  ```bash\n  --bind_ip 绑定服务IP，若绑定127.0.0.1，则只能本机访问，不指定默认本地所有IP\n  --logpath\t定MongoDB日志文件，注意是指定文件不是目录\n  --logappend\t使用追加的方式写日志\n  --dbpath\t指定数据库路径\n  --port\t指定服务端口号，默认端口27017\n  --serviceName\t指定服务名称\n  --serviceDisplayName\t指定服务名称，有多个mongodb服务时执行。\n  --install\t指定作为一个Windows服务安装。\n  ```\n\n再次强调，必须使用通过管理员方式打开的控制台，才能成功。如果不知道怎么通过管理员身份打开控制台，请进入c:/Windows/System32/找到cmd.exe，右键点击使用管理员身份运行。\n\n安装完之后，继续运行：\n\n  ```bash\n  net start mongo (mongo是刚才的服务名称)\n  ```\n\n如果出现类似**启动服务成功**的提示，那么就完成了；如果出现**没有此服务**的提示，那就是没有安装成功，需要检查以上步骤。\n\n# MongoDB后台管理 Shell\n安装完成后，想要测试数据库是否可以连接，可以使用MongoDB自带的js shell，打开一个cmd，输入`mongo`即可连接。\n\n","slug":"MongoDB安装","published":1,"updated":"2019-01-30T08:22:33.759Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ck2vg6guv000g4cobhx35a28r","content":"<h1 id=\"简介\"><a href=\"#简介\" class=\"headerlink\" title=\"简介\"></a>简介</h1><p>记录一些和Mongo DB有关的笔记（部分修改自runoob）。</p>\n<h1 id=\"安装Mongo后的基本配置\"><a href=\"#安装Mongo后的基本配置\" class=\"headerlink\" title=\"安装Mongo后的基本配置\"></a>安装Mongo后的基本配置</h1><p>MongoDB将数据目录存储在 db 目录下。但是这个数据目录不会主动创建，在安装完成后需要创建它。请注意，数据目录应该放在根目录下（(如： C:\\ 或者 D:\\ 等 )。<br>在本教程中，已经在C：盘 安装了 mongodb，现在创建一个data的目录然后在data目录里创建db目录。</p>\n  <figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">c:\\&gt;<span class=\"built_in\">cd</span> c:\\</span><br><span class=\"line\"></span><br><span class=\"line\">c:\\&gt;mkdir data</span><br><span class=\"line\"></span><br><span class=\"line\">c:\\&gt;<span class=\"built_in\">cd</span> data</span><br><span class=\"line\"></span><br><span class=\"line\">c:\\data&gt;mkdir db</span><br><span class=\"line\"></span><br><span class=\"line\">c:\\data&gt;<span class=\"built_in\">cd</span> db</span><br><span class=\"line\"></span><br><span class=\"line\">c:\\data\\db&gt;</span><br></pre></td></tr></table></figure>\n<p>也可以通过window的资源管理器中创建这些目录，而不一定通过命令行。</p>\n<p>为了从命令提示符下运行MongoDB服务器，必须从MongoDB目录的bin目录中执行mongod.exe文件。为了方便，可以将mongod.exe添加到环境变量中。</p>\n  <figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">mongod.exe --dbpath c:\\data\\db</span><br></pre></td></tr></table></figure>\n<p>如果执行成功，会输出如下信息：</p>\n  <figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">2015-09-25T15:54:09.212+0800 I CONTROL  Hotfix KB2731284 or later update is not</span><br><span class=\"line\">installed, will zero-out data files</span><br><span class=\"line\">2015-09-25T15:54:09.229+0800 I JOURNAL  [initandlisten] journal dir=c:\\data\\db\\j</span><br><span class=\"line\">ournal</span><br><span class=\"line\">2015-09-25T15:54:09.237+0800 I JOURNAL  [initandlisten] recover : no journal fil</span><br><span class=\"line\">es present, no recovery needed</span><br><span class=\"line\">2015-09-25T15:54:09.290+0800 I JOURNAL  [durability] Durability thread started</span><br><span class=\"line\">2015-09-25T15:54:09.294+0800 I CONTROL  [initandlisten] MongoDB starting : pid=2</span><br><span class=\"line\">488 port=27017 dbpath=c:\\data\\db 64-bit host=WIN-1VONBJOCE88</span><br><span class=\"line\">2015-09-25T15:54:09.296+0800 I CONTROL  [initandlisten] targetMinOS: Windows 7/W</span><br><span class=\"line\">indows Server 2008 R2</span><br><span class=\"line\">2015-09-25T15:54:09.298+0800 I CONTROL  [initandlisten] db version v3.0.6</span><br><span class=\"line\">……</span><br></pre></td></tr></table></figure>\n<h1 id=\"将MongoDB作为服务启动\"><a href=\"#将MongoDB作为服务启动\" class=\"headerlink\" title=\"将MongoDB作为服务启动\"></a>将MongoDB作为服务启动</h1><p>请注意，必须有<strong>管理权限</strong>才能运行下面的命令。执行以下命令将MongoDB服务器作为Windows服务运行：</p>\n  <figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">mongod.exe --bind_ip 127.0.0.1 --logpath C:\\data\\dbConf\\mongodb.log --logappend --dbpath </span><br><span class=\"line\">C:\\data\\db --port 27017 --serviceName mongo --serviceDisplayName mongo --install</span><br></pre></td></tr></table></figure>\n<p>参数说明：</p>\n  <figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">--bind_ip 绑定服务IP，若绑定127.0.0.1，则只能本机访问，不指定默认本地所有IP</span><br><span class=\"line\">--logpath\t定MongoDB日志文件，注意是指定文件不是目录</span><br><span class=\"line\">--logappend\t使用追加的方式写日志</span><br><span class=\"line\">--dbpath\t指定数据库路径</span><br><span class=\"line\">--port\t指定服务端口号，默认端口27017</span><br><span class=\"line\">--serviceName\t指定服务名称</span><br><span class=\"line\">--serviceDisplayName\t指定服务名称，有多个mongodb服务时执行。</span><br><span class=\"line\">--install\t指定作为一个Windows服务安装。</span><br></pre></td></tr></table></figure>\n<p>再次强调，必须使用通过管理员方式打开的控制台，才能成功。如果不知道怎么通过管理员身份打开控制台，请进入c:/Windows/System32/找到cmd.exe，右键点击使用管理员身份运行。</p>\n<p>安装完之后，继续运行：</p>\n  <figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">net start mongo (mongo是刚才的服务名称)</span><br></pre></td></tr></table></figure>\n<p>如果出现类似<strong>启动服务成功</strong>的提示，那么就完成了；如果出现<strong>没有此服务</strong>的提示，那就是没有安装成功，需要检查以上步骤。</p>\n<h1 id=\"MongoDB后台管理-Shell\"><a href=\"#MongoDB后台管理-Shell\" class=\"headerlink\" title=\"MongoDB后台管理 Shell\"></a>MongoDB后台管理 Shell</h1><p>安装完成后，想要测试数据库是否可以连接，可以使用MongoDB自带的js shell，打开一个cmd，输入<code>mongo</code>即可连接。</p>\n","site":{"data":{"projects":[{"name":"AiTing","url":"https://github.com/renhongl/aiting","desc":"HTML5客户端音乐播放器"},{"name":"AiLiao","url":"https://github.com/renhongl/ailiao","desc":"网页聊天软件"},{"name":"Pomelo Editor","url":"https://renhongl.github.io/markdown-editor/","desc":"功能强大的在线Markdown编辑器"}]}},"excerpt":"","more":"<h1 id=\"简介\"><a href=\"#简介\" class=\"headerlink\" title=\"简介\"></a>简介</h1><p>记录一些和Mongo DB有关的笔记（部分修改自runoob）。</p>\n<h1 id=\"安装Mongo后的基本配置\"><a href=\"#安装Mongo后的基本配置\" class=\"headerlink\" title=\"安装Mongo后的基本配置\"></a>安装Mongo后的基本配置</h1><p>MongoDB将数据目录存储在 db 目录下。但是这个数据目录不会主动创建，在安装完成后需要创建它。请注意，数据目录应该放在根目录下（(如： C:\\ 或者 D:\\ 等 )。<br>在本教程中，已经在C：盘 安装了 mongodb，现在创建一个data的目录然后在data目录里创建db目录。</p>\n  <figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">c:\\&gt;<span class=\"built_in\">cd</span> c:\\</span><br><span class=\"line\"></span><br><span class=\"line\">c:\\&gt;mkdir data</span><br><span class=\"line\"></span><br><span class=\"line\">c:\\&gt;<span class=\"built_in\">cd</span> data</span><br><span class=\"line\"></span><br><span class=\"line\">c:\\data&gt;mkdir db</span><br><span class=\"line\"></span><br><span class=\"line\">c:\\data&gt;<span class=\"built_in\">cd</span> db</span><br><span class=\"line\"></span><br><span class=\"line\">c:\\data\\db&gt;</span><br></pre></td></tr></table></figure>\n<p>也可以通过window的资源管理器中创建这些目录，而不一定通过命令行。</p>\n<p>为了从命令提示符下运行MongoDB服务器，必须从MongoDB目录的bin目录中执行mongod.exe文件。为了方便，可以将mongod.exe添加到环境变量中。</p>\n  <figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">mongod.exe --dbpath c:\\data\\db</span><br></pre></td></tr></table></figure>\n<p>如果执行成功，会输出如下信息：</p>\n  <figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">2015-09-25T15:54:09.212+0800 I CONTROL  Hotfix KB2731284 or later update is not</span><br><span class=\"line\">installed, will zero-out data files</span><br><span class=\"line\">2015-09-25T15:54:09.229+0800 I JOURNAL  [initandlisten] journal dir=c:\\data\\db\\j</span><br><span class=\"line\">ournal</span><br><span class=\"line\">2015-09-25T15:54:09.237+0800 I JOURNAL  [initandlisten] recover : no journal fil</span><br><span class=\"line\">es present, no recovery needed</span><br><span class=\"line\">2015-09-25T15:54:09.290+0800 I JOURNAL  [durability] Durability thread started</span><br><span class=\"line\">2015-09-25T15:54:09.294+0800 I CONTROL  [initandlisten] MongoDB starting : pid=2</span><br><span class=\"line\">488 port=27017 dbpath=c:\\data\\db 64-bit host=WIN-1VONBJOCE88</span><br><span class=\"line\">2015-09-25T15:54:09.296+0800 I CONTROL  [initandlisten] targetMinOS: Windows 7/W</span><br><span class=\"line\">indows Server 2008 R2</span><br><span class=\"line\">2015-09-25T15:54:09.298+0800 I CONTROL  [initandlisten] db version v3.0.6</span><br><span class=\"line\">……</span><br></pre></td></tr></table></figure>\n<h1 id=\"将MongoDB作为服务启动\"><a href=\"#将MongoDB作为服务启动\" class=\"headerlink\" title=\"将MongoDB作为服务启动\"></a>将MongoDB作为服务启动</h1><p>请注意，必须有<strong>管理权限</strong>才能运行下面的命令。执行以下命令将MongoDB服务器作为Windows服务运行：</p>\n  <figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">mongod.exe --bind_ip 127.0.0.1 --logpath C:\\data\\dbConf\\mongodb.log --logappend --dbpath </span><br><span class=\"line\">C:\\data\\db --port 27017 --serviceName mongo --serviceDisplayName mongo --install</span><br></pre></td></tr></table></figure>\n<p>参数说明：</p>\n  <figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">--bind_ip 绑定服务IP，若绑定127.0.0.1，则只能本机访问，不指定默认本地所有IP</span><br><span class=\"line\">--logpath\t定MongoDB日志文件，注意是指定文件不是目录</span><br><span class=\"line\">--logappend\t使用追加的方式写日志</span><br><span class=\"line\">--dbpath\t指定数据库路径</span><br><span class=\"line\">--port\t指定服务端口号，默认端口27017</span><br><span class=\"line\">--serviceName\t指定服务名称</span><br><span class=\"line\">--serviceDisplayName\t指定服务名称，有多个mongodb服务时执行。</span><br><span class=\"line\">--install\t指定作为一个Windows服务安装。</span><br></pre></td></tr></table></figure>\n<p>再次强调，必须使用通过管理员方式打开的控制台，才能成功。如果不知道怎么通过管理员身份打开控制台，请进入c:/Windows/System32/找到cmd.exe，右键点击使用管理员身份运行。</p>\n<p>安装完之后，继续运行：</p>\n  <figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">net start mongo (mongo是刚才的服务名称)</span><br></pre></td></tr></table></figure>\n<p>如果出现类似<strong>启动服务成功</strong>的提示，那么就完成了；如果出现<strong>没有此服务</strong>的提示，那就是没有安装成功，需要检查以上步骤。</p>\n<h1 id=\"MongoDB后台管理-Shell\"><a href=\"#MongoDB后台管理-Shell\" class=\"headerlink\" title=\"MongoDB后台管理 Shell\"></a>MongoDB后台管理 Shell</h1><p>安装完成后，想要测试数据库是否可以连接，可以使用MongoDB自带的js shell，打开一个cmd，输入<code>mongo</code>即可连接。</p>\n"},{"title":"Set 和 Map","date":"2017-07-13T13:16:52.000Z","_content":"\n\n\n# Set\n\n类似于数组的数据结构，成员的值都是**唯一**的。\n\n\n\n1. 基本写法\n\n   ```js\n   const set =  new Set([1, 2, 3, 4]);\n\n   ```\n\n2. 数组去重\n\n   ```js\n   let a = [1, 2, 2, 3, 5, 5];\n   a = [...new Set(a)];//[1, 2, 3, 5]\n\n   ```\n\n3. 实例的属性和方法\n\n   ```js\n   let a = new Set();\n   a.add(1).add(3).add(10);\n   a.size;//3\n   a.has(10);//true\n   a.delete(10);\n   a.has(10);//false\n   a.clear();\n   a.size;//\n\n   ```\n\n4. 遍历操作\n\n   * keys(): 返回键名的遍历器\n   * values(): 返回键值得遍历器\n   * entries(): 返回键值对的遍历器\n   * forEach(): 使用回调函数遍历每个成员\n\n\n\n# Map\n\n解决Object只能使用字符串当做键的问题。\n\n如果需要键值对的数据结构，Map比Object更合适。\n\n1. 基本写法\n\n   ```js\n   let items = [\n     ['name', 'lrh'],\n     ['age', 18]\n   ];\n   const map = new Map(items);\n\n   ```\n\n2. 实例的属性和方法\n\n   ```js\n   map.size;//2\n   map.set('gender', 'male').set('experience', 3);\n   map.get('gender');//male\n   map.has('experience');//true\n   map.delete('age')//true\n   map.clear();\n   map.size;//0\n\n   ```\n\n3. 遍历操作\n\n   * keys()\n\n   * values()\n\n   * entries() 默认的遍历器接口\n\n   * forEach()\n\n     ​","source":"_posts/Set和Map.md","raw":"---\ntitle: Set 和 Map\ndate: 2017-07-13 21:16:52\ntags: ES6\n---\n\n\n\n# Set\n\n类似于数组的数据结构，成员的值都是**唯一**的。\n\n\n\n1. 基本写法\n\n   ```js\n   const set =  new Set([1, 2, 3, 4]);\n\n   ```\n\n2. 数组去重\n\n   ```js\n   let a = [1, 2, 2, 3, 5, 5];\n   a = [...new Set(a)];//[1, 2, 3, 5]\n\n   ```\n\n3. 实例的属性和方法\n\n   ```js\n   let a = new Set();\n   a.add(1).add(3).add(10);\n   a.size;//3\n   a.has(10);//true\n   a.delete(10);\n   a.has(10);//false\n   a.clear();\n   a.size;//\n\n   ```\n\n4. 遍历操作\n\n   * keys(): 返回键名的遍历器\n   * values(): 返回键值得遍历器\n   * entries(): 返回键值对的遍历器\n   * forEach(): 使用回调函数遍历每个成员\n\n\n\n# Map\n\n解决Object只能使用字符串当做键的问题。\n\n如果需要键值对的数据结构，Map比Object更合适。\n\n1. 基本写法\n\n   ```js\n   let items = [\n     ['name', 'lrh'],\n     ['age', 18]\n   ];\n   const map = new Map(items);\n\n   ```\n\n2. 实例的属性和方法\n\n   ```js\n   map.size;//2\n   map.set('gender', 'male').set('experience', 3);\n   map.get('gender');//male\n   map.has('experience');//true\n   map.delete('age')//true\n   map.clear();\n   map.size;//0\n\n   ```\n\n3. 遍历操作\n\n   * keys()\n\n   * values()\n\n   * entries() 默认的遍历器接口\n\n   * forEach()\n\n     ​","slug":"Set和Map","published":1,"updated":"2019-01-30T09:10:17.830Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ck2vg6guw000h4cobs3pon43t","content":"<h1 id=\"Set\"><a href=\"#Set\" class=\"headerlink\" title=\"Set\"></a>Set</h1><p>类似于数组的数据结构，成员的值都是<strong>唯一</strong>的。</p>\n<ol>\n<li><p>基本写法</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> set =  <span class=\"keyword\">new</span> <span class=\"built_in\">Set</span>([<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>, <span class=\"number\">4</span>]);</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>数组去重</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> a = [<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>, <span class=\"number\">5</span>, <span class=\"number\">5</span>];</span><br><span class=\"line\">a = [...new <span class=\"built_in\">Set</span>(a)];<span class=\"comment\">//[1, 2, 3, 5]</span></span><br></pre></td></tr></table></figure>\n</li>\n<li><p>实例的属性和方法</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> a = <span class=\"keyword\">new</span> <span class=\"built_in\">Set</span>();</span><br><span class=\"line\">a.add(<span class=\"number\">1</span>).add(<span class=\"number\">3</span>).add(<span class=\"number\">10</span>);</span><br><span class=\"line\">a.size;<span class=\"comment\">//3</span></span><br><span class=\"line\">a.has(<span class=\"number\">10</span>);<span class=\"comment\">//true</span></span><br><span class=\"line\">a.delete(<span class=\"number\">10</span>);</span><br><span class=\"line\">a.has(<span class=\"number\">10</span>);<span class=\"comment\">//false</span></span><br><span class=\"line\">a.clear();</span><br><span class=\"line\">a.size;<span class=\"comment\">//</span></span><br></pre></td></tr></table></figure>\n</li>\n<li><p>遍历操作</p>\n<ul>\n<li>keys(): 返回键名的遍历器</li>\n<li>values(): 返回键值得遍历器</li>\n<li>entries(): 返回键值对的遍历器</li>\n<li>forEach(): 使用回调函数遍历每个成员</li>\n</ul>\n</li>\n</ol>\n<h1 id=\"Map\"><a href=\"#Map\" class=\"headerlink\" title=\"Map\"></a>Map</h1><p>解决Object只能使用字符串当做键的问题。</p>\n<p>如果需要键值对的数据结构，Map比Object更合适。</p>\n<ol>\n<li><p>基本写法</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> items = [</span><br><span class=\"line\">  [<span class=\"string\">'name'</span>, <span class=\"string\">'lrh'</span>],</span><br><span class=\"line\">  [<span class=\"string\">'age'</span>, <span class=\"number\">18</span>]</span><br><span class=\"line\">];</span><br><span class=\"line\"><span class=\"keyword\">const</span> map = <span class=\"keyword\">new</span> <span class=\"built_in\">Map</span>(items);</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>实例的属性和方法</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">map.size;<span class=\"comment\">//2</span></span><br><span class=\"line\">map.set(<span class=\"string\">'gender'</span>, <span class=\"string\">'male'</span>).set(<span class=\"string\">'experience'</span>, <span class=\"number\">3</span>);</span><br><span class=\"line\">map.get(<span class=\"string\">'gender'</span>);<span class=\"comment\">//male</span></span><br><span class=\"line\">map.has(<span class=\"string\">'experience'</span>);<span class=\"comment\">//true</span></span><br><span class=\"line\">map.delete(<span class=\"string\">'age'</span>)<span class=\"comment\">//true</span></span><br><span class=\"line\">map.clear();</span><br><span class=\"line\">map.size;<span class=\"comment\">//0</span></span><br></pre></td></tr></table></figure>\n</li>\n<li><p>遍历操作</p>\n<ul>\n<li><p>keys()</p>\n</li>\n<li><p>values()</p>\n</li>\n<li><p>entries() 默认的遍历器接口</p>\n</li>\n<li><p>forEach()</p>\n<p>​</p>\n</li>\n</ul>\n</li>\n</ol>\n","site":{"data":{"projects":[{"name":"AiTing","url":"https://github.com/renhongl/aiting","desc":"HTML5客户端音乐播放器"},{"name":"AiLiao","url":"https://github.com/renhongl/ailiao","desc":"网页聊天软件"},{"name":"Pomelo Editor","url":"https://renhongl.github.io/markdown-editor/","desc":"功能强大的在线Markdown编辑器"}]}},"excerpt":"","more":"<h1 id=\"Set\"><a href=\"#Set\" class=\"headerlink\" title=\"Set\"></a>Set</h1><p>类似于数组的数据结构，成员的值都是<strong>唯一</strong>的。</p>\n<ol>\n<li><p>基本写法</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> set =  <span class=\"keyword\">new</span> <span class=\"built_in\">Set</span>([<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>, <span class=\"number\">4</span>]);</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>数组去重</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> a = [<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>, <span class=\"number\">5</span>, <span class=\"number\">5</span>];</span><br><span class=\"line\">a = [...new <span class=\"built_in\">Set</span>(a)];<span class=\"comment\">//[1, 2, 3, 5]</span></span><br></pre></td></tr></table></figure>\n</li>\n<li><p>实例的属性和方法</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> a = <span class=\"keyword\">new</span> <span class=\"built_in\">Set</span>();</span><br><span class=\"line\">a.add(<span class=\"number\">1</span>).add(<span class=\"number\">3</span>).add(<span class=\"number\">10</span>);</span><br><span class=\"line\">a.size;<span class=\"comment\">//3</span></span><br><span class=\"line\">a.has(<span class=\"number\">10</span>);<span class=\"comment\">//true</span></span><br><span class=\"line\">a.delete(<span class=\"number\">10</span>);</span><br><span class=\"line\">a.has(<span class=\"number\">10</span>);<span class=\"comment\">//false</span></span><br><span class=\"line\">a.clear();</span><br><span class=\"line\">a.size;<span class=\"comment\">//</span></span><br></pre></td></tr></table></figure>\n</li>\n<li><p>遍历操作</p>\n<ul>\n<li>keys(): 返回键名的遍历器</li>\n<li>values(): 返回键值得遍历器</li>\n<li>entries(): 返回键值对的遍历器</li>\n<li>forEach(): 使用回调函数遍历每个成员</li>\n</ul>\n</li>\n</ol>\n<h1 id=\"Map\"><a href=\"#Map\" class=\"headerlink\" title=\"Map\"></a>Map</h1><p>解决Object只能使用字符串当做键的问题。</p>\n<p>如果需要键值对的数据结构，Map比Object更合适。</p>\n<ol>\n<li><p>基本写法</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> items = [</span><br><span class=\"line\">  [<span class=\"string\">'name'</span>, <span class=\"string\">'lrh'</span>],</span><br><span class=\"line\">  [<span class=\"string\">'age'</span>, <span class=\"number\">18</span>]</span><br><span class=\"line\">];</span><br><span class=\"line\"><span class=\"keyword\">const</span> map = <span class=\"keyword\">new</span> <span class=\"built_in\">Map</span>(items);</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>实例的属性和方法</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">map.size;<span class=\"comment\">//2</span></span><br><span class=\"line\">map.set(<span class=\"string\">'gender'</span>, <span class=\"string\">'male'</span>).set(<span class=\"string\">'experience'</span>, <span class=\"number\">3</span>);</span><br><span class=\"line\">map.get(<span class=\"string\">'gender'</span>);<span class=\"comment\">//male</span></span><br><span class=\"line\">map.has(<span class=\"string\">'experience'</span>);<span class=\"comment\">//true</span></span><br><span class=\"line\">map.delete(<span class=\"string\">'age'</span>)<span class=\"comment\">//true</span></span><br><span class=\"line\">map.clear();</span><br><span class=\"line\">map.size;<span class=\"comment\">//0</span></span><br></pre></td></tr></table></figure>\n</li>\n<li><p>遍历操作</p>\n<ul>\n<li><p>keys()</p>\n</li>\n<li><p>values()</p>\n</li>\n<li><p>entries() 默认的遍历器接口</p>\n</li>\n<li><p>forEach()</p>\n<p>​</p>\n</li>\n</ul>\n</li>\n</ol>\n"},{"title":"NodeJS刷票程序","date":"2017-01-08T09:07:46.000Z","_content":"\n![buy_ticket](/images/buyTicket.jpg)\n\n\n# 简介\n\n这是一个脚本程序，运行在NodeJS环境之上，功能类似360抢票王。\n\n\n# 安装\n\n假设已经安装了node环境，从github上clone下源代码（[源码在这](https://github.com/renhongl/Buy_Ticket)）\n\n运行`npm install`安装依赖\n\n双击run.bat即可\n\n# 效果\n\n控制台每隔30秒打印最新票量信息，如果没有票，显示 **No data found**，如果有，则一一列出来。根目录文件夹也会生成一个log.txt文件，方便查看之前刷票的结果。在有票的时候，还会通过短信告知用户，效果图在文章开始已经列出。\n\n\n\n# 发送短信的代码：\n\n  ```js\n\tvar App = require('alidayu-node');\n\tvar app = new App('App Key', 'App Secret');\n\n    var message = JSON.stringify({\n        \"name\": \"lrh\",\n        \"trainName\": 'D5154',\n        \"number\": '2'\n    });\n\n    var smsOptions = {\n        sms_free_sign_name: '提示信息',\n        sms_param: message,\n        rec_num: '81193903',\n        sms_template_code: 'SMS_39010188'\n    };\n    app.smsSend(options);\n  ```\n\n这是使用的阿里大于的API，在官网注册账号后，需要创建新应用获取**App Key**和 **App Secret**，接着需要为自己的短信申请签名和模板。申请成功后，就可以用上面的方式来发送短信了。\n\n","source":"_posts/NodeJS刷票程序.md","raw":"---\ntitle: NodeJS刷票程序\ndate: 2017-01-08 17:07:46\ntags:\n    - 分享\n    - Nodejs\n---\n\n![buy_ticket](/images/buyTicket.jpg)\n\n\n# 简介\n\n这是一个脚本程序，运行在NodeJS环境之上，功能类似360抢票王。\n\n\n# 安装\n\n假设已经安装了node环境，从github上clone下源代码（[源码在这](https://github.com/renhongl/Buy_Ticket)）\n\n运行`npm install`安装依赖\n\n双击run.bat即可\n\n# 效果\n\n控制台每隔30秒打印最新票量信息，如果没有票，显示 **No data found**，如果有，则一一列出来。根目录文件夹也会生成一个log.txt文件，方便查看之前刷票的结果。在有票的时候，还会通过短信告知用户，效果图在文章开始已经列出。\n\n\n\n# 发送短信的代码：\n\n  ```js\n\tvar App = require('alidayu-node');\n\tvar app = new App('App Key', 'App Secret');\n\n    var message = JSON.stringify({\n        \"name\": \"lrh\",\n        \"trainName\": 'D5154',\n        \"number\": '2'\n    });\n\n    var smsOptions = {\n        sms_free_sign_name: '提示信息',\n        sms_param: message,\n        rec_num: '81193903',\n        sms_template_code: 'SMS_39010188'\n    };\n    app.smsSend(options);\n  ```\n\n这是使用的阿里大于的API，在官网注册账号后，需要创建新应用获取**App Key**和 **App Secret**，接着需要为自己的短信申请签名和模板。申请成功后，就可以用上面的方式来发送短信了。\n\n","slug":"NodeJS刷票程序","published":1,"updated":"2019-01-30T09:07:03.019Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ck2vg6guy000j4cobzqyp0q7m","content":"<p><img src=\"/images/buyTicket.jpg\" alt=\"buy_ticket\"></p>\n<h1 id=\"简介\"><a href=\"#简介\" class=\"headerlink\" title=\"简介\"></a>简介</h1><p>这是一个脚本程序，运行在NodeJS环境之上，功能类似360抢票王。</p>\n<h1 id=\"安装\"><a href=\"#安装\" class=\"headerlink\" title=\"安装\"></a>安装</h1><p>假设已经安装了node环境，从github上clone下源代码（<a href=\"https://github.com/renhongl/Buy_Ticket\">源码在这</a>）</p>\n<p>运行<code>npm install</code>安装依赖</p>\n<p>双击run.bat即可</p>\n<h1 id=\"效果\"><a href=\"#效果\" class=\"headerlink\" title=\"效果\"></a>效果</h1><p>控制台每隔30秒打印最新票量信息，如果没有票，显示 <strong>No data found</strong>，如果有，则一一列出来。根目录文件夹也会生成一个log.txt文件，方便查看之前刷票的结果。在有票的时候，还会通过短信告知用户，效果图在文章开始已经列出。</p>\n<h1 id=\"发送短信的代码：\"><a href=\"#发送短信的代码：\" class=\"headerlink\" title=\"发送短信的代码：\"></a>发送短信的代码：</h1>  <figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> App = <span class=\"built_in\">require</span>(<span class=\"string\">'alidayu-node'</span>);</span><br><span class=\"line\"><span class=\"keyword\">var</span> app = <span class=\"keyword\">new</span> App(<span class=\"string\">'App Key'</span>, <span class=\"string\">'App Secret'</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">   <span class=\"keyword\">var</span> message = <span class=\"built_in\">JSON</span>.stringify(&#123;</span><br><span class=\"line\">       <span class=\"string\">\"name\"</span>: <span class=\"string\">\"lrh\"</span>,</span><br><span class=\"line\">       <span class=\"string\">\"trainName\"</span>: <span class=\"string\">'D5154'</span>,</span><br><span class=\"line\">       <span class=\"string\">\"number\"</span>: <span class=\"string\">'2'</span></span><br><span class=\"line\">   &#125;);</span><br><span class=\"line\"></span><br><span class=\"line\">   <span class=\"keyword\">var</span> smsOptions = &#123;</span><br><span class=\"line\">       sms_free_sign_name: <span class=\"string\">'提示信息'</span>,</span><br><span class=\"line\">       sms_param: message,</span><br><span class=\"line\">       rec_num: <span class=\"string\">'81193903'</span>,</span><br><span class=\"line\">       sms_template_code: <span class=\"string\">'SMS_39010188'</span></span><br><span class=\"line\">   &#125;;</span><br><span class=\"line\">   app.smsSend(options);</span><br></pre></td></tr></table></figure>\n<p>这是使用的阿里大于的API，在官网注册账号后，需要创建新应用获取<strong>App Key</strong>和 <strong>App Secret</strong>，接着需要为自己的短信申请签名和模板。申请成功后，就可以用上面的方式来发送短信了。</p>\n","site":{"data":{"projects":[{"name":"AiTing","url":"https://github.com/renhongl/aiting","desc":"HTML5客户端音乐播放器"},{"name":"AiLiao","url":"https://github.com/renhongl/ailiao","desc":"网页聊天软件"},{"name":"Pomelo Editor","url":"https://renhongl.github.io/markdown-editor/","desc":"功能强大的在线Markdown编辑器"}]}},"excerpt":"","more":"<p><img src=\"/images/buyTicket.jpg\" alt=\"buy_ticket\"></p>\n<h1 id=\"简介\"><a href=\"#简介\" class=\"headerlink\" title=\"简介\"></a>简介</h1><p>这是一个脚本程序，运行在NodeJS环境之上，功能类似360抢票王。</p>\n<h1 id=\"安装\"><a href=\"#安装\" class=\"headerlink\" title=\"安装\"></a>安装</h1><p>假设已经安装了node环境，从github上clone下源代码（<a href=\"https://github.com/renhongl/Buy_Ticket\">源码在这</a>）</p>\n<p>运行<code>npm install</code>安装依赖</p>\n<p>双击run.bat即可</p>\n<h1 id=\"效果\"><a href=\"#效果\" class=\"headerlink\" title=\"效果\"></a>效果</h1><p>控制台每隔30秒打印最新票量信息，如果没有票，显示 <strong>No data found</strong>，如果有，则一一列出来。根目录文件夹也会生成一个log.txt文件，方便查看之前刷票的结果。在有票的时候，还会通过短信告知用户，效果图在文章开始已经列出。</p>\n<h1 id=\"发送短信的代码：\"><a href=\"#发送短信的代码：\" class=\"headerlink\" title=\"发送短信的代码：\"></a>发送短信的代码：</h1>  <figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> App = <span class=\"built_in\">require</span>(<span class=\"string\">'alidayu-node'</span>);</span><br><span class=\"line\"><span class=\"keyword\">var</span> app = <span class=\"keyword\">new</span> App(<span class=\"string\">'App Key'</span>, <span class=\"string\">'App Secret'</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">   <span class=\"keyword\">var</span> message = <span class=\"built_in\">JSON</span>.stringify(&#123;</span><br><span class=\"line\">       <span class=\"string\">\"name\"</span>: <span class=\"string\">\"lrh\"</span>,</span><br><span class=\"line\">       <span class=\"string\">\"trainName\"</span>: <span class=\"string\">'D5154'</span>,</span><br><span class=\"line\">       <span class=\"string\">\"number\"</span>: <span class=\"string\">'2'</span></span><br><span class=\"line\">   &#125;);</span><br><span class=\"line\"></span><br><span class=\"line\">   <span class=\"keyword\">var</span> smsOptions = &#123;</span><br><span class=\"line\">       sms_free_sign_name: <span class=\"string\">'提示信息'</span>,</span><br><span class=\"line\">       sms_param: message,</span><br><span class=\"line\">       rec_num: <span class=\"string\">'81193903'</span>,</span><br><span class=\"line\">       sms_template_code: <span class=\"string\">'SMS_39010188'</span></span><br><span class=\"line\">   &#125;;</span><br><span class=\"line\">   app.smsSend(options);</span><br></pre></td></tr></table></figure>\n<p>这是使用的阿里大于的API，在官网注册账号后，需要创建新应用获取<strong>App Key</strong>和 <strong>App Secret</strong>，接着需要为自己的短信申请签名和模板。申请成功后，就可以用上面的方式来发送短信了。</p>\n"},{"title":"Promise","date":"2017-06-20T12:07:38.000Z","_content":"\n\n\n# 什么是Promise\n\nPromise是异步编程的一种解决方案，它是一个容器，里面保存着某个将来才会结束的事件。\n\n**通过异步操作的结果，决定它是哪种状态。**\n\n**pending ---> fulfilled   或者 pending ---> rejected**\n\n\n\n* 基本使用\n\n  ```js\n  const getData = function(url) {\n    return new Promise((resolve, reject) => {\n      try{\n        setTimeout(() => {\n          console.log('data loaded');\n          resolve('get ' + url + ' data successfully');\n        }, 2000);\n      }catch(e){\n        reject(new Error('error'));\n      }\n    });\n  }\n\n  getData('test.json').then((data) => {\n    console.log(data);\n  });\n\n  ```\n\n* 异步加载图片\n\n  ```js\n  const loadImage = function(url) {\n    return new Promise((resolve, reject) => {\n        const img = new Image();\n        img.onerror = reject;\n        img.onload = () => {\n          setTimeout(() => {\n            resolve('img loaded');\n          }, 2000);\n        };\n        img.src = url;\n    });\n  }\n\n  const imgURL = 'https://ss1.bdstatic.com/70cFvXSh_Q1YnxGkpoWK1HF6hhy/it/u=628594730,4098634647&fm=27&gp=0.jpg';\n  document.body.innerHTML = 'loading...';\n  loadImage(imgURL).then(data => {\n    const img = document.createElement('img');\n    img.style.width = '100px';\n    img.style.height = '100px';\n    img.src = imgURL;\n    document.body.innerHTML = '';\n    document.body.appendChild(img);\n  });\n  ```\n\n* Ajax请求\n\n  ```js\n  const getData = function(url) {\n    return new Promise((resolve, reject) => {\n    \tconst handler = function() {\n        if (this.readyState !== 4) {\n          return;\n        }\n        if (this.status === 200) {\n          resolve(this.response);\n        } else {\n          reject(new Error(this.statusText));\n        }\n    \t};\n      const client = new XMLHttpRequest();\n      client.open('GET', url);\n      client.responseType = 'json';\n      client.onreadystatechange = handler;\n      client.setRequestHeader('Accept', 'application/json');\n      client.send();\n    });\n  }\n\n  getData('test.json').then(data => {\n    console.log(data);\n  });\n  ```\n\n* 应总是使用第一个then获取resolve状态的结果，使用catch获取错误的结果\n\n  ```js\n  getData('test.json').then(data => {\n    console.log(data);\n  }).catch(e => {\n    console.log(e);\n  });\n  ```\n\n* Promise.all()用于将多个Promise实例，包装成一个新的Promise实例\n\n  ```js\n  const p = Promise.all([p1, p2, p3]);\n  ```\n\n  1. p1, p2, p3的状态都变成fulfilled, p也会变成fulfilled，p1, p2, p3的返回值组成一个数组传递给p的回调函数。\n  2. p1, p2, p3中只要有一个被rejected，p的状态就变成rejected, 第一个被rejected的实例的返回值，会传递给p的回调函数。\n\n* Promise.race()也是将多个Promise实例包装成一个新的Promise实例\n\n  1. p1, p2, p3只要有一个先改变状态，p的状态就跟着改变。\n\n","source":"_posts/Promise.md","raw":"---\ntitle: Promise\ndate: 2017-06-20 20:07:38\ntags: ES6\n---\n\n\n\n# 什么是Promise\n\nPromise是异步编程的一种解决方案，它是一个容器，里面保存着某个将来才会结束的事件。\n\n**通过异步操作的结果，决定它是哪种状态。**\n\n**pending ---> fulfilled   或者 pending ---> rejected**\n\n\n\n* 基本使用\n\n  ```js\n  const getData = function(url) {\n    return new Promise((resolve, reject) => {\n      try{\n        setTimeout(() => {\n          console.log('data loaded');\n          resolve('get ' + url + ' data successfully');\n        }, 2000);\n      }catch(e){\n        reject(new Error('error'));\n      }\n    });\n  }\n\n  getData('test.json').then((data) => {\n    console.log(data);\n  });\n\n  ```\n\n* 异步加载图片\n\n  ```js\n  const loadImage = function(url) {\n    return new Promise((resolve, reject) => {\n        const img = new Image();\n        img.onerror = reject;\n        img.onload = () => {\n          setTimeout(() => {\n            resolve('img loaded');\n          }, 2000);\n        };\n        img.src = url;\n    });\n  }\n\n  const imgURL = 'https://ss1.bdstatic.com/70cFvXSh_Q1YnxGkpoWK1HF6hhy/it/u=628594730,4098634647&fm=27&gp=0.jpg';\n  document.body.innerHTML = 'loading...';\n  loadImage(imgURL).then(data => {\n    const img = document.createElement('img');\n    img.style.width = '100px';\n    img.style.height = '100px';\n    img.src = imgURL;\n    document.body.innerHTML = '';\n    document.body.appendChild(img);\n  });\n  ```\n\n* Ajax请求\n\n  ```js\n  const getData = function(url) {\n    return new Promise((resolve, reject) => {\n    \tconst handler = function() {\n        if (this.readyState !== 4) {\n          return;\n        }\n        if (this.status === 200) {\n          resolve(this.response);\n        } else {\n          reject(new Error(this.statusText));\n        }\n    \t};\n      const client = new XMLHttpRequest();\n      client.open('GET', url);\n      client.responseType = 'json';\n      client.onreadystatechange = handler;\n      client.setRequestHeader('Accept', 'application/json');\n      client.send();\n    });\n  }\n\n  getData('test.json').then(data => {\n    console.log(data);\n  });\n  ```\n\n* 应总是使用第一个then获取resolve状态的结果，使用catch获取错误的结果\n\n  ```js\n  getData('test.json').then(data => {\n    console.log(data);\n  }).catch(e => {\n    console.log(e);\n  });\n  ```\n\n* Promise.all()用于将多个Promise实例，包装成一个新的Promise实例\n\n  ```js\n  const p = Promise.all([p1, p2, p3]);\n  ```\n\n  1. p1, p2, p3的状态都变成fulfilled, p也会变成fulfilled，p1, p2, p3的返回值组成一个数组传递给p的回调函数。\n  2. p1, p2, p3中只要有一个被rejected，p的状态就变成rejected, 第一个被rejected的实例的返回值，会传递给p的回调函数。\n\n* Promise.race()也是将多个Promise实例包装成一个新的Promise实例\n\n  1. p1, p2, p3只要有一个先改变状态，p的状态就跟着改变。\n\n","slug":"Promise","published":1,"updated":"2019-03-18T07:36:48.662Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ck2vg6gv1000l4cob8ct1tjvk","content":"<h1 id=\"什么是Promise\"><a href=\"#什么是Promise\" class=\"headerlink\" title=\"什么是Promise\"></a>什么是Promise</h1><p>Promise是异步编程的一种解决方案，它是一个容器，里面保存着某个将来才会结束的事件。</p>\n<p><strong>通过异步操作的结果，决定它是哪种状态。</strong></p>\n<p><strong>pending —&gt; fulfilled   或者 pending —&gt; rejected</strong></p>\n<ul>\n<li><p>基本使用</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> getData = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">url</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> <span class=\"built_in\">Promise</span>(<span class=\"function\">(<span class=\"params\">resolve, reject</span>) =&gt;</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">try</span>&#123;</span><br><span class=\"line\">      setTimeout(<span class=\"function\"><span class=\"params\">()</span> =&gt;</span> &#123;</span><br><span class=\"line\">        <span class=\"built_in\">console</span>.log(<span class=\"string\">'data loaded'</span>);</span><br><span class=\"line\">        resolve(<span class=\"string\">'get '</span> + url + <span class=\"string\">' data successfully'</span>);</span><br><span class=\"line\">      &#125;, <span class=\"number\">2000</span>);</span><br><span class=\"line\">    &#125;<span class=\"keyword\">catch</span>(e)&#123;</span><br><span class=\"line\">      reject(<span class=\"keyword\">new</span> <span class=\"built_in\">Error</span>(<span class=\"string\">'error'</span>));</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">getData(<span class=\"string\">'test.json'</span>).then(<span class=\"function\">(<span class=\"params\">data</span>) =&gt;</span> &#123;</span><br><span class=\"line\">  <span class=\"built_in\">console</span>.log(data);</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>异步加载图片</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> loadImage = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">url</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> <span class=\"built_in\">Promise</span>(<span class=\"function\">(<span class=\"params\">resolve, reject</span>) =&gt;</span> &#123;</span><br><span class=\"line\">      <span class=\"keyword\">const</span> img = <span class=\"keyword\">new</span> Image();</span><br><span class=\"line\">      img.onerror = reject;</span><br><span class=\"line\">      img.onload = <span class=\"function\"><span class=\"params\">()</span> =&gt;</span> &#123;</span><br><span class=\"line\">        setTimeout(<span class=\"function\"><span class=\"params\">()</span> =&gt;</span> &#123;</span><br><span class=\"line\">          resolve(<span class=\"string\">'img loaded'</span>);</span><br><span class=\"line\">        &#125;, <span class=\"number\">2000</span>);</span><br><span class=\"line\">      &#125;;</span><br><span class=\"line\">      img.src = url;</span><br><span class=\"line\">  &#125;);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> imgURL = <span class=\"string\">'https://ss1.bdstatic.com/70cFvXSh_Q1YnxGkpoWK1HF6hhy/it/u=628594730,4098634647&amp;fm=27&amp;gp=0.jpg'</span>;</span><br><span class=\"line\"><span class=\"built_in\">document</span>.body.innerHTML = <span class=\"string\">'loading...'</span>;</span><br><span class=\"line\">loadImage(imgURL).then(<span class=\"function\"><span class=\"params\">data</span> =&gt;</span> &#123;</span><br><span class=\"line\">  <span class=\"keyword\">const</span> img = <span class=\"built_in\">document</span>.createElement(<span class=\"string\">'img'</span>);</span><br><span class=\"line\">  img.style.width = <span class=\"string\">'100px'</span>;</span><br><span class=\"line\">  img.style.height = <span class=\"string\">'100px'</span>;</span><br><span class=\"line\">  img.src = imgURL;</span><br><span class=\"line\">  <span class=\"built_in\">document</span>.body.innerHTML = <span class=\"string\">''</span>;</span><br><span class=\"line\">  <span class=\"built_in\">document</span>.body.appendChild(img);</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>Ajax请求</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> getData = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">url</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> <span class=\"built_in\">Promise</span>(<span class=\"function\">(<span class=\"params\">resolve, reject</span>) =&gt;</span> &#123;</span><br><span class=\"line\">  \t<span class=\"keyword\">const</span> handler = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">      <span class=\"keyword\">if</span> (<span class=\"keyword\">this</span>.readyState !== <span class=\"number\">4</span>) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span>;</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">      <span class=\"keyword\">if</span> (<span class=\"keyword\">this</span>.status === <span class=\"number\">200</span>) &#123;</span><br><span class=\"line\">        resolve(<span class=\"keyword\">this</span>.response);</span><br><span class=\"line\">      &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">        reject(<span class=\"keyword\">new</span> <span class=\"built_in\">Error</span>(<span class=\"keyword\">this</span>.statusText));</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">  \t&#125;;</span><br><span class=\"line\">    <span class=\"keyword\">const</span> client = <span class=\"keyword\">new</span> XMLHttpRequest();</span><br><span class=\"line\">    client.open(<span class=\"string\">'GET'</span>, url);</span><br><span class=\"line\">    client.responseType = <span class=\"string\">'json'</span>;</span><br><span class=\"line\">    client.onreadystatechange = handler;</span><br><span class=\"line\">    client.setRequestHeader(<span class=\"string\">'Accept'</span>, <span class=\"string\">'application/json'</span>);</span><br><span class=\"line\">    client.send();</span><br><span class=\"line\">  &#125;);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">getData(<span class=\"string\">'test.json'</span>).then(<span class=\"function\"><span class=\"params\">data</span> =&gt;</span> &#123;</span><br><span class=\"line\">  <span class=\"built_in\">console</span>.log(data);</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>应总是使用第一个then获取resolve状态的结果，使用catch获取错误的结果</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">getData(<span class=\"string\">'test.json'</span>).then(<span class=\"function\"><span class=\"params\">data</span> =&gt;</span> &#123;</span><br><span class=\"line\">  <span class=\"built_in\">console</span>.log(data);</span><br><span class=\"line\">&#125;).catch(<span class=\"function\"><span class=\"params\">e</span> =&gt;</span> &#123;</span><br><span class=\"line\">  <span class=\"built_in\">console</span>.log(e);</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>Promise.all()用于将多个Promise实例，包装成一个新的Promise实例</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> p = <span class=\"built_in\">Promise</span>.all([p1, p2, p3]);</span><br></pre></td></tr></table></figure>\n<ol>\n<li>p1, p2, p3的状态都变成fulfilled, p也会变成fulfilled，p1, p2, p3的返回值组成一个数组传递给p的回调函数。</li>\n<li>p1, p2, p3中只要有一个被rejected，p的状态就变成rejected, 第一个被rejected的实例的返回值，会传递给p的回调函数。</li>\n</ol>\n</li>\n<li><p>Promise.race()也是将多个Promise实例包装成一个新的Promise实例</p>\n<ol>\n<li>p1, p2, p3只要有一个先改变状态，p的状态就跟着改变。</li>\n</ol>\n</li>\n</ul>\n","site":{"data":{"projects":[{"name":"AiTing","url":"https://github.com/renhongl/aiting","desc":"HTML5客户端音乐播放器"},{"name":"AiLiao","url":"https://github.com/renhongl/ailiao","desc":"网页聊天软件"},{"name":"Pomelo Editor","url":"https://renhongl.github.io/markdown-editor/","desc":"功能强大的在线Markdown编辑器"}]}},"excerpt":"","more":"<h1 id=\"什么是Promise\"><a href=\"#什么是Promise\" class=\"headerlink\" title=\"什么是Promise\"></a>什么是Promise</h1><p>Promise是异步编程的一种解决方案，它是一个容器，里面保存着某个将来才会结束的事件。</p>\n<p><strong>通过异步操作的结果，决定它是哪种状态。</strong></p>\n<p><strong>pending —&gt; fulfilled   或者 pending —&gt; rejected</strong></p>\n<ul>\n<li><p>基本使用</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> getData = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">url</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> <span class=\"built_in\">Promise</span>(<span class=\"function\">(<span class=\"params\">resolve, reject</span>) =&gt;</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">try</span>&#123;</span><br><span class=\"line\">      setTimeout(<span class=\"function\"><span class=\"params\">()</span> =&gt;</span> &#123;</span><br><span class=\"line\">        <span class=\"built_in\">console</span>.log(<span class=\"string\">'data loaded'</span>);</span><br><span class=\"line\">        resolve(<span class=\"string\">'get '</span> + url + <span class=\"string\">' data successfully'</span>);</span><br><span class=\"line\">      &#125;, <span class=\"number\">2000</span>);</span><br><span class=\"line\">    &#125;<span class=\"keyword\">catch</span>(e)&#123;</span><br><span class=\"line\">      reject(<span class=\"keyword\">new</span> <span class=\"built_in\">Error</span>(<span class=\"string\">'error'</span>));</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">getData(<span class=\"string\">'test.json'</span>).then(<span class=\"function\">(<span class=\"params\">data</span>) =&gt;</span> &#123;</span><br><span class=\"line\">  <span class=\"built_in\">console</span>.log(data);</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>异步加载图片</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> loadImage = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">url</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> <span class=\"built_in\">Promise</span>(<span class=\"function\">(<span class=\"params\">resolve, reject</span>) =&gt;</span> &#123;</span><br><span class=\"line\">      <span class=\"keyword\">const</span> img = <span class=\"keyword\">new</span> Image();</span><br><span class=\"line\">      img.onerror = reject;</span><br><span class=\"line\">      img.onload = <span class=\"function\"><span class=\"params\">()</span> =&gt;</span> &#123;</span><br><span class=\"line\">        setTimeout(<span class=\"function\"><span class=\"params\">()</span> =&gt;</span> &#123;</span><br><span class=\"line\">          resolve(<span class=\"string\">'img loaded'</span>);</span><br><span class=\"line\">        &#125;, <span class=\"number\">2000</span>);</span><br><span class=\"line\">      &#125;;</span><br><span class=\"line\">      img.src = url;</span><br><span class=\"line\">  &#125;);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> imgURL = <span class=\"string\">'https://ss1.bdstatic.com/70cFvXSh_Q1YnxGkpoWK1HF6hhy/it/u=628594730,4098634647&amp;fm=27&amp;gp=0.jpg'</span>;</span><br><span class=\"line\"><span class=\"built_in\">document</span>.body.innerHTML = <span class=\"string\">'loading...'</span>;</span><br><span class=\"line\">loadImage(imgURL).then(<span class=\"function\"><span class=\"params\">data</span> =&gt;</span> &#123;</span><br><span class=\"line\">  <span class=\"keyword\">const</span> img = <span class=\"built_in\">document</span>.createElement(<span class=\"string\">'img'</span>);</span><br><span class=\"line\">  img.style.width = <span class=\"string\">'100px'</span>;</span><br><span class=\"line\">  img.style.height = <span class=\"string\">'100px'</span>;</span><br><span class=\"line\">  img.src = imgURL;</span><br><span class=\"line\">  <span class=\"built_in\">document</span>.body.innerHTML = <span class=\"string\">''</span>;</span><br><span class=\"line\">  <span class=\"built_in\">document</span>.body.appendChild(img);</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>Ajax请求</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> getData = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">url</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> <span class=\"built_in\">Promise</span>(<span class=\"function\">(<span class=\"params\">resolve, reject</span>) =&gt;</span> &#123;</span><br><span class=\"line\">  \t<span class=\"keyword\">const</span> handler = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">      <span class=\"keyword\">if</span> (<span class=\"keyword\">this</span>.readyState !== <span class=\"number\">4</span>) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span>;</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">      <span class=\"keyword\">if</span> (<span class=\"keyword\">this</span>.status === <span class=\"number\">200</span>) &#123;</span><br><span class=\"line\">        resolve(<span class=\"keyword\">this</span>.response);</span><br><span class=\"line\">      &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">        reject(<span class=\"keyword\">new</span> <span class=\"built_in\">Error</span>(<span class=\"keyword\">this</span>.statusText));</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">  \t&#125;;</span><br><span class=\"line\">    <span class=\"keyword\">const</span> client = <span class=\"keyword\">new</span> XMLHttpRequest();</span><br><span class=\"line\">    client.open(<span class=\"string\">'GET'</span>, url);</span><br><span class=\"line\">    client.responseType = <span class=\"string\">'json'</span>;</span><br><span class=\"line\">    client.onreadystatechange = handler;</span><br><span class=\"line\">    client.setRequestHeader(<span class=\"string\">'Accept'</span>, <span class=\"string\">'application/json'</span>);</span><br><span class=\"line\">    client.send();</span><br><span class=\"line\">  &#125;);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">getData(<span class=\"string\">'test.json'</span>).then(<span class=\"function\"><span class=\"params\">data</span> =&gt;</span> &#123;</span><br><span class=\"line\">  <span class=\"built_in\">console</span>.log(data);</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>应总是使用第一个then获取resolve状态的结果，使用catch获取错误的结果</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">getData(<span class=\"string\">'test.json'</span>).then(<span class=\"function\"><span class=\"params\">data</span> =&gt;</span> &#123;</span><br><span class=\"line\">  <span class=\"built_in\">console</span>.log(data);</span><br><span class=\"line\">&#125;).catch(<span class=\"function\"><span class=\"params\">e</span> =&gt;</span> &#123;</span><br><span class=\"line\">  <span class=\"built_in\">console</span>.log(e);</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>Promise.all()用于将多个Promise实例，包装成一个新的Promise实例</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> p = <span class=\"built_in\">Promise</span>.all([p1, p2, p3]);</span><br></pre></td></tr></table></figure>\n<ol>\n<li>p1, p2, p3的状态都变成fulfilled, p也会变成fulfilled，p1, p2, p3的返回值组成一个数组传递给p的回调函数。</li>\n<li>p1, p2, p3中只要有一个被rejected，p的状态就变成rejected, 第一个被rejected的实例的返回值，会传递给p的回调函数。</li>\n</ol>\n</li>\n<li><p>Promise.race()也是将多个Promise实例包装成一个新的Promise实例</p>\n<ol>\n<li>p1, p2, p3只要有一个先改变状态，p的状态就跟着改变。</li>\n</ol>\n</li>\n</ul>\n"},{"title":"Symbol","date":"2017-07-14T13:16:52.000Z","_content":"\n\n\n\n# 什么是Symbol\nSymbol是ES6引入的一种新的原始数据类型，表示独一无二的值。它是JavaScript语言的第七种数据类型:\n\n\n```js\nnull, undefined, String, Number, Boolean, Object, Symbol。\n```\n\n使用Symbol()函数生成，因为它是一种类似字符串的数据类型，所以不是通过new创建的对象实例。\n\n* 作为属性名，在混合两个对象时，属性值不会被覆盖，因为一个Symbol是唯一的。\n\n  ```js\n  //定义属性名和使用属性名时，使用方括号的调用方式。\n  let myNameSymbol = Symbol();\n  let a = {\n    [myNameSymbol]: 'renhongl',\n    age: 18\n  };\n\n  a[myNameSymbol];//renhongl\n\n  ```\n\n* 定义常量，消灭模式字符串\n\n  ```js\n  //bad\n  function operator(type) {\n    switch(type) {\n      case 'add'://魔术字符串\n      \t//do add\n      \tbreak;\n   \t/*---more code----*/\n    }\n  }\n  operator('add');//魔术字符串\n\n  //not bad\n  var operatorType = {\n    add: 'add',\n    update: 'update',\n    remove: 'remove'\n  };\n  function operator(type) {\n    switch(type) {\n      case operatorType.add://魔术字符串\n      \t//do add\n      \tbreak;\n   \t/*---more code----*/\n    }\n  }\n  operator(operatorType.add);\n\n  //因为我们不关心add之后是什么值，可以使用一些方式\n  //good\n  var operatorType = {\n    add: Symbol(),\n    update: Symbol(),\n    remove: Symbol(),\n  };\n  function operator(type) {\n    switch(type) {\n      case operatorType.add://魔术字符串\n      \t//do add\n      \tbreak;\n   \t/*---more code----*/\n    }\n  }\n  operator(operatorType.add);\n  ```\n\n  ​","source":"_posts/Symbol.md","raw":"---\ntitle: Symbol\ndate: 2017-07-14 21:16:52\ntags: ES6\n---\n\n\n\n\n# 什么是Symbol\nSymbol是ES6引入的一种新的原始数据类型，表示独一无二的值。它是JavaScript语言的第七种数据类型:\n\n\n```js\nnull, undefined, String, Number, Boolean, Object, Symbol。\n```\n\n使用Symbol()函数生成，因为它是一种类似字符串的数据类型，所以不是通过new创建的对象实例。\n\n* 作为属性名，在混合两个对象时，属性值不会被覆盖，因为一个Symbol是唯一的。\n\n  ```js\n  //定义属性名和使用属性名时，使用方括号的调用方式。\n  let myNameSymbol = Symbol();\n  let a = {\n    [myNameSymbol]: 'renhongl',\n    age: 18\n  };\n\n  a[myNameSymbol];//renhongl\n\n  ```\n\n* 定义常量，消灭模式字符串\n\n  ```js\n  //bad\n  function operator(type) {\n    switch(type) {\n      case 'add'://魔术字符串\n      \t//do add\n      \tbreak;\n   \t/*---more code----*/\n    }\n  }\n  operator('add');//魔术字符串\n\n  //not bad\n  var operatorType = {\n    add: 'add',\n    update: 'update',\n    remove: 'remove'\n  };\n  function operator(type) {\n    switch(type) {\n      case operatorType.add://魔术字符串\n      \t//do add\n      \tbreak;\n   \t/*---more code----*/\n    }\n  }\n  operator(operatorType.add);\n\n  //因为我们不关心add之后是什么值，可以使用一些方式\n  //good\n  var operatorType = {\n    add: Symbol(),\n    update: Symbol(),\n    remove: Symbol(),\n  };\n  function operator(type) {\n    switch(type) {\n      case operatorType.add://魔术字符串\n      \t//do add\n      \tbreak;\n   \t/*---more code----*/\n    }\n  }\n  operator(operatorType.add);\n  ```\n\n  ​","slug":"Symbol","published":1,"updated":"2019-03-18T07:34:23.700Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ck2vg6gv5000o4cob2os8wdwb","content":"<h1 id=\"什么是Symbol\"><a href=\"#什么是Symbol\" class=\"headerlink\" title=\"什么是Symbol\"></a>什么是Symbol</h1><p>Symbol是ES6引入的一种新的原始数据类型，表示独一无二的值。它是JavaScript语言的第七种数据类型:</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"literal\">null</span>, <span class=\"literal\">undefined</span>, <span class=\"built_in\">String</span>, <span class=\"built_in\">Number</span>, <span class=\"built_in\">Boolean</span>, <span class=\"built_in\">Object</span>, <span class=\"built_in\">Symbol</span>。</span><br></pre></td></tr></table></figure>\n<p>使用Symbol()函数生成，因为它是一种类似字符串的数据类型，所以不是通过new创建的对象实例。</p>\n<ul>\n<li><p>作为属性名，在混合两个对象时，属性值不会被覆盖，因为一个Symbol是唯一的。</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//定义属性名和使用属性名时，使用方括号的调用方式。</span></span><br><span class=\"line\"><span class=\"keyword\">let</span> myNameSymbol = <span class=\"built_in\">Symbol</span>();</span><br><span class=\"line\"><span class=\"keyword\">let</span> a = &#123;</span><br><span class=\"line\">  [myNameSymbol]: <span class=\"string\">'renhongl'</span>,</span><br><span class=\"line\">  age: <span class=\"number\">18</span></span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\">a[myNameSymbol];<span class=\"comment\">//renhongl</span></span><br></pre></td></tr></table></figure>\n</li>\n<li><p>定义常量，消灭模式字符串</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//bad</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">operator</span>(<span class=\"params\">type</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">switch</span>(type) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">case</span> <span class=\"string\">'add'</span>:<span class=\"comment\">//魔术字符串</span></span><br><span class=\"line\">    \t<span class=\"comment\">//do add</span></span><br><span class=\"line\">    \t<span class=\"keyword\">break</span>;</span><br><span class=\"line\"> \t<span class=\"comment\">/*---more code----*/</span></span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">operator(<span class=\"string\">'add'</span>);<span class=\"comment\">//魔术字符串</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//not bad</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> operatorType = &#123;</span><br><span class=\"line\">  add: <span class=\"string\">'add'</span>,</span><br><span class=\"line\">  update: <span class=\"string\">'update'</span>,</span><br><span class=\"line\">  remove: <span class=\"string\">'remove'</span></span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">operator</span>(<span class=\"params\">type</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">switch</span>(type) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">case</span> operatorType.add:<span class=\"comment\">//魔术字符串</span></span><br><span class=\"line\">    \t<span class=\"comment\">//do add</span></span><br><span class=\"line\">    \t<span class=\"keyword\">break</span>;</span><br><span class=\"line\"> \t<span class=\"comment\">/*---more code----*/</span></span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">operator(operatorType.add);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//因为我们不关心add之后是什么值，可以使用一些方式</span></span><br><span class=\"line\"><span class=\"comment\">//good</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> operatorType = &#123;</span><br><span class=\"line\">  add: <span class=\"built_in\">Symbol</span>(),</span><br><span class=\"line\">  update: <span class=\"built_in\">Symbol</span>(),</span><br><span class=\"line\">  remove: <span class=\"built_in\">Symbol</span>(),</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">operator</span>(<span class=\"params\">type</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">switch</span>(type) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">case</span> operatorType.add:<span class=\"comment\">//魔术字符串</span></span><br><span class=\"line\">    \t<span class=\"comment\">//do add</span></span><br><span class=\"line\">    \t<span class=\"keyword\">break</span>;</span><br><span class=\"line\"> \t<span class=\"comment\">/*---more code----*/</span></span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">operator(operatorType.add);</span><br></pre></td></tr></table></figure>\n<p>​</p>\n</li>\n</ul>\n","site":{"data":{"projects":[{"name":"AiTing","url":"https://github.com/renhongl/aiting","desc":"HTML5客户端音乐播放器"},{"name":"AiLiao","url":"https://github.com/renhongl/ailiao","desc":"网页聊天软件"},{"name":"Pomelo Editor","url":"https://renhongl.github.io/markdown-editor/","desc":"功能强大的在线Markdown编辑器"}]}},"excerpt":"","more":"<h1 id=\"什么是Symbol\"><a href=\"#什么是Symbol\" class=\"headerlink\" title=\"什么是Symbol\"></a>什么是Symbol</h1><p>Symbol是ES6引入的一种新的原始数据类型，表示独一无二的值。它是JavaScript语言的第七种数据类型:</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"literal\">null</span>, <span class=\"literal\">undefined</span>, <span class=\"built_in\">String</span>, <span class=\"built_in\">Number</span>, <span class=\"built_in\">Boolean</span>, <span class=\"built_in\">Object</span>, <span class=\"built_in\">Symbol</span>。</span><br></pre></td></tr></table></figure>\n<p>使用Symbol()函数生成，因为它是一种类似字符串的数据类型，所以不是通过new创建的对象实例。</p>\n<ul>\n<li><p>作为属性名，在混合两个对象时，属性值不会被覆盖，因为一个Symbol是唯一的。</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//定义属性名和使用属性名时，使用方括号的调用方式。</span></span><br><span class=\"line\"><span class=\"keyword\">let</span> myNameSymbol = <span class=\"built_in\">Symbol</span>();</span><br><span class=\"line\"><span class=\"keyword\">let</span> a = &#123;</span><br><span class=\"line\">  [myNameSymbol]: <span class=\"string\">'renhongl'</span>,</span><br><span class=\"line\">  age: <span class=\"number\">18</span></span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\">a[myNameSymbol];<span class=\"comment\">//renhongl</span></span><br></pre></td></tr></table></figure>\n</li>\n<li><p>定义常量，消灭模式字符串</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//bad</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">operator</span>(<span class=\"params\">type</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">switch</span>(type) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">case</span> <span class=\"string\">'add'</span>:<span class=\"comment\">//魔术字符串</span></span><br><span class=\"line\">    \t<span class=\"comment\">//do add</span></span><br><span class=\"line\">    \t<span class=\"keyword\">break</span>;</span><br><span class=\"line\"> \t<span class=\"comment\">/*---more code----*/</span></span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">operator(<span class=\"string\">'add'</span>);<span class=\"comment\">//魔术字符串</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//not bad</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> operatorType = &#123;</span><br><span class=\"line\">  add: <span class=\"string\">'add'</span>,</span><br><span class=\"line\">  update: <span class=\"string\">'update'</span>,</span><br><span class=\"line\">  remove: <span class=\"string\">'remove'</span></span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">operator</span>(<span class=\"params\">type</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">switch</span>(type) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">case</span> operatorType.add:<span class=\"comment\">//魔术字符串</span></span><br><span class=\"line\">    \t<span class=\"comment\">//do add</span></span><br><span class=\"line\">    \t<span class=\"keyword\">break</span>;</span><br><span class=\"line\"> \t<span class=\"comment\">/*---more code----*/</span></span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">operator(operatorType.add);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//因为我们不关心add之后是什么值，可以使用一些方式</span></span><br><span class=\"line\"><span class=\"comment\">//good</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> operatorType = &#123;</span><br><span class=\"line\">  add: <span class=\"built_in\">Symbol</span>(),</span><br><span class=\"line\">  update: <span class=\"built_in\">Symbol</span>(),</span><br><span class=\"line\">  remove: <span class=\"built_in\">Symbol</span>(),</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">operator</span>(<span class=\"params\">type</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">switch</span>(type) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">case</span> operatorType.add:<span class=\"comment\">//魔术字符串</span></span><br><span class=\"line\">    \t<span class=\"comment\">//do add</span></span><br><span class=\"line\">    \t<span class=\"keyword\">break</span>;</span><br><span class=\"line\"> \t<span class=\"comment\">/*---more code----*/</span></span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">operator(operatorType.add);</span><br></pre></td></tr></table></figure>\n<p>​</p>\n</li>\n</ul>\n"},{"title":"async 和 await","date":"2017-07-12T13:16:52.000Z","_content":"\n1. 基本用法\n\n\n\n\n\n   ```js\n   async function getPersonInformation() {\n   \tlet obj;\n   \tconsole.log('before get');\n     \tawait getPerson().then(data => {\n         console.log(data);\n         obj = data;\n     \t});\n     \tconsole.log('after get ' + obj.name + ' information');\n   }\n\n   function getPerson() {\n     return new Promise((resolve, reject) => {\n       setTimeout(function() {\n       \tconst p = {\n             name: 'lrh',\n             age: 18\n       \t};\n         \tresolve(p)\n       })\n     });\n   }\n\n   getPersonInformation();\n   ```\n\n   ​","source":"_posts/async和await.md","raw":"\n---\ntitle: async 和 await\ndate: 2017-07-12 21:16:52\ntags: ES6\n---\n\n1. 基本用法\n\n\n\n\n\n   ```js\n   async function getPersonInformation() {\n   \tlet obj;\n   \tconsole.log('before get');\n     \tawait getPerson().then(data => {\n         console.log(data);\n         obj = data;\n     \t});\n     \tconsole.log('after get ' + obj.name + ' information');\n   }\n\n   function getPerson() {\n     return new Promise((resolve, reject) => {\n       setTimeout(function() {\n       \tconst p = {\n             name: 'lrh',\n             age: 18\n       \t};\n         \tresolve(p)\n       })\n     });\n   }\n\n   getPersonInformation();\n   ```\n\n   ​","slug":"async和await","published":1,"updated":"2019-03-18T07:45:45.987Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ck2vg6gv8000q4cobs6bqf2ju","content":"<ol>\n<li>基本用法</li>\n</ol>\n   <figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">async</span> <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">getPersonInformation</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">\t<span class=\"keyword\">let</span> obj;</span><br><span class=\"line\">\t<span class=\"built_in\">console</span>.log(<span class=\"string\">'before get'</span>);</span><br><span class=\"line\">  \t<span class=\"keyword\">await</span> getPerson().then(<span class=\"function\"><span class=\"params\">data</span> =&gt;</span> &#123;</span><br><span class=\"line\">      <span class=\"built_in\">console</span>.log(data);</span><br><span class=\"line\">      obj = data;</span><br><span class=\"line\">  \t&#125;);</span><br><span class=\"line\">  \t<span class=\"built_in\">console</span>.log(<span class=\"string\">'after get '</span> + obj.name + <span class=\"string\">' information'</span>);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">getPerson</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> <span class=\"built_in\">Promise</span>(<span class=\"function\">(<span class=\"params\">resolve, reject</span>) =&gt;</span> &#123;</span><br><span class=\"line\">    setTimeout(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">    \t<span class=\"keyword\">const</span> p = &#123;</span><br><span class=\"line\">          name: <span class=\"string\">'lrh'</span>,</span><br><span class=\"line\">          age: <span class=\"number\">18</span></span><br><span class=\"line\">    \t&#125;;</span><br><span class=\"line\">      \tresolve(p)</span><br><span class=\"line\">    &#125;)</span><br><span class=\"line\">  &#125;);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">getPersonInformation();</span><br></pre></td></tr></table></figure>\n<p>   ​</p>\n","site":{"data":{"projects":[{"name":"AiTing","url":"https://github.com/renhongl/aiting","desc":"HTML5客户端音乐播放器"},{"name":"AiLiao","url":"https://github.com/renhongl/ailiao","desc":"网页聊天软件"},{"name":"Pomelo Editor","url":"https://renhongl.github.io/markdown-editor/","desc":"功能强大的在线Markdown编辑器"}]}},"excerpt":"","more":"<ol>\n<li>基本用法</li>\n</ol>\n   <figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">async</span> <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">getPersonInformation</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">\t<span class=\"keyword\">let</span> obj;</span><br><span class=\"line\">\t<span class=\"built_in\">console</span>.log(<span class=\"string\">'before get'</span>);</span><br><span class=\"line\">  \t<span class=\"keyword\">await</span> getPerson().then(<span class=\"function\"><span class=\"params\">data</span> =&gt;</span> &#123;</span><br><span class=\"line\">      <span class=\"built_in\">console</span>.log(data);</span><br><span class=\"line\">      obj = data;</span><br><span class=\"line\">  \t&#125;);</span><br><span class=\"line\">  \t<span class=\"built_in\">console</span>.log(<span class=\"string\">'after get '</span> + obj.name + <span class=\"string\">' information'</span>);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">getPerson</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> <span class=\"built_in\">Promise</span>(<span class=\"function\">(<span class=\"params\">resolve, reject</span>) =&gt;</span> &#123;</span><br><span class=\"line\">    setTimeout(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">    \t<span class=\"keyword\">const</span> p = &#123;</span><br><span class=\"line\">          name: <span class=\"string\">'lrh'</span>,</span><br><span class=\"line\">          age: <span class=\"number\">18</span></span><br><span class=\"line\">    \t&#125;;</span><br><span class=\"line\">      \tresolve(p)</span><br><span class=\"line\">    &#125;)</span><br><span class=\"line\">  &#125;);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">getPersonInformation();</span><br></pre></td></tr></table></figure>\n<p>   ​</p>\n"},{"title":"Callback， Promise, Async的使用区别","date":"2019-06-13T12:07:38.000Z","_content":"\n\n\n## callback\n* 普通情况下，遇到异步情况，可以使用callback的方式，在拿到数据后执行回调函数\n    ```js\n    import axios from 'axios';\n    const url = 'https://www.apiopen.top/weatherApi?city=成都';\n    const getWeatherByCallback = (url, callback) => {\n      axios.get(url).then(json => {\n        callback(json);\n      });\n    }\n    getWeatherByCallback(url, (data) => {\n      console.log(JSON.stringify(data));\n    });\n    ```\n## Promise\n* 回调方法太多会造成很多问题，所以我们会使用`.then()`的方式\n* 那么就需要Promise容器的支持\n    ```js\n    import axios from 'axios';\n    const url = 'https://www.apiopen.top/weatherApi?city=成都';\n    const getWeatherByPromise = (url) => {\n      return new Promise((resolve, reject) => {\n        try{\n          axios(url).then(json => {\n            resolve(json);\n          });\n        } catch(e){\n          reject(e);\n        }\n      });\n    }\n    getWeatherByPromise(url).then(json => {\n      console.log(JSON.stringify(json));\n    });\n    ```\n    \n## Async\n* 把异步的写法改成同步的写法，就需要使用async\n* async一旦遇到await就会返回，返回的是Promise对象\n* return 返回的值就是then中的参数\n    \n    ```js\n    import axios from 'axios';\n    const url = 'https://www.apiopen.top/weatherApi?city=成都';\n    const getWeatherByPyAsync = async (url) => {\n      return await axios.get(url);\n    }\n    getWeatherByPyAsync(url).then(json => {\n      console.log(JSON.stringify(json));\n    });\n    ```","source":"_posts/async-function.md","raw":"---\ntitle: Callback， Promise, Async的使用区别\ndate: 2019-06-13 20:07:38\ntags: ES6\n\n---\n\n\n\n## callback\n* 普通情况下，遇到异步情况，可以使用callback的方式，在拿到数据后执行回调函数\n    ```js\n    import axios from 'axios';\n    const url = 'https://www.apiopen.top/weatherApi?city=成都';\n    const getWeatherByCallback = (url, callback) => {\n      axios.get(url).then(json => {\n        callback(json);\n      });\n    }\n    getWeatherByCallback(url, (data) => {\n      console.log(JSON.stringify(data));\n    });\n    ```\n## Promise\n* 回调方法太多会造成很多问题，所以我们会使用`.then()`的方式\n* 那么就需要Promise容器的支持\n    ```js\n    import axios from 'axios';\n    const url = 'https://www.apiopen.top/weatherApi?city=成都';\n    const getWeatherByPromise = (url) => {\n      return new Promise((resolve, reject) => {\n        try{\n          axios(url).then(json => {\n            resolve(json);\n          });\n        } catch(e){\n          reject(e);\n        }\n      });\n    }\n    getWeatherByPromise(url).then(json => {\n      console.log(JSON.stringify(json));\n    });\n    ```\n    \n## Async\n* 把异步的写法改成同步的写法，就需要使用async\n* async一旦遇到await就会返回，返回的是Promise对象\n* return 返回的值就是then中的参数\n    \n    ```js\n    import axios from 'axios';\n    const url = 'https://www.apiopen.top/weatherApi?city=成都';\n    const getWeatherByPyAsync = async (url) => {\n      return await axios.get(url);\n    }\n    getWeatherByPyAsync(url).then(json => {\n      console.log(JSON.stringify(json));\n    });\n    ```","slug":"async-function","published":1,"updated":"2019-06-18T09:54:49.145Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ck2vg6gvb000t4cobkr8vt50p","content":"<h2 id=\"callback\"><a href=\"#callback\" class=\"headerlink\" title=\"callback\"></a>callback</h2><ul>\n<li>普通情况下，遇到异步情况，可以使用callback的方式，在拿到数据后执行回调函数  <figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> axios <span class=\"keyword\">from</span> <span class=\"string\">'axios'</span>;</span><br><span class=\"line\"><span class=\"keyword\">const</span> url = <span class=\"string\">'https://www.apiopen.top/weatherApi?city=成都'</span>;</span><br><span class=\"line\"><span class=\"keyword\">const</span> getWeatherByCallback = <span class=\"function\">(<span class=\"params\">url, callback</span>) =&gt;</span> &#123;</span><br><span class=\"line\">  axios.get(url).then(<span class=\"function\"><span class=\"params\">json</span> =&gt;</span> &#123;</span><br><span class=\"line\">    callback(json);</span><br><span class=\"line\">  &#125;);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">getWeatherByCallback(url, (data) =&gt; &#123;</span><br><span class=\"line\">  <span class=\"built_in\">console</span>.log(<span class=\"built_in\">JSON</span>.stringify(data));</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n<h2 id=\"Promise\"><a href=\"#Promise\" class=\"headerlink\" title=\"Promise\"></a>Promise</h2><ul>\n<li>回调方法太多会造成很多问题，所以我们会使用<code>.then()</code>的方式</li>\n<li>那么就需要Promise容器的支持  <figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> axios <span class=\"keyword\">from</span> <span class=\"string\">'axios'</span>;</span><br><span class=\"line\"><span class=\"keyword\">const</span> url = <span class=\"string\">'https://www.apiopen.top/weatherApi?city=成都'</span>;</span><br><span class=\"line\"><span class=\"keyword\">const</span> getWeatherByPromise = <span class=\"function\">(<span class=\"params\">url</span>) =&gt;</span> &#123;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> <span class=\"built_in\">Promise</span>(<span class=\"function\">(<span class=\"params\">resolve, reject</span>) =&gt;</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">try</span>&#123;</span><br><span class=\"line\">      axios(url).then(<span class=\"function\"><span class=\"params\">json</span> =&gt;</span> &#123;</span><br><span class=\"line\">        resolve(json);</span><br><span class=\"line\">      &#125;);</span><br><span class=\"line\">    &#125; <span class=\"keyword\">catch</span>(e)&#123;</span><br><span class=\"line\">      reject(e);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">getWeatherByPromise(url).then(<span class=\"function\"><span class=\"params\">json</span> =&gt;</span> &#123;</span><br><span class=\"line\">  <span class=\"built_in\">console</span>.log(<span class=\"built_in\">JSON</span>.stringify(json));</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n<h2 id=\"Async\"><a href=\"#Async\" class=\"headerlink\" title=\"Async\"></a>Async</h2><ul>\n<li>把异步的写法改成同步的写法，就需要使用async</li>\n<li>async一旦遇到await就会返回，返回的是Promise对象</li>\n<li><p>return 返回的值就是then中的参数</p>\n  <figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> axios <span class=\"keyword\">from</span> <span class=\"string\">'axios'</span>;</span><br><span class=\"line\"><span class=\"keyword\">const</span> url = <span class=\"string\">'https://www.apiopen.top/weatherApi?city=成都'</span>;</span><br><span class=\"line\"><span class=\"keyword\">const</span> getWeatherByPyAsync = <span class=\"keyword\">async</span> (url) =&gt; &#123;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> <span class=\"keyword\">await</span> axios.get(url);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">getWeatherByPyAsync(url).then(<span class=\"function\"><span class=\"params\">json</span> =&gt;</span> &#123;</span><br><span class=\"line\">  <span class=\"built_in\">console</span>.log(<span class=\"built_in\">JSON</span>.stringify(json));</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure></li>\n</ul>\n","site":{"data":{"projects":[{"name":"AiTing","url":"https://github.com/renhongl/aiting","desc":"HTML5客户端音乐播放器"},{"name":"AiLiao","url":"https://github.com/renhongl/ailiao","desc":"网页聊天软件"},{"name":"Pomelo Editor","url":"https://renhongl.github.io/markdown-editor/","desc":"功能强大的在线Markdown编辑器"}]}},"excerpt":"","more":"<h2 id=\"callback\"><a href=\"#callback\" class=\"headerlink\" title=\"callback\"></a>callback</h2><ul>\n<li>普通情况下，遇到异步情况，可以使用callback的方式，在拿到数据后执行回调函数  <figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> axios <span class=\"keyword\">from</span> <span class=\"string\">'axios'</span>;</span><br><span class=\"line\"><span class=\"keyword\">const</span> url = <span class=\"string\">'https://www.apiopen.top/weatherApi?city=成都'</span>;</span><br><span class=\"line\"><span class=\"keyword\">const</span> getWeatherByCallback = <span class=\"function\">(<span class=\"params\">url, callback</span>) =&gt;</span> &#123;</span><br><span class=\"line\">  axios.get(url).then(<span class=\"function\"><span class=\"params\">json</span> =&gt;</span> &#123;</span><br><span class=\"line\">    callback(json);</span><br><span class=\"line\">  &#125;);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">getWeatherByCallback(url, (data) =&gt; &#123;</span><br><span class=\"line\">  <span class=\"built_in\">console</span>.log(<span class=\"built_in\">JSON</span>.stringify(data));</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n<h2 id=\"Promise\"><a href=\"#Promise\" class=\"headerlink\" title=\"Promise\"></a>Promise</h2><ul>\n<li>回调方法太多会造成很多问题，所以我们会使用<code>.then()</code>的方式</li>\n<li>那么就需要Promise容器的支持  <figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> axios <span class=\"keyword\">from</span> <span class=\"string\">'axios'</span>;</span><br><span class=\"line\"><span class=\"keyword\">const</span> url = <span class=\"string\">'https://www.apiopen.top/weatherApi?city=成都'</span>;</span><br><span class=\"line\"><span class=\"keyword\">const</span> getWeatherByPromise = <span class=\"function\">(<span class=\"params\">url</span>) =&gt;</span> &#123;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> <span class=\"built_in\">Promise</span>(<span class=\"function\">(<span class=\"params\">resolve, reject</span>) =&gt;</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">try</span>&#123;</span><br><span class=\"line\">      axios(url).then(<span class=\"function\"><span class=\"params\">json</span> =&gt;</span> &#123;</span><br><span class=\"line\">        resolve(json);</span><br><span class=\"line\">      &#125;);</span><br><span class=\"line\">    &#125; <span class=\"keyword\">catch</span>(e)&#123;</span><br><span class=\"line\">      reject(e);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">getWeatherByPromise(url).then(<span class=\"function\"><span class=\"params\">json</span> =&gt;</span> &#123;</span><br><span class=\"line\">  <span class=\"built_in\">console</span>.log(<span class=\"built_in\">JSON</span>.stringify(json));</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n<h2 id=\"Async\"><a href=\"#Async\" class=\"headerlink\" title=\"Async\"></a>Async</h2><ul>\n<li>把异步的写法改成同步的写法，就需要使用async</li>\n<li>async一旦遇到await就会返回，返回的是Promise对象</li>\n<li><p>return 返回的值就是then中的参数</p>\n  <figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> axios <span class=\"keyword\">from</span> <span class=\"string\">'axios'</span>;</span><br><span class=\"line\"><span class=\"keyword\">const</span> url = <span class=\"string\">'https://www.apiopen.top/weatherApi?city=成都'</span>;</span><br><span class=\"line\"><span class=\"keyword\">const</span> getWeatherByPyAsync = <span class=\"keyword\">async</span> (url) =&gt; &#123;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> <span class=\"keyword\">await</span> axios.get(url);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">getWeatherByPyAsync(url).then(<span class=\"function\"><span class=\"params\">json</span> =&gt;</span> &#123;</span><br><span class=\"line\">  <span class=\"built_in\">console</span>.log(<span class=\"built_in\">JSON</span>.stringify(json));</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure></li>\n</ul>\n"},{"title":"计算机算法之---数据结构-二叉树","date":"2019-04-22T13:16:52.000Z","_content":"\n## 描述\n* 在计算机科学中，二叉树是每个结点最多有两个子树的树结构。通常子树被称作“左子树”（left subtree）和“右子树”（right subtree）。二叉树常被用于实现二叉查找树和二叉堆。\n* 一棵深度为k，且有2^k-1个节点的二叉树，称为满二叉树。这种树的特点是每一层上的节点数都是最大节点数。而在一棵二叉树中，除最后一层外，若其余层都是满的，并且最后一层或者是满的，或者是在右边缺少连续若干节点，则此二叉树为完全二叉树。具有n个节点的完全二叉树的深度为floor(log2n)+1。深度为k的完全二叉树，至少有2k-1个叶子节点，至多有2k-1个节点。\n\n## 实现接口\n* 中序遍历`inOrder(callback, node)`\n* 先序遍历`preOrder(callback, node)`\n* 后序遍历`postOrder(callback, node)`\n* 层级遍历`levelOrder(callback, node)`\n* 插入数据`insert(data, node)`\n* 删除数据`remove(data, node)`\n* 二叉树所有数据的快照`toString()`\n\n## 主要算法分析\n* 中序遍历就是先遍历左子树，如果左子树还有子树，就继续遍历其子树，并且先遍历左子树\n* 先序遍历和后序遍历类似，只是遍历每个节点左根右节点时，使用不同的顺序\n* 层级遍历是从根节点一层一层往下遍历 \n\n## 示例代码\n```js\nclass Node {\n    constructor(data) {\n        this.data = data;\n        this.left = null;\n        this.right = null;\n    }\n}\n\nclass BinaryTree {\n    constructor() {\n        this._root = null;\n    }\n\n    insert(data, node = this._root) {\n        let newNode = new Node(data);\n        if (node === null) {\n            this._root = newNode;\n        } else {\n            if (data <= node.data) {\n                if (!node.left) {\n                    node.left = new Node(data);\n                } else {\n                    this.insert(data, node.left);\n                }\n            } else {\n                if (!node.right) {\n                    node.right = new Node(data);\n                } else {\n                    this.insert(data, node.right);\n                }\n            }\n        }\n    }\n\n    //中序遍历\n    inOrder(callback, node = this._root) {\n        if (node === null) {\n            return;\n        }\n        if (node.left) {\n            this.inOrder(callback, node.left);\n        }\n        callback(node);\n        if (node.right) {\n            this.inOrder(callback, node.right);\n        }\n    }\n\n    //先序遍历\n    preOrder(callback, node = this._root) {\n        if (node === null) {\n            return;\n        }\n        callback(node);\n        if (node.left) {\n            this.preOrder(callback, node.left);\n        }\n        if (node.right) {\n            this.preOrder(callback, node.right);\n        }\n    }\n\n    //后序遍历\n    postOrder(callback, node = this._root) {\n        if (node === null) {\n            return;\n        }\n        if (node.left) {\n            this.postOrder(callback, node.left);\n        }\n        if (node.right) {\n            this.postOrder(callback, node.right);\n        }\n        callback(node);\n    }\n\n    //层级遍历\n    levelOrder(callback, node = this._root) {\n        if (node === null) {\n            return;\n        }\n        let queue = [];\n        queue.push(node);\n        while (queue.length > 0) {\n            let curr = queue.shift();\n            callback(curr);\n            curr.left && queue.push(curr.left);\n            curr.right && queue.push(curr.right);\n        }\n    }\n\n    remove(data, node = this._root) {\n        if (node === null) {\n            return null;\n        }\n        if (this._root.data === data) {\n            let curr = this._root;\n            this._root = null;\n            return curr;\n        }\n        if (node.left) {\n            let curr = node.left;\n            if (curr.data === data) {\n                node.left = null;\n                return curr;\n            } else {\n                this.remove(data, node.left);\n            }\n        }\n        if (node.right) {\n            let curr = node.right;\n            if (curr.data === data) {\n                node.right = null;\n                return curr;\n            } else {\n                this.remove(data, node.right);\n            }\n        }\n    }\n\n    toString() {\n        return JSON.stringify(this._root);\n    }\n}\n```\n\n## 测试代码\n```js\nlet bt = new BinaryTree();\n//初始化数据，测试各种遍历方法\nbt._root = {\n    data: 43,\n    left: {\n        left: {\n            data: 112,\n            left: {\n                data: 654,\n                left: null,\n                right: null\n            },\n            right: {\n                data: 89,\n                left: {\n                    data: 94,\n                    left: null,\n                    right: null\n                }\n            }\n        },\n        right: null,\n        data: 65\n    },\n    right: {\n        left: null,\n        right: null,\n        data: 756\n    }\n}\n\nbt.inOrder((node) => console.log(node.data));\nbt.preOrder((node) => console.log(node.data));\nbt.postOrder((node) => console.log(node.data));\nbt.levelOrder((node) => console.log(node.data));\n//测试插入和删除方法\nbt.insert(35, bt._root);\nbt.insert(52, bt._root);\nbt.insert(21, bt._root);\nbt.insert(11, bt._root);\nbt.insert(16, bt._root);\nbt.insert(87, bt._root);\nconsole.log(bt.toString());\nbt.remove(52);\nconsole.log(bt.toString());\n```\n","source":"_posts/binaryTree.md","raw":"---\ntitle: 计算机算法之---数据结构-二叉树\ndate: 2019-04-22 21:16:52\ntags: 计算机算法\n\n---\n\n## 描述\n* 在计算机科学中，二叉树是每个结点最多有两个子树的树结构。通常子树被称作“左子树”（left subtree）和“右子树”（right subtree）。二叉树常被用于实现二叉查找树和二叉堆。\n* 一棵深度为k，且有2^k-1个节点的二叉树，称为满二叉树。这种树的特点是每一层上的节点数都是最大节点数。而在一棵二叉树中，除最后一层外，若其余层都是满的，并且最后一层或者是满的，或者是在右边缺少连续若干节点，则此二叉树为完全二叉树。具有n个节点的完全二叉树的深度为floor(log2n)+1。深度为k的完全二叉树，至少有2k-1个叶子节点，至多有2k-1个节点。\n\n## 实现接口\n* 中序遍历`inOrder(callback, node)`\n* 先序遍历`preOrder(callback, node)`\n* 后序遍历`postOrder(callback, node)`\n* 层级遍历`levelOrder(callback, node)`\n* 插入数据`insert(data, node)`\n* 删除数据`remove(data, node)`\n* 二叉树所有数据的快照`toString()`\n\n## 主要算法分析\n* 中序遍历就是先遍历左子树，如果左子树还有子树，就继续遍历其子树，并且先遍历左子树\n* 先序遍历和后序遍历类似，只是遍历每个节点左根右节点时，使用不同的顺序\n* 层级遍历是从根节点一层一层往下遍历 \n\n## 示例代码\n```js\nclass Node {\n    constructor(data) {\n        this.data = data;\n        this.left = null;\n        this.right = null;\n    }\n}\n\nclass BinaryTree {\n    constructor() {\n        this._root = null;\n    }\n\n    insert(data, node = this._root) {\n        let newNode = new Node(data);\n        if (node === null) {\n            this._root = newNode;\n        } else {\n            if (data <= node.data) {\n                if (!node.left) {\n                    node.left = new Node(data);\n                } else {\n                    this.insert(data, node.left);\n                }\n            } else {\n                if (!node.right) {\n                    node.right = new Node(data);\n                } else {\n                    this.insert(data, node.right);\n                }\n            }\n        }\n    }\n\n    //中序遍历\n    inOrder(callback, node = this._root) {\n        if (node === null) {\n            return;\n        }\n        if (node.left) {\n            this.inOrder(callback, node.left);\n        }\n        callback(node);\n        if (node.right) {\n            this.inOrder(callback, node.right);\n        }\n    }\n\n    //先序遍历\n    preOrder(callback, node = this._root) {\n        if (node === null) {\n            return;\n        }\n        callback(node);\n        if (node.left) {\n            this.preOrder(callback, node.left);\n        }\n        if (node.right) {\n            this.preOrder(callback, node.right);\n        }\n    }\n\n    //后序遍历\n    postOrder(callback, node = this._root) {\n        if (node === null) {\n            return;\n        }\n        if (node.left) {\n            this.postOrder(callback, node.left);\n        }\n        if (node.right) {\n            this.postOrder(callback, node.right);\n        }\n        callback(node);\n    }\n\n    //层级遍历\n    levelOrder(callback, node = this._root) {\n        if (node === null) {\n            return;\n        }\n        let queue = [];\n        queue.push(node);\n        while (queue.length > 0) {\n            let curr = queue.shift();\n            callback(curr);\n            curr.left && queue.push(curr.left);\n            curr.right && queue.push(curr.right);\n        }\n    }\n\n    remove(data, node = this._root) {\n        if (node === null) {\n            return null;\n        }\n        if (this._root.data === data) {\n            let curr = this._root;\n            this._root = null;\n            return curr;\n        }\n        if (node.left) {\n            let curr = node.left;\n            if (curr.data === data) {\n                node.left = null;\n                return curr;\n            } else {\n                this.remove(data, node.left);\n            }\n        }\n        if (node.right) {\n            let curr = node.right;\n            if (curr.data === data) {\n                node.right = null;\n                return curr;\n            } else {\n                this.remove(data, node.right);\n            }\n        }\n    }\n\n    toString() {\n        return JSON.stringify(this._root);\n    }\n}\n```\n\n## 测试代码\n```js\nlet bt = new BinaryTree();\n//初始化数据，测试各种遍历方法\nbt._root = {\n    data: 43,\n    left: {\n        left: {\n            data: 112,\n            left: {\n                data: 654,\n                left: null,\n                right: null\n            },\n            right: {\n                data: 89,\n                left: {\n                    data: 94,\n                    left: null,\n                    right: null\n                }\n            }\n        },\n        right: null,\n        data: 65\n    },\n    right: {\n        left: null,\n        right: null,\n        data: 756\n    }\n}\n\nbt.inOrder((node) => console.log(node.data));\nbt.preOrder((node) => console.log(node.data));\nbt.postOrder((node) => console.log(node.data));\nbt.levelOrder((node) => console.log(node.data));\n//测试插入和删除方法\nbt.insert(35, bt._root);\nbt.insert(52, bt._root);\nbt.insert(21, bt._root);\nbt.insert(11, bt._root);\nbt.insert(16, bt._root);\nbt.insert(87, bt._root);\nconsole.log(bt.toString());\nbt.remove(52);\nconsole.log(bt.toString());\n```\n","slug":"binaryTree","published":1,"updated":"2019-06-19T09:46:56.014Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ck2vg6gvd000v4cobb0sd0zmp","content":"<h2 id=\"描述\"><a href=\"#描述\" class=\"headerlink\" title=\"描述\"></a>描述</h2><ul>\n<li>在计算机科学中，二叉树是每个结点最多有两个子树的树结构。通常子树被称作“左子树”（left subtree）和“右子树”（right subtree）。二叉树常被用于实现二叉查找树和二叉堆。</li>\n<li>一棵深度为k，且有2^k-1个节点的二叉树，称为满二叉树。这种树的特点是每一层上的节点数都是最大节点数。而在一棵二叉树中，除最后一层外，若其余层都是满的，并且最后一层或者是满的，或者是在右边缺少连续若干节点，则此二叉树为完全二叉树。具有n个节点的完全二叉树的深度为floor(log2n)+1。深度为k的完全二叉树，至少有2k-1个叶子节点，至多有2k-1个节点。</li>\n</ul>\n<h2 id=\"实现接口\"><a href=\"#实现接口\" class=\"headerlink\" title=\"实现接口\"></a>实现接口</h2><ul>\n<li>中序遍历<code>inOrder(callback, node)</code></li>\n<li>先序遍历<code>preOrder(callback, node)</code></li>\n<li>后序遍历<code>postOrder(callback, node)</code></li>\n<li>层级遍历<code>levelOrder(callback, node)</code></li>\n<li>插入数据<code>insert(data, node)</code></li>\n<li>删除数据<code>remove(data, node)</code></li>\n<li>二叉树所有数据的快照<code>toString()</code></li>\n</ul>\n<h2 id=\"主要算法分析\"><a href=\"#主要算法分析\" class=\"headerlink\" title=\"主要算法分析\"></a>主要算法分析</h2><ul>\n<li>中序遍历就是先遍历左子树，如果左子树还有子树，就继续遍历其子树，并且先遍历左子树</li>\n<li>先序遍历和后序遍历类似，只是遍历每个节点左根右节点时，使用不同的顺序</li>\n<li>层级遍历是从根节点一层一层往下遍历 </li>\n</ul>\n<h2 id=\"示例代码\"><a href=\"#示例代码\" class=\"headerlink\" title=\"示例代码\"></a>示例代码</h2><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br><span class=\"line\">102</span><br><span class=\"line\">103</span><br><span class=\"line\">104</span><br><span class=\"line\">105</span><br><span class=\"line\">106</span><br><span class=\"line\">107</span><br><span class=\"line\">108</span><br><span class=\"line\">109</span><br><span class=\"line\">110</span><br><span class=\"line\">111</span><br><span class=\"line\">112</span><br><span class=\"line\">113</span><br><span class=\"line\">114</span><br><span class=\"line\">115</span><br><span class=\"line\">116</span><br><span class=\"line\">117</span><br><span class=\"line\">118</span><br><span class=\"line\">119</span><br><span class=\"line\">120</span><br><span class=\"line\">121</span><br><span class=\"line\">122</span><br><span class=\"line\">123</span><br><span class=\"line\">124</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Node</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">constructor</span>(data) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.data = data;</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.left = <span class=\"literal\">null</span>;</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.right = <span class=\"literal\">null</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">BinaryTree</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">constructor</span>() &#123;</span><br><span class=\"line\">        <span class=\"keyword\">this</span>._root = <span class=\"literal\">null</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    insert(data, node = <span class=\"keyword\">this</span>._root) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">let</span> newNode = <span class=\"keyword\">new</span> Node(data);</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (node === <span class=\"literal\">null</span>) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">this</span>._root = newNode;</span><br><span class=\"line\">        &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (data &lt;= node.data) &#123;</span><br><span class=\"line\">                <span class=\"keyword\">if</span> (!node.left) &#123;</span><br><span class=\"line\">                    node.left = <span class=\"keyword\">new</span> Node(data);</span><br><span class=\"line\">                &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">                    <span class=\"keyword\">this</span>.insert(data, node.left);</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">            &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">                <span class=\"keyword\">if</span> (!node.right) &#123;</span><br><span class=\"line\">                    node.right = <span class=\"keyword\">new</span> Node(data);</span><br><span class=\"line\">                &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">                    <span class=\"keyword\">this</span>.insert(data, node.right);</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">//中序遍历</span></span><br><span class=\"line\">    inOrder(callback, node = <span class=\"keyword\">this</span>._root) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (node === <span class=\"literal\">null</span>) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (node.left) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">this</span>.inOrder(callback, node.left);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        callback(node);</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (node.right) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">this</span>.inOrder(callback, node.right);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">//先序遍历</span></span><br><span class=\"line\">    preOrder(callback, node = <span class=\"keyword\">this</span>._root) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (node === <span class=\"literal\">null</span>) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        callback(node);</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (node.left) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">this</span>.preOrder(callback, node.left);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (node.right) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">this</span>.preOrder(callback, node.right);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">//后序遍历</span></span><br><span class=\"line\">    postOrder(callback, node = <span class=\"keyword\">this</span>._root) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (node === <span class=\"literal\">null</span>) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (node.left) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">this</span>.postOrder(callback, node.left);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (node.right) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">this</span>.postOrder(callback, node.right);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        callback(node);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">//层级遍历</span></span><br><span class=\"line\">    levelOrder(callback, node = <span class=\"keyword\">this</span>._root) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (node === <span class=\"literal\">null</span>) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">let</span> queue = [];</span><br><span class=\"line\">        queue.push(node);</span><br><span class=\"line\">        <span class=\"keyword\">while</span> (queue.length &gt; <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">let</span> curr = queue.shift();</span><br><span class=\"line\">            callback(curr);</span><br><span class=\"line\">            curr.left &amp;&amp; queue.push(curr.left);</span><br><span class=\"line\">            curr.right &amp;&amp; queue.push(curr.right);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    remove(data, node = <span class=\"keyword\">this</span>._root) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (node === <span class=\"literal\">null</span>) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"literal\">null</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (<span class=\"keyword\">this</span>._root.data === data) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">let</span> curr = <span class=\"keyword\">this</span>._root;</span><br><span class=\"line\">            <span class=\"keyword\">this</span>._root = <span class=\"literal\">null</span>;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> curr;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (node.left) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">let</span> curr = node.left;</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (curr.data === data) &#123;</span><br><span class=\"line\">                node.left = <span class=\"literal\">null</span>;</span><br><span class=\"line\">                <span class=\"keyword\">return</span> curr;</span><br><span class=\"line\">            &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">                <span class=\"keyword\">this</span>.remove(data, node.left);</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (node.right) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">let</span> curr = node.right;</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (curr.data === data) &#123;</span><br><span class=\"line\">                node.right = <span class=\"literal\">null</span>;</span><br><span class=\"line\">                <span class=\"keyword\">return</span> curr;</span><br><span class=\"line\">            &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">                <span class=\"keyword\">this</span>.remove(data, node.right);</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    toString() &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"built_in\">JSON</span>.stringify(<span class=\"keyword\">this</span>._root);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h2 id=\"测试代码\"><a href=\"#测试代码\" class=\"headerlink\" title=\"测试代码\"></a>测试代码</h2><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> bt = <span class=\"keyword\">new</span> BinaryTree();</span><br><span class=\"line\"><span class=\"comment\">//初始化数据，测试各种遍历方法</span></span><br><span class=\"line\">bt._root = &#123;</span><br><span class=\"line\">    data: <span class=\"number\">43</span>,</span><br><span class=\"line\">    left: &#123;</span><br><span class=\"line\">        left: &#123;</span><br><span class=\"line\">            data: <span class=\"number\">112</span>,</span><br><span class=\"line\">            left: &#123;</span><br><span class=\"line\">                data: <span class=\"number\">654</span>,</span><br><span class=\"line\">                left: <span class=\"literal\">null</span>,</span><br><span class=\"line\">                right: <span class=\"literal\">null</span></span><br><span class=\"line\">            &#125;,</span><br><span class=\"line\">            right: &#123;</span><br><span class=\"line\">                data: <span class=\"number\">89</span>,</span><br><span class=\"line\">                left: &#123;</span><br><span class=\"line\">                    data: <span class=\"number\">94</span>,</span><br><span class=\"line\">                    left: <span class=\"literal\">null</span>,</span><br><span class=\"line\">                    right: <span class=\"literal\">null</span></span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;,</span><br><span class=\"line\">        right: <span class=\"literal\">null</span>,</span><br><span class=\"line\">        data: <span class=\"number\">65</span></span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    right: &#123;</span><br><span class=\"line\">        left: <span class=\"literal\">null</span>,</span><br><span class=\"line\">        right: <span class=\"literal\">null</span>,</span><br><span class=\"line\">        data: <span class=\"number\">756</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">bt.inOrder(<span class=\"function\">(<span class=\"params\">node</span>) =&gt;</span> <span class=\"built_in\">console</span>.log(node.data));</span><br><span class=\"line\">bt.preOrder(<span class=\"function\">(<span class=\"params\">node</span>) =&gt;</span> <span class=\"built_in\">console</span>.log(node.data));</span><br><span class=\"line\">bt.postOrder(<span class=\"function\">(<span class=\"params\">node</span>) =&gt;</span> <span class=\"built_in\">console</span>.log(node.data));</span><br><span class=\"line\">bt.levelOrder(<span class=\"function\">(<span class=\"params\">node</span>) =&gt;</span> <span class=\"built_in\">console</span>.log(node.data));</span><br><span class=\"line\"><span class=\"comment\">//测试插入和删除方法</span></span><br><span class=\"line\">bt.insert(<span class=\"number\">35</span>, bt._root);</span><br><span class=\"line\">bt.insert(<span class=\"number\">52</span>, bt._root);</span><br><span class=\"line\">bt.insert(<span class=\"number\">21</span>, bt._root);</span><br><span class=\"line\">bt.insert(<span class=\"number\">11</span>, bt._root);</span><br><span class=\"line\">bt.insert(<span class=\"number\">16</span>, bt._root);</span><br><span class=\"line\">bt.insert(<span class=\"number\">87</span>, bt._root);</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(bt.toString());</span><br><span class=\"line\">bt.remove(<span class=\"number\">52</span>);</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(bt.toString());</span><br></pre></td></tr></table></figure>\n","site":{"data":{"projects":[{"name":"AiTing","url":"https://github.com/renhongl/aiting","desc":"HTML5客户端音乐播放器"},{"name":"AiLiao","url":"https://github.com/renhongl/ailiao","desc":"网页聊天软件"},{"name":"Pomelo Editor","url":"https://renhongl.github.io/markdown-editor/","desc":"功能强大的在线Markdown编辑器"}]}},"excerpt":"","more":"<h2 id=\"描述\"><a href=\"#描述\" class=\"headerlink\" title=\"描述\"></a>描述</h2><ul>\n<li>在计算机科学中，二叉树是每个结点最多有两个子树的树结构。通常子树被称作“左子树”（left subtree）和“右子树”（right subtree）。二叉树常被用于实现二叉查找树和二叉堆。</li>\n<li>一棵深度为k，且有2^k-1个节点的二叉树，称为满二叉树。这种树的特点是每一层上的节点数都是最大节点数。而在一棵二叉树中，除最后一层外，若其余层都是满的，并且最后一层或者是满的，或者是在右边缺少连续若干节点，则此二叉树为完全二叉树。具有n个节点的完全二叉树的深度为floor(log2n)+1。深度为k的完全二叉树，至少有2k-1个叶子节点，至多有2k-1个节点。</li>\n</ul>\n<h2 id=\"实现接口\"><a href=\"#实现接口\" class=\"headerlink\" title=\"实现接口\"></a>实现接口</h2><ul>\n<li>中序遍历<code>inOrder(callback, node)</code></li>\n<li>先序遍历<code>preOrder(callback, node)</code></li>\n<li>后序遍历<code>postOrder(callback, node)</code></li>\n<li>层级遍历<code>levelOrder(callback, node)</code></li>\n<li>插入数据<code>insert(data, node)</code></li>\n<li>删除数据<code>remove(data, node)</code></li>\n<li>二叉树所有数据的快照<code>toString()</code></li>\n</ul>\n<h2 id=\"主要算法分析\"><a href=\"#主要算法分析\" class=\"headerlink\" title=\"主要算法分析\"></a>主要算法分析</h2><ul>\n<li>中序遍历就是先遍历左子树，如果左子树还有子树，就继续遍历其子树，并且先遍历左子树</li>\n<li>先序遍历和后序遍历类似，只是遍历每个节点左根右节点时，使用不同的顺序</li>\n<li>层级遍历是从根节点一层一层往下遍历 </li>\n</ul>\n<h2 id=\"示例代码\"><a href=\"#示例代码\" class=\"headerlink\" title=\"示例代码\"></a>示例代码</h2><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br><span class=\"line\">102</span><br><span class=\"line\">103</span><br><span class=\"line\">104</span><br><span class=\"line\">105</span><br><span class=\"line\">106</span><br><span class=\"line\">107</span><br><span class=\"line\">108</span><br><span class=\"line\">109</span><br><span class=\"line\">110</span><br><span class=\"line\">111</span><br><span class=\"line\">112</span><br><span class=\"line\">113</span><br><span class=\"line\">114</span><br><span class=\"line\">115</span><br><span class=\"line\">116</span><br><span class=\"line\">117</span><br><span class=\"line\">118</span><br><span class=\"line\">119</span><br><span class=\"line\">120</span><br><span class=\"line\">121</span><br><span class=\"line\">122</span><br><span class=\"line\">123</span><br><span class=\"line\">124</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Node</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">constructor</span>(data) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.data = data;</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.left = <span class=\"literal\">null</span>;</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.right = <span class=\"literal\">null</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">BinaryTree</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">constructor</span>() &#123;</span><br><span class=\"line\">        <span class=\"keyword\">this</span>._root = <span class=\"literal\">null</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    insert(data, node = <span class=\"keyword\">this</span>._root) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">let</span> newNode = <span class=\"keyword\">new</span> Node(data);</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (node === <span class=\"literal\">null</span>) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">this</span>._root = newNode;</span><br><span class=\"line\">        &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (data &lt;= node.data) &#123;</span><br><span class=\"line\">                <span class=\"keyword\">if</span> (!node.left) &#123;</span><br><span class=\"line\">                    node.left = <span class=\"keyword\">new</span> Node(data);</span><br><span class=\"line\">                &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">                    <span class=\"keyword\">this</span>.insert(data, node.left);</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">            &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">                <span class=\"keyword\">if</span> (!node.right) &#123;</span><br><span class=\"line\">                    node.right = <span class=\"keyword\">new</span> Node(data);</span><br><span class=\"line\">                &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">                    <span class=\"keyword\">this</span>.insert(data, node.right);</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">//中序遍历</span></span><br><span class=\"line\">    inOrder(callback, node = <span class=\"keyword\">this</span>._root) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (node === <span class=\"literal\">null</span>) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (node.left) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">this</span>.inOrder(callback, node.left);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        callback(node);</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (node.right) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">this</span>.inOrder(callback, node.right);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">//先序遍历</span></span><br><span class=\"line\">    preOrder(callback, node = <span class=\"keyword\">this</span>._root) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (node === <span class=\"literal\">null</span>) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        callback(node);</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (node.left) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">this</span>.preOrder(callback, node.left);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (node.right) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">this</span>.preOrder(callback, node.right);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">//后序遍历</span></span><br><span class=\"line\">    postOrder(callback, node = <span class=\"keyword\">this</span>._root) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (node === <span class=\"literal\">null</span>) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (node.left) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">this</span>.postOrder(callback, node.left);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (node.right) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">this</span>.postOrder(callback, node.right);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        callback(node);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">//层级遍历</span></span><br><span class=\"line\">    levelOrder(callback, node = <span class=\"keyword\">this</span>._root) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (node === <span class=\"literal\">null</span>) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">let</span> queue = [];</span><br><span class=\"line\">        queue.push(node);</span><br><span class=\"line\">        <span class=\"keyword\">while</span> (queue.length &gt; <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">let</span> curr = queue.shift();</span><br><span class=\"line\">            callback(curr);</span><br><span class=\"line\">            curr.left &amp;&amp; queue.push(curr.left);</span><br><span class=\"line\">            curr.right &amp;&amp; queue.push(curr.right);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    remove(data, node = <span class=\"keyword\">this</span>._root) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (node === <span class=\"literal\">null</span>) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"literal\">null</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (<span class=\"keyword\">this</span>._root.data === data) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">let</span> curr = <span class=\"keyword\">this</span>._root;</span><br><span class=\"line\">            <span class=\"keyword\">this</span>._root = <span class=\"literal\">null</span>;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> curr;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (node.left) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">let</span> curr = node.left;</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (curr.data === data) &#123;</span><br><span class=\"line\">                node.left = <span class=\"literal\">null</span>;</span><br><span class=\"line\">                <span class=\"keyword\">return</span> curr;</span><br><span class=\"line\">            &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">                <span class=\"keyword\">this</span>.remove(data, node.left);</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (node.right) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">let</span> curr = node.right;</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (curr.data === data) &#123;</span><br><span class=\"line\">                node.right = <span class=\"literal\">null</span>;</span><br><span class=\"line\">                <span class=\"keyword\">return</span> curr;</span><br><span class=\"line\">            &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">                <span class=\"keyword\">this</span>.remove(data, node.right);</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    toString() &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"built_in\">JSON</span>.stringify(<span class=\"keyword\">this</span>._root);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h2 id=\"测试代码\"><a href=\"#测试代码\" class=\"headerlink\" title=\"测试代码\"></a>测试代码</h2><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> bt = <span class=\"keyword\">new</span> BinaryTree();</span><br><span class=\"line\"><span class=\"comment\">//初始化数据，测试各种遍历方法</span></span><br><span class=\"line\">bt._root = &#123;</span><br><span class=\"line\">    data: <span class=\"number\">43</span>,</span><br><span class=\"line\">    left: &#123;</span><br><span class=\"line\">        left: &#123;</span><br><span class=\"line\">            data: <span class=\"number\">112</span>,</span><br><span class=\"line\">            left: &#123;</span><br><span class=\"line\">                data: <span class=\"number\">654</span>,</span><br><span class=\"line\">                left: <span class=\"literal\">null</span>,</span><br><span class=\"line\">                right: <span class=\"literal\">null</span></span><br><span class=\"line\">            &#125;,</span><br><span class=\"line\">            right: &#123;</span><br><span class=\"line\">                data: <span class=\"number\">89</span>,</span><br><span class=\"line\">                left: &#123;</span><br><span class=\"line\">                    data: <span class=\"number\">94</span>,</span><br><span class=\"line\">                    left: <span class=\"literal\">null</span>,</span><br><span class=\"line\">                    right: <span class=\"literal\">null</span></span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;,</span><br><span class=\"line\">        right: <span class=\"literal\">null</span>,</span><br><span class=\"line\">        data: <span class=\"number\">65</span></span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    right: &#123;</span><br><span class=\"line\">        left: <span class=\"literal\">null</span>,</span><br><span class=\"line\">        right: <span class=\"literal\">null</span>,</span><br><span class=\"line\">        data: <span class=\"number\">756</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">bt.inOrder(<span class=\"function\">(<span class=\"params\">node</span>) =&gt;</span> <span class=\"built_in\">console</span>.log(node.data));</span><br><span class=\"line\">bt.preOrder(<span class=\"function\">(<span class=\"params\">node</span>) =&gt;</span> <span class=\"built_in\">console</span>.log(node.data));</span><br><span class=\"line\">bt.postOrder(<span class=\"function\">(<span class=\"params\">node</span>) =&gt;</span> <span class=\"built_in\">console</span>.log(node.data));</span><br><span class=\"line\">bt.levelOrder(<span class=\"function\">(<span class=\"params\">node</span>) =&gt;</span> <span class=\"built_in\">console</span>.log(node.data));</span><br><span class=\"line\"><span class=\"comment\">//测试插入和删除方法</span></span><br><span class=\"line\">bt.insert(<span class=\"number\">35</span>, bt._root);</span><br><span class=\"line\">bt.insert(<span class=\"number\">52</span>, bt._root);</span><br><span class=\"line\">bt.insert(<span class=\"number\">21</span>, bt._root);</span><br><span class=\"line\">bt.insert(<span class=\"number\">11</span>, bt._root);</span><br><span class=\"line\">bt.insert(<span class=\"number\">16</span>, bt._root);</span><br><span class=\"line\">bt.insert(<span class=\"number\">87</span>, bt._root);</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(bt.toString());</span><br><span class=\"line\">bt.remove(<span class=\"number\">52</span>);</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(bt.toString());</span><br></pre></td></tr></table></figure>\n"},{"title":"计算机算法之---数据结构概括","date":"2019-04-16T13:16:52.000Z","_content":"\n## 线性表\n* 线性表是最基本、最简单、也是最常用的一种数据结构。\n* 线性表中数据元素之间的关系是一对一的关系，即除了第一个和最后一个数据元素之外，其它数据元素都是首尾相接的（注意，这句话只适用大部分线性表，而不是全部。比如，循环链表逻辑层次上也是一种线性表（存储层次上属于链式存储），但是把最后一个数据元素的尾指针指向了首位结点）。\n* 我们说“线性”和“非线性”，只在**逻辑层次**上讨论，而不考虑存储层次，所以双向链表和循环链表依旧是线性表。\n* 在数据结构逻辑层次上细分，线性表可分为**一般线性表**和**受限线性表**。一般线性表也就是我们通常所说的“线性表”，可以自由的删除或添加结点。受限线性表主要包括**栈**和**队列**，受限表示对结点的操作受限制。\n* 线性表的逻辑结构简单，便于实现和操作。因此，线性表这种数据结构在实际应用中是广泛采用的一种数据结构。\n\n### 顺序表---顺序存储的线性表\n* 顺序表是在计算机内存中以数组的形式保存的线性表，线性表的顺序存储是指用一组地址连续的存储单元依次存储线性表中的各个元素、使得线性表中在逻辑结构上相邻的数据元素存储在相邻的物理存储单元中，即通过数据元素物理存储的相邻关系来反映数据元素之间逻辑上的相邻关系，采用顺序存储结构的线性表通常称为顺序表。顺序表是将表中的结点依次存放在计算机内存中一组地址连续的存储单元中。\n\n\n\n### 链表---链式存储的线性表\n* 链表（Linked list）是一种常见的基础数据结构，是一种线性表，但是并不会按线性的顺序存储数据，而是在每一个节点里存到下一个节点的指针(Pointer)。由于不必须按顺序存储，链表在插入的时候可以达到O(1)的复杂度，比另一种线性表顺序表快得多，但是查找一个节点或者访问特定编号的节点则需要O(n)的时间，而顺序表相应的时间复杂度分别是O(logn)和O(1)。\n* 使用链表结构可以克服数组链表需要预先知道数据大小的缺点，链表结构可以充分利用计算机内存空间，实现灵活的内存动态管理。但是链表失去了数组随机读取的优点，同时链表由于增加了结点的指针域，空间开销比较大。\n* 在计算机科学中，链表作为一种基础的数据结构可以用来生成其它类型的数据结构。链表通常由一连串节点组成，每个节点包含任意的实例数据（data fields）和一或两个用来指向上一个/或下一个节点的位置的链接（\"links\"）。链表最明显的好处就是，常规数组排列关联项目的方式可能不同于这些数据项目在记忆体或磁盘上顺序，数据的访问往往要在不同的排列顺序中转换。而链表是一种自我指示数据类型，因为它包含指向另一个相同类型的数据的指针（链接）。链表允许插入和移除表上任意位置上的节点，但是不允许随机存取。链表有很多种不同的类型：单向链表，双向链表以及循环链表。\n\n### 栈\n* 栈是限定仅在表尾进行插入和删除操作的线性表。“栈”者，存储货物或供旅客住宿的地方，可引申为仓库、中转站，引入到计算机领域里，就是指数据暂时存储的地方，所以才有进栈、出栈的说法。\n* 栈作为一种数据结构，是一种只能在一端进行插入和删除操作的特殊线性表。它按照后进先出的原则存储数据，先进入的数据被压入栈底，最后的数据在栈顶，需要读数据的时候从栈顶开始弹出数据（最后一个数据被第一个读出来）。栈具有记忆作用，对栈的插入与删除操作中，不需要改变栈底指针。\n* 栈是允许在同一端进行插入和删除操作的特殊线性表。允许进行插入和删除操作的一端称为栈顶(top)，另一端为栈底(bottom)；栈底固定，而栈顶浮动；栈中元素个数为零时称为空栈。插入一般称为进栈（PUSH），删除则称为退栈（POP）。栈也称为后进先出表。\n* 栈可以用来在函数调用的时候存储断点，做递归时要用到栈！\n\n### 队列\n* 队列是一种特殊的线性表，特殊之处在于它只允许在表的前端（front）进行删除操作，而在表的后端（rear）进行插入操作，和栈一样，队列是一种操作受限制的线性表。进行插入操作的端称为队尾，进行删除操作的端称为队头。\n\n\n## 树\n* 在图论中，树（英语：Tree）是一种无向图（undirected graph），其中任意两个顶点间存在唯一一条路径。或者说，只要没有回路的连通图就是树。森林是指互相不交并树的集合。树图广泛应用于计算机科学的数据结构中，比如二叉查找树，堆，Trie树以及数据压缩中的霍夫曼树等等。\n\n### 二叉树\n* 在计算机科学中，二叉树是每个结点最多有两个子树的树结构。通常子树被称作“左子树”（left subtree）和“右子树”（right subtree）。二叉树常被用于实现二叉查找树和二叉堆。\n* 一棵深度为k，且有2^k-1个节点的二叉树，称为满二叉树。这种树的特点是每一层上的节点数都是最大节点数。而在一棵二叉树中，除最后一层外，若其余层都是满的，并且最后一层或者是满的，或者是在右边缺少连续若干节点，则此二叉树为完全二叉树。具有n个节点的完全二叉树的深度为floor(log2n)+1。深度为k的完全二叉树，至少有2k-1个叶子节点，至多有2k-1个节点。\n\n### 堆\n* 堆是一类特殊的树，堆的通用特点就是父节点会大于或小于所有子节点。\n* 如果一棵有根树的每一个结点至多有两个儿子，那么这棵树称为二叉树。\n* 如果一棵二叉树的每一个节点都带着一个值，且父亲的值总是比儿子的值要大，我们称这棵树为大顶二叉堆，如果是父亲比儿子都要小，那就是小顶二叉堆，统称为二叉堆。(其实一般都把二叉两个字省略掉，毕竟通常说的堆都是二叉堆，然而堆不止二叉堆)。这一个良好的性质注定了堆可以用来当作优先队列使用。\n\n\n\n### 森林\n\n## 图\n\n### 基本结构\n\n### 遍历\n\n### 最短路径","source":"_posts/data-structure.md","raw":"---\ntitle: 计算机算法之---数据结构概括\ndate: 2019-04-16 21:16:52\ntags: 计算机算法\n\n---\n\n## 线性表\n* 线性表是最基本、最简单、也是最常用的一种数据结构。\n* 线性表中数据元素之间的关系是一对一的关系，即除了第一个和最后一个数据元素之外，其它数据元素都是首尾相接的（注意，这句话只适用大部分线性表，而不是全部。比如，循环链表逻辑层次上也是一种线性表（存储层次上属于链式存储），但是把最后一个数据元素的尾指针指向了首位结点）。\n* 我们说“线性”和“非线性”，只在**逻辑层次**上讨论，而不考虑存储层次，所以双向链表和循环链表依旧是线性表。\n* 在数据结构逻辑层次上细分，线性表可分为**一般线性表**和**受限线性表**。一般线性表也就是我们通常所说的“线性表”，可以自由的删除或添加结点。受限线性表主要包括**栈**和**队列**，受限表示对结点的操作受限制。\n* 线性表的逻辑结构简单，便于实现和操作。因此，线性表这种数据结构在实际应用中是广泛采用的一种数据结构。\n\n### 顺序表---顺序存储的线性表\n* 顺序表是在计算机内存中以数组的形式保存的线性表，线性表的顺序存储是指用一组地址连续的存储单元依次存储线性表中的各个元素、使得线性表中在逻辑结构上相邻的数据元素存储在相邻的物理存储单元中，即通过数据元素物理存储的相邻关系来反映数据元素之间逻辑上的相邻关系，采用顺序存储结构的线性表通常称为顺序表。顺序表是将表中的结点依次存放在计算机内存中一组地址连续的存储单元中。\n\n\n\n### 链表---链式存储的线性表\n* 链表（Linked list）是一种常见的基础数据结构，是一种线性表，但是并不会按线性的顺序存储数据，而是在每一个节点里存到下一个节点的指针(Pointer)。由于不必须按顺序存储，链表在插入的时候可以达到O(1)的复杂度，比另一种线性表顺序表快得多，但是查找一个节点或者访问特定编号的节点则需要O(n)的时间，而顺序表相应的时间复杂度分别是O(logn)和O(1)。\n* 使用链表结构可以克服数组链表需要预先知道数据大小的缺点，链表结构可以充分利用计算机内存空间，实现灵活的内存动态管理。但是链表失去了数组随机读取的优点，同时链表由于增加了结点的指针域，空间开销比较大。\n* 在计算机科学中，链表作为一种基础的数据结构可以用来生成其它类型的数据结构。链表通常由一连串节点组成，每个节点包含任意的实例数据（data fields）和一或两个用来指向上一个/或下一个节点的位置的链接（\"links\"）。链表最明显的好处就是，常规数组排列关联项目的方式可能不同于这些数据项目在记忆体或磁盘上顺序，数据的访问往往要在不同的排列顺序中转换。而链表是一种自我指示数据类型，因为它包含指向另一个相同类型的数据的指针（链接）。链表允许插入和移除表上任意位置上的节点，但是不允许随机存取。链表有很多种不同的类型：单向链表，双向链表以及循环链表。\n\n### 栈\n* 栈是限定仅在表尾进行插入和删除操作的线性表。“栈”者，存储货物或供旅客住宿的地方，可引申为仓库、中转站，引入到计算机领域里，就是指数据暂时存储的地方，所以才有进栈、出栈的说法。\n* 栈作为一种数据结构，是一种只能在一端进行插入和删除操作的特殊线性表。它按照后进先出的原则存储数据，先进入的数据被压入栈底，最后的数据在栈顶，需要读数据的时候从栈顶开始弹出数据（最后一个数据被第一个读出来）。栈具有记忆作用，对栈的插入与删除操作中，不需要改变栈底指针。\n* 栈是允许在同一端进行插入和删除操作的特殊线性表。允许进行插入和删除操作的一端称为栈顶(top)，另一端为栈底(bottom)；栈底固定，而栈顶浮动；栈中元素个数为零时称为空栈。插入一般称为进栈（PUSH），删除则称为退栈（POP）。栈也称为后进先出表。\n* 栈可以用来在函数调用的时候存储断点，做递归时要用到栈！\n\n### 队列\n* 队列是一种特殊的线性表，特殊之处在于它只允许在表的前端（front）进行删除操作，而在表的后端（rear）进行插入操作，和栈一样，队列是一种操作受限制的线性表。进行插入操作的端称为队尾，进行删除操作的端称为队头。\n\n\n## 树\n* 在图论中，树（英语：Tree）是一种无向图（undirected graph），其中任意两个顶点间存在唯一一条路径。或者说，只要没有回路的连通图就是树。森林是指互相不交并树的集合。树图广泛应用于计算机科学的数据结构中，比如二叉查找树，堆，Trie树以及数据压缩中的霍夫曼树等等。\n\n### 二叉树\n* 在计算机科学中，二叉树是每个结点最多有两个子树的树结构。通常子树被称作“左子树”（left subtree）和“右子树”（right subtree）。二叉树常被用于实现二叉查找树和二叉堆。\n* 一棵深度为k，且有2^k-1个节点的二叉树，称为满二叉树。这种树的特点是每一层上的节点数都是最大节点数。而在一棵二叉树中，除最后一层外，若其余层都是满的，并且最后一层或者是满的，或者是在右边缺少连续若干节点，则此二叉树为完全二叉树。具有n个节点的完全二叉树的深度为floor(log2n)+1。深度为k的完全二叉树，至少有2k-1个叶子节点，至多有2k-1个节点。\n\n### 堆\n* 堆是一类特殊的树，堆的通用特点就是父节点会大于或小于所有子节点。\n* 如果一棵有根树的每一个结点至多有两个儿子，那么这棵树称为二叉树。\n* 如果一棵二叉树的每一个节点都带着一个值，且父亲的值总是比儿子的值要大，我们称这棵树为大顶二叉堆，如果是父亲比儿子都要小，那就是小顶二叉堆，统称为二叉堆。(其实一般都把二叉两个字省略掉，毕竟通常说的堆都是二叉堆，然而堆不止二叉堆)。这一个良好的性质注定了堆可以用来当作优先队列使用。\n\n\n\n### 森林\n\n## 图\n\n### 基本结构\n\n### 遍历\n\n### 最短路径","slug":"data-structure","published":1,"updated":"2019-06-19T10:02:47.976Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ck2vg6gvf000y4cobvrkfpjo3","content":"<h2 id=\"线性表\"><a href=\"#线性表\" class=\"headerlink\" title=\"线性表\"></a>线性表</h2><ul>\n<li>线性表是最基本、最简单、也是最常用的一种数据结构。</li>\n<li>线性表中数据元素之间的关系是一对一的关系，即除了第一个和最后一个数据元素之外，其它数据元素都是首尾相接的（注意，这句话只适用大部分线性表，而不是全部。比如，循环链表逻辑层次上也是一种线性表（存储层次上属于链式存储），但是把最后一个数据元素的尾指针指向了首位结点）。</li>\n<li>我们说“线性”和“非线性”，只在<strong>逻辑层次</strong>上讨论，而不考虑存储层次，所以双向链表和循环链表依旧是线性表。</li>\n<li>在数据结构逻辑层次上细分，线性表可分为<strong>一般线性表</strong>和<strong>受限线性表</strong>。一般线性表也就是我们通常所说的“线性表”，可以自由的删除或添加结点。受限线性表主要包括<strong>栈</strong>和<strong>队列</strong>，受限表示对结点的操作受限制。</li>\n<li>线性表的逻辑结构简单，便于实现和操作。因此，线性表这种数据结构在实际应用中是广泛采用的一种数据结构。</li>\n</ul>\n<h3 id=\"顺序表—顺序存储的线性表\"><a href=\"#顺序表—顺序存储的线性表\" class=\"headerlink\" title=\"顺序表—顺序存储的线性表\"></a>顺序表—顺序存储的线性表</h3><ul>\n<li>顺序表是在计算机内存中以数组的形式保存的线性表，线性表的顺序存储是指用一组地址连续的存储单元依次存储线性表中的各个元素、使得线性表中在逻辑结构上相邻的数据元素存储在相邻的物理存储单元中，即通过数据元素物理存储的相邻关系来反映数据元素之间逻辑上的相邻关系，采用顺序存储结构的线性表通常称为顺序表。顺序表是将表中的结点依次存放在计算机内存中一组地址连续的存储单元中。</li>\n</ul>\n<h3 id=\"链表—链式存储的线性表\"><a href=\"#链表—链式存储的线性表\" class=\"headerlink\" title=\"链表—链式存储的线性表\"></a>链表—链式存储的线性表</h3><ul>\n<li>链表（Linked list）是一种常见的基础数据结构，是一种线性表，但是并不会按线性的顺序存储数据，而是在每一个节点里存到下一个节点的指针(Pointer)。由于不必须按顺序存储，链表在插入的时候可以达到O(1)的复杂度，比另一种线性表顺序表快得多，但是查找一个节点或者访问特定编号的节点则需要O(n)的时间，而顺序表相应的时间复杂度分别是O(logn)和O(1)。</li>\n<li>使用链表结构可以克服数组链表需要预先知道数据大小的缺点，链表结构可以充分利用计算机内存空间，实现灵活的内存动态管理。但是链表失去了数组随机读取的优点，同时链表由于增加了结点的指针域，空间开销比较大。</li>\n<li>在计算机科学中，链表作为一种基础的数据结构可以用来生成其它类型的数据结构。链表通常由一连串节点组成，每个节点包含任意的实例数据（data fields）和一或两个用来指向上一个/或下一个节点的位置的链接（”links”）。链表最明显的好处就是，常规数组排列关联项目的方式可能不同于这些数据项目在记忆体或磁盘上顺序，数据的访问往往要在不同的排列顺序中转换。而链表是一种自我指示数据类型，因为它包含指向另一个相同类型的数据的指针（链接）。链表允许插入和移除表上任意位置上的节点，但是不允许随机存取。链表有很多种不同的类型：单向链表，双向链表以及循环链表。</li>\n</ul>\n<h3 id=\"栈\"><a href=\"#栈\" class=\"headerlink\" title=\"栈\"></a>栈</h3><ul>\n<li>栈是限定仅在表尾进行插入和删除操作的线性表。“栈”者，存储货物或供旅客住宿的地方，可引申为仓库、中转站，引入到计算机领域里，就是指数据暂时存储的地方，所以才有进栈、出栈的说法。</li>\n<li>栈作为一种数据结构，是一种只能在一端进行插入和删除操作的特殊线性表。它按照后进先出的原则存储数据，先进入的数据被压入栈底，最后的数据在栈顶，需要读数据的时候从栈顶开始弹出数据（最后一个数据被第一个读出来）。栈具有记忆作用，对栈的插入与删除操作中，不需要改变栈底指针。</li>\n<li>栈是允许在同一端进行插入和删除操作的特殊线性表。允许进行插入和删除操作的一端称为栈顶(top)，另一端为栈底(bottom)；栈底固定，而栈顶浮动；栈中元素个数为零时称为空栈。插入一般称为进栈（PUSH），删除则称为退栈（POP）。栈也称为后进先出表。</li>\n<li>栈可以用来在函数调用的时候存储断点，做递归时要用到栈！</li>\n</ul>\n<h3 id=\"队列\"><a href=\"#队列\" class=\"headerlink\" title=\"队列\"></a>队列</h3><ul>\n<li>队列是一种特殊的线性表，特殊之处在于它只允许在表的前端（front）进行删除操作，而在表的后端（rear）进行插入操作，和栈一样，队列是一种操作受限制的线性表。进行插入操作的端称为队尾，进行删除操作的端称为队头。</li>\n</ul>\n<h2 id=\"树\"><a href=\"#树\" class=\"headerlink\" title=\"树\"></a>树</h2><ul>\n<li>在图论中，树（英语：Tree）是一种无向图（undirected graph），其中任意两个顶点间存在唯一一条路径。或者说，只要没有回路的连通图就是树。森林是指互相不交并树的集合。树图广泛应用于计算机科学的数据结构中，比如二叉查找树，堆，Trie树以及数据压缩中的霍夫曼树等等。</li>\n</ul>\n<h3 id=\"二叉树\"><a href=\"#二叉树\" class=\"headerlink\" title=\"二叉树\"></a>二叉树</h3><ul>\n<li>在计算机科学中，二叉树是每个结点最多有两个子树的树结构。通常子树被称作“左子树”（left subtree）和“右子树”（right subtree）。二叉树常被用于实现二叉查找树和二叉堆。</li>\n<li>一棵深度为k，且有2^k-1个节点的二叉树，称为满二叉树。这种树的特点是每一层上的节点数都是最大节点数。而在一棵二叉树中，除最后一层外，若其余层都是满的，并且最后一层或者是满的，或者是在右边缺少连续若干节点，则此二叉树为完全二叉树。具有n个节点的完全二叉树的深度为floor(log2n)+1。深度为k的完全二叉树，至少有2k-1个叶子节点，至多有2k-1个节点。</li>\n</ul>\n<h3 id=\"堆\"><a href=\"#堆\" class=\"headerlink\" title=\"堆\"></a>堆</h3><ul>\n<li>堆是一类特殊的树，堆的通用特点就是父节点会大于或小于所有子节点。</li>\n<li>如果一棵有根树的每一个结点至多有两个儿子，那么这棵树称为二叉树。</li>\n<li>如果一棵二叉树的每一个节点都带着一个值，且父亲的值总是比儿子的值要大，我们称这棵树为大顶二叉堆，如果是父亲比儿子都要小，那就是小顶二叉堆，统称为二叉堆。(其实一般都把二叉两个字省略掉，毕竟通常说的堆都是二叉堆，然而堆不止二叉堆)。这一个良好的性质注定了堆可以用来当作优先队列使用。</li>\n</ul>\n<h3 id=\"森林\"><a href=\"#森林\" class=\"headerlink\" title=\"森林\"></a>森林</h3><h2 id=\"图\"><a href=\"#图\" class=\"headerlink\" title=\"图\"></a>图</h2><h3 id=\"基本结构\"><a href=\"#基本结构\" class=\"headerlink\" title=\"基本结构\"></a>基本结构</h3><h3 id=\"遍历\"><a href=\"#遍历\" class=\"headerlink\" title=\"遍历\"></a>遍历</h3><h3 id=\"最短路径\"><a href=\"#最短路径\" class=\"headerlink\" title=\"最短路径\"></a>最短路径</h3>","site":{"data":{"projects":[{"name":"AiTing","url":"https://github.com/renhongl/aiting","desc":"HTML5客户端音乐播放器"},{"name":"AiLiao","url":"https://github.com/renhongl/ailiao","desc":"网页聊天软件"},{"name":"Pomelo Editor","url":"https://renhongl.github.io/markdown-editor/","desc":"功能强大的在线Markdown编辑器"}]}},"excerpt":"","more":"<h2 id=\"线性表\"><a href=\"#线性表\" class=\"headerlink\" title=\"线性表\"></a>线性表</h2><ul>\n<li>线性表是最基本、最简单、也是最常用的一种数据结构。</li>\n<li>线性表中数据元素之间的关系是一对一的关系，即除了第一个和最后一个数据元素之外，其它数据元素都是首尾相接的（注意，这句话只适用大部分线性表，而不是全部。比如，循环链表逻辑层次上也是一种线性表（存储层次上属于链式存储），但是把最后一个数据元素的尾指针指向了首位结点）。</li>\n<li>我们说“线性”和“非线性”，只在<strong>逻辑层次</strong>上讨论，而不考虑存储层次，所以双向链表和循环链表依旧是线性表。</li>\n<li>在数据结构逻辑层次上细分，线性表可分为<strong>一般线性表</strong>和<strong>受限线性表</strong>。一般线性表也就是我们通常所说的“线性表”，可以自由的删除或添加结点。受限线性表主要包括<strong>栈</strong>和<strong>队列</strong>，受限表示对结点的操作受限制。</li>\n<li>线性表的逻辑结构简单，便于实现和操作。因此，线性表这种数据结构在实际应用中是广泛采用的一种数据结构。</li>\n</ul>\n<h3 id=\"顺序表—顺序存储的线性表\"><a href=\"#顺序表—顺序存储的线性表\" class=\"headerlink\" title=\"顺序表—顺序存储的线性表\"></a>顺序表—顺序存储的线性表</h3><ul>\n<li>顺序表是在计算机内存中以数组的形式保存的线性表，线性表的顺序存储是指用一组地址连续的存储单元依次存储线性表中的各个元素、使得线性表中在逻辑结构上相邻的数据元素存储在相邻的物理存储单元中，即通过数据元素物理存储的相邻关系来反映数据元素之间逻辑上的相邻关系，采用顺序存储结构的线性表通常称为顺序表。顺序表是将表中的结点依次存放在计算机内存中一组地址连续的存储单元中。</li>\n</ul>\n<h3 id=\"链表—链式存储的线性表\"><a href=\"#链表—链式存储的线性表\" class=\"headerlink\" title=\"链表—链式存储的线性表\"></a>链表—链式存储的线性表</h3><ul>\n<li>链表（Linked list）是一种常见的基础数据结构，是一种线性表，但是并不会按线性的顺序存储数据，而是在每一个节点里存到下一个节点的指针(Pointer)。由于不必须按顺序存储，链表在插入的时候可以达到O(1)的复杂度，比另一种线性表顺序表快得多，但是查找一个节点或者访问特定编号的节点则需要O(n)的时间，而顺序表相应的时间复杂度分别是O(logn)和O(1)。</li>\n<li>使用链表结构可以克服数组链表需要预先知道数据大小的缺点，链表结构可以充分利用计算机内存空间，实现灵活的内存动态管理。但是链表失去了数组随机读取的优点，同时链表由于增加了结点的指针域，空间开销比较大。</li>\n<li>在计算机科学中，链表作为一种基础的数据结构可以用来生成其它类型的数据结构。链表通常由一连串节点组成，每个节点包含任意的实例数据（data fields）和一或两个用来指向上一个/或下一个节点的位置的链接（”links”）。链表最明显的好处就是，常规数组排列关联项目的方式可能不同于这些数据项目在记忆体或磁盘上顺序，数据的访问往往要在不同的排列顺序中转换。而链表是一种自我指示数据类型，因为它包含指向另一个相同类型的数据的指针（链接）。链表允许插入和移除表上任意位置上的节点，但是不允许随机存取。链表有很多种不同的类型：单向链表，双向链表以及循环链表。</li>\n</ul>\n<h3 id=\"栈\"><a href=\"#栈\" class=\"headerlink\" title=\"栈\"></a>栈</h3><ul>\n<li>栈是限定仅在表尾进行插入和删除操作的线性表。“栈”者，存储货物或供旅客住宿的地方，可引申为仓库、中转站，引入到计算机领域里，就是指数据暂时存储的地方，所以才有进栈、出栈的说法。</li>\n<li>栈作为一种数据结构，是一种只能在一端进行插入和删除操作的特殊线性表。它按照后进先出的原则存储数据，先进入的数据被压入栈底，最后的数据在栈顶，需要读数据的时候从栈顶开始弹出数据（最后一个数据被第一个读出来）。栈具有记忆作用，对栈的插入与删除操作中，不需要改变栈底指针。</li>\n<li>栈是允许在同一端进行插入和删除操作的特殊线性表。允许进行插入和删除操作的一端称为栈顶(top)，另一端为栈底(bottom)；栈底固定，而栈顶浮动；栈中元素个数为零时称为空栈。插入一般称为进栈（PUSH），删除则称为退栈（POP）。栈也称为后进先出表。</li>\n<li>栈可以用来在函数调用的时候存储断点，做递归时要用到栈！</li>\n</ul>\n<h3 id=\"队列\"><a href=\"#队列\" class=\"headerlink\" title=\"队列\"></a>队列</h3><ul>\n<li>队列是一种特殊的线性表，特殊之处在于它只允许在表的前端（front）进行删除操作，而在表的后端（rear）进行插入操作，和栈一样，队列是一种操作受限制的线性表。进行插入操作的端称为队尾，进行删除操作的端称为队头。</li>\n</ul>\n<h2 id=\"树\"><a href=\"#树\" class=\"headerlink\" title=\"树\"></a>树</h2><ul>\n<li>在图论中，树（英语：Tree）是一种无向图（undirected graph），其中任意两个顶点间存在唯一一条路径。或者说，只要没有回路的连通图就是树。森林是指互相不交并树的集合。树图广泛应用于计算机科学的数据结构中，比如二叉查找树，堆，Trie树以及数据压缩中的霍夫曼树等等。</li>\n</ul>\n<h3 id=\"二叉树\"><a href=\"#二叉树\" class=\"headerlink\" title=\"二叉树\"></a>二叉树</h3><ul>\n<li>在计算机科学中，二叉树是每个结点最多有两个子树的树结构。通常子树被称作“左子树”（left subtree）和“右子树”（right subtree）。二叉树常被用于实现二叉查找树和二叉堆。</li>\n<li>一棵深度为k，且有2^k-1个节点的二叉树，称为满二叉树。这种树的特点是每一层上的节点数都是最大节点数。而在一棵二叉树中，除最后一层外，若其余层都是满的，并且最后一层或者是满的，或者是在右边缺少连续若干节点，则此二叉树为完全二叉树。具有n个节点的完全二叉树的深度为floor(log2n)+1。深度为k的完全二叉树，至少有2k-1个叶子节点，至多有2k-1个节点。</li>\n</ul>\n<h3 id=\"堆\"><a href=\"#堆\" class=\"headerlink\" title=\"堆\"></a>堆</h3><ul>\n<li>堆是一类特殊的树，堆的通用特点就是父节点会大于或小于所有子节点。</li>\n<li>如果一棵有根树的每一个结点至多有两个儿子，那么这棵树称为二叉树。</li>\n<li>如果一棵二叉树的每一个节点都带着一个值，且父亲的值总是比儿子的值要大，我们称这棵树为大顶二叉堆，如果是父亲比儿子都要小，那就是小顶二叉堆，统称为二叉堆。(其实一般都把二叉两个字省略掉，毕竟通常说的堆都是二叉堆，然而堆不止二叉堆)。这一个良好的性质注定了堆可以用来当作优先队列使用。</li>\n</ul>\n<h3 id=\"森林\"><a href=\"#森林\" class=\"headerlink\" title=\"森林\"></a>森林</h3><h2 id=\"图\"><a href=\"#图\" class=\"headerlink\" title=\"图\"></a>图</h2><h3 id=\"基本结构\"><a href=\"#基本结构\" class=\"headerlink\" title=\"基本结构\"></a>基本结构</h3><h3 id=\"遍历\"><a href=\"#遍历\" class=\"headerlink\" title=\"遍历\"></a>遍历</h3><h3 id=\"最短路径\"><a href=\"#最短路径\" class=\"headerlink\" title=\"最短路径\"></a>最短路径</h3>"},{"title":"Flux","date":"2018-05-10T13:16:52.000Z","_content":"\n\n\n# Flux是什么？\n\n\n\n* 一种架构思想。\n* 专门解决软件的结构问题。\n\n# 传统MVC\n\n![](https://res.infoq.com/news/2014/05/facebook-mvc-flux/en/resources/flux-react-mvc.png)\n\n# Flux\n\n![](https://res.infoq.com/news/2014/05/facebook-mvc-flux/en/resources/flux-react.png)\n\n由图可见，Flux是单向数据流动。\n1. 用户访问View\n1. View发出Action\n1. 派发器发出Action, 要去Store进行更新\n1. Store更新数据, 提醒View需要更新页面\n1. View更新页面\n\n# 基本概念\nFlux将应用分成四个部分。\n* View: 视图层\n* Action: 动作，视图层发出的消息，比如鼠标点击\n* Dispatcher: 派发器，用来接收Actions，执行回调函数\n* Store: 数据层，用来存放应用的状态，一旦发生改变，就提醒View更新页面\n\n\n\n\n\n\n\n\n","source":"_posts/flux.md","raw":"\n---\ntitle: Flux\ndate: 2018-05-10 21:16:52\ntags: Redux\n---\n\n\n\n# Flux是什么？\n\n\n\n* 一种架构思想。\n* 专门解决软件的结构问题。\n\n# 传统MVC\n\n![](https://res.infoq.com/news/2014/05/facebook-mvc-flux/en/resources/flux-react-mvc.png)\n\n# Flux\n\n![](https://res.infoq.com/news/2014/05/facebook-mvc-flux/en/resources/flux-react.png)\n\n由图可见，Flux是单向数据流动。\n1. 用户访问View\n1. View发出Action\n1. 派发器发出Action, 要去Store进行更新\n1. Store更新数据, 提醒View需要更新页面\n1. View更新页面\n\n# 基本概念\nFlux将应用分成四个部分。\n* View: 视图层\n* Action: 动作，视图层发出的消息，比如鼠标点击\n* Dispatcher: 派发器，用来接收Actions，执行回调函数\n* Store: 数据层，用来存放应用的状态，一旦发生改变，就提醒View更新页面\n\n\n\n\n\n\n\n\n","slug":"flux","published":1,"updated":"2019-03-18T07:42:06.024Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ck2vg6gvh00104cobl3teqf0a","content":"<h1 id=\"Flux是什么？\"><a href=\"#Flux是什么？\" class=\"headerlink\" title=\"Flux是什么？\"></a>Flux是什么？</h1><ul>\n<li>一种架构思想。</li>\n<li>专门解决软件的结构问题。</li>\n</ul>\n<h1 id=\"传统MVC\"><a href=\"#传统MVC\" class=\"headerlink\" title=\"传统MVC\"></a>传统MVC</h1><p><img src=\"https://res.infoq.com/news/2014/05/facebook-mvc-flux/en/resources/flux-react-mvc.png\" alt=\"\"></p>\n<h1 id=\"Flux\"><a href=\"#Flux\" class=\"headerlink\" title=\"Flux\"></a>Flux</h1><p><img src=\"https://res.infoq.com/news/2014/05/facebook-mvc-flux/en/resources/flux-react.png\" alt=\"\"></p>\n<p>由图可见，Flux是单向数据流动。</p>\n<ol>\n<li>用户访问View</li>\n<li>View发出Action</li>\n<li>派发器发出Action, 要去Store进行更新</li>\n<li>Store更新数据, 提醒View需要更新页面</li>\n<li>View更新页面</li>\n</ol>\n<h1 id=\"基本概念\"><a href=\"#基本概念\" class=\"headerlink\" title=\"基本概念\"></a>基本概念</h1><p>Flux将应用分成四个部分。</p>\n<ul>\n<li>View: 视图层</li>\n<li>Action: 动作，视图层发出的消息，比如鼠标点击</li>\n<li>Dispatcher: 派发器，用来接收Actions，执行回调函数</li>\n<li>Store: 数据层，用来存放应用的状态，一旦发生改变，就提醒View更新页面</li>\n</ul>\n","site":{"data":{"projects":[{"name":"AiTing","url":"https://github.com/renhongl/aiting","desc":"HTML5客户端音乐播放器"},{"name":"AiLiao","url":"https://github.com/renhongl/ailiao","desc":"网页聊天软件"},{"name":"Pomelo Editor","url":"https://renhongl.github.io/markdown-editor/","desc":"功能强大的在线Markdown编辑器"}]}},"excerpt":"","more":"<h1 id=\"Flux是什么？\"><a href=\"#Flux是什么？\" class=\"headerlink\" title=\"Flux是什么？\"></a>Flux是什么？</h1><ul>\n<li>一种架构思想。</li>\n<li>专门解决软件的结构问题。</li>\n</ul>\n<h1 id=\"传统MVC\"><a href=\"#传统MVC\" class=\"headerlink\" title=\"传统MVC\"></a>传统MVC</h1><p><img src=\"https://res.infoq.com/news/2014/05/facebook-mvc-flux/en/resources/flux-react-mvc.png\" alt=\"\"></p>\n<h1 id=\"Flux\"><a href=\"#Flux\" class=\"headerlink\" title=\"Flux\"></a>Flux</h1><p><img src=\"https://res.infoq.com/news/2014/05/facebook-mvc-flux/en/resources/flux-react.png\" alt=\"\"></p>\n<p>由图可见，Flux是单向数据流动。</p>\n<ol>\n<li>用户访问View</li>\n<li>View发出Action</li>\n<li>派发器发出Action, 要去Store进行更新</li>\n<li>Store更新数据, 提醒View需要更新页面</li>\n<li>View更新页面</li>\n</ol>\n<h1 id=\"基本概念\"><a href=\"#基本概念\" class=\"headerlink\" title=\"基本概念\"></a>基本概念</h1><p>Flux将应用分成四个部分。</p>\n<ul>\n<li>View: 视图层</li>\n<li>Action: 动作，视图层发出的消息，比如鼠标点击</li>\n<li>Dispatcher: 派发器，用来接收Actions，执行回调函数</li>\n<li>Store: 数据层，用来存放应用的状态，一旦发生改变，就提醒View更新页面</li>\n</ul>\n"},{"title":"计算机算法之---数据结构-堆","date":"2019-04-23T13:16:52.000Z","_content":"\n\n## 描述\n* 堆是一类特殊的树，堆的通用特点就是父节点会大于或小于所有子节点。\n* 如果一棵有根树的每一个结点至多有两个儿子，那么这棵树称为二叉树。\n* 如果一棵二叉树的每一个节点都带着一个值，且父亲的值总是比儿子的值要大，我们称这棵树为大顶二叉堆，如果是父亲比儿子都要小，那就是小顶二叉堆，统称为二叉堆。(其实一般都把二叉两个字省略掉，毕竟通常说的堆都是二叉堆，然而堆不止二叉堆)。这一个良好的性质注定了堆可以用来当作优先队列使用。\n\n## 实现接口\n* 中序遍历`inOrder(callback, node)`\n* 先序遍历`preOrder(callback, node)`\n* 后序遍历`postOrder(callback, node)`\n* 层级遍历`levelOrder(callback, node)`\n* **按顺序插入数据**`insert(data, node)`，最大的在最上面，这是与二叉树不同的地方\n* 删除数据`remove(data, node)`\n* 二叉树所有数据的快照`toString()`\n\n## 主要算法分析\n* 与二叉树最主要的区别就是，在插入时，根节点的值始终大于左右节点的值。\n* 如果插入的值大于根节点的值，那么该值会替换根节点的值，根节点的值会往下插入。\n\n## 示例代码\n```js\nclass Node {\n    constructor(data) {\n        this.data = data;\n        this.left = null;\n        this.right = null;\n    }\n}\n\nclass BinaryTree {\n    constructor() {\n        this._root = null;\n    }\n\n    insert(data, node = this._root) {\n        let newNode = new Node(data);\n        if (node === null) {\n            this._root = newNode;\n        } else {\n            //如果插入的数据比根节点的数据大\n            //那么，将插入数据与根节点数据交换，再进行插入\n            if (data > node.data) {\n                let temp = data;\n                data = node.data;\n                node.data = temp;\n                this.insert(data, node);\n            } else {\n                if (!node.left) {\n                    return node.left = new Node(data);\n                }\n                if (!node.right) {\n                    return node.right = new Node(data);\n                }\n                if (node.left && node.left.data <= data) {\n                    this.insert(data, node.left);\n                } else {\n                    this.insert(data, node.right);\n                }\n            }\n        }\n    }\n\n    //中序遍历\n    inOrder(callback, node = this._root) {\n        if (node === null) {\n            return;\n        }\n        if (node.left) {\n            this.inOrder(callback, node.left);\n        }\n        callback(node);\n        if (node.right) {\n            this.inOrder(callback, node.right);\n        }\n    }\n\n    //先序遍历\n    preOrder(callback, node = this._root) {\n        if (node === null) {\n            return;\n        }\n        callback(node);\n        if (node.left) {\n            this.preOrder(callback, node.left);\n        }\n        if (node.right) {\n            this.preOrder(callback, node.right);\n        }\n    }\n\n    //后序遍历\n    postOrder(callback, node = this._root) {\n        if (node === null) {\n            return;\n        }\n        if (node.left) {\n            this.postOrder(callback, node.left);\n        }\n        if (node.right) {\n            this.postOrder(callback, node.right);\n        }\n        callback(node);\n    }\n\n    //层级遍历\n    levelOrder(callback, node = this._root) {\n        if (node === null) {\n            return;\n        }\n        let queue = [];\n        queue.push(node);\n        while (queue.length > 0) {\n            let curr = queue.shift();\n            callback(curr);\n            curr.left && queue.push(curr.left);\n            curr.right && queue.push(curr.right);\n        }\n    }\n\n    remove(data, node = this._root) {\n        if (node === null) {\n            return null;\n        }\n        if (this._root.data === data) {\n            let curr = this._root;\n            this._root = null;\n            return curr;\n        }\n        if (node.left) {\n            let curr = node.left;\n            if (curr.data === data) {\n                node.left = null;\n                return curr;\n            } else {\n                this.remove(data, node.left);\n            }\n        }\n        if (node.right) {\n            let curr = node.right;\n            if (curr.data === data) {\n                node.right = null;\n                return curr;\n            } else {\n                this.remove(data, node.right);\n            }\n        }\n    }\n\n    toString() {\n        return JSON.stringify(this._root);\n    }\n}\n```\n\n## 测试代码\n```js\nlet bt = new BinaryTree();\nbt.insert(35, bt._root);\nbt.insert(52, bt._root);\nbt.insert(21, bt._root);\nbt.insert(11, bt._root);\nbt.insert(16, bt._root);\nbt.insert(87, bt._root);\nbt.insert(100, bt._root);\nconsole.log(bt.toString());\nbt.levelOrder((node) => console.log(node.data));\n```\n","source":"_posts/heap.md","raw":"---\ntitle: 计算机算法之---数据结构-堆\ndate: 2019-04-23 21:16:52\ntags: 计算机算法\n\n---\n\n\n## 描述\n* 堆是一类特殊的树，堆的通用特点就是父节点会大于或小于所有子节点。\n* 如果一棵有根树的每一个结点至多有两个儿子，那么这棵树称为二叉树。\n* 如果一棵二叉树的每一个节点都带着一个值，且父亲的值总是比儿子的值要大，我们称这棵树为大顶二叉堆，如果是父亲比儿子都要小，那就是小顶二叉堆，统称为二叉堆。(其实一般都把二叉两个字省略掉，毕竟通常说的堆都是二叉堆，然而堆不止二叉堆)。这一个良好的性质注定了堆可以用来当作优先队列使用。\n\n## 实现接口\n* 中序遍历`inOrder(callback, node)`\n* 先序遍历`preOrder(callback, node)`\n* 后序遍历`postOrder(callback, node)`\n* 层级遍历`levelOrder(callback, node)`\n* **按顺序插入数据**`insert(data, node)`，最大的在最上面，这是与二叉树不同的地方\n* 删除数据`remove(data, node)`\n* 二叉树所有数据的快照`toString()`\n\n## 主要算法分析\n* 与二叉树最主要的区别就是，在插入时，根节点的值始终大于左右节点的值。\n* 如果插入的值大于根节点的值，那么该值会替换根节点的值，根节点的值会往下插入。\n\n## 示例代码\n```js\nclass Node {\n    constructor(data) {\n        this.data = data;\n        this.left = null;\n        this.right = null;\n    }\n}\n\nclass BinaryTree {\n    constructor() {\n        this._root = null;\n    }\n\n    insert(data, node = this._root) {\n        let newNode = new Node(data);\n        if (node === null) {\n            this._root = newNode;\n        } else {\n            //如果插入的数据比根节点的数据大\n            //那么，将插入数据与根节点数据交换，再进行插入\n            if (data > node.data) {\n                let temp = data;\n                data = node.data;\n                node.data = temp;\n                this.insert(data, node);\n            } else {\n                if (!node.left) {\n                    return node.left = new Node(data);\n                }\n                if (!node.right) {\n                    return node.right = new Node(data);\n                }\n                if (node.left && node.left.data <= data) {\n                    this.insert(data, node.left);\n                } else {\n                    this.insert(data, node.right);\n                }\n            }\n        }\n    }\n\n    //中序遍历\n    inOrder(callback, node = this._root) {\n        if (node === null) {\n            return;\n        }\n        if (node.left) {\n            this.inOrder(callback, node.left);\n        }\n        callback(node);\n        if (node.right) {\n            this.inOrder(callback, node.right);\n        }\n    }\n\n    //先序遍历\n    preOrder(callback, node = this._root) {\n        if (node === null) {\n            return;\n        }\n        callback(node);\n        if (node.left) {\n            this.preOrder(callback, node.left);\n        }\n        if (node.right) {\n            this.preOrder(callback, node.right);\n        }\n    }\n\n    //后序遍历\n    postOrder(callback, node = this._root) {\n        if (node === null) {\n            return;\n        }\n        if (node.left) {\n            this.postOrder(callback, node.left);\n        }\n        if (node.right) {\n            this.postOrder(callback, node.right);\n        }\n        callback(node);\n    }\n\n    //层级遍历\n    levelOrder(callback, node = this._root) {\n        if (node === null) {\n            return;\n        }\n        let queue = [];\n        queue.push(node);\n        while (queue.length > 0) {\n            let curr = queue.shift();\n            callback(curr);\n            curr.left && queue.push(curr.left);\n            curr.right && queue.push(curr.right);\n        }\n    }\n\n    remove(data, node = this._root) {\n        if (node === null) {\n            return null;\n        }\n        if (this._root.data === data) {\n            let curr = this._root;\n            this._root = null;\n            return curr;\n        }\n        if (node.left) {\n            let curr = node.left;\n            if (curr.data === data) {\n                node.left = null;\n                return curr;\n            } else {\n                this.remove(data, node.left);\n            }\n        }\n        if (node.right) {\n            let curr = node.right;\n            if (curr.data === data) {\n                node.right = null;\n                return curr;\n            } else {\n                this.remove(data, node.right);\n            }\n        }\n    }\n\n    toString() {\n        return JSON.stringify(this._root);\n    }\n}\n```\n\n## 测试代码\n```js\nlet bt = new BinaryTree();\nbt.insert(35, bt._root);\nbt.insert(52, bt._root);\nbt.insert(21, bt._root);\nbt.insert(11, bt._root);\nbt.insert(16, bt._root);\nbt.insert(87, bt._root);\nbt.insert(100, bt._root);\nconsole.log(bt.toString());\nbt.levelOrder((node) => console.log(node.data));\n```\n","slug":"heap","published":1,"updated":"2019-06-19T09:47:11.849Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ck2vg6gvj00124cobeqaqi4p2","content":"<h2 id=\"描述\"><a href=\"#描述\" class=\"headerlink\" title=\"描述\"></a>描述</h2><ul>\n<li>堆是一类特殊的树，堆的通用特点就是父节点会大于或小于所有子节点。</li>\n<li>如果一棵有根树的每一个结点至多有两个儿子，那么这棵树称为二叉树。</li>\n<li>如果一棵二叉树的每一个节点都带着一个值，且父亲的值总是比儿子的值要大，我们称这棵树为大顶二叉堆，如果是父亲比儿子都要小，那就是小顶二叉堆，统称为二叉堆。(其实一般都把二叉两个字省略掉，毕竟通常说的堆都是二叉堆，然而堆不止二叉堆)。这一个良好的性质注定了堆可以用来当作优先队列使用。</li>\n</ul>\n<h2 id=\"实现接口\"><a href=\"#实现接口\" class=\"headerlink\" title=\"实现接口\"></a>实现接口</h2><ul>\n<li>中序遍历<code>inOrder(callback, node)</code></li>\n<li>先序遍历<code>preOrder(callback, node)</code></li>\n<li>后序遍历<code>postOrder(callback, node)</code></li>\n<li>层级遍历<code>levelOrder(callback, node)</code></li>\n<li><strong>按顺序插入数据</strong><code>insert(data, node)</code>，最大的在最上面，这是与二叉树不同的地方</li>\n<li>删除数据<code>remove(data, node)</code></li>\n<li>二叉树所有数据的快照<code>toString()</code></li>\n</ul>\n<h2 id=\"主要算法分析\"><a href=\"#主要算法分析\" class=\"headerlink\" title=\"主要算法分析\"></a>主要算法分析</h2><ul>\n<li>与二叉树最主要的区别就是，在插入时，根节点的值始终大于左右节点的值。</li>\n<li>如果插入的值大于根节点的值，那么该值会替换根节点的值，根节点的值会往下插入。</li>\n</ul>\n<h2 id=\"示例代码\"><a href=\"#示例代码\" class=\"headerlink\" title=\"示例代码\"></a>示例代码</h2><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br><span class=\"line\">102</span><br><span class=\"line\">103</span><br><span class=\"line\">104</span><br><span class=\"line\">105</span><br><span class=\"line\">106</span><br><span class=\"line\">107</span><br><span class=\"line\">108</span><br><span class=\"line\">109</span><br><span class=\"line\">110</span><br><span class=\"line\">111</span><br><span class=\"line\">112</span><br><span class=\"line\">113</span><br><span class=\"line\">114</span><br><span class=\"line\">115</span><br><span class=\"line\">116</span><br><span class=\"line\">117</span><br><span class=\"line\">118</span><br><span class=\"line\">119</span><br><span class=\"line\">120</span><br><span class=\"line\">121</span><br><span class=\"line\">122</span><br><span class=\"line\">123</span><br><span class=\"line\">124</span><br><span class=\"line\">125</span><br><span class=\"line\">126</span><br><span class=\"line\">127</span><br><span class=\"line\">128</span><br><span class=\"line\">129</span><br><span class=\"line\">130</span><br><span class=\"line\">131</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Node</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">constructor</span>(data) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.data = data;</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.left = <span class=\"literal\">null</span>;</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.right = <span class=\"literal\">null</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">BinaryTree</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">constructor</span>() &#123;</span><br><span class=\"line\">        <span class=\"keyword\">this</span>._root = <span class=\"literal\">null</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    insert(data, node = <span class=\"keyword\">this</span>._root) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">let</span> newNode = <span class=\"keyword\">new</span> Node(data);</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (node === <span class=\"literal\">null</span>) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">this</span>._root = newNode;</span><br><span class=\"line\">        &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">            <span class=\"comment\">//如果插入的数据比根节点的数据大</span></span><br><span class=\"line\">            <span class=\"comment\">//那么，将插入数据与根节点数据交换，再进行插入</span></span><br><span class=\"line\">            <span class=\"keyword\">if</span> (data &gt; node.data) &#123;</span><br><span class=\"line\">                <span class=\"keyword\">let</span> temp = data;</span><br><span class=\"line\">                data = node.data;</span><br><span class=\"line\">                node.data = temp;</span><br><span class=\"line\">                <span class=\"keyword\">this</span>.insert(data, node);</span><br><span class=\"line\">            &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">                <span class=\"keyword\">if</span> (!node.left) &#123;</span><br><span class=\"line\">                    <span class=\"keyword\">return</span> node.left = <span class=\"keyword\">new</span> Node(data);</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">                <span class=\"keyword\">if</span> (!node.right) &#123;</span><br><span class=\"line\">                    <span class=\"keyword\">return</span> node.right = <span class=\"keyword\">new</span> Node(data);</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">                <span class=\"keyword\">if</span> (node.left &amp;&amp; node.left.data &lt;= data) &#123;</span><br><span class=\"line\">                    <span class=\"keyword\">this</span>.insert(data, node.left);</span><br><span class=\"line\">                &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">                    <span class=\"keyword\">this</span>.insert(data, node.right);</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">//中序遍历</span></span><br><span class=\"line\">    inOrder(callback, node = <span class=\"keyword\">this</span>._root) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (node === <span class=\"literal\">null</span>) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (node.left) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">this</span>.inOrder(callback, node.left);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        callback(node);</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (node.right) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">this</span>.inOrder(callback, node.right);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">//先序遍历</span></span><br><span class=\"line\">    preOrder(callback, node = <span class=\"keyword\">this</span>._root) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (node === <span class=\"literal\">null</span>) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        callback(node);</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (node.left) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">this</span>.preOrder(callback, node.left);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (node.right) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">this</span>.preOrder(callback, node.right);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">//后序遍历</span></span><br><span class=\"line\">    postOrder(callback, node = <span class=\"keyword\">this</span>._root) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (node === <span class=\"literal\">null</span>) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (node.left) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">this</span>.postOrder(callback, node.left);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (node.right) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">this</span>.postOrder(callback, node.right);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        callback(node);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">//层级遍历</span></span><br><span class=\"line\">    levelOrder(callback, node = <span class=\"keyword\">this</span>._root) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (node === <span class=\"literal\">null</span>) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">let</span> queue = [];</span><br><span class=\"line\">        queue.push(node);</span><br><span class=\"line\">        <span class=\"keyword\">while</span> (queue.length &gt; <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">let</span> curr = queue.shift();</span><br><span class=\"line\">            callback(curr);</span><br><span class=\"line\">            curr.left &amp;&amp; queue.push(curr.left);</span><br><span class=\"line\">            curr.right &amp;&amp; queue.push(curr.right);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    remove(data, node = <span class=\"keyword\">this</span>._root) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (node === <span class=\"literal\">null</span>) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"literal\">null</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (<span class=\"keyword\">this</span>._root.data === data) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">let</span> curr = <span class=\"keyword\">this</span>._root;</span><br><span class=\"line\">            <span class=\"keyword\">this</span>._root = <span class=\"literal\">null</span>;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> curr;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (node.left) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">let</span> curr = node.left;</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (curr.data === data) &#123;</span><br><span class=\"line\">                node.left = <span class=\"literal\">null</span>;</span><br><span class=\"line\">                <span class=\"keyword\">return</span> curr;</span><br><span class=\"line\">            &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">                <span class=\"keyword\">this</span>.remove(data, node.left);</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (node.right) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">let</span> curr = node.right;</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (curr.data === data) &#123;</span><br><span class=\"line\">                node.right = <span class=\"literal\">null</span>;</span><br><span class=\"line\">                <span class=\"keyword\">return</span> curr;</span><br><span class=\"line\">            &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">                <span class=\"keyword\">this</span>.remove(data, node.right);</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    toString() &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"built_in\">JSON</span>.stringify(<span class=\"keyword\">this</span>._root);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h2 id=\"测试代码\"><a href=\"#测试代码\" class=\"headerlink\" title=\"测试代码\"></a>测试代码</h2><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> bt = <span class=\"keyword\">new</span> BinaryTree();</span><br><span class=\"line\">bt.insert(<span class=\"number\">35</span>, bt._root);</span><br><span class=\"line\">bt.insert(<span class=\"number\">52</span>, bt._root);</span><br><span class=\"line\">bt.insert(<span class=\"number\">21</span>, bt._root);</span><br><span class=\"line\">bt.insert(<span class=\"number\">11</span>, bt._root);</span><br><span class=\"line\">bt.insert(<span class=\"number\">16</span>, bt._root);</span><br><span class=\"line\">bt.insert(<span class=\"number\">87</span>, bt._root);</span><br><span class=\"line\">bt.insert(<span class=\"number\">100</span>, bt._root);</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(bt.toString());</span><br><span class=\"line\">bt.levelOrder(<span class=\"function\">(<span class=\"params\">node</span>) =&gt;</span> <span class=\"built_in\">console</span>.log(node.data));</span><br></pre></td></tr></table></figure>\n","site":{"data":{"projects":[{"name":"AiTing","url":"https://github.com/renhongl/aiting","desc":"HTML5客户端音乐播放器"},{"name":"AiLiao","url":"https://github.com/renhongl/ailiao","desc":"网页聊天软件"},{"name":"Pomelo Editor","url":"https://renhongl.github.io/markdown-editor/","desc":"功能强大的在线Markdown编辑器"}]}},"excerpt":"","more":"<h2 id=\"描述\"><a href=\"#描述\" class=\"headerlink\" title=\"描述\"></a>描述</h2><ul>\n<li>堆是一类特殊的树，堆的通用特点就是父节点会大于或小于所有子节点。</li>\n<li>如果一棵有根树的每一个结点至多有两个儿子，那么这棵树称为二叉树。</li>\n<li>如果一棵二叉树的每一个节点都带着一个值，且父亲的值总是比儿子的值要大，我们称这棵树为大顶二叉堆，如果是父亲比儿子都要小，那就是小顶二叉堆，统称为二叉堆。(其实一般都把二叉两个字省略掉，毕竟通常说的堆都是二叉堆，然而堆不止二叉堆)。这一个良好的性质注定了堆可以用来当作优先队列使用。</li>\n</ul>\n<h2 id=\"实现接口\"><a href=\"#实现接口\" class=\"headerlink\" title=\"实现接口\"></a>实现接口</h2><ul>\n<li>中序遍历<code>inOrder(callback, node)</code></li>\n<li>先序遍历<code>preOrder(callback, node)</code></li>\n<li>后序遍历<code>postOrder(callback, node)</code></li>\n<li>层级遍历<code>levelOrder(callback, node)</code></li>\n<li><strong>按顺序插入数据</strong><code>insert(data, node)</code>，最大的在最上面，这是与二叉树不同的地方</li>\n<li>删除数据<code>remove(data, node)</code></li>\n<li>二叉树所有数据的快照<code>toString()</code></li>\n</ul>\n<h2 id=\"主要算法分析\"><a href=\"#主要算法分析\" class=\"headerlink\" title=\"主要算法分析\"></a>主要算法分析</h2><ul>\n<li>与二叉树最主要的区别就是，在插入时，根节点的值始终大于左右节点的值。</li>\n<li>如果插入的值大于根节点的值，那么该值会替换根节点的值，根节点的值会往下插入。</li>\n</ul>\n<h2 id=\"示例代码\"><a href=\"#示例代码\" class=\"headerlink\" title=\"示例代码\"></a>示例代码</h2><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br><span class=\"line\">102</span><br><span class=\"line\">103</span><br><span class=\"line\">104</span><br><span class=\"line\">105</span><br><span class=\"line\">106</span><br><span class=\"line\">107</span><br><span class=\"line\">108</span><br><span class=\"line\">109</span><br><span class=\"line\">110</span><br><span class=\"line\">111</span><br><span class=\"line\">112</span><br><span class=\"line\">113</span><br><span class=\"line\">114</span><br><span class=\"line\">115</span><br><span class=\"line\">116</span><br><span class=\"line\">117</span><br><span class=\"line\">118</span><br><span class=\"line\">119</span><br><span class=\"line\">120</span><br><span class=\"line\">121</span><br><span class=\"line\">122</span><br><span class=\"line\">123</span><br><span class=\"line\">124</span><br><span class=\"line\">125</span><br><span class=\"line\">126</span><br><span class=\"line\">127</span><br><span class=\"line\">128</span><br><span class=\"line\">129</span><br><span class=\"line\">130</span><br><span class=\"line\">131</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Node</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">constructor</span>(data) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.data = data;</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.left = <span class=\"literal\">null</span>;</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.right = <span class=\"literal\">null</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">BinaryTree</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">constructor</span>() &#123;</span><br><span class=\"line\">        <span class=\"keyword\">this</span>._root = <span class=\"literal\">null</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    insert(data, node = <span class=\"keyword\">this</span>._root) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">let</span> newNode = <span class=\"keyword\">new</span> Node(data);</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (node === <span class=\"literal\">null</span>) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">this</span>._root = newNode;</span><br><span class=\"line\">        &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">            <span class=\"comment\">//如果插入的数据比根节点的数据大</span></span><br><span class=\"line\">            <span class=\"comment\">//那么，将插入数据与根节点数据交换，再进行插入</span></span><br><span class=\"line\">            <span class=\"keyword\">if</span> (data &gt; node.data) &#123;</span><br><span class=\"line\">                <span class=\"keyword\">let</span> temp = data;</span><br><span class=\"line\">                data = node.data;</span><br><span class=\"line\">                node.data = temp;</span><br><span class=\"line\">                <span class=\"keyword\">this</span>.insert(data, node);</span><br><span class=\"line\">            &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">                <span class=\"keyword\">if</span> (!node.left) &#123;</span><br><span class=\"line\">                    <span class=\"keyword\">return</span> node.left = <span class=\"keyword\">new</span> Node(data);</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">                <span class=\"keyword\">if</span> (!node.right) &#123;</span><br><span class=\"line\">                    <span class=\"keyword\">return</span> node.right = <span class=\"keyword\">new</span> Node(data);</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">                <span class=\"keyword\">if</span> (node.left &amp;&amp; node.left.data &lt;= data) &#123;</span><br><span class=\"line\">                    <span class=\"keyword\">this</span>.insert(data, node.left);</span><br><span class=\"line\">                &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">                    <span class=\"keyword\">this</span>.insert(data, node.right);</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">//中序遍历</span></span><br><span class=\"line\">    inOrder(callback, node = <span class=\"keyword\">this</span>._root) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (node === <span class=\"literal\">null</span>) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (node.left) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">this</span>.inOrder(callback, node.left);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        callback(node);</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (node.right) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">this</span>.inOrder(callback, node.right);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">//先序遍历</span></span><br><span class=\"line\">    preOrder(callback, node = <span class=\"keyword\">this</span>._root) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (node === <span class=\"literal\">null</span>) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        callback(node);</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (node.left) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">this</span>.preOrder(callback, node.left);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (node.right) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">this</span>.preOrder(callback, node.right);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">//后序遍历</span></span><br><span class=\"line\">    postOrder(callback, node = <span class=\"keyword\">this</span>._root) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (node === <span class=\"literal\">null</span>) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (node.left) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">this</span>.postOrder(callback, node.left);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (node.right) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">this</span>.postOrder(callback, node.right);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        callback(node);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">//层级遍历</span></span><br><span class=\"line\">    levelOrder(callback, node = <span class=\"keyword\">this</span>._root) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (node === <span class=\"literal\">null</span>) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">let</span> queue = [];</span><br><span class=\"line\">        queue.push(node);</span><br><span class=\"line\">        <span class=\"keyword\">while</span> (queue.length &gt; <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">let</span> curr = queue.shift();</span><br><span class=\"line\">            callback(curr);</span><br><span class=\"line\">            curr.left &amp;&amp; queue.push(curr.left);</span><br><span class=\"line\">            curr.right &amp;&amp; queue.push(curr.right);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    remove(data, node = <span class=\"keyword\">this</span>._root) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (node === <span class=\"literal\">null</span>) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"literal\">null</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (<span class=\"keyword\">this</span>._root.data === data) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">let</span> curr = <span class=\"keyword\">this</span>._root;</span><br><span class=\"line\">            <span class=\"keyword\">this</span>._root = <span class=\"literal\">null</span>;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> curr;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (node.left) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">let</span> curr = node.left;</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (curr.data === data) &#123;</span><br><span class=\"line\">                node.left = <span class=\"literal\">null</span>;</span><br><span class=\"line\">                <span class=\"keyword\">return</span> curr;</span><br><span class=\"line\">            &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">                <span class=\"keyword\">this</span>.remove(data, node.left);</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (node.right) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">let</span> curr = node.right;</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (curr.data === data) &#123;</span><br><span class=\"line\">                node.right = <span class=\"literal\">null</span>;</span><br><span class=\"line\">                <span class=\"keyword\">return</span> curr;</span><br><span class=\"line\">            &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">                <span class=\"keyword\">this</span>.remove(data, node.right);</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    toString() &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"built_in\">JSON</span>.stringify(<span class=\"keyword\">this</span>._root);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h2 id=\"测试代码\"><a href=\"#测试代码\" class=\"headerlink\" title=\"测试代码\"></a>测试代码</h2><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> bt = <span class=\"keyword\">new</span> BinaryTree();</span><br><span class=\"line\">bt.insert(<span class=\"number\">35</span>, bt._root);</span><br><span class=\"line\">bt.insert(<span class=\"number\">52</span>, bt._root);</span><br><span class=\"line\">bt.insert(<span class=\"number\">21</span>, bt._root);</span><br><span class=\"line\">bt.insert(<span class=\"number\">11</span>, bt._root);</span><br><span class=\"line\">bt.insert(<span class=\"number\">16</span>, bt._root);</span><br><span class=\"line\">bt.insert(<span class=\"number\">87</span>, bt._root);</span><br><span class=\"line\">bt.insert(<span class=\"number\">100</span>, bt._root);</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(bt.toString());</span><br><span class=\"line\">bt.levelOrder(<span class=\"function\">(<span class=\"params\">node</span>) =&gt;</span> <span class=\"built_in\">console</span>.log(node.data));</span><br></pre></td></tr></table></figure>\n"},{"title":"let和const","date":"2017-06-18T12:15:38.000Z","_content":"\n\n# 不存在变量提升\nvar命令会发生”变量提升“现象，即变量可以在声明之前使用，值为undefined。这种现象多多少少是有些奇怪的，按照一般的逻辑，变量应该在声明语句之后才可以使用。\n\n为了纠正这种现象，let命令改变了语法行为，它所声明的变量一定要在声明后使用，否则报错。\n\n\n\n# 暂时性死区\n只要块级作用域内存在let命令，它所声明的变量就“绑定”（binding）这个区域，不再受外部的影响。\n在代码块内，使用let命令声明变量之前，该变量都是不可用的。\n\n# 不允许重复声明\n不允许在相同作用域内，重复声明同一个变量。\n\n# ES6 的块级作用域\nES5 只有全局作用域和函数作用域，没有块级作用域，这带来很多不合理的场景。ES5 规定，函数只能在顶层作用域和函数作用域之中声明，不能在块级作用域声明。\n\n * 第一种场景，内层变量可能会覆盖外层变量。\n * 第二种场景，用来计数的循环变量泄露为全局变量。\n\n ## const\n const声明一个只读的常量。一旦声明，常量的值就不能改变。\n\n const实际上保证的，并不是变量的值不得改动，而是变量指向的那个内存地址不得改动。对于简单类型的数据（数值、字符串、布尔值），值就保存在变量指向的那个内存地址，因此等同于常量。但对于复合类型的数据（主要是对象和数组），变量指向的内存地址，保存的只是一个指针，const只能保证这个指针是固定的，至于它指向的数据结构是不是可变的，就完全不能控制了。因此，将一个对象声明为常量必须非常小心。\n\n 如果真的想将对象冻结，应该使用Object.freeze方法。\n\n 对象及其属性冻结：\n\n```js\nvar constantize = (obj) => {\n    Object.freeze(obj);\n    Object.keys(obj).forEach( (key, i) => {\n        if ( typeof obj[key] === 'object' ) {\n        constantize( obj[key] );\n        }\n    });\n};\n```\n\n\n# 顶层对象\n\n1. 浏览器里面，顶层对象是window，但 Node 和 Web Worker 没有window。\n2. 浏览器和 Web Worker 里面，self也指向顶层对象，但是 Node 没有self。\n3. Node 里面，顶层对象是global，但其他环境都不支持。\n\n```js\n// 方法一\n(typeof window !== 'undefined'\n    ? window\n    : (typeof process === 'object' &&\n        typeof require === 'function' &&\n        typeof global === 'object')\n        ? global\n        : this);\n\n    // 方法二\n    var getGlobal = function () {\n    if (typeof self !== 'undefined') { return self; }\n    if (typeof window !== 'undefined') { return window; }\n    if (typeof global !== 'undefined') { return global; }\n    throw new Error('unable to locate global object');\n};\n```\n","source":"_posts/let和const.md","raw":"\n---\ntitle: let和const\ndate: 2017-06-18 20:15:38\ntags: ES6\n---\n\n\n# 不存在变量提升\nvar命令会发生”变量提升“现象，即变量可以在声明之前使用，值为undefined。这种现象多多少少是有些奇怪的，按照一般的逻辑，变量应该在声明语句之后才可以使用。\n\n为了纠正这种现象，let命令改变了语法行为，它所声明的变量一定要在声明后使用，否则报错。\n\n\n\n# 暂时性死区\n只要块级作用域内存在let命令，它所声明的变量就“绑定”（binding）这个区域，不再受外部的影响。\n在代码块内，使用let命令声明变量之前，该变量都是不可用的。\n\n# 不允许重复声明\n不允许在相同作用域内，重复声明同一个变量。\n\n# ES6 的块级作用域\nES5 只有全局作用域和函数作用域，没有块级作用域，这带来很多不合理的场景。ES5 规定，函数只能在顶层作用域和函数作用域之中声明，不能在块级作用域声明。\n\n * 第一种场景，内层变量可能会覆盖外层变量。\n * 第二种场景，用来计数的循环变量泄露为全局变量。\n\n ## const\n const声明一个只读的常量。一旦声明，常量的值就不能改变。\n\n const实际上保证的，并不是变量的值不得改动，而是变量指向的那个内存地址不得改动。对于简单类型的数据（数值、字符串、布尔值），值就保存在变量指向的那个内存地址，因此等同于常量。但对于复合类型的数据（主要是对象和数组），变量指向的内存地址，保存的只是一个指针，const只能保证这个指针是固定的，至于它指向的数据结构是不是可变的，就完全不能控制了。因此，将一个对象声明为常量必须非常小心。\n\n 如果真的想将对象冻结，应该使用Object.freeze方法。\n\n 对象及其属性冻结：\n\n```js\nvar constantize = (obj) => {\n    Object.freeze(obj);\n    Object.keys(obj).forEach( (key, i) => {\n        if ( typeof obj[key] === 'object' ) {\n        constantize( obj[key] );\n        }\n    });\n};\n```\n\n\n# 顶层对象\n\n1. 浏览器里面，顶层对象是window，但 Node 和 Web Worker 没有window。\n2. 浏览器和 Web Worker 里面，self也指向顶层对象，但是 Node 没有self。\n3. Node 里面，顶层对象是global，但其他环境都不支持。\n\n```js\n// 方法一\n(typeof window !== 'undefined'\n    ? window\n    : (typeof process === 'object' &&\n        typeof require === 'function' &&\n        typeof global === 'object')\n        ? global\n        : this);\n\n    // 方法二\n    var getGlobal = function () {\n    if (typeof self !== 'undefined') { return self; }\n    if (typeof window !== 'undefined') { return window; }\n    if (typeof global !== 'undefined') { return global; }\n    throw new Error('unable to locate global object');\n};\n```\n","slug":"let和const","published":1,"updated":"2019-03-18T07:39:09.056Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ck2vg6gvl00154cob5xylopk9","content":"<h1 id=\"不存在变量提升\"><a href=\"#不存在变量提升\" class=\"headerlink\" title=\"不存在变量提升\"></a>不存在变量提升</h1><p>var命令会发生”变量提升“现象，即变量可以在声明之前使用，值为undefined。这种现象多多少少是有些奇怪的，按照一般的逻辑，变量应该在声明语句之后才可以使用。</p>\n<p>为了纠正这种现象，let命令改变了语法行为，它所声明的变量一定要在声明后使用，否则报错。</p>\n<h1 id=\"暂时性死区\"><a href=\"#暂时性死区\" class=\"headerlink\" title=\"暂时性死区\"></a>暂时性死区</h1><p>只要块级作用域内存在let命令，它所声明的变量就“绑定”（binding）这个区域，不再受外部的影响。<br>在代码块内，使用let命令声明变量之前，该变量都是不可用的。</p>\n<h1 id=\"不允许重复声明\"><a href=\"#不允许重复声明\" class=\"headerlink\" title=\"不允许重复声明\"></a>不允许重复声明</h1><p>不允许在相同作用域内，重复声明同一个变量。</p>\n<h1 id=\"ES6-的块级作用域\"><a href=\"#ES6-的块级作用域\" class=\"headerlink\" title=\"ES6 的块级作用域\"></a>ES6 的块级作用域</h1><p>ES5 只有全局作用域和函数作用域，没有块级作用域，这带来很多不合理的场景。ES5 规定，函数只能在顶层作用域和函数作用域之中声明，不能在块级作用域声明。</p>\n<ul>\n<li>第一种场景，内层变量可能会覆盖外层变量。</li>\n<li><p>第二种场景，用来计数的循环变量泄露为全局变量。</p>\n<h2 id=\"const\"><a href=\"#const\" class=\"headerlink\" title=\"const\"></a>const</h2><p>const声明一个只读的常量。一旦声明，常量的值就不能改变。</p>\n<p>const实际上保证的，并不是变量的值不得改动，而是变量指向的那个内存地址不得改动。对于简单类型的数据（数值、字符串、布尔值），值就保存在变量指向的那个内存地址，因此等同于常量。但对于复合类型的数据（主要是对象和数组），变量指向的内存地址，保存的只是一个指针，const只能保证这个指针是固定的，至于它指向的数据结构是不是可变的，就完全不能控制了。因此，将一个对象声明为常量必须非常小心。</p>\n<p>如果真的想将对象冻结，应该使用Object.freeze方法。</p>\n<p>对象及其属性冻结：</p>\n</li>\n</ul>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> constantize = <span class=\"function\">(<span class=\"params\">obj</span>) =&gt;</span> &#123;</span><br><span class=\"line\">    <span class=\"built_in\">Object</span>.freeze(obj);</span><br><span class=\"line\">    <span class=\"built_in\">Object</span>.keys(obj).forEach( <span class=\"function\">(<span class=\"params\">key, i</span>) =&gt;</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> ( <span class=\"keyword\">typeof</span> obj[key] === <span class=\"string\">'object'</span> ) &#123;</span><br><span class=\"line\">        constantize( obj[key] );</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;);</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n<h1 id=\"顶层对象\"><a href=\"#顶层对象\" class=\"headerlink\" title=\"顶层对象\"></a>顶层对象</h1><ol>\n<li>浏览器里面，顶层对象是window，但 Node 和 Web Worker 没有window。</li>\n<li>浏览器和 Web Worker 里面，self也指向顶层对象，但是 Node 没有self。</li>\n<li>Node 里面，顶层对象是global，但其他环境都不支持。</li>\n</ol>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 方法一</span></span><br><span class=\"line\">(<span class=\"keyword\">typeof</span> <span class=\"built_in\">window</span> !== <span class=\"string\">'undefined'</span></span><br><span class=\"line\">    ? <span class=\"built_in\">window</span></span><br><span class=\"line\">    : (<span class=\"keyword\">typeof</span> process === <span class=\"string\">'object'</span> &amp;&amp;</span><br><span class=\"line\">        <span class=\"keyword\">typeof</span> <span class=\"built_in\">require</span> === <span class=\"string\">'function'</span> &amp;&amp;</span><br><span class=\"line\">        <span class=\"keyword\">typeof</span> global === <span class=\"string\">'object'</span>)</span><br><span class=\"line\">        ? global</span><br><span class=\"line\">        : <span class=\"keyword\">this</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// 方法二</span></span><br><span class=\"line\">    <span class=\"keyword\">var</span> getGlobal = <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (<span class=\"keyword\">typeof</span> self !== <span class=\"string\">'undefined'</span>) &#123; <span class=\"keyword\">return</span> self; &#125;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (<span class=\"keyword\">typeof</span> <span class=\"built_in\">window</span> !== <span class=\"string\">'undefined'</span>) &#123; <span class=\"keyword\">return</span> <span class=\"built_in\">window</span>; &#125;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (<span class=\"keyword\">typeof</span> global !== <span class=\"string\">'undefined'</span>) &#123; <span class=\"keyword\">return</span> global; &#125;</span><br><span class=\"line\">    <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> <span class=\"built_in\">Error</span>(<span class=\"string\">'unable to locate global object'</span>);</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n","site":{"data":{"projects":[{"name":"AiTing","url":"https://github.com/renhongl/aiting","desc":"HTML5客户端音乐播放器"},{"name":"AiLiao","url":"https://github.com/renhongl/ailiao","desc":"网页聊天软件"},{"name":"Pomelo Editor","url":"https://renhongl.github.io/markdown-editor/","desc":"功能强大的在线Markdown编辑器"}]}},"excerpt":"","more":"<h1 id=\"不存在变量提升\"><a href=\"#不存在变量提升\" class=\"headerlink\" title=\"不存在变量提升\"></a>不存在变量提升</h1><p>var命令会发生”变量提升“现象，即变量可以在声明之前使用，值为undefined。这种现象多多少少是有些奇怪的，按照一般的逻辑，变量应该在声明语句之后才可以使用。</p>\n<p>为了纠正这种现象，let命令改变了语法行为，它所声明的变量一定要在声明后使用，否则报错。</p>\n<h1 id=\"暂时性死区\"><a href=\"#暂时性死区\" class=\"headerlink\" title=\"暂时性死区\"></a>暂时性死区</h1><p>只要块级作用域内存在let命令，它所声明的变量就“绑定”（binding）这个区域，不再受外部的影响。<br>在代码块内，使用let命令声明变量之前，该变量都是不可用的。</p>\n<h1 id=\"不允许重复声明\"><a href=\"#不允许重复声明\" class=\"headerlink\" title=\"不允许重复声明\"></a>不允许重复声明</h1><p>不允许在相同作用域内，重复声明同一个变量。</p>\n<h1 id=\"ES6-的块级作用域\"><a href=\"#ES6-的块级作用域\" class=\"headerlink\" title=\"ES6 的块级作用域\"></a>ES6 的块级作用域</h1><p>ES5 只有全局作用域和函数作用域，没有块级作用域，这带来很多不合理的场景。ES5 规定，函数只能在顶层作用域和函数作用域之中声明，不能在块级作用域声明。</p>\n<ul>\n<li>第一种场景，内层变量可能会覆盖外层变量。</li>\n<li><p>第二种场景，用来计数的循环变量泄露为全局变量。</p>\n<h2 id=\"const\"><a href=\"#const\" class=\"headerlink\" title=\"const\"></a>const</h2><p>const声明一个只读的常量。一旦声明，常量的值就不能改变。</p>\n<p>const实际上保证的，并不是变量的值不得改动，而是变量指向的那个内存地址不得改动。对于简单类型的数据（数值、字符串、布尔值），值就保存在变量指向的那个内存地址，因此等同于常量。但对于复合类型的数据（主要是对象和数组），变量指向的内存地址，保存的只是一个指针，const只能保证这个指针是固定的，至于它指向的数据结构是不是可变的，就完全不能控制了。因此，将一个对象声明为常量必须非常小心。</p>\n<p>如果真的想将对象冻结，应该使用Object.freeze方法。</p>\n<p>对象及其属性冻结：</p>\n</li>\n</ul>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> constantize = <span class=\"function\">(<span class=\"params\">obj</span>) =&gt;</span> &#123;</span><br><span class=\"line\">    <span class=\"built_in\">Object</span>.freeze(obj);</span><br><span class=\"line\">    <span class=\"built_in\">Object</span>.keys(obj).forEach( <span class=\"function\">(<span class=\"params\">key, i</span>) =&gt;</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> ( <span class=\"keyword\">typeof</span> obj[key] === <span class=\"string\">'object'</span> ) &#123;</span><br><span class=\"line\">        constantize( obj[key] );</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;);</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n<h1 id=\"顶层对象\"><a href=\"#顶层对象\" class=\"headerlink\" title=\"顶层对象\"></a>顶层对象</h1><ol>\n<li>浏览器里面，顶层对象是window，但 Node 和 Web Worker 没有window。</li>\n<li>浏览器和 Web Worker 里面，self也指向顶层对象，但是 Node 没有self。</li>\n<li>Node 里面，顶层对象是global，但其他环境都不支持。</li>\n</ol>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 方法一</span></span><br><span class=\"line\">(<span class=\"keyword\">typeof</span> <span class=\"built_in\">window</span> !== <span class=\"string\">'undefined'</span></span><br><span class=\"line\">    ? <span class=\"built_in\">window</span></span><br><span class=\"line\">    : (<span class=\"keyword\">typeof</span> process === <span class=\"string\">'object'</span> &amp;&amp;</span><br><span class=\"line\">        <span class=\"keyword\">typeof</span> <span class=\"built_in\">require</span> === <span class=\"string\">'function'</span> &amp;&amp;</span><br><span class=\"line\">        <span class=\"keyword\">typeof</span> global === <span class=\"string\">'object'</span>)</span><br><span class=\"line\">        ? global</span><br><span class=\"line\">        : <span class=\"keyword\">this</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// 方法二</span></span><br><span class=\"line\">    <span class=\"keyword\">var</span> getGlobal = <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (<span class=\"keyword\">typeof</span> self !== <span class=\"string\">'undefined'</span>) &#123; <span class=\"keyword\">return</span> self; &#125;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (<span class=\"keyword\">typeof</span> <span class=\"built_in\">window</span> !== <span class=\"string\">'undefined'</span>) &#123; <span class=\"keyword\">return</span> <span class=\"built_in\">window</span>; &#125;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (<span class=\"keyword\">typeof</span> global !== <span class=\"string\">'undefined'</span>) &#123; <span class=\"keyword\">return</span> global; &#125;</span><br><span class=\"line\">    <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> <span class=\"built_in\">Error</span>(<span class=\"string\">'unable to locate global object'</span>);</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n"},{"title":"计算机算法之---数据结构-链表","date":"2019-04-18T13:16:52.000Z","_content":"\n## 描述\n* 链表（Linked list）是一种常见的基础数据结构，是一种线性表，但是并不会按线性的顺序存储数据，而是在每一个节点里存到下一个节点的指针(Pointer)。由于不必须按顺序存储，链表在插入的时候可以达到O(1)的复杂度，比另一种线性表顺序表快得多，但是查找一个节点或者访问特定编号的节点则需要O(n)的时间，而顺序表相应的时间复杂度分别是O(logn)和O(1)。\n* 使用链表结构可以克服数组链表需要预先知道数据大小的缺点，链表结构可以充分利用计算机内存空间，实现灵活的内存动态管理。但是链表失去了数组随机读取的优点，同时链表由于增加了结点的指针域，空间开销比较大。\n* 在计算机科学中，链表作为一种基础的数据结构可以用来生成其它类型的数据结构。链表通常由一连串节点组成，每个节点包含任意的实例数据（data fields）和一或两个用来指向上一个/或下一个节点的位置的链接（\"links\"）。链表最明显的好处就是，常规数组排列关联项目的方式可能不同于这些数据项目在记忆体或磁盘上顺序，数据的访问往往要在不同的排列顺序中转换。而链表是一种自我指示数据类型，因为它包含指向另一个相同类型的数据的指针（链接）。链表允许插入和移除表上任意位置上的节点，但是不允许随机存取。链表有很多种不同的类型：单向链表，双向链表以及循环链表。\n\n## 实现例部分接口\n* 获取长度`getSize()`\n* 获取所有值的快照`toString()`\n* 在尾部添加`append(value)`\n* 在头部添加`unshift(value)`\n* 在指定位置添加`insert(index, value)`\n* 在尾部删除`pop()`\n* 在头部删除`shift()`\n* 在指定位置删除`remove(index)`\n* 获取指定位置的值`getValue(index)`\n    \n## 主要算法分析\n* 需要创建一个`Node`类，作为链表的节点\n* 在插入删除时，先遍历找到操作的位置，然后通过修过`next`指向的位置，其他值的位置保持不变\n* 所以链表增删非常容易，不会影响其他节点。但是读取值，需要依次遍历找到。\n\n## 示例代码\n```js\nclass Node {\n    constructor(value) {\n        this._value = value;\n        this.next = null;\n    }\n\n    getValue() {\n        return this._value;\n    }\n}\n\nclass LinkedList {\n    constructor() {\n        this._head = null;\n        this._size = 0;\n    }\n\n    getSize() {\n        return this._size;\n    }\n\n    toString() {\n        if (this._head === null) {\n            return '';\n        }\n        let result = '';\n        let curr = this._head;\n        while (curr !== null) {\n            result += curr.getValue() + ', ';\n            curr = curr.next;\n        }\n        return result;\n    }\n\n    append(value) {\n        if (this._head === null) {\n            this._head = new Node(value);\n            this._size++;\n            return;\n        }\n        let curr = this._head;\n        while (curr) {\n            if (curr.next === null) {\n                curr.next = new Node(value);\n                this._size++;\n            }\n            curr = curr.next;\n        }\n    }\n\n    unshift(value) {\n        if (this._head === null) {\n            this._head = new Node(value);\n            this._size++;\n            return;\n        }\n        let currHead = this._head;\n        this._head = new Node(value);\n        this._head.next = currHead;\n        this._size++;\n    }\n\n    insert(index, value) {\n        if (index < 0 || index > this._size) {\n            return console.log('Index out of range');\n        }\n        if (index === 0) {\n            return this.unshift(value);\n        }\n        if (index === this._size) {\n            return this.append(value);\n        }\n        let curr = this._head;\n        let temp = null;\n        for (let i = 0; i < index; i++) {\n            curr = curr.next;\n        }\n        let newNode = new Node(value);\n        newNode.next = curr.next;\n        curr.next = newNode;\n        this._size++;\n    }\n\n    pop() {\n        if (this._size === 0) {\n            return null;\n        }\n        let curr = this._head;\n        let before = null;\n        for (let i = 0; i < this._size - 1; i++) {\n            before = curr;\n            curr = curr.next;\n        }\n        before.next = null;\n        this._size--;\n        return curr.getValue();\n    }\n\n    shift() {\n        if (this._size === 0) {\n            return null;\n        }\n        let head = this._head;\n        this._head = head.next;\n        this._size--;\n        return head.getValue();\n    }\n\n    remove(index) {\n        if (index < 0 || index >= this._size) {\n            return console.log('Index out of range');\n        }\n        if (index === 0) {\n            return this.shift();\n        }\n        if (index === this._size - 1) {\n            return this.pop();\n        }\n        let curr = this._head;\n        let before = null;\n        for (let i = 0; i < index; i++) {\n            before = curr;\n            curr = curr.next;\n        }\n        before.next = curr.next;\n        this._size--;\n        return curr.getValue();\n    }\n\n    getItem(index) {\n        if (this._size === 0) {\n            return null;\n        }\n        if (index < 0 || index >= this._size) {\n            return console.log('Index out of range');\n        }\n        if (index === 0) {\n            return this._head.getValue();\n        }\n        let curr = this._head;\n        for (let i = 0; i < index; i++) {\n            curr = curr.next;\n        }\n        return curr.getValue();\n    }\n}\n```\n\n## 测试代码\n```js\nlet l = new LinkedList();\nconsole.log(l.toString());\nl.insert(0, 43);\nl.insert(0, 61);\nl.insert(0, 65);\nl.insert(0, 67);\nl.insert(0, 143);\nl.insert(0, 261);\nl.insert(0, 365);\nl.insert(0, 467);\nconsole.log(l.toString());\nconsole.log(l.getSize());\nconsole.log(l.pop());\nconsole.log(l.toString());\nconsole.log(l.shift());\nconsole.log(l.toString());\nconsole.log(l.getSize());\nconsole.log(l.remove(5));\nconsole.log(l.toString());\nconsole.log(l.getItem(3));\n```","source":"_posts/linkedList.md","raw":"---\ntitle: 计算机算法之---数据结构-链表\ndate: 2019-04-18 21:16:52\ntags: 计算机算法\n\n---\n\n## 描述\n* 链表（Linked list）是一种常见的基础数据结构，是一种线性表，但是并不会按线性的顺序存储数据，而是在每一个节点里存到下一个节点的指针(Pointer)。由于不必须按顺序存储，链表在插入的时候可以达到O(1)的复杂度，比另一种线性表顺序表快得多，但是查找一个节点或者访问特定编号的节点则需要O(n)的时间，而顺序表相应的时间复杂度分别是O(logn)和O(1)。\n* 使用链表结构可以克服数组链表需要预先知道数据大小的缺点，链表结构可以充分利用计算机内存空间，实现灵活的内存动态管理。但是链表失去了数组随机读取的优点，同时链表由于增加了结点的指针域，空间开销比较大。\n* 在计算机科学中，链表作为一种基础的数据结构可以用来生成其它类型的数据结构。链表通常由一连串节点组成，每个节点包含任意的实例数据（data fields）和一或两个用来指向上一个/或下一个节点的位置的链接（\"links\"）。链表最明显的好处就是，常规数组排列关联项目的方式可能不同于这些数据项目在记忆体或磁盘上顺序，数据的访问往往要在不同的排列顺序中转换。而链表是一种自我指示数据类型，因为它包含指向另一个相同类型的数据的指针（链接）。链表允许插入和移除表上任意位置上的节点，但是不允许随机存取。链表有很多种不同的类型：单向链表，双向链表以及循环链表。\n\n## 实现例部分接口\n* 获取长度`getSize()`\n* 获取所有值的快照`toString()`\n* 在尾部添加`append(value)`\n* 在头部添加`unshift(value)`\n* 在指定位置添加`insert(index, value)`\n* 在尾部删除`pop()`\n* 在头部删除`shift()`\n* 在指定位置删除`remove(index)`\n* 获取指定位置的值`getValue(index)`\n    \n## 主要算法分析\n* 需要创建一个`Node`类，作为链表的节点\n* 在插入删除时，先遍历找到操作的位置，然后通过修过`next`指向的位置，其他值的位置保持不变\n* 所以链表增删非常容易，不会影响其他节点。但是读取值，需要依次遍历找到。\n\n## 示例代码\n```js\nclass Node {\n    constructor(value) {\n        this._value = value;\n        this.next = null;\n    }\n\n    getValue() {\n        return this._value;\n    }\n}\n\nclass LinkedList {\n    constructor() {\n        this._head = null;\n        this._size = 0;\n    }\n\n    getSize() {\n        return this._size;\n    }\n\n    toString() {\n        if (this._head === null) {\n            return '';\n        }\n        let result = '';\n        let curr = this._head;\n        while (curr !== null) {\n            result += curr.getValue() + ', ';\n            curr = curr.next;\n        }\n        return result;\n    }\n\n    append(value) {\n        if (this._head === null) {\n            this._head = new Node(value);\n            this._size++;\n            return;\n        }\n        let curr = this._head;\n        while (curr) {\n            if (curr.next === null) {\n                curr.next = new Node(value);\n                this._size++;\n            }\n            curr = curr.next;\n        }\n    }\n\n    unshift(value) {\n        if (this._head === null) {\n            this._head = new Node(value);\n            this._size++;\n            return;\n        }\n        let currHead = this._head;\n        this._head = new Node(value);\n        this._head.next = currHead;\n        this._size++;\n    }\n\n    insert(index, value) {\n        if (index < 0 || index > this._size) {\n            return console.log('Index out of range');\n        }\n        if (index === 0) {\n            return this.unshift(value);\n        }\n        if (index === this._size) {\n            return this.append(value);\n        }\n        let curr = this._head;\n        let temp = null;\n        for (let i = 0; i < index; i++) {\n            curr = curr.next;\n        }\n        let newNode = new Node(value);\n        newNode.next = curr.next;\n        curr.next = newNode;\n        this._size++;\n    }\n\n    pop() {\n        if (this._size === 0) {\n            return null;\n        }\n        let curr = this._head;\n        let before = null;\n        for (let i = 0; i < this._size - 1; i++) {\n            before = curr;\n            curr = curr.next;\n        }\n        before.next = null;\n        this._size--;\n        return curr.getValue();\n    }\n\n    shift() {\n        if (this._size === 0) {\n            return null;\n        }\n        let head = this._head;\n        this._head = head.next;\n        this._size--;\n        return head.getValue();\n    }\n\n    remove(index) {\n        if (index < 0 || index >= this._size) {\n            return console.log('Index out of range');\n        }\n        if (index === 0) {\n            return this.shift();\n        }\n        if (index === this._size - 1) {\n            return this.pop();\n        }\n        let curr = this._head;\n        let before = null;\n        for (let i = 0; i < index; i++) {\n            before = curr;\n            curr = curr.next;\n        }\n        before.next = curr.next;\n        this._size--;\n        return curr.getValue();\n    }\n\n    getItem(index) {\n        if (this._size === 0) {\n            return null;\n        }\n        if (index < 0 || index >= this._size) {\n            return console.log('Index out of range');\n        }\n        if (index === 0) {\n            return this._head.getValue();\n        }\n        let curr = this._head;\n        for (let i = 0; i < index; i++) {\n            curr = curr.next;\n        }\n        return curr.getValue();\n    }\n}\n```\n\n## 测试代码\n```js\nlet l = new LinkedList();\nconsole.log(l.toString());\nl.insert(0, 43);\nl.insert(0, 61);\nl.insert(0, 65);\nl.insert(0, 67);\nl.insert(0, 143);\nl.insert(0, 261);\nl.insert(0, 365);\nl.insert(0, 467);\nconsole.log(l.toString());\nconsole.log(l.getSize());\nconsole.log(l.pop());\nconsole.log(l.toString());\nconsole.log(l.shift());\nconsole.log(l.toString());\nconsole.log(l.getSize());\nconsole.log(l.remove(5));\nconsole.log(l.toString());\nconsole.log(l.getItem(3));\n```","slug":"linkedList","published":1,"updated":"2019-06-18T10:12:31.270Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ck2vg6gvn00174cobgfc9bkj9","content":"<h2 id=\"描述\"><a href=\"#描述\" class=\"headerlink\" title=\"描述\"></a>描述</h2><ul>\n<li>链表（Linked list）是一种常见的基础数据结构，是一种线性表，但是并不会按线性的顺序存储数据，而是在每一个节点里存到下一个节点的指针(Pointer)。由于不必须按顺序存储，链表在插入的时候可以达到O(1)的复杂度，比另一种线性表顺序表快得多，但是查找一个节点或者访问特定编号的节点则需要O(n)的时间，而顺序表相应的时间复杂度分别是O(logn)和O(1)。</li>\n<li>使用链表结构可以克服数组链表需要预先知道数据大小的缺点，链表结构可以充分利用计算机内存空间，实现灵活的内存动态管理。但是链表失去了数组随机读取的优点，同时链表由于增加了结点的指针域，空间开销比较大。</li>\n<li>在计算机科学中，链表作为一种基础的数据结构可以用来生成其它类型的数据结构。链表通常由一连串节点组成，每个节点包含任意的实例数据（data fields）和一或两个用来指向上一个/或下一个节点的位置的链接（”links”）。链表最明显的好处就是，常规数组排列关联项目的方式可能不同于这些数据项目在记忆体或磁盘上顺序，数据的访问往往要在不同的排列顺序中转换。而链表是一种自我指示数据类型，因为它包含指向另一个相同类型的数据的指针（链接）。链表允许插入和移除表上任意位置上的节点，但是不允许随机存取。链表有很多种不同的类型：单向链表，双向链表以及循环链表。</li>\n</ul>\n<h2 id=\"实现例部分接口\"><a href=\"#实现例部分接口\" class=\"headerlink\" title=\"实现例部分接口\"></a>实现例部分接口</h2><ul>\n<li>获取长度<code>getSize()</code></li>\n<li>获取所有值的快照<code>toString()</code></li>\n<li>在尾部添加<code>append(value)</code></li>\n<li>在头部添加<code>unshift(value)</code></li>\n<li>在指定位置添加<code>insert(index, value)</code></li>\n<li>在尾部删除<code>pop()</code></li>\n<li>在头部删除<code>shift()</code></li>\n<li>在指定位置删除<code>remove(index)</code></li>\n<li>获取指定位置的值<code>getValue(index)</code></li>\n</ul>\n<h2 id=\"主要算法分析\"><a href=\"#主要算法分析\" class=\"headerlink\" title=\"主要算法分析\"></a>主要算法分析</h2><ul>\n<li>需要创建一个<code>Node</code>类，作为链表的节点</li>\n<li>在插入删除时，先遍历找到操作的位置，然后通过修过<code>next</code>指向的位置，其他值的位置保持不变</li>\n<li>所以链表增删非常容易，不会影响其他节点。但是读取值，需要依次遍历找到。</li>\n</ul>\n<h2 id=\"示例代码\"><a href=\"#示例代码\" class=\"headerlink\" title=\"示例代码\"></a>示例代码</h2><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br><span class=\"line\">102</span><br><span class=\"line\">103</span><br><span class=\"line\">104</span><br><span class=\"line\">105</span><br><span class=\"line\">106</span><br><span class=\"line\">107</span><br><span class=\"line\">108</span><br><span class=\"line\">109</span><br><span class=\"line\">110</span><br><span class=\"line\">111</span><br><span class=\"line\">112</span><br><span class=\"line\">113</span><br><span class=\"line\">114</span><br><span class=\"line\">115</span><br><span class=\"line\">116</span><br><span class=\"line\">117</span><br><span class=\"line\">118</span><br><span class=\"line\">119</span><br><span class=\"line\">120</span><br><span class=\"line\">121</span><br><span class=\"line\">122</span><br><span class=\"line\">123</span><br><span class=\"line\">124</span><br><span class=\"line\">125</span><br><span class=\"line\">126</span><br><span class=\"line\">127</span><br><span class=\"line\">128</span><br><span class=\"line\">129</span><br><span class=\"line\">130</span><br><span class=\"line\">131</span><br><span class=\"line\">132</span><br><span class=\"line\">133</span><br><span class=\"line\">134</span><br><span class=\"line\">135</span><br><span class=\"line\">136</span><br><span class=\"line\">137</span><br><span class=\"line\">138</span><br><span class=\"line\">139</span><br><span class=\"line\">140</span><br><span class=\"line\">141</span><br><span class=\"line\">142</span><br><span class=\"line\">143</span><br><span class=\"line\">144</span><br><span class=\"line\">145</span><br><span class=\"line\">146</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Node</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">constructor</span>(value) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">this</span>._value = value;</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.next = <span class=\"literal\">null</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    getValue() &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">this</span>._value;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">LinkedList</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">constructor</span>() &#123;</span><br><span class=\"line\">        <span class=\"keyword\">this</span>._head = <span class=\"literal\">null</span>;</span><br><span class=\"line\">        <span class=\"keyword\">this</span>._size = <span class=\"number\">0</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    getSize() &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">this</span>._size;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    toString() &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (<span class=\"keyword\">this</span>._head === <span class=\"literal\">null</span>) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"string\">''</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">let</span> result = <span class=\"string\">''</span>;</span><br><span class=\"line\">        <span class=\"keyword\">let</span> curr = <span class=\"keyword\">this</span>._head;</span><br><span class=\"line\">        <span class=\"keyword\">while</span> (curr !== <span class=\"literal\">null</span>) &#123;</span><br><span class=\"line\">            result += curr.getValue() + <span class=\"string\">', '</span>;</span><br><span class=\"line\">            curr = curr.next;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> result;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    append(value) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (<span class=\"keyword\">this</span>._head === <span class=\"literal\">null</span>) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">this</span>._head = <span class=\"keyword\">new</span> Node(value);</span><br><span class=\"line\">            <span class=\"keyword\">this</span>._size++;</span><br><span class=\"line\">            <span class=\"keyword\">return</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">let</span> curr = <span class=\"keyword\">this</span>._head;</span><br><span class=\"line\">        <span class=\"keyword\">while</span> (curr) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (curr.next === <span class=\"literal\">null</span>) &#123;</span><br><span class=\"line\">                curr.next = <span class=\"keyword\">new</span> Node(value);</span><br><span class=\"line\">                <span class=\"keyword\">this</span>._size++;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            curr = curr.next;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    unshift(value) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (<span class=\"keyword\">this</span>._head === <span class=\"literal\">null</span>) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">this</span>._head = <span class=\"keyword\">new</span> Node(value);</span><br><span class=\"line\">            <span class=\"keyword\">this</span>._size++;</span><br><span class=\"line\">            <span class=\"keyword\">return</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">let</span> currHead = <span class=\"keyword\">this</span>._head;</span><br><span class=\"line\">        <span class=\"keyword\">this</span>._head = <span class=\"keyword\">new</span> Node(value);</span><br><span class=\"line\">        <span class=\"keyword\">this</span>._head.next = currHead;</span><br><span class=\"line\">        <span class=\"keyword\">this</span>._size++;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    insert(index, value) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (index &lt; <span class=\"number\">0</span> || index &gt; <span class=\"keyword\">this</span>._size) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"built_in\">console</span>.log(<span class=\"string\">'Index out of range'</span>);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (index === <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"keyword\">this</span>.unshift(value);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (index === <span class=\"keyword\">this</span>._size) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"keyword\">this</span>.append(value);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">let</span> curr = <span class=\"keyword\">this</span>._head;</span><br><span class=\"line\">        <span class=\"keyword\">let</span> temp = <span class=\"literal\">null</span>;</span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"keyword\">let</span> i = <span class=\"number\">0</span>; i &lt; index; i++) &#123;</span><br><span class=\"line\">            curr = curr.next;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">let</span> newNode = <span class=\"keyword\">new</span> Node(value);</span><br><span class=\"line\">        newNode.next = curr.next;</span><br><span class=\"line\">        curr.next = newNode;</span><br><span class=\"line\">        <span class=\"keyword\">this</span>._size++;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    pop() &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (<span class=\"keyword\">this</span>._size === <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"literal\">null</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">let</span> curr = <span class=\"keyword\">this</span>._head;</span><br><span class=\"line\">        <span class=\"keyword\">let</span> before = <span class=\"literal\">null</span>;</span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"keyword\">let</span> i = <span class=\"number\">0</span>; i &lt; <span class=\"keyword\">this</span>._size - <span class=\"number\">1</span>; i++) &#123;</span><br><span class=\"line\">            before = curr;</span><br><span class=\"line\">            curr = curr.next;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        before.next = <span class=\"literal\">null</span>;</span><br><span class=\"line\">        <span class=\"keyword\">this</span>._size--;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> curr.getValue();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    shift() &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (<span class=\"keyword\">this</span>._size === <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"literal\">null</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">let</span> head = <span class=\"keyword\">this</span>._head;</span><br><span class=\"line\">        <span class=\"keyword\">this</span>._head = head.next;</span><br><span class=\"line\">        <span class=\"keyword\">this</span>._size--;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> head.getValue();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    remove(index) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (index &lt; <span class=\"number\">0</span> || index &gt;= <span class=\"keyword\">this</span>._size) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"built_in\">console</span>.log(<span class=\"string\">'Index out of range'</span>);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (index === <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"keyword\">this</span>.shift();</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (index === <span class=\"keyword\">this</span>._size - <span class=\"number\">1</span>) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"keyword\">this</span>.pop();</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">let</span> curr = <span class=\"keyword\">this</span>._head;</span><br><span class=\"line\">        <span class=\"keyword\">let</span> before = <span class=\"literal\">null</span>;</span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"keyword\">let</span> i = <span class=\"number\">0</span>; i &lt; index; i++) &#123;</span><br><span class=\"line\">            before = curr;</span><br><span class=\"line\">            curr = curr.next;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        before.next = curr.next;</span><br><span class=\"line\">        <span class=\"keyword\">this</span>._size--;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> curr.getValue();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    getItem(index) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (<span class=\"keyword\">this</span>._size === <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"literal\">null</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (index &lt; <span class=\"number\">0</span> || index &gt;= <span class=\"keyword\">this</span>._size) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"built_in\">console</span>.log(<span class=\"string\">'Index out of range'</span>);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (index === <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"keyword\">this</span>._head.getValue();</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">let</span> curr = <span class=\"keyword\">this</span>._head;</span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"keyword\">let</span> i = <span class=\"number\">0</span>; i &lt; index; i++) &#123;</span><br><span class=\"line\">            curr = curr.next;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> curr.getValue();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h2 id=\"测试代码\"><a href=\"#测试代码\" class=\"headerlink\" title=\"测试代码\"></a>测试代码</h2><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> l = <span class=\"keyword\">new</span> LinkedList();</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(l.toString());</span><br><span class=\"line\">l.insert(<span class=\"number\">0</span>, <span class=\"number\">43</span>);</span><br><span class=\"line\">l.insert(<span class=\"number\">0</span>, <span class=\"number\">61</span>);</span><br><span class=\"line\">l.insert(<span class=\"number\">0</span>, <span class=\"number\">65</span>);</span><br><span class=\"line\">l.insert(<span class=\"number\">0</span>, <span class=\"number\">67</span>);</span><br><span class=\"line\">l.insert(<span class=\"number\">0</span>, <span class=\"number\">143</span>);</span><br><span class=\"line\">l.insert(<span class=\"number\">0</span>, <span class=\"number\">261</span>);</span><br><span class=\"line\">l.insert(<span class=\"number\">0</span>, <span class=\"number\">365</span>);</span><br><span class=\"line\">l.insert(<span class=\"number\">0</span>, <span class=\"number\">467</span>);</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(l.toString());</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(l.getSize());</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(l.pop());</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(l.toString());</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(l.shift());</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(l.toString());</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(l.getSize());</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(l.remove(<span class=\"number\">5</span>));</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(l.toString());</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(l.getItem(<span class=\"number\">3</span>));</span><br></pre></td></tr></table></figure>","site":{"data":{"projects":[{"name":"AiTing","url":"https://github.com/renhongl/aiting","desc":"HTML5客户端音乐播放器"},{"name":"AiLiao","url":"https://github.com/renhongl/ailiao","desc":"网页聊天软件"},{"name":"Pomelo Editor","url":"https://renhongl.github.io/markdown-editor/","desc":"功能强大的在线Markdown编辑器"}]}},"excerpt":"","more":"<h2 id=\"描述\"><a href=\"#描述\" class=\"headerlink\" title=\"描述\"></a>描述</h2><ul>\n<li>链表（Linked list）是一种常见的基础数据结构，是一种线性表，但是并不会按线性的顺序存储数据，而是在每一个节点里存到下一个节点的指针(Pointer)。由于不必须按顺序存储，链表在插入的时候可以达到O(1)的复杂度，比另一种线性表顺序表快得多，但是查找一个节点或者访问特定编号的节点则需要O(n)的时间，而顺序表相应的时间复杂度分别是O(logn)和O(1)。</li>\n<li>使用链表结构可以克服数组链表需要预先知道数据大小的缺点，链表结构可以充分利用计算机内存空间，实现灵活的内存动态管理。但是链表失去了数组随机读取的优点，同时链表由于增加了结点的指针域，空间开销比较大。</li>\n<li>在计算机科学中，链表作为一种基础的数据结构可以用来生成其它类型的数据结构。链表通常由一连串节点组成，每个节点包含任意的实例数据（data fields）和一或两个用来指向上一个/或下一个节点的位置的链接（”links”）。链表最明显的好处就是，常规数组排列关联项目的方式可能不同于这些数据项目在记忆体或磁盘上顺序，数据的访问往往要在不同的排列顺序中转换。而链表是一种自我指示数据类型，因为它包含指向另一个相同类型的数据的指针（链接）。链表允许插入和移除表上任意位置上的节点，但是不允许随机存取。链表有很多种不同的类型：单向链表，双向链表以及循环链表。</li>\n</ul>\n<h2 id=\"实现例部分接口\"><a href=\"#实现例部分接口\" class=\"headerlink\" title=\"实现例部分接口\"></a>实现例部分接口</h2><ul>\n<li>获取长度<code>getSize()</code></li>\n<li>获取所有值的快照<code>toString()</code></li>\n<li>在尾部添加<code>append(value)</code></li>\n<li>在头部添加<code>unshift(value)</code></li>\n<li>在指定位置添加<code>insert(index, value)</code></li>\n<li>在尾部删除<code>pop()</code></li>\n<li>在头部删除<code>shift()</code></li>\n<li>在指定位置删除<code>remove(index)</code></li>\n<li>获取指定位置的值<code>getValue(index)</code></li>\n</ul>\n<h2 id=\"主要算法分析\"><a href=\"#主要算法分析\" class=\"headerlink\" title=\"主要算法分析\"></a>主要算法分析</h2><ul>\n<li>需要创建一个<code>Node</code>类，作为链表的节点</li>\n<li>在插入删除时，先遍历找到操作的位置，然后通过修过<code>next</code>指向的位置，其他值的位置保持不变</li>\n<li>所以链表增删非常容易，不会影响其他节点。但是读取值，需要依次遍历找到。</li>\n</ul>\n<h2 id=\"示例代码\"><a href=\"#示例代码\" class=\"headerlink\" title=\"示例代码\"></a>示例代码</h2><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br><span class=\"line\">102</span><br><span class=\"line\">103</span><br><span class=\"line\">104</span><br><span class=\"line\">105</span><br><span class=\"line\">106</span><br><span class=\"line\">107</span><br><span class=\"line\">108</span><br><span class=\"line\">109</span><br><span class=\"line\">110</span><br><span class=\"line\">111</span><br><span class=\"line\">112</span><br><span class=\"line\">113</span><br><span class=\"line\">114</span><br><span class=\"line\">115</span><br><span class=\"line\">116</span><br><span class=\"line\">117</span><br><span class=\"line\">118</span><br><span class=\"line\">119</span><br><span class=\"line\">120</span><br><span class=\"line\">121</span><br><span class=\"line\">122</span><br><span class=\"line\">123</span><br><span class=\"line\">124</span><br><span class=\"line\">125</span><br><span class=\"line\">126</span><br><span class=\"line\">127</span><br><span class=\"line\">128</span><br><span class=\"line\">129</span><br><span class=\"line\">130</span><br><span class=\"line\">131</span><br><span class=\"line\">132</span><br><span class=\"line\">133</span><br><span class=\"line\">134</span><br><span class=\"line\">135</span><br><span class=\"line\">136</span><br><span class=\"line\">137</span><br><span class=\"line\">138</span><br><span class=\"line\">139</span><br><span class=\"line\">140</span><br><span class=\"line\">141</span><br><span class=\"line\">142</span><br><span class=\"line\">143</span><br><span class=\"line\">144</span><br><span class=\"line\">145</span><br><span class=\"line\">146</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Node</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">constructor</span>(value) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">this</span>._value = value;</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.next = <span class=\"literal\">null</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    getValue() &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">this</span>._value;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">LinkedList</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">constructor</span>() &#123;</span><br><span class=\"line\">        <span class=\"keyword\">this</span>._head = <span class=\"literal\">null</span>;</span><br><span class=\"line\">        <span class=\"keyword\">this</span>._size = <span class=\"number\">0</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    getSize() &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">this</span>._size;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    toString() &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (<span class=\"keyword\">this</span>._head === <span class=\"literal\">null</span>) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"string\">''</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">let</span> result = <span class=\"string\">''</span>;</span><br><span class=\"line\">        <span class=\"keyword\">let</span> curr = <span class=\"keyword\">this</span>._head;</span><br><span class=\"line\">        <span class=\"keyword\">while</span> (curr !== <span class=\"literal\">null</span>) &#123;</span><br><span class=\"line\">            result += curr.getValue() + <span class=\"string\">', '</span>;</span><br><span class=\"line\">            curr = curr.next;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> result;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    append(value) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (<span class=\"keyword\">this</span>._head === <span class=\"literal\">null</span>) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">this</span>._head = <span class=\"keyword\">new</span> Node(value);</span><br><span class=\"line\">            <span class=\"keyword\">this</span>._size++;</span><br><span class=\"line\">            <span class=\"keyword\">return</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">let</span> curr = <span class=\"keyword\">this</span>._head;</span><br><span class=\"line\">        <span class=\"keyword\">while</span> (curr) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (curr.next === <span class=\"literal\">null</span>) &#123;</span><br><span class=\"line\">                curr.next = <span class=\"keyword\">new</span> Node(value);</span><br><span class=\"line\">                <span class=\"keyword\">this</span>._size++;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            curr = curr.next;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    unshift(value) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (<span class=\"keyword\">this</span>._head === <span class=\"literal\">null</span>) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">this</span>._head = <span class=\"keyword\">new</span> Node(value);</span><br><span class=\"line\">            <span class=\"keyword\">this</span>._size++;</span><br><span class=\"line\">            <span class=\"keyword\">return</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">let</span> currHead = <span class=\"keyword\">this</span>._head;</span><br><span class=\"line\">        <span class=\"keyword\">this</span>._head = <span class=\"keyword\">new</span> Node(value);</span><br><span class=\"line\">        <span class=\"keyword\">this</span>._head.next = currHead;</span><br><span class=\"line\">        <span class=\"keyword\">this</span>._size++;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    insert(index, value) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (index &lt; <span class=\"number\">0</span> || index &gt; <span class=\"keyword\">this</span>._size) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"built_in\">console</span>.log(<span class=\"string\">'Index out of range'</span>);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (index === <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"keyword\">this</span>.unshift(value);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (index === <span class=\"keyword\">this</span>._size) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"keyword\">this</span>.append(value);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">let</span> curr = <span class=\"keyword\">this</span>._head;</span><br><span class=\"line\">        <span class=\"keyword\">let</span> temp = <span class=\"literal\">null</span>;</span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"keyword\">let</span> i = <span class=\"number\">0</span>; i &lt; index; i++) &#123;</span><br><span class=\"line\">            curr = curr.next;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">let</span> newNode = <span class=\"keyword\">new</span> Node(value);</span><br><span class=\"line\">        newNode.next = curr.next;</span><br><span class=\"line\">        curr.next = newNode;</span><br><span class=\"line\">        <span class=\"keyword\">this</span>._size++;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    pop() &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (<span class=\"keyword\">this</span>._size === <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"literal\">null</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">let</span> curr = <span class=\"keyword\">this</span>._head;</span><br><span class=\"line\">        <span class=\"keyword\">let</span> before = <span class=\"literal\">null</span>;</span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"keyword\">let</span> i = <span class=\"number\">0</span>; i &lt; <span class=\"keyword\">this</span>._size - <span class=\"number\">1</span>; i++) &#123;</span><br><span class=\"line\">            before = curr;</span><br><span class=\"line\">            curr = curr.next;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        before.next = <span class=\"literal\">null</span>;</span><br><span class=\"line\">        <span class=\"keyword\">this</span>._size--;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> curr.getValue();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    shift() &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (<span class=\"keyword\">this</span>._size === <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"literal\">null</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">let</span> head = <span class=\"keyword\">this</span>._head;</span><br><span class=\"line\">        <span class=\"keyword\">this</span>._head = head.next;</span><br><span class=\"line\">        <span class=\"keyword\">this</span>._size--;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> head.getValue();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    remove(index) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (index &lt; <span class=\"number\">0</span> || index &gt;= <span class=\"keyword\">this</span>._size) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"built_in\">console</span>.log(<span class=\"string\">'Index out of range'</span>);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (index === <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"keyword\">this</span>.shift();</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (index === <span class=\"keyword\">this</span>._size - <span class=\"number\">1</span>) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"keyword\">this</span>.pop();</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">let</span> curr = <span class=\"keyword\">this</span>._head;</span><br><span class=\"line\">        <span class=\"keyword\">let</span> before = <span class=\"literal\">null</span>;</span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"keyword\">let</span> i = <span class=\"number\">0</span>; i &lt; index; i++) &#123;</span><br><span class=\"line\">            before = curr;</span><br><span class=\"line\">            curr = curr.next;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        before.next = curr.next;</span><br><span class=\"line\">        <span class=\"keyword\">this</span>._size--;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> curr.getValue();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    getItem(index) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (<span class=\"keyword\">this</span>._size === <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"literal\">null</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (index &lt; <span class=\"number\">0</span> || index &gt;= <span class=\"keyword\">this</span>._size) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"built_in\">console</span>.log(<span class=\"string\">'Index out of range'</span>);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (index === <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"keyword\">this</span>._head.getValue();</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">let</span> curr = <span class=\"keyword\">this</span>._head;</span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"keyword\">let</span> i = <span class=\"number\">0</span>; i &lt; index; i++) &#123;</span><br><span class=\"line\">            curr = curr.next;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> curr.getValue();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h2 id=\"测试代码\"><a href=\"#测试代码\" class=\"headerlink\" title=\"测试代码\"></a>测试代码</h2><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> l = <span class=\"keyword\">new</span> LinkedList();</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(l.toString());</span><br><span class=\"line\">l.insert(<span class=\"number\">0</span>, <span class=\"number\">43</span>);</span><br><span class=\"line\">l.insert(<span class=\"number\">0</span>, <span class=\"number\">61</span>);</span><br><span class=\"line\">l.insert(<span class=\"number\">0</span>, <span class=\"number\">65</span>);</span><br><span class=\"line\">l.insert(<span class=\"number\">0</span>, <span class=\"number\">67</span>);</span><br><span class=\"line\">l.insert(<span class=\"number\">0</span>, <span class=\"number\">143</span>);</span><br><span class=\"line\">l.insert(<span class=\"number\">0</span>, <span class=\"number\">261</span>);</span><br><span class=\"line\">l.insert(<span class=\"number\">0</span>, <span class=\"number\">365</span>);</span><br><span class=\"line\">l.insert(<span class=\"number\">0</span>, <span class=\"number\">467</span>);</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(l.toString());</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(l.getSize());</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(l.pop());</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(l.toString());</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(l.shift());</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(l.toString());</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(l.getSize());</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(l.remove(<span class=\"number\">5</span>));</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(l.toString());</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(l.getItem(<span class=\"number\">3</span>));</span><br></pre></td></tr></table></figure>"},{"title":"计算机算法之---数据结构-队列","date":"2019-04-18T13:16:52.000Z","_content":"\n## 描述\n* 队列是一种特殊的线性表，特殊之处在于它只允许在表的前端（front）进行删除操作，而在表的后端（rear）进行插入操作，和栈一样，队列是一种操作受限制的线性表。进行插入操作的端称为队尾，进行删除操作的端称为队头。\n\n## 实现接口\n* 在头部取出`shift()`\n* 在尾部插入`append(value)`\n\n##  链式存储例子\n```js\nclass Node {\n    constructor(value) {\n        this._value = value;\n        this.next = null;\n    }\n\n    getValue() {\n        return this._value;\n    }\n}\n\nclass LinkedList {\n    constructor() {\n        this._head = null;\n        this._size = 0;\n    }\n\n    getSize() {\n        return this._size;\n    }\n\n    toString() {\n        if (this._head === null) {\n            return '';\n        }\n        let result = '';\n        let curr = this._head;\n        while (curr !== null) {\n            result += curr.getValue() + ', ';\n            curr = curr.next;\n        }\n        return result;\n    }\n\n    append(value) {\n        if (this._head === null) {\n            this._head = new Node(value);\n            this._size++;\n            return;\n        }\n        let curr = this._head;\n        while (curr) {\n            if (curr.next === null) {\n                curr.next = new Node(value);\n                this._size++;\n            }\n            curr = curr.next;\n        }\n    }\n\n    shift() {\n        if (this._size === 0) {\n            return null;\n        }\n        let head = this._head;\n        this._head = head.next;\n        this._size--;\n        return head.getValue();\n    }\n\n    getItem(index) {\n        if (this._size === 0) {\n            return null;\n        }\n        if (index < 0 || index >= this._size) {\n            return console.log('Index out of range');\n        }\n        if (index === 0) {\n            return this._head.getValue();\n        }\n        let curr = this._head;\n        for (let i = 0; i < index; i++) {\n            curr = curr.next;\n        }\n        return curr.getValue();\n    }\n}\n```","source":"_posts/queue.md","raw":"---\ntitle: 计算机算法之---数据结构-队列\ndate: 2019-04-18 21:16:52\ntags: 计算机算法\n\n---\n\n## 描述\n* 队列是一种特殊的线性表，特殊之处在于它只允许在表的前端（front）进行删除操作，而在表的后端（rear）进行插入操作，和栈一样，队列是一种操作受限制的线性表。进行插入操作的端称为队尾，进行删除操作的端称为队头。\n\n## 实现接口\n* 在头部取出`shift()`\n* 在尾部插入`append(value)`\n\n##  链式存储例子\n```js\nclass Node {\n    constructor(value) {\n        this._value = value;\n        this.next = null;\n    }\n\n    getValue() {\n        return this._value;\n    }\n}\n\nclass LinkedList {\n    constructor() {\n        this._head = null;\n        this._size = 0;\n    }\n\n    getSize() {\n        return this._size;\n    }\n\n    toString() {\n        if (this._head === null) {\n            return '';\n        }\n        let result = '';\n        let curr = this._head;\n        while (curr !== null) {\n            result += curr.getValue() + ', ';\n            curr = curr.next;\n        }\n        return result;\n    }\n\n    append(value) {\n        if (this._head === null) {\n            this._head = new Node(value);\n            this._size++;\n            return;\n        }\n        let curr = this._head;\n        while (curr) {\n            if (curr.next === null) {\n                curr.next = new Node(value);\n                this._size++;\n            }\n            curr = curr.next;\n        }\n    }\n\n    shift() {\n        if (this._size === 0) {\n            return null;\n        }\n        let head = this._head;\n        this._head = head.next;\n        this._size--;\n        return head.getValue();\n    }\n\n    getItem(index) {\n        if (this._size === 0) {\n            return null;\n        }\n        if (index < 0 || index >= this._size) {\n            return console.log('Index out of range');\n        }\n        if (index === 0) {\n            return this._head.getValue();\n        }\n        let curr = this._head;\n        for (let i = 0; i < index; i++) {\n            curr = curr.next;\n        }\n        return curr.getValue();\n    }\n}\n```","slug":"queue","published":1,"updated":"2019-06-18T10:12:49.459Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ck2vg6gvq001a4cobhkzg6488","content":"<h2 id=\"描述\"><a href=\"#描述\" class=\"headerlink\" title=\"描述\"></a>描述</h2><ul>\n<li>队列是一种特殊的线性表，特殊之处在于它只允许在表的前端（front）进行删除操作，而在表的后端（rear）进行插入操作，和栈一样，队列是一种操作受限制的线性表。进行插入操作的端称为队尾，进行删除操作的端称为队头。</li>\n</ul>\n<h2 id=\"实现接口\"><a href=\"#实现接口\" class=\"headerlink\" title=\"实现接口\"></a>实现接口</h2><ul>\n<li>在头部取出<code>shift()</code></li>\n<li>在尾部插入<code>append(value)</code></li>\n</ul>\n<h2 id=\"链式存储例子\"><a href=\"#链式存储例子\" class=\"headerlink\" title=\"链式存储例子\"></a>链式存储例子</h2><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Node</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">constructor</span>(value) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">this</span>._value = value;</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.next = <span class=\"literal\">null</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    getValue() &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">this</span>._value;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">LinkedList</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">constructor</span>() &#123;</span><br><span class=\"line\">        <span class=\"keyword\">this</span>._head = <span class=\"literal\">null</span>;</span><br><span class=\"line\">        <span class=\"keyword\">this</span>._size = <span class=\"number\">0</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    getSize() &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">this</span>._size;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    toString() &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (<span class=\"keyword\">this</span>._head === <span class=\"literal\">null</span>) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"string\">''</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">let</span> result = <span class=\"string\">''</span>;</span><br><span class=\"line\">        <span class=\"keyword\">let</span> curr = <span class=\"keyword\">this</span>._head;</span><br><span class=\"line\">        <span class=\"keyword\">while</span> (curr !== <span class=\"literal\">null</span>) &#123;</span><br><span class=\"line\">            result += curr.getValue() + <span class=\"string\">', '</span>;</span><br><span class=\"line\">            curr = curr.next;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> result;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    append(value) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (<span class=\"keyword\">this</span>._head === <span class=\"literal\">null</span>) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">this</span>._head = <span class=\"keyword\">new</span> Node(value);</span><br><span class=\"line\">            <span class=\"keyword\">this</span>._size++;</span><br><span class=\"line\">            <span class=\"keyword\">return</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">let</span> curr = <span class=\"keyword\">this</span>._head;</span><br><span class=\"line\">        <span class=\"keyword\">while</span> (curr) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (curr.next === <span class=\"literal\">null</span>) &#123;</span><br><span class=\"line\">                curr.next = <span class=\"keyword\">new</span> Node(value);</span><br><span class=\"line\">                <span class=\"keyword\">this</span>._size++;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            curr = curr.next;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    shift() &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (<span class=\"keyword\">this</span>._size === <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"literal\">null</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">let</span> head = <span class=\"keyword\">this</span>._head;</span><br><span class=\"line\">        <span class=\"keyword\">this</span>._head = head.next;</span><br><span class=\"line\">        <span class=\"keyword\">this</span>._size--;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> head.getValue();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    getItem(index) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (<span class=\"keyword\">this</span>._size === <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"literal\">null</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (index &lt; <span class=\"number\">0</span> || index &gt;= <span class=\"keyword\">this</span>._size) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"built_in\">console</span>.log(<span class=\"string\">'Index out of range'</span>);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (index === <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"keyword\">this</span>._head.getValue();</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">let</span> curr = <span class=\"keyword\">this</span>._head;</span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"keyword\">let</span> i = <span class=\"number\">0</span>; i &lt; index; i++) &#123;</span><br><span class=\"line\">            curr = curr.next;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> curr.getValue();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>","site":{"data":{"projects":[{"name":"AiTing","url":"https://github.com/renhongl/aiting","desc":"HTML5客户端音乐播放器"},{"name":"AiLiao","url":"https://github.com/renhongl/ailiao","desc":"网页聊天软件"},{"name":"Pomelo Editor","url":"https://renhongl.github.io/markdown-editor/","desc":"功能强大的在线Markdown编辑器"}]}},"excerpt":"","more":"<h2 id=\"描述\"><a href=\"#描述\" class=\"headerlink\" title=\"描述\"></a>描述</h2><ul>\n<li>队列是一种特殊的线性表，特殊之处在于它只允许在表的前端（front）进行删除操作，而在表的后端（rear）进行插入操作，和栈一样，队列是一种操作受限制的线性表。进行插入操作的端称为队尾，进行删除操作的端称为队头。</li>\n</ul>\n<h2 id=\"实现接口\"><a href=\"#实现接口\" class=\"headerlink\" title=\"实现接口\"></a>实现接口</h2><ul>\n<li>在头部取出<code>shift()</code></li>\n<li>在尾部插入<code>append(value)</code></li>\n</ul>\n<h2 id=\"链式存储例子\"><a href=\"#链式存储例子\" class=\"headerlink\" title=\"链式存储例子\"></a>链式存储例子</h2><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Node</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">constructor</span>(value) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">this</span>._value = value;</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.next = <span class=\"literal\">null</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    getValue() &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">this</span>._value;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">LinkedList</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">constructor</span>() &#123;</span><br><span class=\"line\">        <span class=\"keyword\">this</span>._head = <span class=\"literal\">null</span>;</span><br><span class=\"line\">        <span class=\"keyword\">this</span>._size = <span class=\"number\">0</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    getSize() &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">this</span>._size;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    toString() &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (<span class=\"keyword\">this</span>._head === <span class=\"literal\">null</span>) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"string\">''</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">let</span> result = <span class=\"string\">''</span>;</span><br><span class=\"line\">        <span class=\"keyword\">let</span> curr = <span class=\"keyword\">this</span>._head;</span><br><span class=\"line\">        <span class=\"keyword\">while</span> (curr !== <span class=\"literal\">null</span>) &#123;</span><br><span class=\"line\">            result += curr.getValue() + <span class=\"string\">', '</span>;</span><br><span class=\"line\">            curr = curr.next;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> result;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    append(value) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (<span class=\"keyword\">this</span>._head === <span class=\"literal\">null</span>) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">this</span>._head = <span class=\"keyword\">new</span> Node(value);</span><br><span class=\"line\">            <span class=\"keyword\">this</span>._size++;</span><br><span class=\"line\">            <span class=\"keyword\">return</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">let</span> curr = <span class=\"keyword\">this</span>._head;</span><br><span class=\"line\">        <span class=\"keyword\">while</span> (curr) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (curr.next === <span class=\"literal\">null</span>) &#123;</span><br><span class=\"line\">                curr.next = <span class=\"keyword\">new</span> Node(value);</span><br><span class=\"line\">                <span class=\"keyword\">this</span>._size++;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            curr = curr.next;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    shift() &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (<span class=\"keyword\">this</span>._size === <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"literal\">null</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">let</span> head = <span class=\"keyword\">this</span>._head;</span><br><span class=\"line\">        <span class=\"keyword\">this</span>._head = head.next;</span><br><span class=\"line\">        <span class=\"keyword\">this</span>._size--;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> head.getValue();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    getItem(index) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (<span class=\"keyword\">this</span>._size === <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"literal\">null</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (index &lt; <span class=\"number\">0</span> || index &gt;= <span class=\"keyword\">this</span>._size) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"built_in\">console</span>.log(<span class=\"string\">'Index out of range'</span>);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (index === <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"keyword\">this</span>._head.getValue();</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">let</span> curr = <span class=\"keyword\">this</span>._head;</span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"keyword\">let</span> i = <span class=\"number\">0</span>; i &lt; index; i++) &#123;</span><br><span class=\"line\">            curr = curr.next;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> curr.getValue();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>"},{"title":"Redux","date":"2018-05-10T13:16:52.000Z","_content":"\n\n\n# 什么是Redux\n\n\n\n* 在Flux基础上的改进框架。\n* 单向数流。\n* 唯一数据源。\n* 保持状态只读。\n* 数据改变只能通过纯函数完成。\n\n\n![](http://www.ruanyifeng.com/blogimg/asset/2016/bg2016091802.jpg)\n\n\n\n\n\n\n\n\n\n\n\n\n","source":"_posts/redux.md","raw":"\n---\ntitle: Redux\ndate: 2018-05-10 21:16:52\ntags: Redux\n---\n\n\n\n# 什么是Redux\n\n\n\n* 在Flux基础上的改进框架。\n* 单向数流。\n* 唯一数据源。\n* 保持状态只读。\n* 数据改变只能通过纯函数完成。\n\n\n![](http://www.ruanyifeng.com/blogimg/asset/2016/bg2016091802.jpg)\n\n\n\n\n\n\n\n\n\n\n\n\n","slug":"redux","published":1,"updated":"2019-03-18T07:36:23.422Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ck2vg6gvr001b4cobrlzv15ea","content":"<h1 id=\"什么是Redux\"><a href=\"#什么是Redux\" class=\"headerlink\" title=\"什么是Redux\"></a>什么是Redux</h1><ul>\n<li>在Flux基础上的改进框架。</li>\n<li>单向数流。</li>\n<li>唯一数据源。</li>\n<li>保持状态只读。</li>\n<li>数据改变只能通过纯函数完成。</li>\n</ul>\n<p><img src=\"http://www.ruanyifeng.com/blogimg/asset/2016/bg2016091802.jpg\" alt=\"\"></p>\n","site":{"data":{"projects":[{"name":"AiTing","url":"https://github.com/renhongl/aiting","desc":"HTML5客户端音乐播放器"},{"name":"AiLiao","url":"https://github.com/renhongl/ailiao","desc":"网页聊天软件"},{"name":"Pomelo Editor","url":"https://renhongl.github.io/markdown-editor/","desc":"功能强大的在线Markdown编辑器"}]}},"excerpt":"","more":"<h1 id=\"什么是Redux\"><a href=\"#什么是Redux\" class=\"headerlink\" title=\"什么是Redux\"></a>什么是Redux</h1><ul>\n<li>在Flux基础上的改进框架。</li>\n<li>单向数流。</li>\n<li>唯一数据源。</li>\n<li>保持状态只读。</li>\n<li>数据改变只能通过纯函数完成。</li>\n</ul>\n<p><img src=\"http://www.ruanyifeng.com/blogimg/asset/2016/bg2016091802.jpg\" alt=\"\"></p>\n"},{"title":"rest参数和扩展运算符","date":"2017-06-12T11:42:01.000Z","_content":"\n\n# 什么是rest参数\n\n用于获取函数的多余参数，这样就不用使用arguments对象了，该变量将多余的参数放入数组中。\n\n语法：`...args`\n\n\n\n* 利用rest参数，可以向函数传入任意数量的参数\n\n  ```js\n  function add(...args) {\n    let total = 0;\n    for (let key of args) {\n      total += key;\n    }\n    return total;\n  }\n\n  add(3, 5, 8);//16\n  add(3, 1);//4\n\n  ```\n\n* 使用rest参数代替arguments\n\n  ```js\n  function sortNumbers() {\n    Array.prototype.slice.call(arguments).sort();\n  }\n\n  function sortNumbers(...args) {\n    args.sort();\n  }\n  ```\n\n* rest参数之后不能再有参数，即rest参数只能是最后一个参数\n\n\n\n\n\n## 扩展运算符\n\n* 好比rest参数的逆运算，将一个数组转换为用逗号分隔的序列。语法：`...[arr]`\n\n  **在圆括号中成为参数序列：（...[1, 2, 3, 4]）=> (1, 2, 3, 4) **\n\n  **在方括号中成为新数组：[1, 2, ...[3, 4, 5]] => [1, 2, 3, 4, 5]**\n\n* 可以用来替代函数的apply方法:\n\n  ```js\n  //ES5写法-----apply方法第一个参数是上下文，第二个参数是方法的参数列表，但是是装在同一个数组里面。\n  function f(x, y, z) {\n    //...\n  }\n  var args = [0, 1, 2];\n  f.apply(null, args);\n   \n  //ES6写法\n  function f(x, y, z) {\n    //...\n  }\n  let args = [1, 2, 3];\n  f(...args);\n  ```\n\n* 求数组最大值:\n\n  ```js\n  //ES5写法\n  Math.max.apply(null, [23, 12, 54]);\n\n  //ES6写法\n  Math.max((...[23, 12, 54]));\n  //等同于求max方法的参数的最大值\n  Math.max(23, 12, 54)\n  ```\n\n* 将一个数组的所有元素一次添加到另一个数组\n\n  ```js\n  //ES5写法\n  var arr1 = [1, 2, 3];\n  var arr2 = [4, 5, 6];\n  Array.prototype.push.apply(arr1, ar2);\n\n  //ES6的写法----因为push可以接受若干参数一次添加进数组，如果传入的是一个数组，那么这个数组就被当做整体添加就一个元素了。\n  arr1.push(...arr2);\n  ```\n\n* 复制数组\n\n  ```js\n  //ES5写法----concat用于连接两个数组，然后返回一个新数组，那么这两个数组就不是指向同一个地址了。\n  const a1 = [1, 3];\n  const a2 = a1.concat();\n\n  //ES6写法\n  const a1 = [1, 2];\n  const a2 = [...a1];//创建了新数组，填入了a1的所有项\n  ```\n\n* 合并数组\n\n  ```js\n  //ES5写法\n  [1, 2].concat(more);\n  var arr1 = [1, 2];\n  var arr2 = [3, 4];\n  var arr3 = [5, 6];\n  arr1.concat(arr2, arr3);\n\n  //ES6写法\n  [1, 2, ...more];\n  [...arr1, ...arr2, ...arr3];\n\n  ```\n\n* 将实现了Iterator接口的对象，转化为数组\n\n\n  ```js\n  //类数组对象\n  let nodeList = document.querySelectorAll('div');\n  let arr1 = [...nodeList];\n\n  let arrayLike = {\n    '0': 'a',\n    '1': 'b',\n    '2': 'c',\n    'length': 3\n  };\n  let arr2 = [...arrayLike];// TypeError: Cannot spread non-iterable object.\n  //arrayLike没有部署Iterator接口，所以不能使用扩展运算符，可以使用Array.from将其装换为数组\n\n  ```\n\n* Map和Set也实现了Iterator接口\n\n  ```js\n  let map = new Map([\n    [0, 'a'],\n    [1, 'b'],\n    [2, 'c']\n  ]);\n  let arr1 = [...map.keys()];//[1, 2, 3]\n  let arr2 = [...map.values()];//[a, b, c]\n  let arr3 = [...map.entries()];//[[1, 'a'], [2, 'b'], [3, 'c']]\n  ```\n\n* Generator函数运行后，返回一个遍历器对象，因此也可以用扩展运算符\n\n  ```js\n  const go = function* () {\n    yield 1;\n    yield 2;\n    yield 3;\n  };\n\n  [...go()]//[1, 2, 3]\n  ```\n\n  ​","source":"_posts/rest参数和扩展运算符.md","raw":"---\ntitle: rest参数和扩展运算符\ndate: 2017-06-12 19:42:01\ntags: ES6\n---\n\n\n# 什么是rest参数\n\n用于获取函数的多余参数，这样就不用使用arguments对象了，该变量将多余的参数放入数组中。\n\n语法：`...args`\n\n\n\n* 利用rest参数，可以向函数传入任意数量的参数\n\n  ```js\n  function add(...args) {\n    let total = 0;\n    for (let key of args) {\n      total += key;\n    }\n    return total;\n  }\n\n  add(3, 5, 8);//16\n  add(3, 1);//4\n\n  ```\n\n* 使用rest参数代替arguments\n\n  ```js\n  function sortNumbers() {\n    Array.prototype.slice.call(arguments).sort();\n  }\n\n  function sortNumbers(...args) {\n    args.sort();\n  }\n  ```\n\n* rest参数之后不能再有参数，即rest参数只能是最后一个参数\n\n\n\n\n\n## 扩展运算符\n\n* 好比rest参数的逆运算，将一个数组转换为用逗号分隔的序列。语法：`...[arr]`\n\n  **在圆括号中成为参数序列：（...[1, 2, 3, 4]）=> (1, 2, 3, 4) **\n\n  **在方括号中成为新数组：[1, 2, ...[3, 4, 5]] => [1, 2, 3, 4, 5]**\n\n* 可以用来替代函数的apply方法:\n\n  ```js\n  //ES5写法-----apply方法第一个参数是上下文，第二个参数是方法的参数列表，但是是装在同一个数组里面。\n  function f(x, y, z) {\n    //...\n  }\n  var args = [0, 1, 2];\n  f.apply(null, args);\n   \n  //ES6写法\n  function f(x, y, z) {\n    //...\n  }\n  let args = [1, 2, 3];\n  f(...args);\n  ```\n\n* 求数组最大值:\n\n  ```js\n  //ES5写法\n  Math.max.apply(null, [23, 12, 54]);\n\n  //ES6写法\n  Math.max((...[23, 12, 54]));\n  //等同于求max方法的参数的最大值\n  Math.max(23, 12, 54)\n  ```\n\n* 将一个数组的所有元素一次添加到另一个数组\n\n  ```js\n  //ES5写法\n  var arr1 = [1, 2, 3];\n  var arr2 = [4, 5, 6];\n  Array.prototype.push.apply(arr1, ar2);\n\n  //ES6的写法----因为push可以接受若干参数一次添加进数组，如果传入的是一个数组，那么这个数组就被当做整体添加就一个元素了。\n  arr1.push(...arr2);\n  ```\n\n* 复制数组\n\n  ```js\n  //ES5写法----concat用于连接两个数组，然后返回一个新数组，那么这两个数组就不是指向同一个地址了。\n  const a1 = [1, 3];\n  const a2 = a1.concat();\n\n  //ES6写法\n  const a1 = [1, 2];\n  const a2 = [...a1];//创建了新数组，填入了a1的所有项\n  ```\n\n* 合并数组\n\n  ```js\n  //ES5写法\n  [1, 2].concat(more);\n  var arr1 = [1, 2];\n  var arr2 = [3, 4];\n  var arr3 = [5, 6];\n  arr1.concat(arr2, arr3);\n\n  //ES6写法\n  [1, 2, ...more];\n  [...arr1, ...arr2, ...arr3];\n\n  ```\n\n* 将实现了Iterator接口的对象，转化为数组\n\n\n  ```js\n  //类数组对象\n  let nodeList = document.querySelectorAll('div');\n  let arr1 = [...nodeList];\n\n  let arrayLike = {\n    '0': 'a',\n    '1': 'b',\n    '2': 'c',\n    'length': 3\n  };\n  let arr2 = [...arrayLike];// TypeError: Cannot spread non-iterable object.\n  //arrayLike没有部署Iterator接口，所以不能使用扩展运算符，可以使用Array.from将其装换为数组\n\n  ```\n\n* Map和Set也实现了Iterator接口\n\n  ```js\n  let map = new Map([\n    [0, 'a'],\n    [1, 'b'],\n    [2, 'c']\n  ]);\n  let arr1 = [...map.keys()];//[1, 2, 3]\n  let arr2 = [...map.values()];//[a, b, c]\n  let arr3 = [...map.entries()];//[[1, 'a'], [2, 'b'], [3, 'c']]\n  ```\n\n* Generator函数运行后，返回一个遍历器对象，因此也可以用扩展运算符\n\n  ```js\n  const go = function* () {\n    yield 1;\n    yield 2;\n    yield 3;\n  };\n\n  [...go()]//[1, 2, 3]\n  ```\n\n  ​","slug":"rest参数和扩展运算符","published":1,"updated":"2019-03-18T07:35:58.317Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ck2vg6gvt001d4cobi5113vlu","content":"<h1 id=\"什么是rest参数\"><a href=\"#什么是rest参数\" class=\"headerlink\" title=\"什么是rest参数\"></a>什么是rest参数</h1><p>用于获取函数的多余参数，这样就不用使用arguments对象了，该变量将多余的参数放入数组中。</p>\n<p>语法：<code>...args</code></p>\n<ul>\n<li><p>利用rest参数，可以向函数传入任意数量的参数</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">add</span>(<span class=\"params\">...args</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">let</span> total = <span class=\"number\">0</span>;</span><br><span class=\"line\">  <span class=\"keyword\">for</span> (<span class=\"keyword\">let</span> key <span class=\"keyword\">of</span> args) &#123;</span><br><span class=\"line\">    total += key;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> total;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">add(<span class=\"number\">3</span>, <span class=\"number\">5</span>, <span class=\"number\">8</span>);<span class=\"comment\">//16</span></span><br><span class=\"line\">add(<span class=\"number\">3</span>, <span class=\"number\">1</span>);<span class=\"comment\">//4</span></span><br></pre></td></tr></table></figure>\n</li>\n<li><p>使用rest参数代替arguments</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">sortNumbers</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"built_in\">Array</span>.prototype.slice.call(<span class=\"built_in\">arguments</span>).sort();</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">sortNumbers</span>(<span class=\"params\">...args</span>) </span>&#123;</span><br><span class=\"line\">  args.sort();</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>rest参数之后不能再有参数，即rest参数只能是最后一个参数</p>\n</li>\n</ul>\n<h2 id=\"扩展运算符\"><a href=\"#扩展运算符\" class=\"headerlink\" title=\"扩展运算符\"></a>扩展运算符</h2><ul>\n<li><p>好比rest参数的逆运算，将一个数组转换为用逗号分隔的序列。语法：<code>...[arr]</code></p>\n<p><strong>在圆括号中成为参数序列：（…[1, 2, 3, 4]）=&gt; (1, 2, 3, 4) </strong></p>\n<p><strong>在方括号中成为新数组：[1, 2, …[3, 4, 5]] =&gt; [1, 2, 3, 4, 5]</strong></p>\n</li>\n<li><p>可以用来替代函数的apply方法:</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//ES5写法-----apply方法第一个参数是上下文，第二个参数是方法的参数列表，但是是装在同一个数组里面。</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">f</span>(<span class=\"params\">x, y, z</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"comment\">//...</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">var</span> args = [<span class=\"number\">0</span>, <span class=\"number\">1</span>, <span class=\"number\">2</span>];</span><br><span class=\"line\">f.apply(<span class=\"literal\">null</span>, args);</span><br><span class=\"line\"> </span><br><span class=\"line\"><span class=\"comment\">//ES6写法</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">f</span>(<span class=\"params\">x, y, z</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"comment\">//...</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">let</span> args = [<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>];</span><br><span class=\"line\">f(...args);</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>求数组最大值:</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//ES5写法</span></span><br><span class=\"line\"><span class=\"built_in\">Math</span>.max.apply(<span class=\"literal\">null</span>, [<span class=\"number\">23</span>, <span class=\"number\">12</span>, <span class=\"number\">54</span>]);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//ES6写法</span></span><br><span class=\"line\"><span class=\"built_in\">Math</span>.max((...[<span class=\"number\">23</span>, <span class=\"number\">12</span>, <span class=\"number\">54</span>]));</span><br><span class=\"line\"><span class=\"comment\">//等同于求max方法的参数的最大值</span></span><br><span class=\"line\"><span class=\"built_in\">Math</span>.max(<span class=\"number\">23</span>, <span class=\"number\">12</span>, <span class=\"number\">54</span>)</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>将一个数组的所有元素一次添加到另一个数组</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//ES5写法</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> arr1 = [<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>];</span><br><span class=\"line\"><span class=\"keyword\">var</span> arr2 = [<span class=\"number\">4</span>, <span class=\"number\">5</span>, <span class=\"number\">6</span>];</span><br><span class=\"line\"><span class=\"built_in\">Array</span>.prototype.push.apply(arr1, ar2);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//ES6的写法----因为push可以接受若干参数一次添加进数组，如果传入的是一个数组，那么这个数组就被当做整体添加就一个元素了。</span></span><br><span class=\"line\">arr1.push(...arr2);</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>复制数组</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//ES5写法----concat用于连接两个数组，然后返回一个新数组，那么这两个数组就不是指向同一个地址了。</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> a1 = [<span class=\"number\">1</span>, <span class=\"number\">3</span>];</span><br><span class=\"line\"><span class=\"keyword\">const</span> a2 = a1.concat();</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//ES6写法</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> a1 = [<span class=\"number\">1</span>, <span class=\"number\">2</span>];</span><br><span class=\"line\"><span class=\"keyword\">const</span> a2 = [...a1];<span class=\"comment\">//创建了新数组，填入了a1的所有项</span></span><br></pre></td></tr></table></figure>\n</li>\n<li><p>合并数组</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//ES5写法</span></span><br><span class=\"line\">[<span class=\"number\">1</span>, <span class=\"number\">2</span>].concat(more);</span><br><span class=\"line\"><span class=\"keyword\">var</span> arr1 = [<span class=\"number\">1</span>, <span class=\"number\">2</span>];</span><br><span class=\"line\"><span class=\"keyword\">var</span> arr2 = [<span class=\"number\">3</span>, <span class=\"number\">4</span>];</span><br><span class=\"line\"><span class=\"keyword\">var</span> arr3 = [<span class=\"number\">5</span>, <span class=\"number\">6</span>];</span><br><span class=\"line\">arr1.concat(arr2, arr3);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//ES6写法</span></span><br><span class=\"line\">[<span class=\"number\">1</span>, <span class=\"number\">2</span>, ...more];</span><br><span class=\"line\">[...arr1, ...arr2, ...arr3];</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>将实现了Iterator接口的对象，转化为数组</p>\n</li>\n</ul>\n  <figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//类数组对象</span></span><br><span class=\"line\"><span class=\"keyword\">let</span> nodeList = <span class=\"built_in\">document</span>.querySelectorAll(<span class=\"string\">'div'</span>);</span><br><span class=\"line\"><span class=\"keyword\">let</span> arr1 = [...nodeList];</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">let</span> arrayLike = &#123;</span><br><span class=\"line\">  <span class=\"string\">'0'</span>: <span class=\"string\">'a'</span>,</span><br><span class=\"line\">  <span class=\"string\">'1'</span>: <span class=\"string\">'b'</span>,</span><br><span class=\"line\">  <span class=\"string\">'2'</span>: <span class=\"string\">'c'</span>,</span><br><span class=\"line\">  <span class=\"string\">'length'</span>: <span class=\"number\">3</span></span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"><span class=\"keyword\">let</span> arr2 = [...arrayLike];<span class=\"comment\">// TypeError: Cannot spread non-iterable object.</span></span><br><span class=\"line\"><span class=\"comment\">//arrayLike没有部署Iterator接口，所以不能使用扩展运算符，可以使用Array.from将其装换为数组</span></span><br></pre></td></tr></table></figure>\n<ul>\n<li><p>Map和Set也实现了Iterator接口</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> map = <span class=\"keyword\">new</span> <span class=\"built_in\">Map</span>([</span><br><span class=\"line\">  [<span class=\"number\">0</span>, <span class=\"string\">'a'</span>],</span><br><span class=\"line\">  [<span class=\"number\">1</span>, <span class=\"string\">'b'</span>],</span><br><span class=\"line\">  [<span class=\"number\">2</span>, <span class=\"string\">'c'</span>]</span><br><span class=\"line\">]);</span><br><span class=\"line\"><span class=\"keyword\">let</span> arr1 = [...map.keys()];<span class=\"comment\">//[1, 2, 3]</span></span><br><span class=\"line\"><span class=\"keyword\">let</span> arr2 = [...map.values()];<span class=\"comment\">//[a, b, c]</span></span><br><span class=\"line\"><span class=\"keyword\">let</span> arr3 = [...map.entries()];<span class=\"comment\">//[[1, 'a'], [2, 'b'], [3, 'c']]</span></span><br></pre></td></tr></table></figure>\n</li>\n<li><p>Generator函数运行后，返回一个遍历器对象，因此也可以用扩展运算符</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> go = <span class=\"function\"><span class=\"keyword\">function</span>* (<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">yield</span> <span class=\"number\">1</span>;</span><br><span class=\"line\">  <span class=\"keyword\">yield</span> <span class=\"number\">2</span>;</span><br><span class=\"line\">  <span class=\"keyword\">yield</span> <span class=\"number\">3</span>;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\">[...go()]<span class=\"comment\">//[1, 2, 3]</span></span><br></pre></td></tr></table></figure>\n<p>​</p>\n</li>\n</ul>\n","site":{"data":{"projects":[{"name":"AiTing","url":"https://github.com/renhongl/aiting","desc":"HTML5客户端音乐播放器"},{"name":"AiLiao","url":"https://github.com/renhongl/ailiao","desc":"网页聊天软件"},{"name":"Pomelo Editor","url":"https://renhongl.github.io/markdown-editor/","desc":"功能强大的在线Markdown编辑器"}]}},"excerpt":"","more":"<h1 id=\"什么是rest参数\"><a href=\"#什么是rest参数\" class=\"headerlink\" title=\"什么是rest参数\"></a>什么是rest参数</h1><p>用于获取函数的多余参数，这样就不用使用arguments对象了，该变量将多余的参数放入数组中。</p>\n<p>语法：<code>...args</code></p>\n<ul>\n<li><p>利用rest参数，可以向函数传入任意数量的参数</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">add</span>(<span class=\"params\">...args</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">let</span> total = <span class=\"number\">0</span>;</span><br><span class=\"line\">  <span class=\"keyword\">for</span> (<span class=\"keyword\">let</span> key <span class=\"keyword\">of</span> args) &#123;</span><br><span class=\"line\">    total += key;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> total;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">add(<span class=\"number\">3</span>, <span class=\"number\">5</span>, <span class=\"number\">8</span>);<span class=\"comment\">//16</span></span><br><span class=\"line\">add(<span class=\"number\">3</span>, <span class=\"number\">1</span>);<span class=\"comment\">//4</span></span><br></pre></td></tr></table></figure>\n</li>\n<li><p>使用rest参数代替arguments</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">sortNumbers</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"built_in\">Array</span>.prototype.slice.call(<span class=\"built_in\">arguments</span>).sort();</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">sortNumbers</span>(<span class=\"params\">...args</span>) </span>&#123;</span><br><span class=\"line\">  args.sort();</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>rest参数之后不能再有参数，即rest参数只能是最后一个参数</p>\n</li>\n</ul>\n<h2 id=\"扩展运算符\"><a href=\"#扩展运算符\" class=\"headerlink\" title=\"扩展运算符\"></a>扩展运算符</h2><ul>\n<li><p>好比rest参数的逆运算，将一个数组转换为用逗号分隔的序列。语法：<code>...[arr]</code></p>\n<p><strong>在圆括号中成为参数序列：（…[1, 2, 3, 4]）=&gt; (1, 2, 3, 4) </strong></p>\n<p><strong>在方括号中成为新数组：[1, 2, …[3, 4, 5]] =&gt; [1, 2, 3, 4, 5]</strong></p>\n</li>\n<li><p>可以用来替代函数的apply方法:</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//ES5写法-----apply方法第一个参数是上下文，第二个参数是方法的参数列表，但是是装在同一个数组里面。</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">f</span>(<span class=\"params\">x, y, z</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"comment\">//...</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">var</span> args = [<span class=\"number\">0</span>, <span class=\"number\">1</span>, <span class=\"number\">2</span>];</span><br><span class=\"line\">f.apply(<span class=\"literal\">null</span>, args);</span><br><span class=\"line\"> </span><br><span class=\"line\"><span class=\"comment\">//ES6写法</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">f</span>(<span class=\"params\">x, y, z</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"comment\">//...</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">let</span> args = [<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>];</span><br><span class=\"line\">f(...args);</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>求数组最大值:</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//ES5写法</span></span><br><span class=\"line\"><span class=\"built_in\">Math</span>.max.apply(<span class=\"literal\">null</span>, [<span class=\"number\">23</span>, <span class=\"number\">12</span>, <span class=\"number\">54</span>]);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//ES6写法</span></span><br><span class=\"line\"><span class=\"built_in\">Math</span>.max((...[<span class=\"number\">23</span>, <span class=\"number\">12</span>, <span class=\"number\">54</span>]));</span><br><span class=\"line\"><span class=\"comment\">//等同于求max方法的参数的最大值</span></span><br><span class=\"line\"><span class=\"built_in\">Math</span>.max(<span class=\"number\">23</span>, <span class=\"number\">12</span>, <span class=\"number\">54</span>)</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>将一个数组的所有元素一次添加到另一个数组</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//ES5写法</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> arr1 = [<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>];</span><br><span class=\"line\"><span class=\"keyword\">var</span> arr2 = [<span class=\"number\">4</span>, <span class=\"number\">5</span>, <span class=\"number\">6</span>];</span><br><span class=\"line\"><span class=\"built_in\">Array</span>.prototype.push.apply(arr1, ar2);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//ES6的写法----因为push可以接受若干参数一次添加进数组，如果传入的是一个数组，那么这个数组就被当做整体添加就一个元素了。</span></span><br><span class=\"line\">arr1.push(...arr2);</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>复制数组</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//ES5写法----concat用于连接两个数组，然后返回一个新数组，那么这两个数组就不是指向同一个地址了。</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> a1 = [<span class=\"number\">1</span>, <span class=\"number\">3</span>];</span><br><span class=\"line\"><span class=\"keyword\">const</span> a2 = a1.concat();</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//ES6写法</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> a1 = [<span class=\"number\">1</span>, <span class=\"number\">2</span>];</span><br><span class=\"line\"><span class=\"keyword\">const</span> a2 = [...a1];<span class=\"comment\">//创建了新数组，填入了a1的所有项</span></span><br></pre></td></tr></table></figure>\n</li>\n<li><p>合并数组</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//ES5写法</span></span><br><span class=\"line\">[<span class=\"number\">1</span>, <span class=\"number\">2</span>].concat(more);</span><br><span class=\"line\"><span class=\"keyword\">var</span> arr1 = [<span class=\"number\">1</span>, <span class=\"number\">2</span>];</span><br><span class=\"line\"><span class=\"keyword\">var</span> arr2 = [<span class=\"number\">3</span>, <span class=\"number\">4</span>];</span><br><span class=\"line\"><span class=\"keyword\">var</span> arr3 = [<span class=\"number\">5</span>, <span class=\"number\">6</span>];</span><br><span class=\"line\">arr1.concat(arr2, arr3);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//ES6写法</span></span><br><span class=\"line\">[<span class=\"number\">1</span>, <span class=\"number\">2</span>, ...more];</span><br><span class=\"line\">[...arr1, ...arr2, ...arr3];</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>将实现了Iterator接口的对象，转化为数组</p>\n</li>\n</ul>\n  <figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//类数组对象</span></span><br><span class=\"line\"><span class=\"keyword\">let</span> nodeList = <span class=\"built_in\">document</span>.querySelectorAll(<span class=\"string\">'div'</span>);</span><br><span class=\"line\"><span class=\"keyword\">let</span> arr1 = [...nodeList];</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">let</span> arrayLike = &#123;</span><br><span class=\"line\">  <span class=\"string\">'0'</span>: <span class=\"string\">'a'</span>,</span><br><span class=\"line\">  <span class=\"string\">'1'</span>: <span class=\"string\">'b'</span>,</span><br><span class=\"line\">  <span class=\"string\">'2'</span>: <span class=\"string\">'c'</span>,</span><br><span class=\"line\">  <span class=\"string\">'length'</span>: <span class=\"number\">3</span></span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"><span class=\"keyword\">let</span> arr2 = [...arrayLike];<span class=\"comment\">// TypeError: Cannot spread non-iterable object.</span></span><br><span class=\"line\"><span class=\"comment\">//arrayLike没有部署Iterator接口，所以不能使用扩展运算符，可以使用Array.from将其装换为数组</span></span><br></pre></td></tr></table></figure>\n<ul>\n<li><p>Map和Set也实现了Iterator接口</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> map = <span class=\"keyword\">new</span> <span class=\"built_in\">Map</span>([</span><br><span class=\"line\">  [<span class=\"number\">0</span>, <span class=\"string\">'a'</span>],</span><br><span class=\"line\">  [<span class=\"number\">1</span>, <span class=\"string\">'b'</span>],</span><br><span class=\"line\">  [<span class=\"number\">2</span>, <span class=\"string\">'c'</span>]</span><br><span class=\"line\">]);</span><br><span class=\"line\"><span class=\"keyword\">let</span> arr1 = [...map.keys()];<span class=\"comment\">//[1, 2, 3]</span></span><br><span class=\"line\"><span class=\"keyword\">let</span> arr2 = [...map.values()];<span class=\"comment\">//[a, b, c]</span></span><br><span class=\"line\"><span class=\"keyword\">let</span> arr3 = [...map.entries()];<span class=\"comment\">//[[1, 'a'], [2, 'b'], [3, 'c']]</span></span><br></pre></td></tr></table></figure>\n</li>\n<li><p>Generator函数运行后，返回一个遍历器对象，因此也可以用扩展运算符</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> go = <span class=\"function\"><span class=\"keyword\">function</span>* (<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">yield</span> <span class=\"number\">1</span>;</span><br><span class=\"line\">  <span class=\"keyword\">yield</span> <span class=\"number\">2</span>;</span><br><span class=\"line\">  <span class=\"keyword\">yield</span> <span class=\"number\">3</span>;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\">[...go()]<span class=\"comment\">//[1, 2, 3]</span></span><br></pre></td></tr></table></figure>\n<p>​</p>\n</li>\n</ul>\n"},{"title":"计算机算法之---查找","date":"2019-04-15T13:16:52.000Z","_content":"\n\n\n\n## 顺序查找\n* 按照数组顺序一个一个的找下去，直到找到\n\t```js\n    const orderSearch = (source, target) => {\n      for (let i = 0; i < source.length; i++) {\n        if (source[i] === target) {\n          return i;\n        }\n      }\n      return -1;\n    }\n\t```\n\n## 折半查找\n* 二分查找也称折半查找（Binary Search），它是一种效率较高的查找方法。但是，折半查找要求线性表必须采用顺序存储结构，而且表中元素按关键字有序排列。[1]\n\t\n\t```js\n    //使用递归\n    const binarySearch = (source, left, right, target) => {\n        let midIndex = Math.floor((right + left) / 2);\n        let mid = source[midIndex];\n        if (target === mid) {\n        \treturn midIndex;\n        } else if (target < mid) {\n        \treturn binarySearch(source, left, midIndex, target);\n        } else if(target > mid){\n        \treturn binarySearch(source, midIndex, right, target);\n        }\n        return -1;\n    }\n    \n    //不使用递归\n    const biSearch = (source, left, right, target) => {\n      while(left <= right) {\n        let mid = Math.floor((right + left) / 2);\n        if (source[mid] === target) {\n          return mid;\n        } else if (target < source[mid]) {\n          right = mid;\n        } else {\n          left = mid;\n        }\n      }\n      return -1;\n    }\n    ```\n\n## 分块查找\n* step1 先选取各块中的最大关键字构成一个索引表；\n\n* step2 查找分两个部分：先对索引表进行二分查找或\n\n* 顺序查找，以确定待查记录在哪一块中；\n\n* 然后，在已确定的块中用顺序法进行查找。\n\n## 树形查找\n\n## 散裂查找\n* 在进行查找时，在记录的存储位置与它的关键字之间建立一个确定的对应关系h,以线性表中每个元素的关键字K为自变量，通过函数h(K)计算出该元素的存储位置，我们将h函数称为散列函数或哈希函数。这种查找方法称为散列查找。\n* 就是常用的js对象的读取？\n","source":"_posts/search.md","raw":"---\ntitle: 计算机算法之---查找\ndate: 2019-04-15 21:16:52\ntags: 计算机算法\n\n---\n\n\n\n\n## 顺序查找\n* 按照数组顺序一个一个的找下去，直到找到\n\t```js\n    const orderSearch = (source, target) => {\n      for (let i = 0; i < source.length; i++) {\n        if (source[i] === target) {\n          return i;\n        }\n      }\n      return -1;\n    }\n\t```\n\n## 折半查找\n* 二分查找也称折半查找（Binary Search），它是一种效率较高的查找方法。但是，折半查找要求线性表必须采用顺序存储结构，而且表中元素按关键字有序排列。[1]\n\t\n\t```js\n    //使用递归\n    const binarySearch = (source, left, right, target) => {\n        let midIndex = Math.floor((right + left) / 2);\n        let mid = source[midIndex];\n        if (target === mid) {\n        \treturn midIndex;\n        } else if (target < mid) {\n        \treturn binarySearch(source, left, midIndex, target);\n        } else if(target > mid){\n        \treturn binarySearch(source, midIndex, right, target);\n        }\n        return -1;\n    }\n    \n    //不使用递归\n    const biSearch = (source, left, right, target) => {\n      while(left <= right) {\n        let mid = Math.floor((right + left) / 2);\n        if (source[mid] === target) {\n          return mid;\n        } else if (target < source[mid]) {\n          right = mid;\n        } else {\n          left = mid;\n        }\n      }\n      return -1;\n    }\n    ```\n\n## 分块查找\n* step1 先选取各块中的最大关键字构成一个索引表；\n\n* step2 查找分两个部分：先对索引表进行二分查找或\n\n* 顺序查找，以确定待查记录在哪一块中；\n\n* 然后，在已确定的块中用顺序法进行查找。\n\n## 树形查找\n\n## 散裂查找\n* 在进行查找时，在记录的存储位置与它的关键字之间建立一个确定的对应关系h,以线性表中每个元素的关键字K为自变量，通过函数h(K)计算出该元素的存储位置，我们将h函数称为散列函数或哈希函数。这种查找方法称为散列查找。\n* 就是常用的js对象的读取？\n","slug":"search","published":1,"updated":"2019-06-18T09:48:30.346Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ck2vg6gvw001f4cob9ns71mqf","content":"<h2 id=\"顺序查找\"><a href=\"#顺序查找\" class=\"headerlink\" title=\"顺序查找\"></a>顺序查找</h2><ul>\n<li>按照数组顺序一个一个的找下去，直到找到  <figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> orderSearch = <span class=\"function\">(<span class=\"params\">source, target</span>) =&gt;</span> &#123;</span><br><span class=\"line\">  <span class=\"keyword\">for</span> (<span class=\"keyword\">let</span> i = <span class=\"number\">0</span>; i &lt; source.length; i++) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (source[i] === target) &#123;</span><br><span class=\"line\">      <span class=\"keyword\">return</span> i;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> <span class=\"number\">-1</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n<h2 id=\"折半查找\"><a href=\"#折半查找\" class=\"headerlink\" title=\"折半查找\"></a>折半查找</h2><ul>\n<li><p>二分查找也称折半查找（Binary Search），它是一种效率较高的查找方法。但是，折半查找要求线性表必须采用顺序存储结构，而且表中元素按关键字有序排列。[1]</p>\n  <figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//使用递归</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> binarySearch = <span class=\"function\">(<span class=\"params\">source, left, right, target</span>) =&gt;</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">let</span> midIndex = <span class=\"built_in\">Math</span>.floor((right + left) / <span class=\"number\">2</span>);</span><br><span class=\"line\">    <span class=\"keyword\">let</span> mid = source[midIndex];</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (target === mid) &#123;</span><br><span class=\"line\">    \t<span class=\"keyword\">return</span> midIndex;</span><br><span class=\"line\">    &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (target &lt; mid) &#123;</span><br><span class=\"line\">    \t<span class=\"keyword\">return</span> binarySearch(source, left, midIndex, target);</span><br><span class=\"line\">    &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span>(target &gt; mid)&#123;</span><br><span class=\"line\">    \t<span class=\"keyword\">return</span> binarySearch(source, midIndex, right, target);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">-1</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//不使用递归</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> biSearch = <span class=\"function\">(<span class=\"params\">source, left, right, target</span>) =&gt;</span> &#123;</span><br><span class=\"line\">  <span class=\"keyword\">while</span>(left &lt;= right) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">let</span> mid = <span class=\"built_in\">Math</span>.floor((right + left) / <span class=\"number\">2</span>);</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (source[mid] === target) &#123;</span><br><span class=\"line\">      <span class=\"keyword\">return</span> mid;</span><br><span class=\"line\">    &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (target &lt; source[mid]) &#123;</span><br><span class=\"line\">      right = mid;</span><br><span class=\"line\">    &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">      left = mid;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> <span class=\"number\">-1</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n<h2 id=\"分块查找\"><a href=\"#分块查找\" class=\"headerlink\" title=\"分块查找\"></a>分块查找</h2><ul>\n<li><p>step1 先选取各块中的最大关键字构成一个索引表；</p>\n</li>\n<li><p>step2 查找分两个部分：先对索引表进行二分查找或</p>\n</li>\n<li><p>顺序查找，以确定待查记录在哪一块中；</p>\n</li>\n<li><p>然后，在已确定的块中用顺序法进行查找。</p>\n</li>\n</ul>\n<h2 id=\"树形查找\"><a href=\"#树形查找\" class=\"headerlink\" title=\"树形查找\"></a>树形查找</h2><h2 id=\"散裂查找\"><a href=\"#散裂查找\" class=\"headerlink\" title=\"散裂查找\"></a>散裂查找</h2><ul>\n<li>在进行查找时，在记录的存储位置与它的关键字之间建立一个确定的对应关系h,以线性表中每个元素的关键字K为自变量，通过函数h(K)计算出该元素的存储位置，我们将h函数称为散列函数或哈希函数。这种查找方法称为散列查找。</li>\n<li>就是常用的js对象的读取？</li>\n</ul>\n","site":{"data":{"projects":[{"name":"AiTing","url":"https://github.com/renhongl/aiting","desc":"HTML5客户端音乐播放器"},{"name":"AiLiao","url":"https://github.com/renhongl/ailiao","desc":"网页聊天软件"},{"name":"Pomelo Editor","url":"https://renhongl.github.io/markdown-editor/","desc":"功能强大的在线Markdown编辑器"}]}},"excerpt":"","more":"<h2 id=\"顺序查找\"><a href=\"#顺序查找\" class=\"headerlink\" title=\"顺序查找\"></a>顺序查找</h2><ul>\n<li>按照数组顺序一个一个的找下去，直到找到  <figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> orderSearch = <span class=\"function\">(<span class=\"params\">source, target</span>) =&gt;</span> &#123;</span><br><span class=\"line\">  <span class=\"keyword\">for</span> (<span class=\"keyword\">let</span> i = <span class=\"number\">0</span>; i &lt; source.length; i++) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (source[i] === target) &#123;</span><br><span class=\"line\">      <span class=\"keyword\">return</span> i;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> <span class=\"number\">-1</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n<h2 id=\"折半查找\"><a href=\"#折半查找\" class=\"headerlink\" title=\"折半查找\"></a>折半查找</h2><ul>\n<li><p>二分查找也称折半查找（Binary Search），它是一种效率较高的查找方法。但是，折半查找要求线性表必须采用顺序存储结构，而且表中元素按关键字有序排列。[1]</p>\n  <figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//使用递归</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> binarySearch = <span class=\"function\">(<span class=\"params\">source, left, right, target</span>) =&gt;</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">let</span> midIndex = <span class=\"built_in\">Math</span>.floor((right + left) / <span class=\"number\">2</span>);</span><br><span class=\"line\">    <span class=\"keyword\">let</span> mid = source[midIndex];</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (target === mid) &#123;</span><br><span class=\"line\">    \t<span class=\"keyword\">return</span> midIndex;</span><br><span class=\"line\">    &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (target &lt; mid) &#123;</span><br><span class=\"line\">    \t<span class=\"keyword\">return</span> binarySearch(source, left, midIndex, target);</span><br><span class=\"line\">    &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span>(target &gt; mid)&#123;</span><br><span class=\"line\">    \t<span class=\"keyword\">return</span> binarySearch(source, midIndex, right, target);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">-1</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//不使用递归</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> biSearch = <span class=\"function\">(<span class=\"params\">source, left, right, target</span>) =&gt;</span> &#123;</span><br><span class=\"line\">  <span class=\"keyword\">while</span>(left &lt;= right) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">let</span> mid = <span class=\"built_in\">Math</span>.floor((right + left) / <span class=\"number\">2</span>);</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (source[mid] === target) &#123;</span><br><span class=\"line\">      <span class=\"keyword\">return</span> mid;</span><br><span class=\"line\">    &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (target &lt; source[mid]) &#123;</span><br><span class=\"line\">      right = mid;</span><br><span class=\"line\">    &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">      left = mid;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> <span class=\"number\">-1</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n<h2 id=\"分块查找\"><a href=\"#分块查找\" class=\"headerlink\" title=\"分块查找\"></a>分块查找</h2><ul>\n<li><p>step1 先选取各块中的最大关键字构成一个索引表；</p>\n</li>\n<li><p>step2 查找分两个部分：先对索引表进行二分查找或</p>\n</li>\n<li><p>顺序查找，以确定待查记录在哪一块中；</p>\n</li>\n<li><p>然后，在已确定的块中用顺序法进行查找。</p>\n</li>\n</ul>\n<h2 id=\"树形查找\"><a href=\"#树形查找\" class=\"headerlink\" title=\"树形查找\"></a>树形查找</h2><h2 id=\"散裂查找\"><a href=\"#散裂查找\" class=\"headerlink\" title=\"散裂查找\"></a>散裂查找</h2><ul>\n<li>在进行查找时，在记录的存储位置与它的关键字之间建立一个确定的对应关系h,以线性表中每个元素的关键字K为自变量，通过函数h(K)计算出该元素的存储位置，我们将h函数称为散列函数或哈希函数。这种查找方法称为散列查找。</li>\n<li>就是常用的js对象的读取？</li>\n</ul>\n"},{"title":"计算机算法之---数据结构-顺序表","date":"2019-04-17T13:16:52.000Z","_content":"\n## 描述\n* 顺序表是在计算机内存中以数组的形式保存的线性表，线性表的顺序存储是指用一组地址连续的存储单元依次存储线性表中的各个元素、使得线性表中在逻辑结构上相邻的数据元素存储在相邻的物理存储单元中，即通过数据元素物理存储的相邻关系来反映数据元素之间逻辑上的相邻关系，采用顺序存储结构的线性表通常称为顺序表。顺序表是将表中的结点依次存放在计算机内存中一组地址连续的存储单元中。\n\n## 实现了部分接口\n* 获取长度`getLength()`\n* 清空`clear()`\n* 判断是否未空表`isEmpty()`\n* 在尾部插入`append(value)`\n* 在指定位置插入`insert(index, value)`\n* 从尾部取出值`pop()`\n* 从指定位置删除`remove(index)`\n* 从指定位置获取值`getItem(index)`\n* 从值获得该值得位置`locate(value)`\n* 获得所有值的快照`toString()`\n\n## 主要算法分析\n* 在添加数据时，先将要添加位置及其后面的数据往后移，再将要添加的数据添加在指定位置\n* 在删除数据时，将该位置及其后面的数据往前移\n* 所以顺序表易于读取，从数组索引即可读取，增删耗时较多。\n\n## 示例代码\n```js\nclass SequenceList {\n    constructor() {\n        this._list = [];\n    }\n\n    append(value) {\n        this._list[this._list.length] = value;\n    }\n\n    // 插入算法：\n    // 增加数组长度\n    // 从插入位置到末尾，倒序遍历，将前一个值赋值给后一个值\n    // 将插入位置的值，替换成给定的值\n    insert(index, value) {\n        if (this._list.length === 0) {\n            return this._list = [value];\n        }\n        if (this._list.length === index) {\n            return this._list[this._list.length] = value;\n        }\n        if (this._list.length < index) {\n            return;\n        }\n        for (let i = 0; i < this._list.length; i++) {\n            if (i === index) {\n                for (let j = this._list.length; j >= i; j--) {\n                    this._list[j] = this._list[j - 1];\n                }\n                this._list[index] = value;\n            }\n        }\n    }\n\n    getLength() {\n        return this._list.length;\n    }\n\n    clear() {\n        this._list = [];\n    }\n\n    isEmpty() {\n        return this._list.length === 0;\n    }\n\n    toString() {\n        let result = '';\n        for (let i = 0; i < this._list.length; i++) {\n            result += this._list[i] + ', ';\n        }\n        return result;\n    }\n\n    getItem(index) {\n        if (index < 0 || index >= this._list.length) {\n            return null;\n        }\n        return this._list[index];\n    }\n\n    locate(value) {\n        for (let i = 0; i < this._list.length; i++) {\n            if (this._list[i] === value) {\n                return i;\n            }\n        }\n        return -1;\n    }\n\n    pop() {\n        let last = this._list[this._list.length - 1];\n        this._list.length = this._list.length - 1;\n        return last;\n    }\n\n    // 删除算法：\n    // 从给定位置，到数组最后，顺序遍历，将后一个值赋值给前一个值\n    remove(index) {\n        if (index === this._list.length - 1) {\n            let last = this._list[this._list.length - 1];\n            return this._list.length = this._list.length - 1;\n        }\n        for (let i = 0; i < this._list.length; i++) {\n            if (i === index) {\n                for (let j = i; j < this._list.length - 1; j++) {\n                    this._list[j] = this._list[j + 1];\n                }\n                this._list.length = this._list.length - 1;\n                return this._list;\n            }\n        }\n        return this._list;\n    }\n}\n```","source":"_posts/seqList.md","raw":"---\ntitle: 计算机算法之---数据结构-顺序表\ndate: 2019-04-17 21:16:52\ntags: 计算机算法\n\n---\n\n## 描述\n* 顺序表是在计算机内存中以数组的形式保存的线性表，线性表的顺序存储是指用一组地址连续的存储单元依次存储线性表中的各个元素、使得线性表中在逻辑结构上相邻的数据元素存储在相邻的物理存储单元中，即通过数据元素物理存储的相邻关系来反映数据元素之间逻辑上的相邻关系，采用顺序存储结构的线性表通常称为顺序表。顺序表是将表中的结点依次存放在计算机内存中一组地址连续的存储单元中。\n\n## 实现了部分接口\n* 获取长度`getLength()`\n* 清空`clear()`\n* 判断是否未空表`isEmpty()`\n* 在尾部插入`append(value)`\n* 在指定位置插入`insert(index, value)`\n* 从尾部取出值`pop()`\n* 从指定位置删除`remove(index)`\n* 从指定位置获取值`getItem(index)`\n* 从值获得该值得位置`locate(value)`\n* 获得所有值的快照`toString()`\n\n## 主要算法分析\n* 在添加数据时，先将要添加位置及其后面的数据往后移，再将要添加的数据添加在指定位置\n* 在删除数据时，将该位置及其后面的数据往前移\n* 所以顺序表易于读取，从数组索引即可读取，增删耗时较多。\n\n## 示例代码\n```js\nclass SequenceList {\n    constructor() {\n        this._list = [];\n    }\n\n    append(value) {\n        this._list[this._list.length] = value;\n    }\n\n    // 插入算法：\n    // 增加数组长度\n    // 从插入位置到末尾，倒序遍历，将前一个值赋值给后一个值\n    // 将插入位置的值，替换成给定的值\n    insert(index, value) {\n        if (this._list.length === 0) {\n            return this._list = [value];\n        }\n        if (this._list.length === index) {\n            return this._list[this._list.length] = value;\n        }\n        if (this._list.length < index) {\n            return;\n        }\n        for (let i = 0; i < this._list.length; i++) {\n            if (i === index) {\n                for (let j = this._list.length; j >= i; j--) {\n                    this._list[j] = this._list[j - 1];\n                }\n                this._list[index] = value;\n            }\n        }\n    }\n\n    getLength() {\n        return this._list.length;\n    }\n\n    clear() {\n        this._list = [];\n    }\n\n    isEmpty() {\n        return this._list.length === 0;\n    }\n\n    toString() {\n        let result = '';\n        for (let i = 0; i < this._list.length; i++) {\n            result += this._list[i] + ', ';\n        }\n        return result;\n    }\n\n    getItem(index) {\n        if (index < 0 || index >= this._list.length) {\n            return null;\n        }\n        return this._list[index];\n    }\n\n    locate(value) {\n        for (let i = 0; i < this._list.length; i++) {\n            if (this._list[i] === value) {\n                return i;\n            }\n        }\n        return -1;\n    }\n\n    pop() {\n        let last = this._list[this._list.length - 1];\n        this._list.length = this._list.length - 1;\n        return last;\n    }\n\n    // 删除算法：\n    // 从给定位置，到数组最后，顺序遍历，将后一个值赋值给前一个值\n    remove(index) {\n        if (index === this._list.length - 1) {\n            let last = this._list[this._list.length - 1];\n            return this._list.length = this._list.length - 1;\n        }\n        for (let i = 0; i < this._list.length; i++) {\n            if (i === index) {\n                for (let j = i; j < this._list.length - 1; j++) {\n                    this._list[j] = this._list[j + 1];\n                }\n                this._list.length = this._list.length - 1;\n                return this._list;\n            }\n        }\n        return this._list;\n    }\n}\n```","slug":"seqList","published":1,"updated":"2019-06-18T10:11:30.533Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ck2vg6gvy001i4cob1j318lyi","content":"<h2 id=\"描述\"><a href=\"#描述\" class=\"headerlink\" title=\"描述\"></a>描述</h2><ul>\n<li>顺序表是在计算机内存中以数组的形式保存的线性表，线性表的顺序存储是指用一组地址连续的存储单元依次存储线性表中的各个元素、使得线性表中在逻辑结构上相邻的数据元素存储在相邻的物理存储单元中，即通过数据元素物理存储的相邻关系来反映数据元素之间逻辑上的相邻关系，采用顺序存储结构的线性表通常称为顺序表。顺序表是将表中的结点依次存放在计算机内存中一组地址连续的存储单元中。</li>\n</ul>\n<h2 id=\"实现了部分接口\"><a href=\"#实现了部分接口\" class=\"headerlink\" title=\"实现了部分接口\"></a>实现了部分接口</h2><ul>\n<li>获取长度<code>getLength()</code></li>\n<li>清空<code>clear()</code></li>\n<li>判断是否未空表<code>isEmpty()</code></li>\n<li>在尾部插入<code>append(value)</code></li>\n<li>在指定位置插入<code>insert(index, value)</code></li>\n<li>从尾部取出值<code>pop()</code></li>\n<li>从指定位置删除<code>remove(index)</code></li>\n<li>从指定位置获取值<code>getItem(index)</code></li>\n<li>从值获得该值得位置<code>locate(value)</code></li>\n<li>获得所有值的快照<code>toString()</code></li>\n</ul>\n<h2 id=\"主要算法分析\"><a href=\"#主要算法分析\" class=\"headerlink\" title=\"主要算法分析\"></a>主要算法分析</h2><ul>\n<li>在添加数据时，先将要添加位置及其后面的数据往后移，再将要添加的数据添加在指定位置</li>\n<li>在删除数据时，将该位置及其后面的数据往前移</li>\n<li>所以顺序表易于读取，从数组索引即可读取，增删耗时较多。</li>\n</ul>\n<h2 id=\"示例代码\"><a href=\"#示例代码\" class=\"headerlink\" title=\"示例代码\"></a>示例代码</h2><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">SequenceList</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">constructor</span>() &#123;</span><br><span class=\"line\">        <span class=\"keyword\">this</span>._list = [];</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    append(value) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">this</span>._list[<span class=\"keyword\">this</span>._list.length] = value;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// 插入算法：</span></span><br><span class=\"line\">    <span class=\"comment\">// 增加数组长度</span></span><br><span class=\"line\">    <span class=\"comment\">// 从插入位置到末尾，倒序遍历，将前一个值赋值给后一个值</span></span><br><span class=\"line\">    <span class=\"comment\">// 将插入位置的值，替换成给定的值</span></span><br><span class=\"line\">    insert(index, value) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (<span class=\"keyword\">this</span>._list.length === <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"keyword\">this</span>._list = [value];</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (<span class=\"keyword\">this</span>._list.length === index) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"keyword\">this</span>._list[<span class=\"keyword\">this</span>._list.length] = value;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (<span class=\"keyword\">this</span>._list.length &lt; index) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"keyword\">let</span> i = <span class=\"number\">0</span>; i &lt; <span class=\"keyword\">this</span>._list.length; i++) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (i === index) &#123;</span><br><span class=\"line\">                <span class=\"keyword\">for</span> (<span class=\"keyword\">let</span> j = <span class=\"keyword\">this</span>._list.length; j &gt;= i; j--) &#123;</span><br><span class=\"line\">                    <span class=\"keyword\">this</span>._list[j] = <span class=\"keyword\">this</span>._list[j - <span class=\"number\">1</span>];</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">                <span class=\"keyword\">this</span>._list[index] = value;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    getLength() &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">this</span>._list.length;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    clear() &#123;</span><br><span class=\"line\">        <span class=\"keyword\">this</span>._list = [];</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    isEmpty() &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">this</span>._list.length === <span class=\"number\">0</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    toString() &#123;</span><br><span class=\"line\">        <span class=\"keyword\">let</span> result = <span class=\"string\">''</span>;</span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"keyword\">let</span> i = <span class=\"number\">0</span>; i &lt; <span class=\"keyword\">this</span>._list.length; i++) &#123;</span><br><span class=\"line\">            result += <span class=\"keyword\">this</span>._list[i] + <span class=\"string\">', '</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> result;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    getItem(index) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (index &lt; <span class=\"number\">0</span> || index &gt;= <span class=\"keyword\">this</span>._list.length) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"literal\">null</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">this</span>._list[index];</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    locate(value) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"keyword\">let</span> i = <span class=\"number\">0</span>; i &lt; <span class=\"keyword\">this</span>._list.length; i++) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (<span class=\"keyword\">this</span>._list[i] === value) &#123;</span><br><span class=\"line\">                <span class=\"keyword\">return</span> i;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"number\">-1</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    pop() &#123;</span><br><span class=\"line\">        <span class=\"keyword\">let</span> last = <span class=\"keyword\">this</span>._list[<span class=\"keyword\">this</span>._list.length - <span class=\"number\">1</span>];</span><br><span class=\"line\">        <span class=\"keyword\">this</span>._list.length = <span class=\"keyword\">this</span>._list.length - <span class=\"number\">1</span>;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> last;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// 删除算法：</span></span><br><span class=\"line\">    <span class=\"comment\">// 从给定位置，到数组最后，顺序遍历，将后一个值赋值给前一个值</span></span><br><span class=\"line\">    remove(index) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (index === <span class=\"keyword\">this</span>._list.length - <span class=\"number\">1</span>) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">let</span> last = <span class=\"keyword\">this</span>._list[<span class=\"keyword\">this</span>._list.length - <span class=\"number\">1</span>];</span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"keyword\">this</span>._list.length = <span class=\"keyword\">this</span>._list.length - <span class=\"number\">1</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"keyword\">let</span> i = <span class=\"number\">0</span>; i &lt; <span class=\"keyword\">this</span>._list.length; i++) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (i === index) &#123;</span><br><span class=\"line\">                <span class=\"keyword\">for</span> (<span class=\"keyword\">let</span> j = i; j &lt; <span class=\"keyword\">this</span>._list.length - <span class=\"number\">1</span>; j++) &#123;</span><br><span class=\"line\">                    <span class=\"keyword\">this</span>._list[j] = <span class=\"keyword\">this</span>._list[j + <span class=\"number\">1</span>];</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">                <span class=\"keyword\">this</span>._list.length = <span class=\"keyword\">this</span>._list.length - <span class=\"number\">1</span>;</span><br><span class=\"line\">                <span class=\"keyword\">return</span> <span class=\"keyword\">this</span>._list;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">this</span>._list;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>","site":{"data":{"projects":[{"name":"AiTing","url":"https://github.com/renhongl/aiting","desc":"HTML5客户端音乐播放器"},{"name":"AiLiao","url":"https://github.com/renhongl/ailiao","desc":"网页聊天软件"},{"name":"Pomelo Editor","url":"https://renhongl.github.io/markdown-editor/","desc":"功能强大的在线Markdown编辑器"}]}},"excerpt":"","more":"<h2 id=\"描述\"><a href=\"#描述\" class=\"headerlink\" title=\"描述\"></a>描述</h2><ul>\n<li>顺序表是在计算机内存中以数组的形式保存的线性表，线性表的顺序存储是指用一组地址连续的存储单元依次存储线性表中的各个元素、使得线性表中在逻辑结构上相邻的数据元素存储在相邻的物理存储单元中，即通过数据元素物理存储的相邻关系来反映数据元素之间逻辑上的相邻关系，采用顺序存储结构的线性表通常称为顺序表。顺序表是将表中的结点依次存放在计算机内存中一组地址连续的存储单元中。</li>\n</ul>\n<h2 id=\"实现了部分接口\"><a href=\"#实现了部分接口\" class=\"headerlink\" title=\"实现了部分接口\"></a>实现了部分接口</h2><ul>\n<li>获取长度<code>getLength()</code></li>\n<li>清空<code>clear()</code></li>\n<li>判断是否未空表<code>isEmpty()</code></li>\n<li>在尾部插入<code>append(value)</code></li>\n<li>在指定位置插入<code>insert(index, value)</code></li>\n<li>从尾部取出值<code>pop()</code></li>\n<li>从指定位置删除<code>remove(index)</code></li>\n<li>从指定位置获取值<code>getItem(index)</code></li>\n<li>从值获得该值得位置<code>locate(value)</code></li>\n<li>获得所有值的快照<code>toString()</code></li>\n</ul>\n<h2 id=\"主要算法分析\"><a href=\"#主要算法分析\" class=\"headerlink\" title=\"主要算法分析\"></a>主要算法分析</h2><ul>\n<li>在添加数据时，先将要添加位置及其后面的数据往后移，再将要添加的数据添加在指定位置</li>\n<li>在删除数据时，将该位置及其后面的数据往前移</li>\n<li>所以顺序表易于读取，从数组索引即可读取，增删耗时较多。</li>\n</ul>\n<h2 id=\"示例代码\"><a href=\"#示例代码\" class=\"headerlink\" title=\"示例代码\"></a>示例代码</h2><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">SequenceList</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">constructor</span>() &#123;</span><br><span class=\"line\">        <span class=\"keyword\">this</span>._list = [];</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    append(value) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">this</span>._list[<span class=\"keyword\">this</span>._list.length] = value;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// 插入算法：</span></span><br><span class=\"line\">    <span class=\"comment\">// 增加数组长度</span></span><br><span class=\"line\">    <span class=\"comment\">// 从插入位置到末尾，倒序遍历，将前一个值赋值给后一个值</span></span><br><span class=\"line\">    <span class=\"comment\">// 将插入位置的值，替换成给定的值</span></span><br><span class=\"line\">    insert(index, value) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (<span class=\"keyword\">this</span>._list.length === <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"keyword\">this</span>._list = [value];</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (<span class=\"keyword\">this</span>._list.length === index) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"keyword\">this</span>._list[<span class=\"keyword\">this</span>._list.length] = value;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (<span class=\"keyword\">this</span>._list.length &lt; index) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"keyword\">let</span> i = <span class=\"number\">0</span>; i &lt; <span class=\"keyword\">this</span>._list.length; i++) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (i === index) &#123;</span><br><span class=\"line\">                <span class=\"keyword\">for</span> (<span class=\"keyword\">let</span> j = <span class=\"keyword\">this</span>._list.length; j &gt;= i; j--) &#123;</span><br><span class=\"line\">                    <span class=\"keyword\">this</span>._list[j] = <span class=\"keyword\">this</span>._list[j - <span class=\"number\">1</span>];</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">                <span class=\"keyword\">this</span>._list[index] = value;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    getLength() &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">this</span>._list.length;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    clear() &#123;</span><br><span class=\"line\">        <span class=\"keyword\">this</span>._list = [];</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    isEmpty() &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">this</span>._list.length === <span class=\"number\">0</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    toString() &#123;</span><br><span class=\"line\">        <span class=\"keyword\">let</span> result = <span class=\"string\">''</span>;</span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"keyword\">let</span> i = <span class=\"number\">0</span>; i &lt; <span class=\"keyword\">this</span>._list.length; i++) &#123;</span><br><span class=\"line\">            result += <span class=\"keyword\">this</span>._list[i] + <span class=\"string\">', '</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> result;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    getItem(index) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (index &lt; <span class=\"number\">0</span> || index &gt;= <span class=\"keyword\">this</span>._list.length) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"literal\">null</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">this</span>._list[index];</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    locate(value) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"keyword\">let</span> i = <span class=\"number\">0</span>; i &lt; <span class=\"keyword\">this</span>._list.length; i++) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (<span class=\"keyword\">this</span>._list[i] === value) &#123;</span><br><span class=\"line\">                <span class=\"keyword\">return</span> i;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"number\">-1</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    pop() &#123;</span><br><span class=\"line\">        <span class=\"keyword\">let</span> last = <span class=\"keyword\">this</span>._list[<span class=\"keyword\">this</span>._list.length - <span class=\"number\">1</span>];</span><br><span class=\"line\">        <span class=\"keyword\">this</span>._list.length = <span class=\"keyword\">this</span>._list.length - <span class=\"number\">1</span>;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> last;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// 删除算法：</span></span><br><span class=\"line\">    <span class=\"comment\">// 从给定位置，到数组最后，顺序遍历，将后一个值赋值给前一个值</span></span><br><span class=\"line\">    remove(index) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (index === <span class=\"keyword\">this</span>._list.length - <span class=\"number\">1</span>) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">let</span> last = <span class=\"keyword\">this</span>._list[<span class=\"keyword\">this</span>._list.length - <span class=\"number\">1</span>];</span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"keyword\">this</span>._list.length = <span class=\"keyword\">this</span>._list.length - <span class=\"number\">1</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"keyword\">let</span> i = <span class=\"number\">0</span>; i &lt; <span class=\"keyword\">this</span>._list.length; i++) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (i === index) &#123;</span><br><span class=\"line\">                <span class=\"keyword\">for</span> (<span class=\"keyword\">let</span> j = i; j &lt; <span class=\"keyword\">this</span>._list.length - <span class=\"number\">1</span>; j++) &#123;</span><br><span class=\"line\">                    <span class=\"keyword\">this</span>._list[j] = <span class=\"keyword\">this</span>._list[j + <span class=\"number\">1</span>];</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">                <span class=\"keyword\">this</span>._list.length = <span class=\"keyword\">this</span>._list.length - <span class=\"number\">1</span>;</span><br><span class=\"line\">                <span class=\"keyword\">return</span> <span class=\"keyword\">this</span>._list;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">this</span>._list;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>"},{"title":"计算机算法之---数据结构-栈","date":"2019-04-18T13:16:52.000Z","_content":"\n## 描述\n* 栈是限定仅在表尾进行插入和删除操作的线性表。“栈”者，存储货物或供旅客住宿的地方，可引申为仓库、中转站，引入到计算机领域里，就是指数据暂时存储的地方，所以才有进栈、出栈的说法。\n* 栈作为一种数据结构，是一种只能在一端进行插入和删除操作的特殊线性表。它按照后进先出的原则存储数据，先进入的数据被压入栈底，最后的数据在栈顶，需要读数据的时候从栈顶开始弹出数据（最后一个数据被第一个读出来）。栈具有记忆作用，对栈的插入与删除操作中，不需要改变栈底指针。\n* 栈是允许在同一端进行插入和删除操作的特殊线性表。允许进行插入和删除操作的一端称为栈顶(top)，另一端为栈底(bottom)；栈底固定，而栈顶浮动；栈中元素个数为零时称为空栈。插入一般称为进栈（PUSH），删除则称为退栈（POP）。栈也称为后进先出表。\n* 栈可以用来在函数调用的时候存储断点，做递归时要用到栈！\n\n## 实现接口\n* 从尾部插入`append(value)`\n* 从尾部删除`pop()`\n\n## 链式存储例子\n\n```js\nclass Node {\n    constructor(value) {\n        this._value = value;\n        this.next = null;\n    }\n\n    getValue() {\n        return this._value;\n    }\n}\n\nclass LinkedList {\n    constructor() {\n        this._head = null;\n        this._size = 0;\n    }\n\n    getSize() {\n        return this._size;\n    }\n\n    toString() {\n        if (this._head === null) {\n            return '';\n        }\n        let result = '';\n        let curr = this._head;\n        while (curr !== null) {\n            result += curr.getValue() + ', ';\n            curr = curr.next;\n        }\n        return result;\n    }\n\n    append(value) {\n        if (this._head === null) {\n            this._head = new Node(value);\n            this._size++;\n            return;\n        }\n        let curr = this._head;\n        while (curr) {\n            if (curr.next === null) {\n                curr.next = new Node(value);\n                this._size++;\n            }\n            curr = curr.next;\n        }\n    }\n\n    pop() {\n        if (this._size === 0) {\n            return null;\n        }\n        let curr = this._head;\n        let before = null;\n        for (let i = 0; i < this._size - 1; i++) {\n            before = curr;\n            curr = curr.next;\n        }\n        before.next = null;\n        this._size--;\n        return curr.getValue();\n    }\n\n    getItem(index) {\n        if (this._size === 0) {\n            return null;\n        }\n        if (index < 0 || index >= this._size) {\n            return console.log('Index out of range');\n        }\n        if (index === 0) {\n            return this._head.getValue();\n        }\n        let curr = this._head;\n        for (let i = 0; i < index; i++) {\n            curr = curr.next;\n        }\n        return curr.getValue();\n    }\n}\n```","source":"_posts/stack.md","raw":"---\ntitle: 计算机算法之---数据结构-栈\ndate: 2019-04-18 21:16:52\ntags: 计算机算法\n\n---\n\n## 描述\n* 栈是限定仅在表尾进行插入和删除操作的线性表。“栈”者，存储货物或供旅客住宿的地方，可引申为仓库、中转站，引入到计算机领域里，就是指数据暂时存储的地方，所以才有进栈、出栈的说法。\n* 栈作为一种数据结构，是一种只能在一端进行插入和删除操作的特殊线性表。它按照后进先出的原则存储数据，先进入的数据被压入栈底，最后的数据在栈顶，需要读数据的时候从栈顶开始弹出数据（最后一个数据被第一个读出来）。栈具有记忆作用，对栈的插入与删除操作中，不需要改变栈底指针。\n* 栈是允许在同一端进行插入和删除操作的特殊线性表。允许进行插入和删除操作的一端称为栈顶(top)，另一端为栈底(bottom)；栈底固定，而栈顶浮动；栈中元素个数为零时称为空栈。插入一般称为进栈（PUSH），删除则称为退栈（POP）。栈也称为后进先出表。\n* 栈可以用来在函数调用的时候存储断点，做递归时要用到栈！\n\n## 实现接口\n* 从尾部插入`append(value)`\n* 从尾部删除`pop()`\n\n## 链式存储例子\n\n```js\nclass Node {\n    constructor(value) {\n        this._value = value;\n        this.next = null;\n    }\n\n    getValue() {\n        return this._value;\n    }\n}\n\nclass LinkedList {\n    constructor() {\n        this._head = null;\n        this._size = 0;\n    }\n\n    getSize() {\n        return this._size;\n    }\n\n    toString() {\n        if (this._head === null) {\n            return '';\n        }\n        let result = '';\n        let curr = this._head;\n        while (curr !== null) {\n            result += curr.getValue() + ', ';\n            curr = curr.next;\n        }\n        return result;\n    }\n\n    append(value) {\n        if (this._head === null) {\n            this._head = new Node(value);\n            this._size++;\n            return;\n        }\n        let curr = this._head;\n        while (curr) {\n            if (curr.next === null) {\n                curr.next = new Node(value);\n                this._size++;\n            }\n            curr = curr.next;\n        }\n    }\n\n    pop() {\n        if (this._size === 0) {\n            return null;\n        }\n        let curr = this._head;\n        let before = null;\n        for (let i = 0; i < this._size - 1; i++) {\n            before = curr;\n            curr = curr.next;\n        }\n        before.next = null;\n        this._size--;\n        return curr.getValue();\n    }\n\n    getItem(index) {\n        if (this._size === 0) {\n            return null;\n        }\n        if (index < 0 || index >= this._size) {\n            return console.log('Index out of range');\n        }\n        if (index === 0) {\n            return this._head.getValue();\n        }\n        let curr = this._head;\n        for (let i = 0; i < index; i++) {\n            curr = curr.next;\n        }\n        return curr.getValue();\n    }\n}\n```","slug":"stack","published":1,"updated":"2019-06-18T10:12:00.434Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ck2vg6gw1001k4cobg3u8sypf","content":"<h2 id=\"描述\"><a href=\"#描述\" class=\"headerlink\" title=\"描述\"></a>描述</h2><ul>\n<li>栈是限定仅在表尾进行插入和删除操作的线性表。“栈”者，存储货物或供旅客住宿的地方，可引申为仓库、中转站，引入到计算机领域里，就是指数据暂时存储的地方，所以才有进栈、出栈的说法。</li>\n<li>栈作为一种数据结构，是一种只能在一端进行插入和删除操作的特殊线性表。它按照后进先出的原则存储数据，先进入的数据被压入栈底，最后的数据在栈顶，需要读数据的时候从栈顶开始弹出数据（最后一个数据被第一个读出来）。栈具有记忆作用，对栈的插入与删除操作中，不需要改变栈底指针。</li>\n<li>栈是允许在同一端进行插入和删除操作的特殊线性表。允许进行插入和删除操作的一端称为栈顶(top)，另一端为栈底(bottom)；栈底固定，而栈顶浮动；栈中元素个数为零时称为空栈。插入一般称为进栈（PUSH），删除则称为退栈（POP）。栈也称为后进先出表。</li>\n<li>栈可以用来在函数调用的时候存储断点，做递归时要用到栈！</li>\n</ul>\n<h2 id=\"实现接口\"><a href=\"#实现接口\" class=\"headerlink\" title=\"实现接口\"></a>实现接口</h2><ul>\n<li>从尾部插入<code>append(value)</code></li>\n<li>从尾部删除<code>pop()</code></li>\n</ul>\n<h2 id=\"链式存储例子\"><a href=\"#链式存储例子\" class=\"headerlink\" title=\"链式存储例子\"></a>链式存储例子</h2><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Node</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">constructor</span>(value) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">this</span>._value = value;</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.next = <span class=\"literal\">null</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    getValue() &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">this</span>._value;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">LinkedList</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">constructor</span>() &#123;</span><br><span class=\"line\">        <span class=\"keyword\">this</span>._head = <span class=\"literal\">null</span>;</span><br><span class=\"line\">        <span class=\"keyword\">this</span>._size = <span class=\"number\">0</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    getSize() &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">this</span>._size;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    toString() &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (<span class=\"keyword\">this</span>._head === <span class=\"literal\">null</span>) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"string\">''</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">let</span> result = <span class=\"string\">''</span>;</span><br><span class=\"line\">        <span class=\"keyword\">let</span> curr = <span class=\"keyword\">this</span>._head;</span><br><span class=\"line\">        <span class=\"keyword\">while</span> (curr !== <span class=\"literal\">null</span>) &#123;</span><br><span class=\"line\">            result += curr.getValue() + <span class=\"string\">', '</span>;</span><br><span class=\"line\">            curr = curr.next;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> result;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    append(value) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (<span class=\"keyword\">this</span>._head === <span class=\"literal\">null</span>) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">this</span>._head = <span class=\"keyword\">new</span> Node(value);</span><br><span class=\"line\">            <span class=\"keyword\">this</span>._size++;</span><br><span class=\"line\">            <span class=\"keyword\">return</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">let</span> curr = <span class=\"keyword\">this</span>._head;</span><br><span class=\"line\">        <span class=\"keyword\">while</span> (curr) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (curr.next === <span class=\"literal\">null</span>) &#123;</span><br><span class=\"line\">                curr.next = <span class=\"keyword\">new</span> Node(value);</span><br><span class=\"line\">                <span class=\"keyword\">this</span>._size++;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            curr = curr.next;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    pop() &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (<span class=\"keyword\">this</span>._size === <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"literal\">null</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">let</span> curr = <span class=\"keyword\">this</span>._head;</span><br><span class=\"line\">        <span class=\"keyword\">let</span> before = <span class=\"literal\">null</span>;</span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"keyword\">let</span> i = <span class=\"number\">0</span>; i &lt; <span class=\"keyword\">this</span>._size - <span class=\"number\">1</span>; i++) &#123;</span><br><span class=\"line\">            before = curr;</span><br><span class=\"line\">            curr = curr.next;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        before.next = <span class=\"literal\">null</span>;</span><br><span class=\"line\">        <span class=\"keyword\">this</span>._size--;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> curr.getValue();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    getItem(index) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (<span class=\"keyword\">this</span>._size === <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"literal\">null</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (index &lt; <span class=\"number\">0</span> || index &gt;= <span class=\"keyword\">this</span>._size) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"built_in\">console</span>.log(<span class=\"string\">'Index out of range'</span>);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (index === <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"keyword\">this</span>._head.getValue();</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">let</span> curr = <span class=\"keyword\">this</span>._head;</span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"keyword\">let</span> i = <span class=\"number\">0</span>; i &lt; index; i++) &#123;</span><br><span class=\"line\">            curr = curr.next;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> curr.getValue();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>","site":{"data":{"projects":[{"name":"AiTing","url":"https://github.com/renhongl/aiting","desc":"HTML5客户端音乐播放器"},{"name":"AiLiao","url":"https://github.com/renhongl/ailiao","desc":"网页聊天软件"},{"name":"Pomelo Editor","url":"https://renhongl.github.io/markdown-editor/","desc":"功能强大的在线Markdown编辑器"}]}},"excerpt":"","more":"<h2 id=\"描述\"><a href=\"#描述\" class=\"headerlink\" title=\"描述\"></a>描述</h2><ul>\n<li>栈是限定仅在表尾进行插入和删除操作的线性表。“栈”者，存储货物或供旅客住宿的地方，可引申为仓库、中转站，引入到计算机领域里，就是指数据暂时存储的地方，所以才有进栈、出栈的说法。</li>\n<li>栈作为一种数据结构，是一种只能在一端进行插入和删除操作的特殊线性表。它按照后进先出的原则存储数据，先进入的数据被压入栈底，最后的数据在栈顶，需要读数据的时候从栈顶开始弹出数据（最后一个数据被第一个读出来）。栈具有记忆作用，对栈的插入与删除操作中，不需要改变栈底指针。</li>\n<li>栈是允许在同一端进行插入和删除操作的特殊线性表。允许进行插入和删除操作的一端称为栈顶(top)，另一端为栈底(bottom)；栈底固定，而栈顶浮动；栈中元素个数为零时称为空栈。插入一般称为进栈（PUSH），删除则称为退栈（POP）。栈也称为后进先出表。</li>\n<li>栈可以用来在函数调用的时候存储断点，做递归时要用到栈！</li>\n</ul>\n<h2 id=\"实现接口\"><a href=\"#实现接口\" class=\"headerlink\" title=\"实现接口\"></a>实现接口</h2><ul>\n<li>从尾部插入<code>append(value)</code></li>\n<li>从尾部删除<code>pop()</code></li>\n</ul>\n<h2 id=\"链式存储例子\"><a href=\"#链式存储例子\" class=\"headerlink\" title=\"链式存储例子\"></a>链式存储例子</h2><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Node</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">constructor</span>(value) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">this</span>._value = value;</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.next = <span class=\"literal\">null</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    getValue() &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">this</span>._value;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">LinkedList</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">constructor</span>() &#123;</span><br><span class=\"line\">        <span class=\"keyword\">this</span>._head = <span class=\"literal\">null</span>;</span><br><span class=\"line\">        <span class=\"keyword\">this</span>._size = <span class=\"number\">0</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    getSize() &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">this</span>._size;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    toString() &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (<span class=\"keyword\">this</span>._head === <span class=\"literal\">null</span>) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"string\">''</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">let</span> result = <span class=\"string\">''</span>;</span><br><span class=\"line\">        <span class=\"keyword\">let</span> curr = <span class=\"keyword\">this</span>._head;</span><br><span class=\"line\">        <span class=\"keyword\">while</span> (curr !== <span class=\"literal\">null</span>) &#123;</span><br><span class=\"line\">            result += curr.getValue() + <span class=\"string\">', '</span>;</span><br><span class=\"line\">            curr = curr.next;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> result;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    append(value) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (<span class=\"keyword\">this</span>._head === <span class=\"literal\">null</span>) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">this</span>._head = <span class=\"keyword\">new</span> Node(value);</span><br><span class=\"line\">            <span class=\"keyword\">this</span>._size++;</span><br><span class=\"line\">            <span class=\"keyword\">return</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">let</span> curr = <span class=\"keyword\">this</span>._head;</span><br><span class=\"line\">        <span class=\"keyword\">while</span> (curr) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (curr.next === <span class=\"literal\">null</span>) &#123;</span><br><span class=\"line\">                curr.next = <span class=\"keyword\">new</span> Node(value);</span><br><span class=\"line\">                <span class=\"keyword\">this</span>._size++;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            curr = curr.next;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    pop() &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (<span class=\"keyword\">this</span>._size === <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"literal\">null</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">let</span> curr = <span class=\"keyword\">this</span>._head;</span><br><span class=\"line\">        <span class=\"keyword\">let</span> before = <span class=\"literal\">null</span>;</span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"keyword\">let</span> i = <span class=\"number\">0</span>; i &lt; <span class=\"keyword\">this</span>._size - <span class=\"number\">1</span>; i++) &#123;</span><br><span class=\"line\">            before = curr;</span><br><span class=\"line\">            curr = curr.next;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        before.next = <span class=\"literal\">null</span>;</span><br><span class=\"line\">        <span class=\"keyword\">this</span>._size--;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> curr.getValue();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    getItem(index) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (<span class=\"keyword\">this</span>._size === <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"literal\">null</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (index &lt; <span class=\"number\">0</span> || index &gt;= <span class=\"keyword\">this</span>._size) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"built_in\">console</span>.log(<span class=\"string\">'Index out of range'</span>);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (index === <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"keyword\">this</span>._head.getValue();</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">let</span> curr = <span class=\"keyword\">this</span>._head;</span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"keyword\">let</span> i = <span class=\"number\">0</span>; i &lt; index; i++) &#123;</span><br><span class=\"line\">            curr = curr.next;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> curr.getValue();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>"},{"title":"计算机算法之---数据结构-树","date":"2019-04-19T13:16:52.000Z","_content":"\n## 描述\n* 在图论中，树（英语：Tree）是一种无向图（undirected graph），其中任意两个顶点间存在唯一一条路径。或者说，只要没有回路的连通图就是树。森林是指互相不交并树的集合。树图广泛应用于计算机科学的数据结构中，比如二叉查找树，堆，Trie树以及数据压缩中的霍夫曼树等等。\n\n## 实现接口\n* 深度遍历`deepTravers(callback)`\n* 广度遍历`breadthTravers(callback)`\n* 给指定节点添加`add(data, toData)`\n* 从指定节点删除`remove(data, toData)`\n* 判断是否包含给定数据`containes(data, tranvers)`\n\n## 主要算法分析\n* 深度遍历：即遍历完这个节点，就去找该节点的子节点\n* 广度遍历：即先遍历完该层次的所有节点，再去遍历下一级节点\n* 操作节点依赖遍历，所以可以先实现遍历的方法，再实现增删操作\n\n## 示例代码\n```js\nclass Node {\n    constructor(data) {\n        this.data = data;\n        this.parent = null;\n        this.children = [];\n    }\n}\n\nclass Tree {\n    constructor() {\n        this._root = null;\n    }\n\n    add(data, toData) {\n        if (toData === null) {\n            return this._root = new Node(data);\n        }\n        let target = this.getNodeByData(toData, this.deepTravers);\n        if (target !== null) {\n            let newNode = new Node(data);\n            newNode.parent = target.data;\n            target.children.push(newNode);\n        } else {\n            console.log(`Can not add to ${toData}`);\n        }\n    }\n\n    remove(data, toData) {\n        let target = this.getNodeByData(toData, this.breadthTravers);\n        if (target !== null) {\n            let index = 0;\n            for (let i = 0; i < target.children.length; i++) {\n                if (data === target.children[i].data) {\n                    index = i;\n                    break;\n                }\n            }\n            return target.children.splice(index, 1);\n        } else {\n            console.log(`Can not find ${data} from ${toData}`);\n        }\n    }\n\n    deepTravers(callback) {\n        const travers = (node) => {\n            callback(node);\n            for (let i = 0; i < node.children.length; i++) {\n                travers(node.children[i]);\n            }\n        }\n        travers(this._root);\n    }\n\n    breadthTravers(callback) {\n        let queue = [];\n        queue.push(this._root);\n        while (queue.length > 0) {\n            let curr = queue.shift();\n            callback(curr);\n            for (let i = 0; i < curr.children.length; i++) {\n                queue.push(curr.children[i]);\n            }\n        }\n    }\n\n    containes(data, travers) {\n        let contain = false;\n        travers.call(this, (node) => {\n            console.log(node.data, data);\n            if (node.data === data) {\n                contain = true;\n            }\n        });\n        return contain;\n    }\n\n    getNodeByData(data, travers) {\n        let result = null;\n        travers.call(this, (node) => {\n            if (node.data === data) {\n                result = node;\n            }\n        });\n        return result;\n    }\n\n    toString() {\n        return JSON.stringify(this._root);\n    }\n}\n```\n\n\n## 测试代码\n```js\nlet tree = new Tree();\ntree.add(43, null);\nconsole.log(tree.toString());\ntree.deepTravers((node) => console.log('Deep Travers:', node.data));\ntree.breadthTravers((node) => console.log('Breadth Travers:', node.data));\nconsole.log('Containes 43:', tree.containes(43, tree.deepTravers));\ntree.add(65, 44);\ntree.add(65, 43);\ntree.add(111, 65);\ntree.add(322, 111);\ntree.add(453, 43);\nconsole.log(tree.toString());\ntree.remove(322, 111);\n```","source":"_posts/tree.md","raw":"---\ntitle: 计算机算法之---数据结构-树\ndate: 2019-04-19 21:16:52\ntags: 计算机算法\n\n---\n\n## 描述\n* 在图论中，树（英语：Tree）是一种无向图（undirected graph），其中任意两个顶点间存在唯一一条路径。或者说，只要没有回路的连通图就是树。森林是指互相不交并树的集合。树图广泛应用于计算机科学的数据结构中，比如二叉查找树，堆，Trie树以及数据压缩中的霍夫曼树等等。\n\n## 实现接口\n* 深度遍历`deepTravers(callback)`\n* 广度遍历`breadthTravers(callback)`\n* 给指定节点添加`add(data, toData)`\n* 从指定节点删除`remove(data, toData)`\n* 判断是否包含给定数据`containes(data, tranvers)`\n\n## 主要算法分析\n* 深度遍历：即遍历完这个节点，就去找该节点的子节点\n* 广度遍历：即先遍历完该层次的所有节点，再去遍历下一级节点\n* 操作节点依赖遍历，所以可以先实现遍历的方法，再实现增删操作\n\n## 示例代码\n```js\nclass Node {\n    constructor(data) {\n        this.data = data;\n        this.parent = null;\n        this.children = [];\n    }\n}\n\nclass Tree {\n    constructor() {\n        this._root = null;\n    }\n\n    add(data, toData) {\n        if (toData === null) {\n            return this._root = new Node(data);\n        }\n        let target = this.getNodeByData(toData, this.deepTravers);\n        if (target !== null) {\n            let newNode = new Node(data);\n            newNode.parent = target.data;\n            target.children.push(newNode);\n        } else {\n            console.log(`Can not add to ${toData}`);\n        }\n    }\n\n    remove(data, toData) {\n        let target = this.getNodeByData(toData, this.breadthTravers);\n        if (target !== null) {\n            let index = 0;\n            for (let i = 0; i < target.children.length; i++) {\n                if (data === target.children[i].data) {\n                    index = i;\n                    break;\n                }\n            }\n            return target.children.splice(index, 1);\n        } else {\n            console.log(`Can not find ${data} from ${toData}`);\n        }\n    }\n\n    deepTravers(callback) {\n        const travers = (node) => {\n            callback(node);\n            for (let i = 0; i < node.children.length; i++) {\n                travers(node.children[i]);\n            }\n        }\n        travers(this._root);\n    }\n\n    breadthTravers(callback) {\n        let queue = [];\n        queue.push(this._root);\n        while (queue.length > 0) {\n            let curr = queue.shift();\n            callback(curr);\n            for (let i = 0; i < curr.children.length; i++) {\n                queue.push(curr.children[i]);\n            }\n        }\n    }\n\n    containes(data, travers) {\n        let contain = false;\n        travers.call(this, (node) => {\n            console.log(node.data, data);\n            if (node.data === data) {\n                contain = true;\n            }\n        });\n        return contain;\n    }\n\n    getNodeByData(data, travers) {\n        let result = null;\n        travers.call(this, (node) => {\n            if (node.data === data) {\n                result = node;\n            }\n        });\n        return result;\n    }\n\n    toString() {\n        return JSON.stringify(this._root);\n    }\n}\n```\n\n\n## 测试代码\n```js\nlet tree = new Tree();\ntree.add(43, null);\nconsole.log(tree.toString());\ntree.deepTravers((node) => console.log('Deep Travers:', node.data));\ntree.breadthTravers((node) => console.log('Breadth Travers:', node.data));\nconsole.log('Containes 43:', tree.containes(43, tree.deepTravers));\ntree.add(65, 44);\ntree.add(65, 43);\ntree.add(111, 65);\ntree.add(322, 111);\ntree.add(453, 43);\nconsole.log(tree.toString());\ntree.remove(322, 111);\n```","slug":"tree","published":1,"updated":"2019-06-18T10:11:09.047Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ck2vg6gw3001n4cobkv7dyhr3","content":"<h2 id=\"描述\"><a href=\"#描述\" class=\"headerlink\" title=\"描述\"></a>描述</h2><ul>\n<li>在图论中，树（英语：Tree）是一种无向图（undirected graph），其中任意两个顶点间存在唯一一条路径。或者说，只要没有回路的连通图就是树。森林是指互相不交并树的集合。树图广泛应用于计算机科学的数据结构中，比如二叉查找树，堆，Trie树以及数据压缩中的霍夫曼树等等。</li>\n</ul>\n<h2 id=\"实现接口\"><a href=\"#实现接口\" class=\"headerlink\" title=\"实现接口\"></a>实现接口</h2><ul>\n<li>深度遍历<code>deepTravers(callback)</code></li>\n<li>广度遍历<code>breadthTravers(callback)</code></li>\n<li>给指定节点添加<code>add(data, toData)</code></li>\n<li>从指定节点删除<code>remove(data, toData)</code></li>\n<li>判断是否包含给定数据<code>containes(data, tranvers)</code></li>\n</ul>\n<h2 id=\"主要算法分析\"><a href=\"#主要算法分析\" class=\"headerlink\" title=\"主要算法分析\"></a>主要算法分析</h2><ul>\n<li>深度遍历：即遍历完这个节点，就去找该节点的子节点</li>\n<li>广度遍历：即先遍历完该层次的所有节点，再去遍历下一级节点</li>\n<li>操作节点依赖遍历，所以可以先实现遍历的方法，再实现增删操作</li>\n</ul>\n<h2 id=\"示例代码\"><a href=\"#示例代码\" class=\"headerlink\" title=\"示例代码\"></a>示例代码</h2><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Node</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">constructor</span>(data) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.data = data;</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.parent = <span class=\"literal\">null</span>;</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.children = [];</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Tree</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">constructor</span>() &#123;</span><br><span class=\"line\">        <span class=\"keyword\">this</span>._root = <span class=\"literal\">null</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    add(data, toData) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (toData === <span class=\"literal\">null</span>) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"keyword\">this</span>._root = <span class=\"keyword\">new</span> Node(data);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">let</span> target = <span class=\"keyword\">this</span>.getNodeByData(toData, <span class=\"keyword\">this</span>.deepTravers);</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (target !== <span class=\"literal\">null</span>) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">let</span> newNode = <span class=\"keyword\">new</span> Node(data);</span><br><span class=\"line\">            newNode.parent = target.data;</span><br><span class=\"line\">            target.children.push(newNode);</span><br><span class=\"line\">        &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">            <span class=\"built_in\">console</span>.log(<span class=\"string\">`Can not add to <span class=\"subst\">$&#123;toData&#125;</span>`</span>);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    remove(data, toData) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">let</span> target = <span class=\"keyword\">this</span>.getNodeByData(toData, <span class=\"keyword\">this</span>.breadthTravers);</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (target !== <span class=\"literal\">null</span>) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">let</span> index = <span class=\"number\">0</span>;</span><br><span class=\"line\">            <span class=\"keyword\">for</span> (<span class=\"keyword\">let</span> i = <span class=\"number\">0</span>; i &lt; target.children.length; i++) &#123;</span><br><span class=\"line\">                <span class=\"keyword\">if</span> (data === target.children[i].data) &#123;</span><br><span class=\"line\">                    index = i;</span><br><span class=\"line\">                    <span class=\"keyword\">break</span>;</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> target.children.splice(index, <span class=\"number\">1</span>);</span><br><span class=\"line\">        &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">            <span class=\"built_in\">console</span>.log(<span class=\"string\">`Can not find <span class=\"subst\">$&#123;data&#125;</span> from <span class=\"subst\">$&#123;toData&#125;</span>`</span>);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    deepTravers(callback) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">const</span> travers = <span class=\"function\">(<span class=\"params\">node</span>) =&gt;</span> &#123;</span><br><span class=\"line\">            callback(node);</span><br><span class=\"line\">            <span class=\"keyword\">for</span> (<span class=\"keyword\">let</span> i = <span class=\"number\">0</span>; i &lt; node.children.length; i++) &#123;</span><br><span class=\"line\">                travers(node.children[i]);</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        travers(<span class=\"keyword\">this</span>._root);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    breadthTravers(callback) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">let</span> queue = [];</span><br><span class=\"line\">        queue.push(<span class=\"keyword\">this</span>._root);</span><br><span class=\"line\">        <span class=\"keyword\">while</span> (queue.length &gt; <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">let</span> curr = queue.shift();</span><br><span class=\"line\">            callback(curr);</span><br><span class=\"line\">            <span class=\"keyword\">for</span> (<span class=\"keyword\">let</span> i = <span class=\"number\">0</span>; i &lt; curr.children.length; i++) &#123;</span><br><span class=\"line\">                queue.push(curr.children[i]);</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    containes(data, travers) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">let</span> contain = <span class=\"literal\">false</span>;</span><br><span class=\"line\">        travers.call(<span class=\"keyword\">this</span>, (node) =&gt; &#123;</span><br><span class=\"line\">            <span class=\"built_in\">console</span>.log(node.data, data);</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (node.data === data) &#123;</span><br><span class=\"line\">                contain = <span class=\"literal\">true</span>;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;);</span><br><span class=\"line\">        <span class=\"keyword\">return</span> contain;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    getNodeByData(data, travers) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">let</span> result = <span class=\"literal\">null</span>;</span><br><span class=\"line\">        travers.call(<span class=\"keyword\">this</span>, (node) =&gt; &#123;</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (node.data === data) &#123;</span><br><span class=\"line\">                result = node;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;);</span><br><span class=\"line\">        <span class=\"keyword\">return</span> result;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    toString() &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"built_in\">JSON</span>.stringify(<span class=\"keyword\">this</span>._root);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h2 id=\"测试代码\"><a href=\"#测试代码\" class=\"headerlink\" title=\"测试代码\"></a>测试代码</h2><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> tree = <span class=\"keyword\">new</span> Tree();</span><br><span class=\"line\">tree.add(<span class=\"number\">43</span>, <span class=\"literal\">null</span>);</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(tree.toString());</span><br><span class=\"line\">tree.deepTravers(<span class=\"function\">(<span class=\"params\">node</span>) =&gt;</span> <span class=\"built_in\">console</span>.log(<span class=\"string\">'Deep Travers:'</span>, node.data));</span><br><span class=\"line\">tree.breadthTravers(<span class=\"function\">(<span class=\"params\">node</span>) =&gt;</span> <span class=\"built_in\">console</span>.log(<span class=\"string\">'Breadth Travers:'</span>, node.data));</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(<span class=\"string\">'Containes 43:'</span>, tree.containes(<span class=\"number\">43</span>, tree.deepTravers));</span><br><span class=\"line\">tree.add(<span class=\"number\">65</span>, <span class=\"number\">44</span>);</span><br><span class=\"line\">tree.add(<span class=\"number\">65</span>, <span class=\"number\">43</span>);</span><br><span class=\"line\">tree.add(<span class=\"number\">111</span>, <span class=\"number\">65</span>);</span><br><span class=\"line\">tree.add(<span class=\"number\">322</span>, <span class=\"number\">111</span>);</span><br><span class=\"line\">tree.add(<span class=\"number\">453</span>, <span class=\"number\">43</span>);</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(tree.toString());</span><br><span class=\"line\">tree.remove(<span class=\"number\">322</span>, <span class=\"number\">111</span>);</span><br></pre></td></tr></table></figure>","site":{"data":{"projects":[{"name":"AiTing","url":"https://github.com/renhongl/aiting","desc":"HTML5客户端音乐播放器"},{"name":"AiLiao","url":"https://github.com/renhongl/ailiao","desc":"网页聊天软件"},{"name":"Pomelo Editor","url":"https://renhongl.github.io/markdown-editor/","desc":"功能强大的在线Markdown编辑器"}]}},"excerpt":"","more":"<h2 id=\"描述\"><a href=\"#描述\" class=\"headerlink\" title=\"描述\"></a>描述</h2><ul>\n<li>在图论中，树（英语：Tree）是一种无向图（undirected graph），其中任意两个顶点间存在唯一一条路径。或者说，只要没有回路的连通图就是树。森林是指互相不交并树的集合。树图广泛应用于计算机科学的数据结构中，比如二叉查找树，堆，Trie树以及数据压缩中的霍夫曼树等等。</li>\n</ul>\n<h2 id=\"实现接口\"><a href=\"#实现接口\" class=\"headerlink\" title=\"实现接口\"></a>实现接口</h2><ul>\n<li>深度遍历<code>deepTravers(callback)</code></li>\n<li>广度遍历<code>breadthTravers(callback)</code></li>\n<li>给指定节点添加<code>add(data, toData)</code></li>\n<li>从指定节点删除<code>remove(data, toData)</code></li>\n<li>判断是否包含给定数据<code>containes(data, tranvers)</code></li>\n</ul>\n<h2 id=\"主要算法分析\"><a href=\"#主要算法分析\" class=\"headerlink\" title=\"主要算法分析\"></a>主要算法分析</h2><ul>\n<li>深度遍历：即遍历完这个节点，就去找该节点的子节点</li>\n<li>广度遍历：即先遍历完该层次的所有节点，再去遍历下一级节点</li>\n<li>操作节点依赖遍历，所以可以先实现遍历的方法，再实现增删操作</li>\n</ul>\n<h2 id=\"示例代码\"><a href=\"#示例代码\" class=\"headerlink\" title=\"示例代码\"></a>示例代码</h2><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Node</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">constructor</span>(data) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.data = data;</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.parent = <span class=\"literal\">null</span>;</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.children = [];</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Tree</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">constructor</span>() &#123;</span><br><span class=\"line\">        <span class=\"keyword\">this</span>._root = <span class=\"literal\">null</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    add(data, toData) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (toData === <span class=\"literal\">null</span>) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"keyword\">this</span>._root = <span class=\"keyword\">new</span> Node(data);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">let</span> target = <span class=\"keyword\">this</span>.getNodeByData(toData, <span class=\"keyword\">this</span>.deepTravers);</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (target !== <span class=\"literal\">null</span>) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">let</span> newNode = <span class=\"keyword\">new</span> Node(data);</span><br><span class=\"line\">            newNode.parent = target.data;</span><br><span class=\"line\">            target.children.push(newNode);</span><br><span class=\"line\">        &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">            <span class=\"built_in\">console</span>.log(<span class=\"string\">`Can not add to <span class=\"subst\">$&#123;toData&#125;</span>`</span>);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    remove(data, toData) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">let</span> target = <span class=\"keyword\">this</span>.getNodeByData(toData, <span class=\"keyword\">this</span>.breadthTravers);</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (target !== <span class=\"literal\">null</span>) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">let</span> index = <span class=\"number\">0</span>;</span><br><span class=\"line\">            <span class=\"keyword\">for</span> (<span class=\"keyword\">let</span> i = <span class=\"number\">0</span>; i &lt; target.children.length; i++) &#123;</span><br><span class=\"line\">                <span class=\"keyword\">if</span> (data === target.children[i].data) &#123;</span><br><span class=\"line\">                    index = i;</span><br><span class=\"line\">                    <span class=\"keyword\">break</span>;</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> target.children.splice(index, <span class=\"number\">1</span>);</span><br><span class=\"line\">        &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">            <span class=\"built_in\">console</span>.log(<span class=\"string\">`Can not find <span class=\"subst\">$&#123;data&#125;</span> from <span class=\"subst\">$&#123;toData&#125;</span>`</span>);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    deepTravers(callback) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">const</span> travers = <span class=\"function\">(<span class=\"params\">node</span>) =&gt;</span> &#123;</span><br><span class=\"line\">            callback(node);</span><br><span class=\"line\">            <span class=\"keyword\">for</span> (<span class=\"keyword\">let</span> i = <span class=\"number\">0</span>; i &lt; node.children.length; i++) &#123;</span><br><span class=\"line\">                travers(node.children[i]);</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        travers(<span class=\"keyword\">this</span>._root);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    breadthTravers(callback) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">let</span> queue = [];</span><br><span class=\"line\">        queue.push(<span class=\"keyword\">this</span>._root);</span><br><span class=\"line\">        <span class=\"keyword\">while</span> (queue.length &gt; <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">let</span> curr = queue.shift();</span><br><span class=\"line\">            callback(curr);</span><br><span class=\"line\">            <span class=\"keyword\">for</span> (<span class=\"keyword\">let</span> i = <span class=\"number\">0</span>; i &lt; curr.children.length; i++) &#123;</span><br><span class=\"line\">                queue.push(curr.children[i]);</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    containes(data, travers) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">let</span> contain = <span class=\"literal\">false</span>;</span><br><span class=\"line\">        travers.call(<span class=\"keyword\">this</span>, (node) =&gt; &#123;</span><br><span class=\"line\">            <span class=\"built_in\">console</span>.log(node.data, data);</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (node.data === data) &#123;</span><br><span class=\"line\">                contain = <span class=\"literal\">true</span>;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;);</span><br><span class=\"line\">        <span class=\"keyword\">return</span> contain;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    getNodeByData(data, travers) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">let</span> result = <span class=\"literal\">null</span>;</span><br><span class=\"line\">        travers.call(<span class=\"keyword\">this</span>, (node) =&gt; &#123;</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (node.data === data) &#123;</span><br><span class=\"line\">                result = node;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;);</span><br><span class=\"line\">        <span class=\"keyword\">return</span> result;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    toString() &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"built_in\">JSON</span>.stringify(<span class=\"keyword\">this</span>._root);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h2 id=\"测试代码\"><a href=\"#测试代码\" class=\"headerlink\" title=\"测试代码\"></a>测试代码</h2><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> tree = <span class=\"keyword\">new</span> Tree();</span><br><span class=\"line\">tree.add(<span class=\"number\">43</span>, <span class=\"literal\">null</span>);</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(tree.toString());</span><br><span class=\"line\">tree.deepTravers(<span class=\"function\">(<span class=\"params\">node</span>) =&gt;</span> <span class=\"built_in\">console</span>.log(<span class=\"string\">'Deep Travers:'</span>, node.data));</span><br><span class=\"line\">tree.breadthTravers(<span class=\"function\">(<span class=\"params\">node</span>) =&gt;</span> <span class=\"built_in\">console</span>.log(<span class=\"string\">'Breadth Travers:'</span>, node.data));</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(<span class=\"string\">'Containes 43:'</span>, tree.containes(<span class=\"number\">43</span>, tree.deepTravers));</span><br><span class=\"line\">tree.add(<span class=\"number\">65</span>, <span class=\"number\">44</span>);</span><br><span class=\"line\">tree.add(<span class=\"number\">65</span>, <span class=\"number\">43</span>);</span><br><span class=\"line\">tree.add(<span class=\"number\">111</span>, <span class=\"number\">65</span>);</span><br><span class=\"line\">tree.add(<span class=\"number\">322</span>, <span class=\"number\">111</span>);</span><br><span class=\"line\">tree.add(<span class=\"number\">453</span>, <span class=\"number\">43</span>);</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(tree.toString());</span><br><span class=\"line\">tree.remove(<span class=\"number\">322</span>, <span class=\"number\">111</span>);</span><br></pre></td></tr></table></figure>"},{"title":"中介者模式","date":"2018-05-22T13:54:32.000Z","_content":"\n\n\n\n# 什么是中介者模式\n中介者模式（Mediator Pattern）是用来降低多个对象和类之间的通信复杂性。这种模式提供了一个中介类，该类通常处理不同类之间的通信，并支持松耦合，使代码易于维护。中介者模式属于行为型模式。\n\n\n# 面向对象例子：\n\n```js\n class Player{\n     constructor(name, teamColor, playerDirector) {\n         this.name = name;\n         this.teamColor = teamColor;\n         this.status = 'live';\n         this.playerDirector = playerDirector;\n         this.add();\n     }\n\n     win() {\n         console.log('for self win action: ' + this.name);\n     }\n\n     lose() {\n         console.log('for self lose action: ' + this.name);\n     }\n\n     add() {\n         console.log('for self add action: ' + this.name);\n         this.playerDirector.recieveMessage('add', this);\n     }\n\n     remove() {\n         console.log('for self remove action: ' + this.name);\n         this.playerDirector.recieveMessage('remove', this);\n     }\n\n     die() {\n         console.log('for self die action: ' + this.name);\n         this.playerDirector.recieveMessage('die', this);\n     }\n\n     getMessage(message) {\n         console.log(`${this.name} recieved message: ${message}`);\n     }\n }\n\n export class PlayerMediator{\n     constructor() {\n         this.players = {};\n     }\n\n     recieveMessage(type, player) {\n         this[type](player);\n     }\n\n     add(player) {\n         this.players[player.teamColor] = this.players[player.teamColor] || [];\n         this.players[player.teamColor].push(player);\n         this.getAllPlayerExceptThis(player).forEach((p) => {\n             p.getMessage(`player ${player.name} added.`);\n         });\n     }\n\n     remove(player) {\n         let index = this.players[player.teamColor].indexOf(player);\n         this.players[player.teamColor][index].status = 'disconnect';\n         this.getAllPlayerExceptThis(player).forEach((p) => {\n             p.getMessage(`player ${player.name} disconnected.`);\n         });\n         if (this.verifyOver(player.teamColor)) {\n             this.gameOver(player.teamColor)\n         }\n     }\n\n     die(player) {\n         let index = this.players[player.teamColor].indexOf(player);\n         this.players[player.teamColor][index].status = 'die';\n         this.getAllPlayerExceptThis(player).forEach((p) => {\n             p.getMessage(`player ${player.name} dead.`);\n         });\n         if (this.verifyOver(player.teamColor)) {\n             this.gameOver(player.teamColor)\n         }\n     }\n\n     getAllPlayerExceptThis(player) {\n         let ret = [];\n         for (let t of Object.keys(this.players)) {\n             for (let p of this.players[t]) {\n                 if (player !== p) {\n                     ret.push(p);\n                 }\n             }\n         }\n         return ret;\n     }\n\n     verifyOver(teamColor) {\n         for (let player of this.players[teamColor]) {\n             if (player.status === 'live') {\n                 return false;\n             }\n         }\n         return true\n     }\n\n     gameOver(teamColor) {\n         for (let t of Object.keys(this.players)) {\n             for (let player of this.players[t]) {\n                 if (teamColor === player.teamColor) {\n                     player.lose();\n                 } else {\n                     player.win();\n                 }\n             }\n         }\n     }\n }\n```","source":"_posts/中介者模式.md","raw":"---\ntitle: 中介者模式\ndate: 2018-05-22 21:54:32\ntags:\n\t- Javascript设计模式\n---\n\n\n\n\n# 什么是中介者模式\n中介者模式（Mediator Pattern）是用来降低多个对象和类之间的通信复杂性。这种模式提供了一个中介类，该类通常处理不同类之间的通信，并支持松耦合，使代码易于维护。中介者模式属于行为型模式。\n\n\n# 面向对象例子：\n\n```js\n class Player{\n     constructor(name, teamColor, playerDirector) {\n         this.name = name;\n         this.teamColor = teamColor;\n         this.status = 'live';\n         this.playerDirector = playerDirector;\n         this.add();\n     }\n\n     win() {\n         console.log('for self win action: ' + this.name);\n     }\n\n     lose() {\n         console.log('for self lose action: ' + this.name);\n     }\n\n     add() {\n         console.log('for self add action: ' + this.name);\n         this.playerDirector.recieveMessage('add', this);\n     }\n\n     remove() {\n         console.log('for self remove action: ' + this.name);\n         this.playerDirector.recieveMessage('remove', this);\n     }\n\n     die() {\n         console.log('for self die action: ' + this.name);\n         this.playerDirector.recieveMessage('die', this);\n     }\n\n     getMessage(message) {\n         console.log(`${this.name} recieved message: ${message}`);\n     }\n }\n\n export class PlayerMediator{\n     constructor() {\n         this.players = {};\n     }\n\n     recieveMessage(type, player) {\n         this[type](player);\n     }\n\n     add(player) {\n         this.players[player.teamColor] = this.players[player.teamColor] || [];\n         this.players[player.teamColor].push(player);\n         this.getAllPlayerExceptThis(player).forEach((p) => {\n             p.getMessage(`player ${player.name} added.`);\n         });\n     }\n\n     remove(player) {\n         let index = this.players[player.teamColor].indexOf(player);\n         this.players[player.teamColor][index].status = 'disconnect';\n         this.getAllPlayerExceptThis(player).forEach((p) => {\n             p.getMessage(`player ${player.name} disconnected.`);\n         });\n         if (this.verifyOver(player.teamColor)) {\n             this.gameOver(player.teamColor)\n         }\n     }\n\n     die(player) {\n         let index = this.players[player.teamColor].indexOf(player);\n         this.players[player.teamColor][index].status = 'die';\n         this.getAllPlayerExceptThis(player).forEach((p) => {\n             p.getMessage(`player ${player.name} dead.`);\n         });\n         if (this.verifyOver(player.teamColor)) {\n             this.gameOver(player.teamColor)\n         }\n     }\n\n     getAllPlayerExceptThis(player) {\n         let ret = [];\n         for (let t of Object.keys(this.players)) {\n             for (let p of this.players[t]) {\n                 if (player !== p) {\n                     ret.push(p);\n                 }\n             }\n         }\n         return ret;\n     }\n\n     verifyOver(teamColor) {\n         for (let player of this.players[teamColor]) {\n             if (player.status === 'live') {\n                 return false;\n             }\n         }\n         return true\n     }\n\n     gameOver(teamColor) {\n         for (let t of Object.keys(this.players)) {\n             for (let player of this.players[t]) {\n                 if (teamColor === player.teamColor) {\n                     player.lose();\n                 } else {\n                     player.win();\n                 }\n             }\n         }\n     }\n }\n```","slug":"中介者模式","published":1,"updated":"2019-11-04T06:59:50.535Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ck2vg6gw5001p4cobj8dmhkhj","content":"<h1 id=\"什么是中介者模式\"><a href=\"#什么是中介者模式\" class=\"headerlink\" title=\"什么是中介者模式\"></a>什么是中介者模式</h1><p>中介者模式（Mediator Pattern）是用来降低多个对象和类之间的通信复杂性。这种模式提供了一个中介类，该类通常处理不同类之间的通信，并支持松耦合，使代码易于维护。中介者模式属于行为型模式。</p>\n<h1 id=\"面向对象例子：\"><a href=\"#面向对象例子：\" class=\"headerlink\" title=\"面向对象例子：\"></a>面向对象例子：</h1><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br><span class=\"line\">102</span><br><span class=\"line\">103</span><br><span class=\"line\">104</span><br><span class=\"line\">105</span><br><span class=\"line\">106</span><br><span class=\"line\">107</span><br><span class=\"line\">108</span><br><span class=\"line\">109</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Player</span></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">constructor</span>(name, teamColor, playerDirector) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.name = name;</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.teamColor = teamColor;</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.status = <span class=\"string\">'live'</span>;</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.playerDirector = playerDirector;</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.add();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    win() &#123;</span><br><span class=\"line\">        <span class=\"built_in\">console</span>.log(<span class=\"string\">'for self win action: '</span> + <span class=\"keyword\">this</span>.name);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    lose() &#123;</span><br><span class=\"line\">        <span class=\"built_in\">console</span>.log(<span class=\"string\">'for self lose action: '</span> + <span class=\"keyword\">this</span>.name);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    add() &#123;</span><br><span class=\"line\">        <span class=\"built_in\">console</span>.log(<span class=\"string\">'for self add action: '</span> + <span class=\"keyword\">this</span>.name);</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.playerDirector.recieveMessage(<span class=\"string\">'add'</span>, <span class=\"keyword\">this</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    remove() &#123;</span><br><span class=\"line\">        <span class=\"built_in\">console</span>.log(<span class=\"string\">'for self remove action: '</span> + <span class=\"keyword\">this</span>.name);</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.playerDirector.recieveMessage(<span class=\"string\">'remove'</span>, <span class=\"keyword\">this</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    die() &#123;</span><br><span class=\"line\">        <span class=\"built_in\">console</span>.log(<span class=\"string\">'for self die action: '</span> + <span class=\"keyword\">this</span>.name);</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.playerDirector.recieveMessage(<span class=\"string\">'die'</span>, <span class=\"keyword\">this</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    getMessage(message) &#123;</span><br><span class=\"line\">        <span class=\"built_in\">console</span>.log(<span class=\"string\">`<span class=\"subst\">$&#123;<span class=\"keyword\">this</span>.name&#125;</span> recieved message: <span class=\"subst\">$&#123;message&#125;</span>`</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">PlayerMediator</span></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">constructor</span>() &#123;</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.players = &#123;&#125;;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    recieveMessage(type, player) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">this</span>[type](player);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    add(player) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.players[player.teamColor] = <span class=\"keyword\">this</span>.players[player.teamColor] || [];</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.players[player.teamColor].push(player);</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.getAllPlayerExceptThis(player).forEach(<span class=\"function\">(<span class=\"params\">p</span>) =&gt;</span> &#123;</span><br><span class=\"line\">            p.getMessage(<span class=\"string\">`player <span class=\"subst\">$&#123;player.name&#125;</span> added.`</span>);</span><br><span class=\"line\">        &#125;);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    remove(player) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">let</span> index = <span class=\"keyword\">this</span>.players[player.teamColor].indexOf(player);</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.players[player.teamColor][index].status = <span class=\"string\">'disconnect'</span>;</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.getAllPlayerExceptThis(player).forEach(<span class=\"function\">(<span class=\"params\">p</span>) =&gt;</span> &#123;</span><br><span class=\"line\">            p.getMessage(<span class=\"string\">`player <span class=\"subst\">$&#123;player.name&#125;</span> disconnected.`</span>);</span><br><span class=\"line\">        &#125;);</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (<span class=\"keyword\">this</span>.verifyOver(player.teamColor)) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">this</span>.gameOver(player.teamColor)</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    die(player) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">let</span> index = <span class=\"keyword\">this</span>.players[player.teamColor].indexOf(player);</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.players[player.teamColor][index].status = <span class=\"string\">'die'</span>;</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.getAllPlayerExceptThis(player).forEach(<span class=\"function\">(<span class=\"params\">p</span>) =&gt;</span> &#123;</span><br><span class=\"line\">            p.getMessage(<span class=\"string\">`player <span class=\"subst\">$&#123;player.name&#125;</span> dead.`</span>);</span><br><span class=\"line\">        &#125;);</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (<span class=\"keyword\">this</span>.verifyOver(player.teamColor)) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">this</span>.gameOver(player.teamColor)</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    getAllPlayerExceptThis(player) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">let</span> ret = [];</span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"keyword\">let</span> t <span class=\"keyword\">of</span> <span class=\"built_in\">Object</span>.keys(<span class=\"keyword\">this</span>.players)) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">for</span> (<span class=\"keyword\">let</span> p <span class=\"keyword\">of</span> <span class=\"keyword\">this</span>.players[t]) &#123;</span><br><span class=\"line\">                <span class=\"keyword\">if</span> (player !== p) &#123;</span><br><span class=\"line\">                    ret.push(p);</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> ret;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    verifyOver(teamColor) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"keyword\">let</span> player <span class=\"keyword\">of</span> <span class=\"keyword\">this</span>.players[teamColor]) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (player.status === <span class=\"string\">'live'</span>) &#123;</span><br><span class=\"line\">                <span class=\"keyword\">return</span> <span class=\"literal\">false</span>;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"literal\">true</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    gameOver(teamColor) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"keyword\">let</span> t <span class=\"keyword\">of</span> <span class=\"built_in\">Object</span>.keys(<span class=\"keyword\">this</span>.players)) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">for</span> (<span class=\"keyword\">let</span> player <span class=\"keyword\">of</span> <span class=\"keyword\">this</span>.players[t]) &#123;</span><br><span class=\"line\">                <span class=\"keyword\">if</span> (teamColor === player.teamColor) &#123;</span><br><span class=\"line\">                    player.lose();</span><br><span class=\"line\">                &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">                    player.win();</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>","site":{"data":{"projects":[{"name":"AiTing","url":"https://github.com/renhongl/aiting","desc":"HTML5客户端音乐播放器"},{"name":"AiLiao","url":"https://github.com/renhongl/ailiao","desc":"网页聊天软件"},{"name":"Pomelo Editor","url":"https://renhongl.github.io/markdown-editor/","desc":"功能强大的在线Markdown编辑器"}]}},"excerpt":"","more":"<h1 id=\"什么是中介者模式\"><a href=\"#什么是中介者模式\" class=\"headerlink\" title=\"什么是中介者模式\"></a>什么是中介者模式</h1><p>中介者模式（Mediator Pattern）是用来降低多个对象和类之间的通信复杂性。这种模式提供了一个中介类，该类通常处理不同类之间的通信，并支持松耦合，使代码易于维护。中介者模式属于行为型模式。</p>\n<h1 id=\"面向对象例子：\"><a href=\"#面向对象例子：\" class=\"headerlink\" title=\"面向对象例子：\"></a>面向对象例子：</h1><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br><span class=\"line\">102</span><br><span class=\"line\">103</span><br><span class=\"line\">104</span><br><span class=\"line\">105</span><br><span class=\"line\">106</span><br><span class=\"line\">107</span><br><span class=\"line\">108</span><br><span class=\"line\">109</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Player</span></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">constructor</span>(name, teamColor, playerDirector) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.name = name;</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.teamColor = teamColor;</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.status = <span class=\"string\">'live'</span>;</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.playerDirector = playerDirector;</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.add();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    win() &#123;</span><br><span class=\"line\">        <span class=\"built_in\">console</span>.log(<span class=\"string\">'for self win action: '</span> + <span class=\"keyword\">this</span>.name);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    lose() &#123;</span><br><span class=\"line\">        <span class=\"built_in\">console</span>.log(<span class=\"string\">'for self lose action: '</span> + <span class=\"keyword\">this</span>.name);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    add() &#123;</span><br><span class=\"line\">        <span class=\"built_in\">console</span>.log(<span class=\"string\">'for self add action: '</span> + <span class=\"keyword\">this</span>.name);</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.playerDirector.recieveMessage(<span class=\"string\">'add'</span>, <span class=\"keyword\">this</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    remove() &#123;</span><br><span class=\"line\">        <span class=\"built_in\">console</span>.log(<span class=\"string\">'for self remove action: '</span> + <span class=\"keyword\">this</span>.name);</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.playerDirector.recieveMessage(<span class=\"string\">'remove'</span>, <span class=\"keyword\">this</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    die() &#123;</span><br><span class=\"line\">        <span class=\"built_in\">console</span>.log(<span class=\"string\">'for self die action: '</span> + <span class=\"keyword\">this</span>.name);</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.playerDirector.recieveMessage(<span class=\"string\">'die'</span>, <span class=\"keyword\">this</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    getMessage(message) &#123;</span><br><span class=\"line\">        <span class=\"built_in\">console</span>.log(<span class=\"string\">`<span class=\"subst\">$&#123;<span class=\"keyword\">this</span>.name&#125;</span> recieved message: <span class=\"subst\">$&#123;message&#125;</span>`</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">PlayerMediator</span></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">constructor</span>() &#123;</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.players = &#123;&#125;;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    recieveMessage(type, player) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">this</span>[type](player);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    add(player) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.players[player.teamColor] = <span class=\"keyword\">this</span>.players[player.teamColor] || [];</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.players[player.teamColor].push(player);</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.getAllPlayerExceptThis(player).forEach(<span class=\"function\">(<span class=\"params\">p</span>) =&gt;</span> &#123;</span><br><span class=\"line\">            p.getMessage(<span class=\"string\">`player <span class=\"subst\">$&#123;player.name&#125;</span> added.`</span>);</span><br><span class=\"line\">        &#125;);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    remove(player) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">let</span> index = <span class=\"keyword\">this</span>.players[player.teamColor].indexOf(player);</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.players[player.teamColor][index].status = <span class=\"string\">'disconnect'</span>;</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.getAllPlayerExceptThis(player).forEach(<span class=\"function\">(<span class=\"params\">p</span>) =&gt;</span> &#123;</span><br><span class=\"line\">            p.getMessage(<span class=\"string\">`player <span class=\"subst\">$&#123;player.name&#125;</span> disconnected.`</span>);</span><br><span class=\"line\">        &#125;);</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (<span class=\"keyword\">this</span>.verifyOver(player.teamColor)) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">this</span>.gameOver(player.teamColor)</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    die(player) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">let</span> index = <span class=\"keyword\">this</span>.players[player.teamColor].indexOf(player);</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.players[player.teamColor][index].status = <span class=\"string\">'die'</span>;</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.getAllPlayerExceptThis(player).forEach(<span class=\"function\">(<span class=\"params\">p</span>) =&gt;</span> &#123;</span><br><span class=\"line\">            p.getMessage(<span class=\"string\">`player <span class=\"subst\">$&#123;player.name&#125;</span> dead.`</span>);</span><br><span class=\"line\">        &#125;);</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (<span class=\"keyword\">this</span>.verifyOver(player.teamColor)) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">this</span>.gameOver(player.teamColor)</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    getAllPlayerExceptThis(player) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">let</span> ret = [];</span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"keyword\">let</span> t <span class=\"keyword\">of</span> <span class=\"built_in\">Object</span>.keys(<span class=\"keyword\">this</span>.players)) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">for</span> (<span class=\"keyword\">let</span> p <span class=\"keyword\">of</span> <span class=\"keyword\">this</span>.players[t]) &#123;</span><br><span class=\"line\">                <span class=\"keyword\">if</span> (player !== p) &#123;</span><br><span class=\"line\">                    ret.push(p);</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> ret;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    verifyOver(teamColor) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"keyword\">let</span> player <span class=\"keyword\">of</span> <span class=\"keyword\">this</span>.players[teamColor]) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (player.status === <span class=\"string\">'live'</span>) &#123;</span><br><span class=\"line\">                <span class=\"keyword\">return</span> <span class=\"literal\">false</span>;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"literal\">true</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    gameOver(teamColor) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"keyword\">let</span> t <span class=\"keyword\">of</span> <span class=\"built_in\">Object</span>.keys(<span class=\"keyword\">this</span>.players)) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">for</span> (<span class=\"keyword\">let</span> player <span class=\"keyword\">of</span> <span class=\"keyword\">this</span>.players[t]) &#123;</span><br><span class=\"line\">                <span class=\"keyword\">if</span> (teamColor === player.teamColor) &#123;</span><br><span class=\"line\">                    player.lose();</span><br><span class=\"line\">                &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">                    player.win();</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>"},{"title":"代理模式","date":"2018-05-06T13:54:32.000Z","_content":"\n\n# 什么是代理模式\n代理模式是为一个对象提供一个代用品或占位符，以便控制对它的访问。\n\n代理和本体接口保持一致，那么用户可以放心的请求代理，他只关心是否得到想要的结果；在任何使用本体的地方都可以替换成使用代理。\n\n虚拟代理：例如实现图片预加载、合并http请求。\n\n缓存代理：例如缓存ajax异步请求的数据，下次再打开同一页的时候，便可以直接使用之前的数据。\n\n\n\n# 面向对象例子：\n\n```js\nexport class LoadImage{\n    setUrl(url, target) {\n        target.src = url;\n    }\n}\n\nexport class LoadImageProxy{\n    constructor() {\n        this.loadImage = new LoadImage();\n    }\n\n    setUrl(url, target) {\n        this.loadImage.setUrl('./image/p2.gif', target);\n        let img = new Image();\n        img.onload = () => {\n            setTimeout(() => {\n                this.loadImage.setUrl(url, target);\n            }, 2000);\n        }\n        img.src = url;\n    }\n}\n\nexport class LoadData{\n    constructor() {\n        this.data = {\n            renhong: {\n                name: 'renhongl',\n                age: 18\n            },\n            mogu: {\n                name: 'mogu',\n                age: 19\n            }\n        };\n    }\n\n    load(name, callback) {\n        setTimeout(() => {\n            callback(this.data[name]);\n        }, 2000);\n    }\n}\n\nexport class LoadDataProxy{\n    constructor() {\n        this.loadData = new LoadData();\n        this.cache = {};\n    }\n\n    load(name, callback) {\n        if (!this.cache[name]) {\n            this.loadData.load(name, (data) => {\n                this.cache[name] = data;\n                callback(data);\n            });\n        } else {\n            callback(this.cache[name]);\n        }\n    }\n}\n```\n# 函数式例子：\n\n```js\n/**\n * 使用虚拟代理实现图片预加载\n * 使用缓存代理实现ajax异步请求数据\n */\n(function () {\n\n    var logoImg = (function () {\n        var logo = document.querySelector('.logo');\n        return {\n            setSrc: function (src) {\n                setTimeout(function () {\n                    logo.src = src;\n                });\n            }\n        }\n    })();\n\n    var proxyLogoImg = (function () {\n        var img = new Image();\n        img.onload = function () {\n            logoImg.setSrc(this.src);\n        }\n        return {\n            setSrc: function (src) {\n                logoImg.setSrc('./loading.png');\n                setTimeout(function () {\n                    img.src = src;\n                }, 3000);\n            }\n        }\n    })();\n\n    var fetchData = (function () {\n        return {\n            start: function (url, fn) {\n                fetch(url).then(function (response) {\n                    if (response.ok) {\n                        response.json().then(function (data) {\n                            setTimeout(function () {\n                                fn.call(this, data);\n                            }, 2000);\n                        });\n                    }\n                }).catch(function (err) {\n                    console.log(err);\n                });\n            }\n        }\n    })();\n\n    var proxyFetchData = (function () {\n        var cache = {};\n        return {\n            start: function (url, fn) {\n                var key = url.split('.')[0];\n                if (key in cache) {\n                    fn.call(this, cache[key]);\n                } else {\n                    fetchData.start(url, function (data) {\n                        cache[key] = data;\n                        fn.call(this, data);\n                    });\n                }\n            }\n        }\n    })();\n\n    var fetchDataAction = function () {\n        console.time('fetchData');\n        proxyFetchData.start('./1.json', function (data) {\n            console.log(data);\n            console.timeEnd('fetchData');\n        });\n    };\n\n    var init = function () {\n        proxyLogoImg.setSrc('./logo.png');\n        fetchDataAction();\n        setTimeout(function () {\n            fetchDataAction();\n        }, 5000);\n    };\n\n    init();\n\n})();\n```\n","source":"_posts/代理模式.md","raw":"---\ntitle: 代理模式\ndate: 2018-05-06 21:54:32\ntags:\n\t- Javascript设计模式\n---\n\n\n# 什么是代理模式\n代理模式是为一个对象提供一个代用品或占位符，以便控制对它的访问。\n\n代理和本体接口保持一致，那么用户可以放心的请求代理，他只关心是否得到想要的结果；在任何使用本体的地方都可以替换成使用代理。\n\n虚拟代理：例如实现图片预加载、合并http请求。\n\n缓存代理：例如缓存ajax异步请求的数据，下次再打开同一页的时候，便可以直接使用之前的数据。\n\n\n\n# 面向对象例子：\n\n```js\nexport class LoadImage{\n    setUrl(url, target) {\n        target.src = url;\n    }\n}\n\nexport class LoadImageProxy{\n    constructor() {\n        this.loadImage = new LoadImage();\n    }\n\n    setUrl(url, target) {\n        this.loadImage.setUrl('./image/p2.gif', target);\n        let img = new Image();\n        img.onload = () => {\n            setTimeout(() => {\n                this.loadImage.setUrl(url, target);\n            }, 2000);\n        }\n        img.src = url;\n    }\n}\n\nexport class LoadData{\n    constructor() {\n        this.data = {\n            renhong: {\n                name: 'renhongl',\n                age: 18\n            },\n            mogu: {\n                name: 'mogu',\n                age: 19\n            }\n        };\n    }\n\n    load(name, callback) {\n        setTimeout(() => {\n            callback(this.data[name]);\n        }, 2000);\n    }\n}\n\nexport class LoadDataProxy{\n    constructor() {\n        this.loadData = new LoadData();\n        this.cache = {};\n    }\n\n    load(name, callback) {\n        if (!this.cache[name]) {\n            this.loadData.load(name, (data) => {\n                this.cache[name] = data;\n                callback(data);\n            });\n        } else {\n            callback(this.cache[name]);\n        }\n    }\n}\n```\n# 函数式例子：\n\n```js\n/**\n * 使用虚拟代理实现图片预加载\n * 使用缓存代理实现ajax异步请求数据\n */\n(function () {\n\n    var logoImg = (function () {\n        var logo = document.querySelector('.logo');\n        return {\n            setSrc: function (src) {\n                setTimeout(function () {\n                    logo.src = src;\n                });\n            }\n        }\n    })();\n\n    var proxyLogoImg = (function () {\n        var img = new Image();\n        img.onload = function () {\n            logoImg.setSrc(this.src);\n        }\n        return {\n            setSrc: function (src) {\n                logoImg.setSrc('./loading.png');\n                setTimeout(function () {\n                    img.src = src;\n                }, 3000);\n            }\n        }\n    })();\n\n    var fetchData = (function () {\n        return {\n            start: function (url, fn) {\n                fetch(url).then(function (response) {\n                    if (response.ok) {\n                        response.json().then(function (data) {\n                            setTimeout(function () {\n                                fn.call(this, data);\n                            }, 2000);\n                        });\n                    }\n                }).catch(function (err) {\n                    console.log(err);\n                });\n            }\n        }\n    })();\n\n    var proxyFetchData = (function () {\n        var cache = {};\n        return {\n            start: function (url, fn) {\n                var key = url.split('.')[0];\n                if (key in cache) {\n                    fn.call(this, cache[key]);\n                } else {\n                    fetchData.start(url, function (data) {\n                        cache[key] = data;\n                        fn.call(this, data);\n                    });\n                }\n            }\n        }\n    })();\n\n    var fetchDataAction = function () {\n        console.time('fetchData');\n        proxyFetchData.start('./1.json', function (data) {\n            console.log(data);\n            console.timeEnd('fetchData');\n        });\n    };\n\n    var init = function () {\n        proxyLogoImg.setSrc('./logo.png');\n        fetchDataAction();\n        setTimeout(function () {\n            fetchDataAction();\n        }, 5000);\n    };\n\n    init();\n\n})();\n```\n","slug":"代理模式","published":1,"updated":"2019-11-04T06:59:55.369Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ck2vg6gw7001r4cobw1fsbxjh","content":"<h1 id=\"什么是代理模式\"><a href=\"#什么是代理模式\" class=\"headerlink\" title=\"什么是代理模式\"></a>什么是代理模式</h1><p>代理模式是为一个对象提供一个代用品或占位符，以便控制对它的访问。</p>\n<p>代理和本体接口保持一致，那么用户可以放心的请求代理，他只关心是否得到想要的结果；在任何使用本体的地方都可以替换成使用代理。</p>\n<p>虚拟代理：例如实现图片预加载、合并http请求。</p>\n<p>缓存代理：例如缓存ajax异步请求的数据，下次再打开同一页的时候，便可以直接使用之前的数据。</p>\n<h1 id=\"面向对象例子：\"><a href=\"#面向对象例子：\" class=\"headerlink\" title=\"面向对象例子：\"></a>面向对象例子：</h1><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">LoadImage</span></span>&#123;</span><br><span class=\"line\">    setUrl(url, target) &#123;</span><br><span class=\"line\">        target.src = url;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">LoadImageProxy</span></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">constructor</span>() &#123;</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.loadImage = <span class=\"keyword\">new</span> LoadImage();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    setUrl(url, target) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.loadImage.setUrl(<span class=\"string\">'./image/p2.gif'</span>, target);</span><br><span class=\"line\">        <span class=\"keyword\">let</span> img = <span class=\"keyword\">new</span> Image();</span><br><span class=\"line\">        img.onload = <span class=\"function\"><span class=\"params\">()</span> =&gt;</span> &#123;</span><br><span class=\"line\">            setTimeout(<span class=\"function\"><span class=\"params\">()</span> =&gt;</span> &#123;</span><br><span class=\"line\">                <span class=\"keyword\">this</span>.loadImage.setUrl(url, target);</span><br><span class=\"line\">            &#125;, <span class=\"number\">2000</span>);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        img.src = url;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">LoadData</span></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">constructor</span>() &#123;</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.data = &#123;</span><br><span class=\"line\">            renhong: &#123;</span><br><span class=\"line\">                name: <span class=\"string\">'renhongl'</span>,</span><br><span class=\"line\">                age: <span class=\"number\">18</span></span><br><span class=\"line\">            &#125;,</span><br><span class=\"line\">            mogu: &#123;</span><br><span class=\"line\">                name: <span class=\"string\">'mogu'</span>,</span><br><span class=\"line\">                age: <span class=\"number\">19</span></span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    load(name, callback) &#123;</span><br><span class=\"line\">        setTimeout(<span class=\"function\"><span class=\"params\">()</span> =&gt;</span> &#123;</span><br><span class=\"line\">            callback(<span class=\"keyword\">this</span>.data[name]);</span><br><span class=\"line\">        &#125;, <span class=\"number\">2000</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">LoadDataProxy</span></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">constructor</span>() &#123;</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.loadData = <span class=\"keyword\">new</span> LoadData();</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.cache = &#123;&#125;;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    load(name, callback) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (!<span class=\"keyword\">this</span>.cache[name]) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">this</span>.loadData.load(name, (data) =&gt; &#123;</span><br><span class=\"line\">                <span class=\"keyword\">this</span>.cache[name] = data;</span><br><span class=\"line\">                callback(data);</span><br><span class=\"line\">            &#125;);</span><br><span class=\"line\">        &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">            callback(<span class=\"keyword\">this</span>.cache[name]);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h1 id=\"函数式例子：\"><a href=\"#函数式例子：\" class=\"headerlink\" title=\"函数式例子：\"></a>函数式例子：</h1><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * 使用虚拟代理实现图片预加载</span></span><br><span class=\"line\"><span class=\"comment\"> * 使用缓存代理实现ajax异步请求数据</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\">(<span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">var</span> logoImg = (<span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">var</span> logo = <span class=\"built_in\">document</span>.querySelector(<span class=\"string\">'.logo'</span>);</span><br><span class=\"line\">        <span class=\"keyword\">return</span> &#123;</span><br><span class=\"line\">            setSrc: <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">src</span>) </span>&#123;</span><br><span class=\"line\">                setTimeout(<span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">                    logo.src = src;</span><br><span class=\"line\">                &#125;);</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;)();</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">var</span> proxyLogoImg = (<span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">var</span> img = <span class=\"keyword\">new</span> Image();</span><br><span class=\"line\">        img.onload = <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">            logoImg.setSrc(<span class=\"keyword\">this</span>.src);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> &#123;</span><br><span class=\"line\">            setSrc: <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">src</span>) </span>&#123;</span><br><span class=\"line\">                logoImg.setSrc(<span class=\"string\">'./loading.png'</span>);</span><br><span class=\"line\">                setTimeout(<span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">                    img.src = src;</span><br><span class=\"line\">                &#125;, <span class=\"number\">3000</span>);</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;)();</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">var</span> fetchData = (<span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> &#123;</span><br><span class=\"line\">            start: <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">url, fn</span>) </span>&#123;</span><br><span class=\"line\">                fetch(url).then(<span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">response</span>) </span>&#123;</span><br><span class=\"line\">                    <span class=\"keyword\">if</span> (response.ok) &#123;</span><br><span class=\"line\">                        response.json().then(<span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">data</span>) </span>&#123;</span><br><span class=\"line\">                            setTimeout(<span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">                                fn.call(<span class=\"keyword\">this</span>, data);</span><br><span class=\"line\">                            &#125;, <span class=\"number\">2000</span>);</span><br><span class=\"line\">                        &#125;);</span><br><span class=\"line\">                    &#125;</span><br><span class=\"line\">                &#125;).catch(<span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">err</span>) </span>&#123;</span><br><span class=\"line\">                    <span class=\"built_in\">console</span>.log(err);</span><br><span class=\"line\">                &#125;);</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;)();</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">var</span> proxyFetchData = (<span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">var</span> cache = &#123;&#125;;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> &#123;</span><br><span class=\"line\">            start: <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">url, fn</span>) </span>&#123;</span><br><span class=\"line\">                <span class=\"keyword\">var</span> key = url.split(<span class=\"string\">'.'</span>)[<span class=\"number\">0</span>];</span><br><span class=\"line\">                <span class=\"keyword\">if</span> (key <span class=\"keyword\">in</span> cache) &#123;</span><br><span class=\"line\">                    fn.call(<span class=\"keyword\">this</span>, cache[key]);</span><br><span class=\"line\">                &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">                    fetchData.start(url, <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">data</span>) </span>&#123;</span><br><span class=\"line\">                        cache[key] = data;</span><br><span class=\"line\">                        fn.call(<span class=\"keyword\">this</span>, data);</span><br><span class=\"line\">                    &#125;);</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;)();</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">var</span> fetchDataAction = <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">        <span class=\"built_in\">console</span>.time(<span class=\"string\">'fetchData'</span>);</span><br><span class=\"line\">        proxyFetchData.start(<span class=\"string\">'./1.json'</span>, <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">data</span>) </span>&#123;</span><br><span class=\"line\">            <span class=\"built_in\">console</span>.log(data);</span><br><span class=\"line\">            <span class=\"built_in\">console</span>.timeEnd(<span class=\"string\">'fetchData'</span>);</span><br><span class=\"line\">        &#125;);</span><br><span class=\"line\">    &#125;;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">var</span> init = <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">        proxyLogoImg.setSrc(<span class=\"string\">'./logo.png'</span>);</span><br><span class=\"line\">        fetchDataAction();</span><br><span class=\"line\">        setTimeout(<span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">            fetchDataAction();</span><br><span class=\"line\">        &#125;, <span class=\"number\">5000</span>);</span><br><span class=\"line\">    &#125;;</span><br><span class=\"line\"></span><br><span class=\"line\">    init();</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;)();</span><br></pre></td></tr></table></figure>\n","site":{"data":{"projects":[{"name":"AiTing","url":"https://github.com/renhongl/aiting","desc":"HTML5客户端音乐播放器"},{"name":"AiLiao","url":"https://github.com/renhongl/ailiao","desc":"网页聊天软件"},{"name":"Pomelo Editor","url":"https://renhongl.github.io/markdown-editor/","desc":"功能强大的在线Markdown编辑器"}]}},"excerpt":"","more":"<h1 id=\"什么是代理模式\"><a href=\"#什么是代理模式\" class=\"headerlink\" title=\"什么是代理模式\"></a>什么是代理模式</h1><p>代理模式是为一个对象提供一个代用品或占位符，以便控制对它的访问。</p>\n<p>代理和本体接口保持一致，那么用户可以放心的请求代理，他只关心是否得到想要的结果；在任何使用本体的地方都可以替换成使用代理。</p>\n<p>虚拟代理：例如实现图片预加载、合并http请求。</p>\n<p>缓存代理：例如缓存ajax异步请求的数据，下次再打开同一页的时候，便可以直接使用之前的数据。</p>\n<h1 id=\"面向对象例子：\"><a href=\"#面向对象例子：\" class=\"headerlink\" title=\"面向对象例子：\"></a>面向对象例子：</h1><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">LoadImage</span></span>&#123;</span><br><span class=\"line\">    setUrl(url, target) &#123;</span><br><span class=\"line\">        target.src = url;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">LoadImageProxy</span></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">constructor</span>() &#123;</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.loadImage = <span class=\"keyword\">new</span> LoadImage();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    setUrl(url, target) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.loadImage.setUrl(<span class=\"string\">'./image/p2.gif'</span>, target);</span><br><span class=\"line\">        <span class=\"keyword\">let</span> img = <span class=\"keyword\">new</span> Image();</span><br><span class=\"line\">        img.onload = <span class=\"function\"><span class=\"params\">()</span> =&gt;</span> &#123;</span><br><span class=\"line\">            setTimeout(<span class=\"function\"><span class=\"params\">()</span> =&gt;</span> &#123;</span><br><span class=\"line\">                <span class=\"keyword\">this</span>.loadImage.setUrl(url, target);</span><br><span class=\"line\">            &#125;, <span class=\"number\">2000</span>);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        img.src = url;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">LoadData</span></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">constructor</span>() &#123;</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.data = &#123;</span><br><span class=\"line\">            renhong: &#123;</span><br><span class=\"line\">                name: <span class=\"string\">'renhongl'</span>,</span><br><span class=\"line\">                age: <span class=\"number\">18</span></span><br><span class=\"line\">            &#125;,</span><br><span class=\"line\">            mogu: &#123;</span><br><span class=\"line\">                name: <span class=\"string\">'mogu'</span>,</span><br><span class=\"line\">                age: <span class=\"number\">19</span></span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    load(name, callback) &#123;</span><br><span class=\"line\">        setTimeout(<span class=\"function\"><span class=\"params\">()</span> =&gt;</span> &#123;</span><br><span class=\"line\">            callback(<span class=\"keyword\">this</span>.data[name]);</span><br><span class=\"line\">        &#125;, <span class=\"number\">2000</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">LoadDataProxy</span></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">constructor</span>() &#123;</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.loadData = <span class=\"keyword\">new</span> LoadData();</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.cache = &#123;&#125;;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    load(name, callback) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (!<span class=\"keyword\">this</span>.cache[name]) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">this</span>.loadData.load(name, (data) =&gt; &#123;</span><br><span class=\"line\">                <span class=\"keyword\">this</span>.cache[name] = data;</span><br><span class=\"line\">                callback(data);</span><br><span class=\"line\">            &#125;);</span><br><span class=\"line\">        &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">            callback(<span class=\"keyword\">this</span>.cache[name]);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h1 id=\"函数式例子：\"><a href=\"#函数式例子：\" class=\"headerlink\" title=\"函数式例子：\"></a>函数式例子：</h1><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * 使用虚拟代理实现图片预加载</span></span><br><span class=\"line\"><span class=\"comment\"> * 使用缓存代理实现ajax异步请求数据</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\">(<span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">var</span> logoImg = (<span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">var</span> logo = <span class=\"built_in\">document</span>.querySelector(<span class=\"string\">'.logo'</span>);</span><br><span class=\"line\">        <span class=\"keyword\">return</span> &#123;</span><br><span class=\"line\">            setSrc: <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">src</span>) </span>&#123;</span><br><span class=\"line\">                setTimeout(<span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">                    logo.src = src;</span><br><span class=\"line\">                &#125;);</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;)();</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">var</span> proxyLogoImg = (<span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">var</span> img = <span class=\"keyword\">new</span> Image();</span><br><span class=\"line\">        img.onload = <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">            logoImg.setSrc(<span class=\"keyword\">this</span>.src);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> &#123;</span><br><span class=\"line\">            setSrc: <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">src</span>) </span>&#123;</span><br><span class=\"line\">                logoImg.setSrc(<span class=\"string\">'./loading.png'</span>);</span><br><span class=\"line\">                setTimeout(<span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">                    img.src = src;</span><br><span class=\"line\">                &#125;, <span class=\"number\">3000</span>);</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;)();</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">var</span> fetchData = (<span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> &#123;</span><br><span class=\"line\">            start: <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">url, fn</span>) </span>&#123;</span><br><span class=\"line\">                fetch(url).then(<span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">response</span>) </span>&#123;</span><br><span class=\"line\">                    <span class=\"keyword\">if</span> (response.ok) &#123;</span><br><span class=\"line\">                        response.json().then(<span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">data</span>) </span>&#123;</span><br><span class=\"line\">                            setTimeout(<span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">                                fn.call(<span class=\"keyword\">this</span>, data);</span><br><span class=\"line\">                            &#125;, <span class=\"number\">2000</span>);</span><br><span class=\"line\">                        &#125;);</span><br><span class=\"line\">                    &#125;</span><br><span class=\"line\">                &#125;).catch(<span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">err</span>) </span>&#123;</span><br><span class=\"line\">                    <span class=\"built_in\">console</span>.log(err);</span><br><span class=\"line\">                &#125;);</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;)();</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">var</span> proxyFetchData = (<span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">var</span> cache = &#123;&#125;;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> &#123;</span><br><span class=\"line\">            start: <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">url, fn</span>) </span>&#123;</span><br><span class=\"line\">                <span class=\"keyword\">var</span> key = url.split(<span class=\"string\">'.'</span>)[<span class=\"number\">0</span>];</span><br><span class=\"line\">                <span class=\"keyword\">if</span> (key <span class=\"keyword\">in</span> cache) &#123;</span><br><span class=\"line\">                    fn.call(<span class=\"keyword\">this</span>, cache[key]);</span><br><span class=\"line\">                &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">                    fetchData.start(url, <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">data</span>) </span>&#123;</span><br><span class=\"line\">                        cache[key] = data;</span><br><span class=\"line\">                        fn.call(<span class=\"keyword\">this</span>, data);</span><br><span class=\"line\">                    &#125;);</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;)();</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">var</span> fetchDataAction = <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">        <span class=\"built_in\">console</span>.time(<span class=\"string\">'fetchData'</span>);</span><br><span class=\"line\">        proxyFetchData.start(<span class=\"string\">'./1.json'</span>, <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">data</span>) </span>&#123;</span><br><span class=\"line\">            <span class=\"built_in\">console</span>.log(data);</span><br><span class=\"line\">            <span class=\"built_in\">console</span>.timeEnd(<span class=\"string\">'fetchData'</span>);</span><br><span class=\"line\">        &#125;);</span><br><span class=\"line\">    &#125;;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">var</span> init = <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">        proxyLogoImg.setSrc(<span class=\"string\">'./logo.png'</span>);</span><br><span class=\"line\">        fetchDataAction();</span><br><span class=\"line\">        setTimeout(<span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">            fetchDataAction();</span><br><span class=\"line\">        &#125;, <span class=\"number\">5000</span>);</span><br><span class=\"line\">    &#125;;</span><br><span class=\"line\"></span><br><span class=\"line\">    init();</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;)();</span><br></pre></td></tr></table></figure>\n"},{"title":"享元模式","date":"2018-05-19T13:54:32.000Z","_content":"\n\n\n# 什么是享元模式\n享元模式（Flyweight Pattern）主要用于减少创建对象的数量，以减少内存占用和提高性能。这种类型的设计模式属于结构型模式，它提供了减少对象数量从而改善应用所需的对象结构的方式。\n\n享元模式尝试重用现有的同类对象，如果未找到匹配的对象，则创建新对象。\n\n\n\n# 面向对象例子：\n\n```js\nclass Flyweight{\n\tconstructor() {\n\t\tthis.divPool = [];\n\t}\n\n\tcreateDiv(text, parent) {\n\t\tif (this.divPool.length > 0) {\n\t\t\tconsole.log(`get from pool, pool count:${this.divPool.length}`);\n\t\t\tlet div = this.divPool.shift();\n\t\t\tdiv.innerText = text;\n\t\t\tparent.appendChild(div);\n\t\t\treturn div;\n\t\t} else {\n\t\t\tconsole.log(`create a new div, because pool count:${this.divPool.length}`);\n\t\t\tlet div = document.createElement('div');\n\t\t\tdiv.innerText = text;\n\t\t\tparent.appendChild(div);\n\t\t\treturn div;\n\t\t}\n\t}\n  \n\tremoveDiv(node, parent) {\n\t\tparent.removeChild(node);\n\t\tthis.recover(node);\n\t\tconsole.log(`when ui remove div, restore this div, now pool has: ${this.divPool.length}`);\n\t}\n  \n\trecover(node) {\n\t\tthis.divPool.push(node);\n\t}\n}\n```\n# 函数式例子：\n\n```js\n(function () {\n\n    var circleFactory = (function () {\n        var circlePool = [];\n        var parent = document.querySelector('.flyweight-body');\n        return {\n            create: function () {\n                if (circlePool.length !== 0) {\n                    return circlePool.shift();\n                } else {\n                    var div = document.createElement('div');\n                    div.setAttribute('class', 'flyweight-child');\n                    parent.appendChild(div);\n                    return div;\n                }\n            },\n            recover: function (dom) {\n                return circlePool.push(dom);\n            },\n            remove: function (oldPool) {\n                for (var i = 0; i < oldPool.length; i++) {\n                    parent.removeChild(oldPool[i]);\n                }\n            }\n        }\n    })();\n\n    var renderCircle = (function () {\n        var circlePool = [];\n        return function (number) {\n            console.log('length: ' + circlePool.length);\n            for (var j = 0; j < number.length; j++) {\n                circleFactory.recover(circlePool.pop());\n                circlePool.length = circlePool.length - 1;\n            }\n            console.log('length: ' + circlePool.length);\n            circleFactory.remove(circlePool);\n            circlePool = [];\n            for (var i = 0; i < number; i++) {\n                var circle = circleFactory.create();\n                circle.style.left = Math.random() * 700 + 'px';\n                circle.style.top = Math.random() * 400 + 'px';\n                circlePool.push(circle);\n            }\n        }\n    })();\n\n    var init = function () {\n        Event.listen('draw-circle', function (args) {\n            var number = Number(args.number);\n            console.log(number);\n            renderCircle(number);\n        });\n    };\n\n    init();\n\n})();\n```\n","source":"_posts/享元模式.md","raw":"---\ntitle: 享元模式\ndate: 2018-05-19 21:54:32\ntags:\n\t- Javascript设计模式\n---\n\n\n\n# 什么是享元模式\n享元模式（Flyweight Pattern）主要用于减少创建对象的数量，以减少内存占用和提高性能。这种类型的设计模式属于结构型模式，它提供了减少对象数量从而改善应用所需的对象结构的方式。\n\n享元模式尝试重用现有的同类对象，如果未找到匹配的对象，则创建新对象。\n\n\n\n# 面向对象例子：\n\n```js\nclass Flyweight{\n\tconstructor() {\n\t\tthis.divPool = [];\n\t}\n\n\tcreateDiv(text, parent) {\n\t\tif (this.divPool.length > 0) {\n\t\t\tconsole.log(`get from pool, pool count:${this.divPool.length}`);\n\t\t\tlet div = this.divPool.shift();\n\t\t\tdiv.innerText = text;\n\t\t\tparent.appendChild(div);\n\t\t\treturn div;\n\t\t} else {\n\t\t\tconsole.log(`create a new div, because pool count:${this.divPool.length}`);\n\t\t\tlet div = document.createElement('div');\n\t\t\tdiv.innerText = text;\n\t\t\tparent.appendChild(div);\n\t\t\treturn div;\n\t\t}\n\t}\n  \n\tremoveDiv(node, parent) {\n\t\tparent.removeChild(node);\n\t\tthis.recover(node);\n\t\tconsole.log(`when ui remove div, restore this div, now pool has: ${this.divPool.length}`);\n\t}\n  \n\trecover(node) {\n\t\tthis.divPool.push(node);\n\t}\n}\n```\n# 函数式例子：\n\n```js\n(function () {\n\n    var circleFactory = (function () {\n        var circlePool = [];\n        var parent = document.querySelector('.flyweight-body');\n        return {\n            create: function () {\n                if (circlePool.length !== 0) {\n                    return circlePool.shift();\n                } else {\n                    var div = document.createElement('div');\n                    div.setAttribute('class', 'flyweight-child');\n                    parent.appendChild(div);\n                    return div;\n                }\n            },\n            recover: function (dom) {\n                return circlePool.push(dom);\n            },\n            remove: function (oldPool) {\n                for (var i = 0; i < oldPool.length; i++) {\n                    parent.removeChild(oldPool[i]);\n                }\n            }\n        }\n    })();\n\n    var renderCircle = (function () {\n        var circlePool = [];\n        return function (number) {\n            console.log('length: ' + circlePool.length);\n            for (var j = 0; j < number.length; j++) {\n                circleFactory.recover(circlePool.pop());\n                circlePool.length = circlePool.length - 1;\n            }\n            console.log('length: ' + circlePool.length);\n            circleFactory.remove(circlePool);\n            circlePool = [];\n            for (var i = 0; i < number; i++) {\n                var circle = circleFactory.create();\n                circle.style.left = Math.random() * 700 + 'px';\n                circle.style.top = Math.random() * 400 + 'px';\n                circlePool.push(circle);\n            }\n        }\n    })();\n\n    var init = function () {\n        Event.listen('draw-circle', function (args) {\n            var number = Number(args.number);\n            console.log(number);\n            renderCircle(number);\n        });\n    };\n\n    init();\n\n})();\n```\n","slug":"享元模式","published":1,"updated":"2019-11-04T06:59:52.922Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ck2vg6gwa001u4cobdu37xfc4","content":"<h1 id=\"什么是享元模式\"><a href=\"#什么是享元模式\" class=\"headerlink\" title=\"什么是享元模式\"></a>什么是享元模式</h1><p>享元模式（Flyweight Pattern）主要用于减少创建对象的数量，以减少内存占用和提高性能。这种类型的设计模式属于结构型模式，它提供了减少对象数量从而改善应用所需的对象结构的方式。</p>\n<p>享元模式尝试重用现有的同类对象，如果未找到匹配的对象，则创建新对象。</p>\n<h1 id=\"面向对象例子：\"><a href=\"#面向对象例子：\" class=\"headerlink\" title=\"面向对象例子：\"></a>面向对象例子：</h1><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Flyweight</span></span>&#123;</span><br><span class=\"line\">\t<span class=\"keyword\">constructor</span>() &#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">this</span>.divPool = [];</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\tcreateDiv(text, parent) &#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span> (<span class=\"keyword\">this</span>.divPool.length &gt; <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">\t\t\t<span class=\"built_in\">console</span>.log(<span class=\"string\">`get from pool, pool count:<span class=\"subst\">$&#123;<span class=\"keyword\">this</span>.divPool.length&#125;</span>`</span>);</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">let</span> div = <span class=\"keyword\">this</span>.divPool.shift();</span><br><span class=\"line\">\t\t\tdiv.innerText = text;</span><br><span class=\"line\">\t\t\tparent.appendChild(div);</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">return</span> div;</span><br><span class=\"line\">\t\t&#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">\t\t\t<span class=\"built_in\">console</span>.log(<span class=\"string\">`create a new div, because pool count:<span class=\"subst\">$&#123;<span class=\"keyword\">this</span>.divPool.length&#125;</span>`</span>);</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">let</span> div = <span class=\"built_in\">document</span>.createElement(<span class=\"string\">'div'</span>);</span><br><span class=\"line\">\t\t\tdiv.innerText = text;</span><br><span class=\"line\">\t\t\tparent.appendChild(div);</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">return</span> div;</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">  </span><br><span class=\"line\">\tremoveDiv(node, parent) &#123;</span><br><span class=\"line\">\t\tparent.removeChild(node);</span><br><span class=\"line\">\t\t<span class=\"keyword\">this</span>.recover(node);</span><br><span class=\"line\">\t\t<span class=\"built_in\">console</span>.log(<span class=\"string\">`when ui remove div, restore this div, now pool has: <span class=\"subst\">$&#123;<span class=\"keyword\">this</span>.divPool.length&#125;</span>`</span>);</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">  </span><br><span class=\"line\">\trecover(node) &#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">this</span>.divPool.push(node);</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h1 id=\"函数式例子：\"><a href=\"#函数式例子：\" class=\"headerlink\" title=\"函数式例子：\"></a>函数式例子：</h1><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">(<span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">var</span> circleFactory = (<span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">var</span> circlePool = [];</span><br><span class=\"line\">        <span class=\"keyword\">var</span> parent = <span class=\"built_in\">document</span>.querySelector(<span class=\"string\">'.flyweight-body'</span>);</span><br><span class=\"line\">        <span class=\"keyword\">return</span> &#123;</span><br><span class=\"line\">            create: <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">                <span class=\"keyword\">if</span> (circlePool.length !== <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">                    <span class=\"keyword\">return</span> circlePool.shift();</span><br><span class=\"line\">                &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">                    <span class=\"keyword\">var</span> div = <span class=\"built_in\">document</span>.createElement(<span class=\"string\">'div'</span>);</span><br><span class=\"line\">                    div.setAttribute(<span class=\"string\">'class'</span>, <span class=\"string\">'flyweight-child'</span>);</span><br><span class=\"line\">                    parent.appendChild(div);</span><br><span class=\"line\">                    <span class=\"keyword\">return</span> div;</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">            &#125;,</span><br><span class=\"line\">            recover: <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">dom</span>) </span>&#123;</span><br><span class=\"line\">                <span class=\"keyword\">return</span> circlePool.push(dom);</span><br><span class=\"line\">            &#125;,</span><br><span class=\"line\">            remove: <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">oldPool</span>) </span>&#123;</span><br><span class=\"line\">                <span class=\"keyword\">for</span> (<span class=\"keyword\">var</span> i = <span class=\"number\">0</span>; i &lt; oldPool.length; i++) &#123;</span><br><span class=\"line\">                    parent.removeChild(oldPool[i]);</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;)();</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">var</span> renderCircle = (<span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">var</span> circlePool = [];</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">number</span>) </span>&#123;</span><br><span class=\"line\">            <span class=\"built_in\">console</span>.log(<span class=\"string\">'length: '</span> + circlePool.length);</span><br><span class=\"line\">            <span class=\"keyword\">for</span> (<span class=\"keyword\">var</span> j = <span class=\"number\">0</span>; j &lt; number.length; j++) &#123;</span><br><span class=\"line\">                circleFactory.recover(circlePool.pop());</span><br><span class=\"line\">                circlePool.length = circlePool.length - <span class=\"number\">1</span>;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            <span class=\"built_in\">console</span>.log(<span class=\"string\">'length: '</span> + circlePool.length);</span><br><span class=\"line\">            circleFactory.remove(circlePool);</span><br><span class=\"line\">            circlePool = [];</span><br><span class=\"line\">            <span class=\"keyword\">for</span> (<span class=\"keyword\">var</span> i = <span class=\"number\">0</span>; i &lt; number; i++) &#123;</span><br><span class=\"line\">                <span class=\"keyword\">var</span> circle = circleFactory.create();</span><br><span class=\"line\">                circle.style.left = <span class=\"built_in\">Math</span>.random() * <span class=\"number\">700</span> + <span class=\"string\">'px'</span>;</span><br><span class=\"line\">                circle.style.top = <span class=\"built_in\">Math</span>.random() * <span class=\"number\">400</span> + <span class=\"string\">'px'</span>;</span><br><span class=\"line\">                circlePool.push(circle);</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;)();</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">var</span> init = <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">        Event.listen(<span class=\"string\">'draw-circle'</span>, <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">args</span>) </span>&#123;</span><br><span class=\"line\">            <span class=\"keyword\">var</span> number = <span class=\"built_in\">Number</span>(args.number);</span><br><span class=\"line\">            <span class=\"built_in\">console</span>.log(number);</span><br><span class=\"line\">            renderCircle(number);</span><br><span class=\"line\">        &#125;);</span><br><span class=\"line\">    &#125;;</span><br><span class=\"line\"></span><br><span class=\"line\">    init();</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;)();</span><br></pre></td></tr></table></figure>\n","site":{"data":{"projects":[{"name":"AiTing","url":"https://github.com/renhongl/aiting","desc":"HTML5客户端音乐播放器"},{"name":"AiLiao","url":"https://github.com/renhongl/ailiao","desc":"网页聊天软件"},{"name":"Pomelo Editor","url":"https://renhongl.github.io/markdown-editor/","desc":"功能强大的在线Markdown编辑器"}]}},"excerpt":"","more":"<h1 id=\"什么是享元模式\"><a href=\"#什么是享元模式\" class=\"headerlink\" title=\"什么是享元模式\"></a>什么是享元模式</h1><p>享元模式（Flyweight Pattern）主要用于减少创建对象的数量，以减少内存占用和提高性能。这种类型的设计模式属于结构型模式，它提供了减少对象数量从而改善应用所需的对象结构的方式。</p>\n<p>享元模式尝试重用现有的同类对象，如果未找到匹配的对象，则创建新对象。</p>\n<h1 id=\"面向对象例子：\"><a href=\"#面向对象例子：\" class=\"headerlink\" title=\"面向对象例子：\"></a>面向对象例子：</h1><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Flyweight</span></span>&#123;</span><br><span class=\"line\">\t<span class=\"keyword\">constructor</span>() &#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">this</span>.divPool = [];</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\tcreateDiv(text, parent) &#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span> (<span class=\"keyword\">this</span>.divPool.length &gt; <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">\t\t\t<span class=\"built_in\">console</span>.log(<span class=\"string\">`get from pool, pool count:<span class=\"subst\">$&#123;<span class=\"keyword\">this</span>.divPool.length&#125;</span>`</span>);</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">let</span> div = <span class=\"keyword\">this</span>.divPool.shift();</span><br><span class=\"line\">\t\t\tdiv.innerText = text;</span><br><span class=\"line\">\t\t\tparent.appendChild(div);</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">return</span> div;</span><br><span class=\"line\">\t\t&#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">\t\t\t<span class=\"built_in\">console</span>.log(<span class=\"string\">`create a new div, because pool count:<span class=\"subst\">$&#123;<span class=\"keyword\">this</span>.divPool.length&#125;</span>`</span>);</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">let</span> div = <span class=\"built_in\">document</span>.createElement(<span class=\"string\">'div'</span>);</span><br><span class=\"line\">\t\t\tdiv.innerText = text;</span><br><span class=\"line\">\t\t\tparent.appendChild(div);</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">return</span> div;</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">  </span><br><span class=\"line\">\tremoveDiv(node, parent) &#123;</span><br><span class=\"line\">\t\tparent.removeChild(node);</span><br><span class=\"line\">\t\t<span class=\"keyword\">this</span>.recover(node);</span><br><span class=\"line\">\t\t<span class=\"built_in\">console</span>.log(<span class=\"string\">`when ui remove div, restore this div, now pool has: <span class=\"subst\">$&#123;<span class=\"keyword\">this</span>.divPool.length&#125;</span>`</span>);</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">  </span><br><span class=\"line\">\trecover(node) &#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">this</span>.divPool.push(node);</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h1 id=\"函数式例子：\"><a href=\"#函数式例子：\" class=\"headerlink\" title=\"函数式例子：\"></a>函数式例子：</h1><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">(<span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">var</span> circleFactory = (<span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">var</span> circlePool = [];</span><br><span class=\"line\">        <span class=\"keyword\">var</span> parent = <span class=\"built_in\">document</span>.querySelector(<span class=\"string\">'.flyweight-body'</span>);</span><br><span class=\"line\">        <span class=\"keyword\">return</span> &#123;</span><br><span class=\"line\">            create: <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">                <span class=\"keyword\">if</span> (circlePool.length !== <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">                    <span class=\"keyword\">return</span> circlePool.shift();</span><br><span class=\"line\">                &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">                    <span class=\"keyword\">var</span> div = <span class=\"built_in\">document</span>.createElement(<span class=\"string\">'div'</span>);</span><br><span class=\"line\">                    div.setAttribute(<span class=\"string\">'class'</span>, <span class=\"string\">'flyweight-child'</span>);</span><br><span class=\"line\">                    parent.appendChild(div);</span><br><span class=\"line\">                    <span class=\"keyword\">return</span> div;</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">            &#125;,</span><br><span class=\"line\">            recover: <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">dom</span>) </span>&#123;</span><br><span class=\"line\">                <span class=\"keyword\">return</span> circlePool.push(dom);</span><br><span class=\"line\">            &#125;,</span><br><span class=\"line\">            remove: <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">oldPool</span>) </span>&#123;</span><br><span class=\"line\">                <span class=\"keyword\">for</span> (<span class=\"keyword\">var</span> i = <span class=\"number\">0</span>; i &lt; oldPool.length; i++) &#123;</span><br><span class=\"line\">                    parent.removeChild(oldPool[i]);</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;)();</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">var</span> renderCircle = (<span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">var</span> circlePool = [];</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">number</span>) </span>&#123;</span><br><span class=\"line\">            <span class=\"built_in\">console</span>.log(<span class=\"string\">'length: '</span> + circlePool.length);</span><br><span class=\"line\">            <span class=\"keyword\">for</span> (<span class=\"keyword\">var</span> j = <span class=\"number\">0</span>; j &lt; number.length; j++) &#123;</span><br><span class=\"line\">                circleFactory.recover(circlePool.pop());</span><br><span class=\"line\">                circlePool.length = circlePool.length - <span class=\"number\">1</span>;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            <span class=\"built_in\">console</span>.log(<span class=\"string\">'length: '</span> + circlePool.length);</span><br><span class=\"line\">            circleFactory.remove(circlePool);</span><br><span class=\"line\">            circlePool = [];</span><br><span class=\"line\">            <span class=\"keyword\">for</span> (<span class=\"keyword\">var</span> i = <span class=\"number\">0</span>; i &lt; number; i++) &#123;</span><br><span class=\"line\">                <span class=\"keyword\">var</span> circle = circleFactory.create();</span><br><span class=\"line\">                circle.style.left = <span class=\"built_in\">Math</span>.random() * <span class=\"number\">700</span> + <span class=\"string\">'px'</span>;</span><br><span class=\"line\">                circle.style.top = <span class=\"built_in\">Math</span>.random() * <span class=\"number\">400</span> + <span class=\"string\">'px'</span>;</span><br><span class=\"line\">                circlePool.push(circle);</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;)();</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">var</span> init = <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">        Event.listen(<span class=\"string\">'draw-circle'</span>, <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">args</span>) </span>&#123;</span><br><span class=\"line\">            <span class=\"keyword\">var</span> number = <span class=\"built_in\">Number</span>(args.number);</span><br><span class=\"line\">            <span class=\"built_in\">console</span>.log(number);</span><br><span class=\"line\">            renderCircle(number);</span><br><span class=\"line\">        &#125;);</span><br><span class=\"line\">    &#125;;</span><br><span class=\"line\"></span><br><span class=\"line\">    init();</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;)();</span><br></pre></td></tr></table></figure>\n"},{"title":"函数式编程","date":"2018-06-18T13:57:52.000Z","_content":"\n## 什么是函数式编程\n\n\n* 简单说，\"函数式编程\"是一种\"编程范式\"（programming paradigm），也就是如何编写程序的方法论。\n它属于\"结构化编程\"的一种，主要思想是把运算过程尽量写成一系列嵌套的函数调用。\n\n* 与面向对象编程（Object-oriented programming）和过程式编程（Procedural programming）并列的编程范式。\n最主要的特征是，函数是第一等公民。\n强调将计算过程分解成可复用的函数，典型例子就是map方法和reduce方法组合而成 MapReduce 算法。\n只有纯的、没有副作用的函数，才是合格的函数。\n\n\n## 特点\n1. 函数是\"第一等公民\"\n指的是函数与其他数据类型一样，处于平等地位，可以赋值给其他变量，也可以作为参数，传入另一个函数，或者作为别的函数的返回值。\n\n2. 只用\"表达式\"，不用\"语句\"\n\"表达式\"（expression）是一个单纯的运算过程，总是有返回值；\"语句\"（statement）是执行某种操作，没有返回值。\n函数式编程要求，只使用表达式，不使用语句。也就是说，每一步都是单纯的运算，而且都有返回值。\n\n3. 没有\"副作用\"\n指的是函数内部与外部互动（最典型的情况，就是修改全局变量的值），产生运算以外的其他结果。\n函数式编程强调没有\"副作用\"，意味着函数要保持独立，所有功能就是返回一个新的值，没有其他行为，尤其是不得修改外部变量的值。\n\n4. 不修改状态\n在其他类型的语言中，变量往往用来保存\"状态\"（state）。不修改变量，意味着状态不能保存在变量中。函数式编程使用参数保存状态，最好的例子就是递归。\n\n\n5. 引用透明\n指的是函数的运行不依赖于外部变量或\"状态\"，只依赖于输入的参数，任何时候只要参数相同，引用函数所得到的返回值总是相同的。\n\n\n## 意义\n1. 代码简洁，开发快速\n函数式编程大量使用函数，减少了代码的重复，因此程序比较短，开发速度较快。\n\n2. 接近自然语言，易于理解\n函数式编程的自由度很高，可以写出很接近自然语言的代码。\n\n3. 更方便的代码管理\n函数式编程不依赖、也不会改变外界的状态，只要给定输入参数，返回的结果必定相同。\n因此，每一个函数都可以被看做独立单元，很有利于进行单元测试（unit testing）和除错（debugging），以及模块化组合。\n\n\n4. 易于\"并发编程\"\n函数式编程不需要考虑\"死锁\"（deadlock），因为它不修改变量，所以根本不存在\"锁\"线程的问题。不必担心一个线程的数据，\n被另一个线程修改，所以可以很放心地把工作分摊到多个线程，部署\"并发编程\"（concurrency）。\n\n5. 代码的热升级\n函数式编程没有副作用，只要保证接口不变，内部实现是外部无关的。所以，可以在运行状态下直接升级代码，不需要重启，也不需要停机。\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n","source":"_posts/函数式编程.md","raw":"\n---\ntitle: 函数式编程\ndate: 2018-06-18 21:57:52\ntags: Javascript\n\n---\n\n## 什么是函数式编程\n\n\n* 简单说，\"函数式编程\"是一种\"编程范式\"（programming paradigm），也就是如何编写程序的方法论。\n它属于\"结构化编程\"的一种，主要思想是把运算过程尽量写成一系列嵌套的函数调用。\n\n* 与面向对象编程（Object-oriented programming）和过程式编程（Procedural programming）并列的编程范式。\n最主要的特征是，函数是第一等公民。\n强调将计算过程分解成可复用的函数，典型例子就是map方法和reduce方法组合而成 MapReduce 算法。\n只有纯的、没有副作用的函数，才是合格的函数。\n\n\n## 特点\n1. 函数是\"第一等公民\"\n指的是函数与其他数据类型一样，处于平等地位，可以赋值给其他变量，也可以作为参数，传入另一个函数，或者作为别的函数的返回值。\n\n2. 只用\"表达式\"，不用\"语句\"\n\"表达式\"（expression）是一个单纯的运算过程，总是有返回值；\"语句\"（statement）是执行某种操作，没有返回值。\n函数式编程要求，只使用表达式，不使用语句。也就是说，每一步都是单纯的运算，而且都有返回值。\n\n3. 没有\"副作用\"\n指的是函数内部与外部互动（最典型的情况，就是修改全局变量的值），产生运算以外的其他结果。\n函数式编程强调没有\"副作用\"，意味着函数要保持独立，所有功能就是返回一个新的值，没有其他行为，尤其是不得修改外部变量的值。\n\n4. 不修改状态\n在其他类型的语言中，变量往往用来保存\"状态\"（state）。不修改变量，意味着状态不能保存在变量中。函数式编程使用参数保存状态，最好的例子就是递归。\n\n\n5. 引用透明\n指的是函数的运行不依赖于外部变量或\"状态\"，只依赖于输入的参数，任何时候只要参数相同，引用函数所得到的返回值总是相同的。\n\n\n## 意义\n1. 代码简洁，开发快速\n函数式编程大量使用函数，减少了代码的重复，因此程序比较短，开发速度较快。\n\n2. 接近自然语言，易于理解\n函数式编程的自由度很高，可以写出很接近自然语言的代码。\n\n3. 更方便的代码管理\n函数式编程不依赖、也不会改变外界的状态，只要给定输入参数，返回的结果必定相同。\n因此，每一个函数都可以被看做独立单元，很有利于进行单元测试（unit testing）和除错（debugging），以及模块化组合。\n\n\n4. 易于\"并发编程\"\n函数式编程不需要考虑\"死锁\"（deadlock），因为它不修改变量，所以根本不存在\"锁\"线程的问题。不必担心一个线程的数据，\n被另一个线程修改，所以可以很放心地把工作分摊到多个线程，部署\"并发编程\"（concurrency）。\n\n5. 代码的热升级\n函数式编程没有副作用，只要保证接口不变，内部实现是外部无关的。所以，可以在运行状态下直接升级代码，不需要重启，也不需要停机。\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n","slug":"函数式编程","published":1,"updated":"2019-06-18T09:54:39.895Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ck2vg6gwc001w4cobzaqpxzq4","content":"<h2 id=\"什么是函数式编程\"><a href=\"#什么是函数式编程\" class=\"headerlink\" title=\"什么是函数式编程\"></a>什么是函数式编程</h2><ul>\n<li><p>简单说，”函数式编程”是一种”编程范式”（programming paradigm），也就是如何编写程序的方法论。<br>它属于”结构化编程”的一种，主要思想是把运算过程尽量写成一系列嵌套的函数调用。</p>\n</li>\n<li><p>与面向对象编程（Object-oriented programming）和过程式编程（Procedural programming）并列的编程范式。<br>最主要的特征是，函数是第一等公民。<br>强调将计算过程分解成可复用的函数，典型例子就是map方法和reduce方法组合而成 MapReduce 算法。<br>只有纯的、没有副作用的函数，才是合格的函数。</p>\n</li>\n</ul>\n<h2 id=\"特点\"><a href=\"#特点\" class=\"headerlink\" title=\"特点\"></a>特点</h2><ol>\n<li><p>函数是”第一等公民”<br>指的是函数与其他数据类型一样，处于平等地位，可以赋值给其他变量，也可以作为参数，传入另一个函数，或者作为别的函数的返回值。</p>\n</li>\n<li><p>只用”表达式”，不用”语句”<br>“表达式”（expression）是一个单纯的运算过程，总是有返回值；”语句”（statement）是执行某种操作，没有返回值。<br>函数式编程要求，只使用表达式，不使用语句。也就是说，每一步都是单纯的运算，而且都有返回值。</p>\n</li>\n<li><p>没有”副作用”<br>指的是函数内部与外部互动（最典型的情况，就是修改全局变量的值），产生运算以外的其他结果。<br>函数式编程强调没有”副作用”，意味着函数要保持独立，所有功能就是返回一个新的值，没有其他行为，尤其是不得修改外部变量的值。</p>\n</li>\n<li><p>不修改状态<br>在其他类型的语言中，变量往往用来保存”状态”（state）。不修改变量，意味着状态不能保存在变量中。函数式编程使用参数保存状态，最好的例子就是递归。</p>\n</li>\n</ol>\n<ol start=\"5\">\n<li>引用透明<br>指的是函数的运行不依赖于外部变量或”状态”，只依赖于输入的参数，任何时候只要参数相同，引用函数所得到的返回值总是相同的。</li>\n</ol>\n<h2 id=\"意义\"><a href=\"#意义\" class=\"headerlink\" title=\"意义\"></a>意义</h2><ol>\n<li><p>代码简洁，开发快速<br>函数式编程大量使用函数，减少了代码的重复，因此程序比较短，开发速度较快。</p>\n</li>\n<li><p>接近自然语言，易于理解<br>函数式编程的自由度很高，可以写出很接近自然语言的代码。</p>\n</li>\n<li><p>更方便的代码管理<br>函数式编程不依赖、也不会改变外界的状态，只要给定输入参数，返回的结果必定相同。<br>因此，每一个函数都可以被看做独立单元，很有利于进行单元测试（unit testing）和除错（debugging），以及模块化组合。</p>\n</li>\n</ol>\n<ol start=\"4\">\n<li><p>易于”并发编程”<br>函数式编程不需要考虑”死锁”（deadlock），因为它不修改变量，所以根本不存在”锁”线程的问题。不必担心一个线程的数据，<br>被另一个线程修改，所以可以很放心地把工作分摊到多个线程，部署”并发编程”（concurrency）。</p>\n</li>\n<li><p>代码的热升级<br>函数式编程没有副作用，只要保证接口不变，内部实现是外部无关的。所以，可以在运行状态下直接升级代码，不需要重启，也不需要停机。</p>\n</li>\n</ol>\n","site":{"data":{"projects":[{"name":"AiTing","url":"https://github.com/renhongl/aiting","desc":"HTML5客户端音乐播放器"},{"name":"AiLiao","url":"https://github.com/renhongl/ailiao","desc":"网页聊天软件"},{"name":"Pomelo Editor","url":"https://renhongl.github.io/markdown-editor/","desc":"功能强大的在线Markdown编辑器"}]}},"excerpt":"","more":"<h2 id=\"什么是函数式编程\"><a href=\"#什么是函数式编程\" class=\"headerlink\" title=\"什么是函数式编程\"></a>什么是函数式编程</h2><ul>\n<li><p>简单说，”函数式编程”是一种”编程范式”（programming paradigm），也就是如何编写程序的方法论。<br>它属于”结构化编程”的一种，主要思想是把运算过程尽量写成一系列嵌套的函数调用。</p>\n</li>\n<li><p>与面向对象编程（Object-oriented programming）和过程式编程（Procedural programming）并列的编程范式。<br>最主要的特征是，函数是第一等公民。<br>强调将计算过程分解成可复用的函数，典型例子就是map方法和reduce方法组合而成 MapReduce 算法。<br>只有纯的、没有副作用的函数，才是合格的函数。</p>\n</li>\n</ul>\n<h2 id=\"特点\"><a href=\"#特点\" class=\"headerlink\" title=\"特点\"></a>特点</h2><ol>\n<li><p>函数是”第一等公民”<br>指的是函数与其他数据类型一样，处于平等地位，可以赋值给其他变量，也可以作为参数，传入另一个函数，或者作为别的函数的返回值。</p>\n</li>\n<li><p>只用”表达式”，不用”语句”<br>“表达式”（expression）是一个单纯的运算过程，总是有返回值；”语句”（statement）是执行某种操作，没有返回值。<br>函数式编程要求，只使用表达式，不使用语句。也就是说，每一步都是单纯的运算，而且都有返回值。</p>\n</li>\n<li><p>没有”副作用”<br>指的是函数内部与外部互动（最典型的情况，就是修改全局变量的值），产生运算以外的其他结果。<br>函数式编程强调没有”副作用”，意味着函数要保持独立，所有功能就是返回一个新的值，没有其他行为，尤其是不得修改外部变量的值。</p>\n</li>\n<li><p>不修改状态<br>在其他类型的语言中，变量往往用来保存”状态”（state）。不修改变量，意味着状态不能保存在变量中。函数式编程使用参数保存状态，最好的例子就是递归。</p>\n</li>\n</ol>\n<ol start=\"5\">\n<li>引用透明<br>指的是函数的运行不依赖于外部变量或”状态”，只依赖于输入的参数，任何时候只要参数相同，引用函数所得到的返回值总是相同的。</li>\n</ol>\n<h2 id=\"意义\"><a href=\"#意义\" class=\"headerlink\" title=\"意义\"></a>意义</h2><ol>\n<li><p>代码简洁，开发快速<br>函数式编程大量使用函数，减少了代码的重复，因此程序比较短，开发速度较快。</p>\n</li>\n<li><p>接近自然语言，易于理解<br>函数式编程的自由度很高，可以写出很接近自然语言的代码。</p>\n</li>\n<li><p>更方便的代码管理<br>函数式编程不依赖、也不会改变外界的状态，只要给定输入参数，返回的结果必定相同。<br>因此，每一个函数都可以被看做独立单元，很有利于进行单元测试（unit testing）和除错（debugging），以及模块化组合。</p>\n</li>\n</ol>\n<ol start=\"4\">\n<li><p>易于”并发编程”<br>函数式编程不需要考虑”死锁”（deadlock），因为它不修改变量，所以根本不存在”锁”线程的问题。不必担心一个线程的数据，<br>被另一个线程修改，所以可以很放心地把工作分摊到多个线程，部署”并发编程”（concurrency）。</p>\n</li>\n<li><p>代码的热升级<br>函数式编程没有副作用，只要保证接口不变，内部实现是外部无关的。所以，可以在运行状态下直接升级代码，不需要重启，也不需要停机。</p>\n</li>\n</ol>\n"},{"title":"单例模式","date":"2018-04-29T13:54:32.000Z","_content":"\n\n\n# 什么是单例模式\n保证一个类仅有一个实例，并提供一个访问它的全局访问点。\n\n推荐使用惰性单例的方式创建，即在需要时才创建单例对象。并且需要把不变的部分隔离出来，把管理单例的逻辑和创建对象的逻辑分开，这两个方法可以独立变化而不互相影响。当它们连接在一起时，就完成了创建唯一实例对象的功能。\n\n\n\n# 面向对象例子：\n\n```js\n//以下是基本实现方法，但是并没有实现：\n//并且需要把不变的部分隔离出来，把管理单例的逻辑和创建对象的逻辑分开\n//这两个方法可以独立变化而不互相影响。当它们连接在一起时，就完成了创建唯一实例对象的功能。\"\n//的功能。因为再加一个单例元素时，需要修改管理单利的类。SingletonDOM只是为CreateDOM而生的管理类。\n\nexport class SingletonDOM{\n    constructor() {\n        this.createDOM = new CreateDOM;\n    }\n\n    create() {\n        if (!this.instance) {\n            return this.instance = this.createDOM.create();\n        }\n        return this.instance;\n    }\n}\n\nexport class CreateDOM{\n    create(type) {\n        return document.createElement(type || 'div');\n    }\n}\n\nexport class CreateButton{\n    create() {\n        return document.createElement('button');\n    }\n}\n\n//通用管理单例的类。\n\nexport class GetSingleton{\n    constructor(ClassName) {\n        this.obj = new ClassName();\n    }\n\n    create() {\n        if (!this.instance) {\n            return this.instance = this.obj.create();\n        }\n        return this.instance;\n    }\n}\n```\n# 函数式例子：\n\n```js\n/**\n * 使用单例模式实现一个登陆框。\n * 包含一个智能命令模式，即可以直接实现请求的命令，不需要接收者的存在。\n */\n(function () {\n\n    var createLoginDiv = function () {\n        var div;\n        div = document.createElement('div');\n        div.setAttribute('class', 'login');\n        document.querySelector('#app').appendChild(div);\n        \n        var child = document.createElement('div');\n        child.setAttribute('class', 'login-child');\n        child.innerText = 'Login Dialog';\n        div.appendChild(child);\n        return div;\n    };\n\n    var createLoginButton = function () {\n        var button;\n        button = document.createElement('input');\n        button.type = 'button';\n        button.value = 'login';\n        button.setAttribute('class', 'loginBtn');\n        \n        document.querySelector('#app').appendChild(button);\n        return button;\n    };\n\n    var getSingle = function (fn) {\n        var single;\n        return function () {\n            return single || (single = fn.apply(this, arguments));\n        }\n    };\n\n    var createSingleLogin = getSingle(createLoginDiv);\n    var createSingleLoginButton = getSingle(createLoginButton);\n\n    var openLoginDivCommand = (function () {\n        var loginDiv = createSingleLogin();\n        return {\n            excute: function () {\n                loginDiv.addEventListener('click', function (e) {\n                    if (e.target.getAttribute('class') !== 'login-child') {\n                        macroCommand.undo();\n                    }\n                });\n                loginDiv.style.display = 'flex';\n            },\n            undo: function () {\n                loginDiv.style.display = 'none';\n            }\n        }\n    })();\n\n    var clearInputCommand = (function () {\n        var input = document.querySelector('input');\n        var cache;\n        return {\n            excute: function () {\n                cache = input.value;\n                input.value = '';\n            },\n            undo: function () {\n                input.value = cache;\n            }\n        }\n    })();\n\n    var macroCommand = (function () {\n        var commandList = [];\n        return {\n            add: function (command) {\n                commandList.push(command);\n            },\n            excute: function () {\n                for (var i = 0, len = commandList.length; i < len; i++) {\n                    commandList[i].excute();\n                }\n            },\n            undo: function () {\n                for (var i = 0, len = commandList.length; i < len; i++) {\n                    commandList[i].undo();\n                }\n            },\n            redo: function () {\n                macroCommand.excute();\n            }\n        }\n    })();\n\n    macroCommand.add(openLoginDivCommand);\n    macroCommand.add(clearInputCommand);\n\n    var init = function () {\n        var loginButton = createSingleLoginButton();\n        loginButton.addEventListener('click', function () {\n            macroCommand.excute();\n        });\n\n        setTimeout(function () {\n            macroCommand.redo();\n        }, 10000);\n    };\n\n    init();\n\n})();\n```\n","source":"_posts/单例模式.md","raw":"---\ntitle: 单例模式\ndate: 2018-04-29 21:54:32\ntags:\n\t- Javascript设计模式\n---\n\n\n\n# 什么是单例模式\n保证一个类仅有一个实例，并提供一个访问它的全局访问点。\n\n推荐使用惰性单例的方式创建，即在需要时才创建单例对象。并且需要把不变的部分隔离出来，把管理单例的逻辑和创建对象的逻辑分开，这两个方法可以独立变化而不互相影响。当它们连接在一起时，就完成了创建唯一实例对象的功能。\n\n\n\n# 面向对象例子：\n\n```js\n//以下是基本实现方法，但是并没有实现：\n//并且需要把不变的部分隔离出来，把管理单例的逻辑和创建对象的逻辑分开\n//这两个方法可以独立变化而不互相影响。当它们连接在一起时，就完成了创建唯一实例对象的功能。\"\n//的功能。因为再加一个单例元素时，需要修改管理单利的类。SingletonDOM只是为CreateDOM而生的管理类。\n\nexport class SingletonDOM{\n    constructor() {\n        this.createDOM = new CreateDOM;\n    }\n\n    create() {\n        if (!this.instance) {\n            return this.instance = this.createDOM.create();\n        }\n        return this.instance;\n    }\n}\n\nexport class CreateDOM{\n    create(type) {\n        return document.createElement(type || 'div');\n    }\n}\n\nexport class CreateButton{\n    create() {\n        return document.createElement('button');\n    }\n}\n\n//通用管理单例的类。\n\nexport class GetSingleton{\n    constructor(ClassName) {\n        this.obj = new ClassName();\n    }\n\n    create() {\n        if (!this.instance) {\n            return this.instance = this.obj.create();\n        }\n        return this.instance;\n    }\n}\n```\n# 函数式例子：\n\n```js\n/**\n * 使用单例模式实现一个登陆框。\n * 包含一个智能命令模式，即可以直接实现请求的命令，不需要接收者的存在。\n */\n(function () {\n\n    var createLoginDiv = function () {\n        var div;\n        div = document.createElement('div');\n        div.setAttribute('class', 'login');\n        document.querySelector('#app').appendChild(div);\n        \n        var child = document.createElement('div');\n        child.setAttribute('class', 'login-child');\n        child.innerText = 'Login Dialog';\n        div.appendChild(child);\n        return div;\n    };\n\n    var createLoginButton = function () {\n        var button;\n        button = document.createElement('input');\n        button.type = 'button';\n        button.value = 'login';\n        button.setAttribute('class', 'loginBtn');\n        \n        document.querySelector('#app').appendChild(button);\n        return button;\n    };\n\n    var getSingle = function (fn) {\n        var single;\n        return function () {\n            return single || (single = fn.apply(this, arguments));\n        }\n    };\n\n    var createSingleLogin = getSingle(createLoginDiv);\n    var createSingleLoginButton = getSingle(createLoginButton);\n\n    var openLoginDivCommand = (function () {\n        var loginDiv = createSingleLogin();\n        return {\n            excute: function () {\n                loginDiv.addEventListener('click', function (e) {\n                    if (e.target.getAttribute('class') !== 'login-child') {\n                        macroCommand.undo();\n                    }\n                });\n                loginDiv.style.display = 'flex';\n            },\n            undo: function () {\n                loginDiv.style.display = 'none';\n            }\n        }\n    })();\n\n    var clearInputCommand = (function () {\n        var input = document.querySelector('input');\n        var cache;\n        return {\n            excute: function () {\n                cache = input.value;\n                input.value = '';\n            },\n            undo: function () {\n                input.value = cache;\n            }\n        }\n    })();\n\n    var macroCommand = (function () {\n        var commandList = [];\n        return {\n            add: function (command) {\n                commandList.push(command);\n            },\n            excute: function () {\n                for (var i = 0, len = commandList.length; i < len; i++) {\n                    commandList[i].excute();\n                }\n            },\n            undo: function () {\n                for (var i = 0, len = commandList.length; i < len; i++) {\n                    commandList[i].undo();\n                }\n            },\n            redo: function () {\n                macroCommand.excute();\n            }\n        }\n    })();\n\n    macroCommand.add(openLoginDivCommand);\n    macroCommand.add(clearInputCommand);\n\n    var init = function () {\n        var loginButton = createSingleLoginButton();\n        loginButton.addEventListener('click', function () {\n            macroCommand.excute();\n        });\n\n        setTimeout(function () {\n            macroCommand.redo();\n        }, 10000);\n    };\n\n    init();\n\n})();\n```\n","slug":"单例模式","published":1,"updated":"2019-11-04T07:00:00.753Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ck2vg6gwf001z4cobqis1xa07","content":"<h1 id=\"什么是单例模式\"><a href=\"#什么是单例模式\" class=\"headerlink\" title=\"什么是单例模式\"></a>什么是单例模式</h1><p>保证一个类仅有一个实例，并提供一个访问它的全局访问点。</p>\n<p>推荐使用惰性单例的方式创建，即在需要时才创建单例对象。并且需要把不变的部分隔离出来，把管理单例的逻辑和创建对象的逻辑分开，这两个方法可以独立变化而不互相影响。当它们连接在一起时，就完成了创建唯一实例对象的功能。</p>\n<h1 id=\"面向对象例子：\"><a href=\"#面向对象例子：\" class=\"headerlink\" title=\"面向对象例子：\"></a>面向对象例子：</h1><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//以下是基本实现方法，但是并没有实现：</span></span><br><span class=\"line\"><span class=\"comment\">//并且需要把不变的部分隔离出来，把管理单例的逻辑和创建对象的逻辑分开</span></span><br><span class=\"line\"><span class=\"comment\">//这两个方法可以独立变化而不互相影响。当它们连接在一起时，就完成了创建唯一实例对象的功能。\"</span></span><br><span class=\"line\"><span class=\"comment\">//的功能。因为再加一个单例元素时，需要修改管理单利的类。SingletonDOM只是为CreateDOM而生的管理类。</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">SingletonDOM</span></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">constructor</span>() &#123;</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.createDOM = <span class=\"keyword\">new</span> CreateDOM;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    create() &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (!<span class=\"keyword\">this</span>.instance) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"keyword\">this</span>.instance = <span class=\"keyword\">this</span>.createDOM.create();</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">this</span>.instance;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">CreateDOM</span></span>&#123;</span><br><span class=\"line\">    create(type) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"built_in\">document</span>.createElement(type || <span class=\"string\">'div'</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">CreateButton</span></span>&#123;</span><br><span class=\"line\">    create() &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"built_in\">document</span>.createElement(<span class=\"string\">'button'</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//通用管理单例的类。</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">GetSingleton</span></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">constructor</span>(ClassName) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.obj = <span class=\"keyword\">new</span> ClassName();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    create() &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (!<span class=\"keyword\">this</span>.instance) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"keyword\">this</span>.instance = <span class=\"keyword\">this</span>.obj.create();</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">this</span>.instance;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h1 id=\"函数式例子：\"><a href=\"#函数式例子：\" class=\"headerlink\" title=\"函数式例子：\"></a>函数式例子：</h1><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br><span class=\"line\">102</span><br><span class=\"line\">103</span><br><span class=\"line\">104</span><br><span class=\"line\">105</span><br><span class=\"line\">106</span><br><span class=\"line\">107</span><br><span class=\"line\">108</span><br><span class=\"line\">109</span><br><span class=\"line\">110</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * 使用单例模式实现一个登陆框。</span></span><br><span class=\"line\"><span class=\"comment\"> * 包含一个智能命令模式，即可以直接实现请求的命令，不需要接收者的存在。</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\">(<span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">var</span> createLoginDiv = <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">var</span> div;</span><br><span class=\"line\">        div = <span class=\"built_in\">document</span>.createElement(<span class=\"string\">'div'</span>);</span><br><span class=\"line\">        div.setAttribute(<span class=\"string\">'class'</span>, <span class=\"string\">'login'</span>);</span><br><span class=\"line\">        <span class=\"built_in\">document</span>.querySelector(<span class=\"string\">'#app'</span>).appendChild(div);</span><br><span class=\"line\">        </span><br><span class=\"line\">        <span class=\"keyword\">var</span> child = <span class=\"built_in\">document</span>.createElement(<span class=\"string\">'div'</span>);</span><br><span class=\"line\">        child.setAttribute(<span class=\"string\">'class'</span>, <span class=\"string\">'login-child'</span>);</span><br><span class=\"line\">        child.innerText = <span class=\"string\">'Login Dialog'</span>;</span><br><span class=\"line\">        div.appendChild(child);</span><br><span class=\"line\">        <span class=\"keyword\">return</span> div;</span><br><span class=\"line\">    &#125;;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">var</span> createLoginButton = <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">var</span> button;</span><br><span class=\"line\">        button = <span class=\"built_in\">document</span>.createElement(<span class=\"string\">'input'</span>);</span><br><span class=\"line\">        button.type = <span class=\"string\">'button'</span>;</span><br><span class=\"line\">        button.value = <span class=\"string\">'login'</span>;</span><br><span class=\"line\">        button.setAttribute(<span class=\"string\">'class'</span>, <span class=\"string\">'loginBtn'</span>);</span><br><span class=\"line\">        </span><br><span class=\"line\">        <span class=\"built_in\">document</span>.querySelector(<span class=\"string\">'#app'</span>).appendChild(button);</span><br><span class=\"line\">        <span class=\"keyword\">return</span> button;</span><br><span class=\"line\">    &#125;;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">var</span> getSingle = <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">fn</span>) </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">var</span> single;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> single || (single = fn.apply(<span class=\"keyword\">this</span>, <span class=\"built_in\">arguments</span>));</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">var</span> createSingleLogin = getSingle(createLoginDiv);</span><br><span class=\"line\">    <span class=\"keyword\">var</span> createSingleLoginButton = getSingle(createLoginButton);</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">var</span> openLoginDivCommand = (<span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">var</span> loginDiv = createSingleLogin();</span><br><span class=\"line\">        <span class=\"keyword\">return</span> &#123;</span><br><span class=\"line\">            excute: <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">                loginDiv.addEventListener(<span class=\"string\">'click'</span>, <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">e</span>) </span>&#123;</span><br><span class=\"line\">                    <span class=\"keyword\">if</span> (e.target.getAttribute(<span class=\"string\">'class'</span>) !== <span class=\"string\">'login-child'</span>) &#123;</span><br><span class=\"line\">                        macroCommand.undo();</span><br><span class=\"line\">                    &#125;</span><br><span class=\"line\">                &#125;);</span><br><span class=\"line\">                loginDiv.style.display = <span class=\"string\">'flex'</span>;</span><br><span class=\"line\">            &#125;,</span><br><span class=\"line\">            undo: <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">                loginDiv.style.display = <span class=\"string\">'none'</span>;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;)();</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">var</span> clearInputCommand = (<span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">var</span> input = <span class=\"built_in\">document</span>.querySelector(<span class=\"string\">'input'</span>);</span><br><span class=\"line\">        <span class=\"keyword\">var</span> cache;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> &#123;</span><br><span class=\"line\">            excute: <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">                cache = input.value;</span><br><span class=\"line\">                input.value = <span class=\"string\">''</span>;</span><br><span class=\"line\">            &#125;,</span><br><span class=\"line\">            undo: <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">                input.value = cache;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;)();</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">var</span> macroCommand = (<span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">var</span> commandList = [];</span><br><span class=\"line\">        <span class=\"keyword\">return</span> &#123;</span><br><span class=\"line\">            add: <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">command</span>) </span>&#123;</span><br><span class=\"line\">                commandList.push(command);</span><br><span class=\"line\">            &#125;,</span><br><span class=\"line\">            excute: <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">                <span class=\"keyword\">for</span> (<span class=\"keyword\">var</span> i = <span class=\"number\">0</span>, len = commandList.length; i &lt; len; i++) &#123;</span><br><span class=\"line\">                    commandList[i].excute();</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">            &#125;,</span><br><span class=\"line\">            undo: <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">                <span class=\"keyword\">for</span> (<span class=\"keyword\">var</span> i = <span class=\"number\">0</span>, len = commandList.length; i &lt; len; i++) &#123;</span><br><span class=\"line\">                    commandList[i].undo();</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">            &#125;,</span><br><span class=\"line\">            redo: <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">                macroCommand.excute();</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;)();</span><br><span class=\"line\"></span><br><span class=\"line\">    macroCommand.add(openLoginDivCommand);</span><br><span class=\"line\">    macroCommand.add(clearInputCommand);</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">var</span> init = <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">var</span> loginButton = createSingleLoginButton();</span><br><span class=\"line\">        loginButton.addEventListener(<span class=\"string\">'click'</span>, <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">            macroCommand.excute();</span><br><span class=\"line\">        &#125;);</span><br><span class=\"line\"></span><br><span class=\"line\">        setTimeout(<span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">            macroCommand.redo();</span><br><span class=\"line\">        &#125;, <span class=\"number\">10000</span>);</span><br><span class=\"line\">    &#125;;</span><br><span class=\"line\"></span><br><span class=\"line\">    init();</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;)();</span><br></pre></td></tr></table></figure>\n","site":{"data":{"projects":[{"name":"AiTing","url":"https://github.com/renhongl/aiting","desc":"HTML5客户端音乐播放器"},{"name":"AiLiao","url":"https://github.com/renhongl/ailiao","desc":"网页聊天软件"},{"name":"Pomelo Editor","url":"https://renhongl.github.io/markdown-editor/","desc":"功能强大的在线Markdown编辑器"}]}},"excerpt":"","more":"<h1 id=\"什么是单例模式\"><a href=\"#什么是单例模式\" class=\"headerlink\" title=\"什么是单例模式\"></a>什么是单例模式</h1><p>保证一个类仅有一个实例，并提供一个访问它的全局访问点。</p>\n<p>推荐使用惰性单例的方式创建，即在需要时才创建单例对象。并且需要把不变的部分隔离出来，把管理单例的逻辑和创建对象的逻辑分开，这两个方法可以独立变化而不互相影响。当它们连接在一起时，就完成了创建唯一实例对象的功能。</p>\n<h1 id=\"面向对象例子：\"><a href=\"#面向对象例子：\" class=\"headerlink\" title=\"面向对象例子：\"></a>面向对象例子：</h1><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//以下是基本实现方法，但是并没有实现：</span></span><br><span class=\"line\"><span class=\"comment\">//并且需要把不变的部分隔离出来，把管理单例的逻辑和创建对象的逻辑分开</span></span><br><span class=\"line\"><span class=\"comment\">//这两个方法可以独立变化而不互相影响。当它们连接在一起时，就完成了创建唯一实例对象的功能。\"</span></span><br><span class=\"line\"><span class=\"comment\">//的功能。因为再加一个单例元素时，需要修改管理单利的类。SingletonDOM只是为CreateDOM而生的管理类。</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">SingletonDOM</span></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">constructor</span>() &#123;</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.createDOM = <span class=\"keyword\">new</span> CreateDOM;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    create() &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (!<span class=\"keyword\">this</span>.instance) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"keyword\">this</span>.instance = <span class=\"keyword\">this</span>.createDOM.create();</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">this</span>.instance;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">CreateDOM</span></span>&#123;</span><br><span class=\"line\">    create(type) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"built_in\">document</span>.createElement(type || <span class=\"string\">'div'</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">CreateButton</span></span>&#123;</span><br><span class=\"line\">    create() &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"built_in\">document</span>.createElement(<span class=\"string\">'button'</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//通用管理单例的类。</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">GetSingleton</span></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">constructor</span>(ClassName) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.obj = <span class=\"keyword\">new</span> ClassName();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    create() &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (!<span class=\"keyword\">this</span>.instance) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"keyword\">this</span>.instance = <span class=\"keyword\">this</span>.obj.create();</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">this</span>.instance;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h1 id=\"函数式例子：\"><a href=\"#函数式例子：\" class=\"headerlink\" title=\"函数式例子：\"></a>函数式例子：</h1><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br><span class=\"line\">102</span><br><span class=\"line\">103</span><br><span class=\"line\">104</span><br><span class=\"line\">105</span><br><span class=\"line\">106</span><br><span class=\"line\">107</span><br><span class=\"line\">108</span><br><span class=\"line\">109</span><br><span class=\"line\">110</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * 使用单例模式实现一个登陆框。</span></span><br><span class=\"line\"><span class=\"comment\"> * 包含一个智能命令模式，即可以直接实现请求的命令，不需要接收者的存在。</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\">(<span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">var</span> createLoginDiv = <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">var</span> div;</span><br><span class=\"line\">        div = <span class=\"built_in\">document</span>.createElement(<span class=\"string\">'div'</span>);</span><br><span class=\"line\">        div.setAttribute(<span class=\"string\">'class'</span>, <span class=\"string\">'login'</span>);</span><br><span class=\"line\">        <span class=\"built_in\">document</span>.querySelector(<span class=\"string\">'#app'</span>).appendChild(div);</span><br><span class=\"line\">        </span><br><span class=\"line\">        <span class=\"keyword\">var</span> child = <span class=\"built_in\">document</span>.createElement(<span class=\"string\">'div'</span>);</span><br><span class=\"line\">        child.setAttribute(<span class=\"string\">'class'</span>, <span class=\"string\">'login-child'</span>);</span><br><span class=\"line\">        child.innerText = <span class=\"string\">'Login Dialog'</span>;</span><br><span class=\"line\">        div.appendChild(child);</span><br><span class=\"line\">        <span class=\"keyword\">return</span> div;</span><br><span class=\"line\">    &#125;;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">var</span> createLoginButton = <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">var</span> button;</span><br><span class=\"line\">        button = <span class=\"built_in\">document</span>.createElement(<span class=\"string\">'input'</span>);</span><br><span class=\"line\">        button.type = <span class=\"string\">'button'</span>;</span><br><span class=\"line\">        button.value = <span class=\"string\">'login'</span>;</span><br><span class=\"line\">        button.setAttribute(<span class=\"string\">'class'</span>, <span class=\"string\">'loginBtn'</span>);</span><br><span class=\"line\">        </span><br><span class=\"line\">        <span class=\"built_in\">document</span>.querySelector(<span class=\"string\">'#app'</span>).appendChild(button);</span><br><span class=\"line\">        <span class=\"keyword\">return</span> button;</span><br><span class=\"line\">    &#125;;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">var</span> getSingle = <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">fn</span>) </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">var</span> single;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> single || (single = fn.apply(<span class=\"keyword\">this</span>, <span class=\"built_in\">arguments</span>));</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">var</span> createSingleLogin = getSingle(createLoginDiv);</span><br><span class=\"line\">    <span class=\"keyword\">var</span> createSingleLoginButton = getSingle(createLoginButton);</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">var</span> openLoginDivCommand = (<span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">var</span> loginDiv = createSingleLogin();</span><br><span class=\"line\">        <span class=\"keyword\">return</span> &#123;</span><br><span class=\"line\">            excute: <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">                loginDiv.addEventListener(<span class=\"string\">'click'</span>, <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">e</span>) </span>&#123;</span><br><span class=\"line\">                    <span class=\"keyword\">if</span> (e.target.getAttribute(<span class=\"string\">'class'</span>) !== <span class=\"string\">'login-child'</span>) &#123;</span><br><span class=\"line\">                        macroCommand.undo();</span><br><span class=\"line\">                    &#125;</span><br><span class=\"line\">                &#125;);</span><br><span class=\"line\">                loginDiv.style.display = <span class=\"string\">'flex'</span>;</span><br><span class=\"line\">            &#125;,</span><br><span class=\"line\">            undo: <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">                loginDiv.style.display = <span class=\"string\">'none'</span>;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;)();</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">var</span> clearInputCommand = (<span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">var</span> input = <span class=\"built_in\">document</span>.querySelector(<span class=\"string\">'input'</span>);</span><br><span class=\"line\">        <span class=\"keyword\">var</span> cache;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> &#123;</span><br><span class=\"line\">            excute: <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">                cache = input.value;</span><br><span class=\"line\">                input.value = <span class=\"string\">''</span>;</span><br><span class=\"line\">            &#125;,</span><br><span class=\"line\">            undo: <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">                input.value = cache;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;)();</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">var</span> macroCommand = (<span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">var</span> commandList = [];</span><br><span class=\"line\">        <span class=\"keyword\">return</span> &#123;</span><br><span class=\"line\">            add: <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">command</span>) </span>&#123;</span><br><span class=\"line\">                commandList.push(command);</span><br><span class=\"line\">            &#125;,</span><br><span class=\"line\">            excute: <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">                <span class=\"keyword\">for</span> (<span class=\"keyword\">var</span> i = <span class=\"number\">0</span>, len = commandList.length; i &lt; len; i++) &#123;</span><br><span class=\"line\">                    commandList[i].excute();</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">            &#125;,</span><br><span class=\"line\">            undo: <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">                <span class=\"keyword\">for</span> (<span class=\"keyword\">var</span> i = <span class=\"number\">0</span>, len = commandList.length; i &lt; len; i++) &#123;</span><br><span class=\"line\">                    commandList[i].undo();</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">            &#125;,</span><br><span class=\"line\">            redo: <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">                macroCommand.excute();</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;)();</span><br><span class=\"line\"></span><br><span class=\"line\">    macroCommand.add(openLoginDivCommand);</span><br><span class=\"line\">    macroCommand.add(clearInputCommand);</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">var</span> init = <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">var</span> loginButton = createSingleLoginButton();</span><br><span class=\"line\">        loginButton.addEventListener(<span class=\"string\">'click'</span>, <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">            macroCommand.excute();</span><br><span class=\"line\">        &#125;);</span><br><span class=\"line\"></span><br><span class=\"line\">        setTimeout(<span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">            macroCommand.redo();</span><br><span class=\"line\">        &#125;, <span class=\"number\">10000</span>);</span><br><span class=\"line\">    &#125;;</span><br><span class=\"line\"></span><br><span class=\"line\">    init();</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;)();</span><br></pre></td></tr></table></figure>\n"},{"title":"原型模式","date":"2018-04-27T03:54:32.000Z","_content":"\n\n# 什么是原型模式\n\n类并不是必须的，对象未必需要从类中创建而来，一个对象是通过克隆另外一个对象所得到的。\n\n原型模式不但是一种设计模式，也被称为一种编程泛型。\n\nECMAScript5提供了Object.create方法，可以用来克隆对象。\n\n但是create方法性能不如 var obj = {} 或者 var obj = new Object();\n\n以上两种替代方式，内部都是克隆原型而得到对象。\n\n\n\n**注：** Javascript中的根对象是Object，所有的对象都从根对象克隆而来。\n\n\n\n# 函数式例子：\n\n```js\n/**\n * 使用原型继承方式实现一个模板方法模式。\n * 通过设置钩子方法，可以实现不同的子类使用不同的父类约束。\n */\n\n(function () {\n\n    var Beverage = function () {};\n    Beverage.prototype.boilWater = function () {\n        console.log('把水煮沸。');\n    };\n\n    Beverage.prototype.brew = function () {\n        throw new Error('子类必须重写冲泡方法');\n    };\n\n    Beverage.prototype.poutInCup = function () {\n        throw new Error('子类必须重写把饮料倒入杯子方法');\n    };\n\n    Beverage.prototype.addCondiments = function () {\n        throw new Error('子类必须重写加调料方法');\n    };\n\n    Beverage.prototype.customerAddCondiments = function () {\n        return true;\n    }\n    \n    Beverage.prototype.init = function () {\n        this.boilWater();\n        this.brew();\n        this.poutInCup();\n        if (this.customerAddCondiments()) {\n            this.addCondiments();\n        }\n    }\n\n    var Coffee = function () {};\n    Coffee.prototype = new Beverage();\n\n    Coffee.prototype.brew = function () {\n        console.log('冲泡咖啡');\n    };\n\n    Coffee.prototype.poutInCup = function () {\n        console.log('把咖啡倒进杯子');\n    };\n\n    Coffee.prototype.addCondiments = function () {\n        console.log('给咖啡加糖加牛奶');\n    };\n\n    Coffee.prototype.customerAddCondiments = function () {\n        return window.confirm('请问需要调料吗？');  \n    }\n\n    var coffee = new Coffee();\n    coffee.init();\n\n})();\n```\n","source":"_posts/原型模式.md","raw":"---\ntitle: 原型模式\ndate: 2018-04-27 11:54:32\ntags:\n\t- Javascript设计模式\n---\n\n\n# 什么是原型模式\n\n类并不是必须的，对象未必需要从类中创建而来，一个对象是通过克隆另外一个对象所得到的。\n\n原型模式不但是一种设计模式，也被称为一种编程泛型。\n\nECMAScript5提供了Object.create方法，可以用来克隆对象。\n\n但是create方法性能不如 var obj = {} 或者 var obj = new Object();\n\n以上两种替代方式，内部都是克隆原型而得到对象。\n\n\n\n**注：** Javascript中的根对象是Object，所有的对象都从根对象克隆而来。\n\n\n\n# 函数式例子：\n\n```js\n/**\n * 使用原型继承方式实现一个模板方法模式。\n * 通过设置钩子方法，可以实现不同的子类使用不同的父类约束。\n */\n\n(function () {\n\n    var Beverage = function () {};\n    Beverage.prototype.boilWater = function () {\n        console.log('把水煮沸。');\n    };\n\n    Beverage.prototype.brew = function () {\n        throw new Error('子类必须重写冲泡方法');\n    };\n\n    Beverage.prototype.poutInCup = function () {\n        throw new Error('子类必须重写把饮料倒入杯子方法');\n    };\n\n    Beverage.prototype.addCondiments = function () {\n        throw new Error('子类必须重写加调料方法');\n    };\n\n    Beverage.prototype.customerAddCondiments = function () {\n        return true;\n    }\n    \n    Beverage.prototype.init = function () {\n        this.boilWater();\n        this.brew();\n        this.poutInCup();\n        if (this.customerAddCondiments()) {\n            this.addCondiments();\n        }\n    }\n\n    var Coffee = function () {};\n    Coffee.prototype = new Beverage();\n\n    Coffee.prototype.brew = function () {\n        console.log('冲泡咖啡');\n    };\n\n    Coffee.prototype.poutInCup = function () {\n        console.log('把咖啡倒进杯子');\n    };\n\n    Coffee.prototype.addCondiments = function () {\n        console.log('给咖啡加糖加牛奶');\n    };\n\n    Coffee.prototype.customerAddCondiments = function () {\n        return window.confirm('请问需要调料吗？');  \n    }\n\n    var coffee = new Coffee();\n    coffee.init();\n\n})();\n```\n","slug":"原型模式","published":1,"updated":"2019-11-04T07:00:03.079Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ck2vg6gwh00214cobqnpzr61c","content":"<h1 id=\"什么是原型模式\"><a href=\"#什么是原型模式\" class=\"headerlink\" title=\"什么是原型模式\"></a>什么是原型模式</h1><p>类并不是必须的，对象未必需要从类中创建而来，一个对象是通过克隆另外一个对象所得到的。</p>\n<p>原型模式不但是一种设计模式，也被称为一种编程泛型。</p>\n<p>ECMAScript5提供了Object.create方法，可以用来克隆对象。</p>\n<p>但是create方法性能不如 var obj = {} 或者 var obj = new Object();</p>\n<p>以上两种替代方式，内部都是克隆原型而得到对象。</p>\n<p><strong>注：</strong> Javascript中的根对象是Object，所有的对象都从根对象克隆而来。</p>\n<h1 id=\"函数式例子：\"><a href=\"#函数式例子：\" class=\"headerlink\" title=\"函数式例子：\"></a>函数式例子：</h1><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * 使用原型继承方式实现一个模板方法模式。</span></span><br><span class=\"line\"><span class=\"comment\"> * 通过设置钩子方法，可以实现不同的子类使用不同的父类约束。</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"></span><br><span class=\"line\">(<span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">var</span> Beverage = <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;&#125;;</span><br><span class=\"line\">    Beverage.prototype.boilWater = <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">        <span class=\"built_in\">console</span>.log(<span class=\"string\">'把水煮沸。'</span>);</span><br><span class=\"line\">    &#125;;</span><br><span class=\"line\"></span><br><span class=\"line\">    Beverage.prototype.brew = <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> <span class=\"built_in\">Error</span>(<span class=\"string\">'子类必须重写冲泡方法'</span>);</span><br><span class=\"line\">    &#125;;</span><br><span class=\"line\"></span><br><span class=\"line\">    Beverage.prototype.poutInCup = <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> <span class=\"built_in\">Error</span>(<span class=\"string\">'子类必须重写把饮料倒入杯子方法'</span>);</span><br><span class=\"line\">    &#125;;</span><br><span class=\"line\"></span><br><span class=\"line\">    Beverage.prototype.addCondiments = <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> <span class=\"built_in\">Error</span>(<span class=\"string\">'子类必须重写加调料方法'</span>);</span><br><span class=\"line\">    &#125;;</span><br><span class=\"line\"></span><br><span class=\"line\">    Beverage.prototype.customerAddCondiments = <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"literal\">true</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    </span><br><span class=\"line\">    Beverage.prototype.init = <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.boilWater();</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.brew();</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.poutInCup();</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (<span class=\"keyword\">this</span>.customerAddCondiments()) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">this</span>.addCondiments();</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">var</span> Coffee = <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;&#125;;</span><br><span class=\"line\">    Coffee.prototype = <span class=\"keyword\">new</span> Beverage();</span><br><span class=\"line\"></span><br><span class=\"line\">    Coffee.prototype.brew = <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">        <span class=\"built_in\">console</span>.log(<span class=\"string\">'冲泡咖啡'</span>);</span><br><span class=\"line\">    &#125;;</span><br><span class=\"line\"></span><br><span class=\"line\">    Coffee.prototype.poutInCup = <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">        <span class=\"built_in\">console</span>.log(<span class=\"string\">'把咖啡倒进杯子'</span>);</span><br><span class=\"line\">    &#125;;</span><br><span class=\"line\"></span><br><span class=\"line\">    Coffee.prototype.addCondiments = <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">        <span class=\"built_in\">console</span>.log(<span class=\"string\">'给咖啡加糖加牛奶'</span>);</span><br><span class=\"line\">    &#125;;</span><br><span class=\"line\"></span><br><span class=\"line\">    Coffee.prototype.customerAddCondiments = <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"built_in\">window</span>.confirm(<span class=\"string\">'请问需要调料吗？'</span>);  </span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">var</span> coffee = <span class=\"keyword\">new</span> Coffee();</span><br><span class=\"line\">    coffee.init();</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;)();</span><br></pre></td></tr></table></figure>\n","site":{"data":{"projects":[{"name":"AiTing","url":"https://github.com/renhongl/aiting","desc":"HTML5客户端音乐播放器"},{"name":"AiLiao","url":"https://github.com/renhongl/ailiao","desc":"网页聊天软件"},{"name":"Pomelo Editor","url":"https://renhongl.github.io/markdown-editor/","desc":"功能强大的在线Markdown编辑器"}]}},"excerpt":"","more":"<h1 id=\"什么是原型模式\"><a href=\"#什么是原型模式\" class=\"headerlink\" title=\"什么是原型模式\"></a>什么是原型模式</h1><p>类并不是必须的，对象未必需要从类中创建而来，一个对象是通过克隆另外一个对象所得到的。</p>\n<p>原型模式不但是一种设计模式，也被称为一种编程泛型。</p>\n<p>ECMAScript5提供了Object.create方法，可以用来克隆对象。</p>\n<p>但是create方法性能不如 var obj = {} 或者 var obj = new Object();</p>\n<p>以上两种替代方式，内部都是克隆原型而得到对象。</p>\n<p><strong>注：</strong> Javascript中的根对象是Object，所有的对象都从根对象克隆而来。</p>\n<h1 id=\"函数式例子：\"><a href=\"#函数式例子：\" class=\"headerlink\" title=\"函数式例子：\"></a>函数式例子：</h1><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * 使用原型继承方式实现一个模板方法模式。</span></span><br><span class=\"line\"><span class=\"comment\"> * 通过设置钩子方法，可以实现不同的子类使用不同的父类约束。</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"></span><br><span class=\"line\">(<span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">var</span> Beverage = <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;&#125;;</span><br><span class=\"line\">    Beverage.prototype.boilWater = <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">        <span class=\"built_in\">console</span>.log(<span class=\"string\">'把水煮沸。'</span>);</span><br><span class=\"line\">    &#125;;</span><br><span class=\"line\"></span><br><span class=\"line\">    Beverage.prototype.brew = <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> <span class=\"built_in\">Error</span>(<span class=\"string\">'子类必须重写冲泡方法'</span>);</span><br><span class=\"line\">    &#125;;</span><br><span class=\"line\"></span><br><span class=\"line\">    Beverage.prototype.poutInCup = <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> <span class=\"built_in\">Error</span>(<span class=\"string\">'子类必须重写把饮料倒入杯子方法'</span>);</span><br><span class=\"line\">    &#125;;</span><br><span class=\"line\"></span><br><span class=\"line\">    Beverage.prototype.addCondiments = <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> <span class=\"built_in\">Error</span>(<span class=\"string\">'子类必须重写加调料方法'</span>);</span><br><span class=\"line\">    &#125;;</span><br><span class=\"line\"></span><br><span class=\"line\">    Beverage.prototype.customerAddCondiments = <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"literal\">true</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    </span><br><span class=\"line\">    Beverage.prototype.init = <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.boilWater();</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.brew();</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.poutInCup();</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (<span class=\"keyword\">this</span>.customerAddCondiments()) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">this</span>.addCondiments();</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">var</span> Coffee = <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;&#125;;</span><br><span class=\"line\">    Coffee.prototype = <span class=\"keyword\">new</span> Beverage();</span><br><span class=\"line\"></span><br><span class=\"line\">    Coffee.prototype.brew = <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">        <span class=\"built_in\">console</span>.log(<span class=\"string\">'冲泡咖啡'</span>);</span><br><span class=\"line\">    &#125;;</span><br><span class=\"line\"></span><br><span class=\"line\">    Coffee.prototype.poutInCup = <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">        <span class=\"built_in\">console</span>.log(<span class=\"string\">'把咖啡倒进杯子'</span>);</span><br><span class=\"line\">    &#125;;</span><br><span class=\"line\"></span><br><span class=\"line\">    Coffee.prototype.addCondiments = <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">        <span class=\"built_in\">console</span>.log(<span class=\"string\">'给咖啡加糖加牛奶'</span>);</span><br><span class=\"line\">    &#125;;</span><br><span class=\"line\"></span><br><span class=\"line\">    Coffee.prototype.customerAddCondiments = <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"built_in\">window</span>.confirm(<span class=\"string\">'请问需要调料吗？'</span>);  </span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">var</span> coffee = <span class=\"keyword\">new</span> Coffee();</span><br><span class=\"line\">    coffee.init();</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;)();</span><br></pre></td></tr></table></figure>\n"},{"title":"变量的解构赋值","date":"2017-07-15T13:16:52.000Z","_content":"\n\n\n\n\n# 简介\n\n1. 基本用法： `let [a, b, c] = [1, 2, 3]`\n2. 默认值：`let [ n = 1] = []`\n3. 解构不成功，变量的值等于undefined\n\n\n\n# 对象的解构赋值\n\n1. 基本用法：`let {foo, bar} = {foo: 'aaa', bar: 'bbb'}`\n2. 默认值：`let {x = 3} = {x: undefined}`\n3. 默认值生效的条件是对象的属性值严格等于undefined\n\n# 字符串的解构赋值\n\n1. 基本用法：`cosnt [a, b, c, d, e] = 'hello'` //a = 'h', b = 'e'\n\n# 用途：\n\n1. 交换变量的值： \n\n      ```js\n      let x = 1;\n      let y = 2;\n      [x, y ] = [y, x]\n      ```\n\n2. 从函数返回多个值：\n\n      ```js\n      // 返回一个数组\n\n      function example() {\n        return [1, 2, 3];\n      }\n      let [a, b, c] = example();\n\n      // 返回一个对象\n\n      function example() {\n        return {\n          foo: 1,\n          bar: 2\n        };\n      }\n      let { foo, bar } = example();\n      ```\n\n3. 定义函数参数：\n\n      ```js\n      // 参数是一组有次序的值\n      function f([x, y, z]) { ... }\n      f([1, 2, 3]);\n\n      // 参数是一组无次序的值\n      function f({x, y, z}) { ... }\n      f({z: 3, y: 2, x: 1});\n      ```\n\n4. 提取JSON数据：\n\n      ```js\n      let jsonData = {\n        id: 42,\n        status: \"OK\",\n        data: [867, 5309]\n      };\n\n      let { id, status, data: number } = jsonData;\n\n      console.log(id, status, number);\n      // 42, \"OK\", [867, 5309]\n      ```\n\n5. 遍历map结构：\n\n      ```js\n      const map = new Map();\n      map.set('first', 'hello');\n      map.set('second', 'world');\n\n      for (let [key, value] of map) {\n        console.log(key + \" is \" + value);\n      }\n      // first is hello\n      // second is world\n      ```\n","source":"_posts/变量的解构赋值.md","raw":"\n---\ntitle: 变量的解构赋值\ndate: 2017-07-15 21:16:52\ntags: ES6\n---\n\n\n\n\n\n# 简介\n\n1. 基本用法： `let [a, b, c] = [1, 2, 3]`\n2. 默认值：`let [ n = 1] = []`\n3. 解构不成功，变量的值等于undefined\n\n\n\n# 对象的解构赋值\n\n1. 基本用法：`let {foo, bar} = {foo: 'aaa', bar: 'bbb'}`\n2. 默认值：`let {x = 3} = {x: undefined}`\n3. 默认值生效的条件是对象的属性值严格等于undefined\n\n# 字符串的解构赋值\n\n1. 基本用法：`cosnt [a, b, c, d, e] = 'hello'` //a = 'h', b = 'e'\n\n# 用途：\n\n1. 交换变量的值： \n\n      ```js\n      let x = 1;\n      let y = 2;\n      [x, y ] = [y, x]\n      ```\n\n2. 从函数返回多个值：\n\n      ```js\n      // 返回一个数组\n\n      function example() {\n        return [1, 2, 3];\n      }\n      let [a, b, c] = example();\n\n      // 返回一个对象\n\n      function example() {\n        return {\n          foo: 1,\n          bar: 2\n        };\n      }\n      let { foo, bar } = example();\n      ```\n\n3. 定义函数参数：\n\n      ```js\n      // 参数是一组有次序的值\n      function f([x, y, z]) { ... }\n      f([1, 2, 3]);\n\n      // 参数是一组无次序的值\n      function f({x, y, z}) { ... }\n      f({z: 3, y: 2, x: 1});\n      ```\n\n4. 提取JSON数据：\n\n      ```js\n      let jsonData = {\n        id: 42,\n        status: \"OK\",\n        data: [867, 5309]\n      };\n\n      let { id, status, data: number } = jsonData;\n\n      console.log(id, status, number);\n      // 42, \"OK\", [867, 5309]\n      ```\n\n5. 遍历map结构：\n\n      ```js\n      const map = new Map();\n      map.set('first', 'hello');\n      map.set('second', 'world');\n\n      for (let [key, value] of map) {\n        console.log(key + \" is \" + value);\n      }\n      // first is hello\n      // second is world\n      ```\n","slug":"变量的解构赋值","published":1,"updated":"2019-11-04T07:00:23.676Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ck2vg6gwk00244cobzr6e1h9t","content":"<h1 id=\"简介\"><a href=\"#简介\" class=\"headerlink\" title=\"简介\"></a>简介</h1><ol>\n<li>基本用法： <code>let [a, b, c] = [1, 2, 3]</code></li>\n<li>默认值：<code>let [ n = 1] = []</code></li>\n<li>解构不成功，变量的值等于undefined</li>\n</ol>\n<h1 id=\"对象的解构赋值\"><a href=\"#对象的解构赋值\" class=\"headerlink\" title=\"对象的解构赋值\"></a>对象的解构赋值</h1><ol>\n<li>基本用法：<code>let {foo, bar} = {foo: &#39;aaa&#39;, bar: &#39;bbb&#39;}</code></li>\n<li>默认值：<code>let {x = 3} = {x: undefined}</code></li>\n<li>默认值生效的条件是对象的属性值严格等于undefined</li>\n</ol>\n<h1 id=\"字符串的解构赋值\"><a href=\"#字符串的解构赋值\" class=\"headerlink\" title=\"字符串的解构赋值\"></a>字符串的解构赋值</h1><ol>\n<li>基本用法：<code>cosnt [a, b, c, d, e] = &#39;hello&#39;</code> //a = ‘h’, b = ‘e’</li>\n</ol>\n<h1 id=\"用途：\"><a href=\"#用途：\" class=\"headerlink\" title=\"用途：\"></a>用途：</h1><ol>\n<li><p>交换变量的值： </p>\n   <figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> x = <span class=\"number\">1</span>;</span><br><span class=\"line\"><span class=\"keyword\">let</span> y = <span class=\"number\">2</span>;</span><br><span class=\"line\">[x, y ] = [y, x]</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>从函数返回多个值：</p>\n   <figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 返回一个数组</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">example</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> [<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>];</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">let</span> [a, b, c] = example();</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 返回一个对象</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">example</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> &#123;</span><br><span class=\"line\">    foo: <span class=\"number\">1</span>,</span><br><span class=\"line\">    bar: <span class=\"number\">2</span></span><br><span class=\"line\">  &#125;;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">let</span> &#123; foo, bar &#125; = example();</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>定义函数参数：</p>\n   <figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 参数是一组有次序的值</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">f</span>(<span class=\"params\">[x, y, z]</span>) </span>&#123; ... &#125;</span><br><span class=\"line\">f([<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>]);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 参数是一组无次序的值</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">f</span>(<span class=\"params\">&#123;x, y, z&#125;</span>) </span>&#123; ... &#125;</span><br><span class=\"line\">f(&#123;<span class=\"attr\">z</span>: <span class=\"number\">3</span>, <span class=\"attr\">y</span>: <span class=\"number\">2</span>, <span class=\"attr\">x</span>: <span class=\"number\">1</span>&#125;);</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>提取JSON数据：</p>\n   <figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> jsonData = &#123;</span><br><span class=\"line\">  id: <span class=\"number\">42</span>,</span><br><span class=\"line\">  status: <span class=\"string\">\"OK\"</span>,</span><br><span class=\"line\">  data: [<span class=\"number\">867</span>, <span class=\"number\">5309</span>]</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">let</span> &#123; id, status, <span class=\"attr\">data</span>: number &#125; = jsonData;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(id, status, number);</span><br><span class=\"line\"><span class=\"comment\">// 42, \"OK\", [867, 5309]</span></span><br></pre></td></tr></table></figure>\n</li>\n<li><p>遍历map结构：</p>\n   <figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> map = <span class=\"keyword\">new</span> <span class=\"built_in\">Map</span>();</span><br><span class=\"line\">map.set(<span class=\"string\">'first'</span>, <span class=\"string\">'hello'</span>);</span><br><span class=\"line\">map.set(<span class=\"string\">'second'</span>, <span class=\"string\">'world'</span>);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">for</span> (<span class=\"keyword\">let</span> [key, value] <span class=\"keyword\">of</span> map) &#123;</span><br><span class=\"line\">  <span class=\"built_in\">console</span>.log(key + <span class=\"string\">\" is \"</span> + value);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">// first is hello</span></span><br><span class=\"line\"><span class=\"comment\">// second is world</span></span><br></pre></td></tr></table></figure>\n</li>\n</ol>\n","site":{"data":{"projects":[{"name":"AiTing","url":"https://github.com/renhongl/aiting","desc":"HTML5客户端音乐播放器"},{"name":"AiLiao","url":"https://github.com/renhongl/ailiao","desc":"网页聊天软件"},{"name":"Pomelo Editor","url":"https://renhongl.github.io/markdown-editor/","desc":"功能强大的在线Markdown编辑器"}]}},"excerpt":"","more":"<h1 id=\"简介\"><a href=\"#简介\" class=\"headerlink\" title=\"简介\"></a>简介</h1><ol>\n<li>基本用法： <code>let [a, b, c] = [1, 2, 3]</code></li>\n<li>默认值：<code>let [ n = 1] = []</code></li>\n<li>解构不成功，变量的值等于undefined</li>\n</ol>\n<h1 id=\"对象的解构赋值\"><a href=\"#对象的解构赋值\" class=\"headerlink\" title=\"对象的解构赋值\"></a>对象的解构赋值</h1><ol>\n<li>基本用法：<code>let {foo, bar} = {foo: &#39;aaa&#39;, bar: &#39;bbb&#39;}</code></li>\n<li>默认值：<code>let {x = 3} = {x: undefined}</code></li>\n<li>默认值生效的条件是对象的属性值严格等于undefined</li>\n</ol>\n<h1 id=\"字符串的解构赋值\"><a href=\"#字符串的解构赋值\" class=\"headerlink\" title=\"字符串的解构赋值\"></a>字符串的解构赋值</h1><ol>\n<li>基本用法：<code>cosnt [a, b, c, d, e] = &#39;hello&#39;</code> //a = ‘h’, b = ‘e’</li>\n</ol>\n<h1 id=\"用途：\"><a href=\"#用途：\" class=\"headerlink\" title=\"用途：\"></a>用途：</h1><ol>\n<li><p>交换变量的值： </p>\n   <figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> x = <span class=\"number\">1</span>;</span><br><span class=\"line\"><span class=\"keyword\">let</span> y = <span class=\"number\">2</span>;</span><br><span class=\"line\">[x, y ] = [y, x]</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>从函数返回多个值：</p>\n   <figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 返回一个数组</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">example</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> [<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>];</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">let</span> [a, b, c] = example();</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 返回一个对象</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">example</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> &#123;</span><br><span class=\"line\">    foo: <span class=\"number\">1</span>,</span><br><span class=\"line\">    bar: <span class=\"number\">2</span></span><br><span class=\"line\">  &#125;;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">let</span> &#123; foo, bar &#125; = example();</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>定义函数参数：</p>\n   <figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 参数是一组有次序的值</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">f</span>(<span class=\"params\">[x, y, z]</span>) </span>&#123; ... &#125;</span><br><span class=\"line\">f([<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>]);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 参数是一组无次序的值</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">f</span>(<span class=\"params\">&#123;x, y, z&#125;</span>) </span>&#123; ... &#125;</span><br><span class=\"line\">f(&#123;<span class=\"attr\">z</span>: <span class=\"number\">3</span>, <span class=\"attr\">y</span>: <span class=\"number\">2</span>, <span class=\"attr\">x</span>: <span class=\"number\">1</span>&#125;);</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>提取JSON数据：</p>\n   <figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> jsonData = &#123;</span><br><span class=\"line\">  id: <span class=\"number\">42</span>,</span><br><span class=\"line\">  status: <span class=\"string\">\"OK\"</span>,</span><br><span class=\"line\">  data: [<span class=\"number\">867</span>, <span class=\"number\">5309</span>]</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">let</span> &#123; id, status, <span class=\"attr\">data</span>: number &#125; = jsonData;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(id, status, number);</span><br><span class=\"line\"><span class=\"comment\">// 42, \"OK\", [867, 5309]</span></span><br></pre></td></tr></table></figure>\n</li>\n<li><p>遍历map结构：</p>\n   <figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> map = <span class=\"keyword\">new</span> <span class=\"built_in\">Map</span>();</span><br><span class=\"line\">map.set(<span class=\"string\">'first'</span>, <span class=\"string\">'hello'</span>);</span><br><span class=\"line\">map.set(<span class=\"string\">'second'</span>, <span class=\"string\">'world'</span>);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">for</span> (<span class=\"keyword\">let</span> [key, value] <span class=\"keyword\">of</span> map) &#123;</span><br><span class=\"line\">  <span class=\"built_in\">console</span>.log(key + <span class=\"string\">\" is \"</span> + value);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">// first is hello</span></span><br><span class=\"line\"><span class=\"comment\">// second is world</span></span><br></pre></td></tr></table></figure>\n</li>\n</ol>\n"},{"title":"命令模式","date":"2018-05-16T13:54:32.000Z","_content":"\n\n\n\n# 什么是命令模式\n命令模式（Command Pattern）是一种数据驱动的设计模式，它属于行为型模式。请求以命令的形式包裹在对象中，并传给调用对象。\n\n调用对象寻找可以处理该命令的合适的对象，并把该命令传给相应的对象，该对象执行命令。\n\n命令模式最常见的应用场景是：有时候需要向某些对象发送请求，但是并不知道请求的接收者是谁，也不知道被请求的操作是什么。此时希望用一种松耦合的方式来设计程序，使得请求发送者和请求接收者能够消除彼此之间的耦合关系。\n\n\n\n# 面向对象例子：\n\n```js\nclass RenderLogin{\n\tconstructor() {\n\t\tthis.login = document.createElement('div');\n\t\t\tthis.options = {\n\t\t\twidth: '100px',\n\t\t\theight: '100px',\n\t\t\tborder: '1px solid red'\n\t\t}\n\t}\n\n\trender(options) {\n\t\tthis.options = {...this.options, ...options};\n\t\tfor (let key of Object.keys(this.options)) {\n\t\t\tthis.login.style[key] = this.options[key];\n\t\t}\n\t\tdocument.body.appendChild(this.login);\n\t}\n\t  \n\tremove() {\n\t\tdocument.body.removeChild(this.login);\n\t}\n}  \n\nclass RenderLoginCommand{\n\tconstructor() {\n\t\tthis.renderLogin = new RenderLogin();\n\t}\t\t  \n\n\texcute(reciever) {\n\t\tthis.renderLogin.render(reciever.options);\n\t}\n  \n\tundo() {\n\t\tthis.renderLogin.remove();\n\t}\n}\n  \nexport class LoginButton{\n\tconstructor() {\n\t\tthis.options = {\n\t\t\tbackground: 'grey',\n\t\t\tborderRadius: '50%'\n\t\t}\n\t\tthis.renderLoginCommand = new RenderLoginCommand();\n\t}\n}\n```\n","source":"_posts/命令模式.md","raw":"---\ntitle: 命令模式\ndate: 2018-05-16 21:54:32\ntags:\n\t- Javascript设计模式\n---\n\n\n\n\n# 什么是命令模式\n命令模式（Command Pattern）是一种数据驱动的设计模式，它属于行为型模式。请求以命令的形式包裹在对象中，并传给调用对象。\n\n调用对象寻找可以处理该命令的合适的对象，并把该命令传给相应的对象，该对象执行命令。\n\n命令模式最常见的应用场景是：有时候需要向某些对象发送请求，但是并不知道请求的接收者是谁，也不知道被请求的操作是什么。此时希望用一种松耦合的方式来设计程序，使得请求发送者和请求接收者能够消除彼此之间的耦合关系。\n\n\n\n# 面向对象例子：\n\n```js\nclass RenderLogin{\n\tconstructor() {\n\t\tthis.login = document.createElement('div');\n\t\t\tthis.options = {\n\t\t\twidth: '100px',\n\t\t\theight: '100px',\n\t\t\tborder: '1px solid red'\n\t\t}\n\t}\n\n\trender(options) {\n\t\tthis.options = {...this.options, ...options};\n\t\tfor (let key of Object.keys(this.options)) {\n\t\t\tthis.login.style[key] = this.options[key];\n\t\t}\n\t\tdocument.body.appendChild(this.login);\n\t}\n\t  \n\tremove() {\n\t\tdocument.body.removeChild(this.login);\n\t}\n}  \n\nclass RenderLoginCommand{\n\tconstructor() {\n\t\tthis.renderLogin = new RenderLogin();\n\t}\t\t  \n\n\texcute(reciever) {\n\t\tthis.renderLogin.render(reciever.options);\n\t}\n  \n\tundo() {\n\t\tthis.renderLogin.remove();\n\t}\n}\n  \nexport class LoginButton{\n\tconstructor() {\n\t\tthis.options = {\n\t\t\tbackground: 'grey',\n\t\t\tborderRadius: '50%'\n\t\t}\n\t\tthis.renderLoginCommand = new RenderLoginCommand();\n\t}\n}\n```\n","slug":"命令模式","published":1,"updated":"2019-11-04T07:00:08.349Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ck2vg6gwl00264cob8md7oawn","content":"<h1 id=\"什么是命令模式\"><a href=\"#什么是命令模式\" class=\"headerlink\" title=\"什么是命令模式\"></a>什么是命令模式</h1><p>命令模式（Command Pattern）是一种数据驱动的设计模式，它属于行为型模式。请求以命令的形式包裹在对象中，并传给调用对象。</p>\n<p>调用对象寻找可以处理该命令的合适的对象，并把该命令传给相应的对象，该对象执行命令。</p>\n<p>命令模式最常见的应用场景是：有时候需要向某些对象发送请求，但是并不知道请求的接收者是谁，也不知道被请求的操作是什么。此时希望用一种松耦合的方式来设计程序，使得请求发送者和请求接收者能够消除彼此之间的耦合关系。</p>\n<h1 id=\"面向对象例子：\"><a href=\"#面向对象例子：\" class=\"headerlink\" title=\"面向对象例子：\"></a>面向对象例子：</h1><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">RenderLogin</span></span>&#123;</span><br><span class=\"line\">\t<span class=\"keyword\">constructor</span>() &#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">this</span>.login = <span class=\"built_in\">document</span>.createElement(<span class=\"string\">'div'</span>);</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">this</span>.options = &#123;</span><br><span class=\"line\">\t\t\twidth: <span class=\"string\">'100px'</span>,</span><br><span class=\"line\">\t\t\theight: <span class=\"string\">'100px'</span>,</span><br><span class=\"line\">\t\t\tborder: <span class=\"string\">'1px solid red'</span></span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\trender(options) &#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">this</span>.options = &#123;...this.options, ...options&#125;;</span><br><span class=\"line\">\t\t<span class=\"keyword\">for</span> (<span class=\"keyword\">let</span> key <span class=\"keyword\">of</span> <span class=\"built_in\">Object</span>.keys(<span class=\"keyword\">this</span>.options)) &#123;</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">this</span>.login.style[key] = <span class=\"keyword\">this</span>.options[key];</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t\t<span class=\"built_in\">document</span>.body.appendChild(<span class=\"keyword\">this</span>.login);</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t  </span><br><span class=\"line\">\tremove() &#123;</span><br><span class=\"line\">\t\t<span class=\"built_in\">document</span>.body.removeChild(<span class=\"keyword\">this</span>.login);</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;  </span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">RenderLoginCommand</span></span>&#123;</span><br><span class=\"line\">\t<span class=\"keyword\">constructor</span>() &#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">this</span>.renderLogin = <span class=\"keyword\">new</span> RenderLogin();</span><br><span class=\"line\">\t&#125;\t\t  </span><br><span class=\"line\"></span><br><span class=\"line\">\texcute(reciever) &#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">this</span>.renderLogin.render(reciever.options);</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">  </span><br><span class=\"line\">\tundo() &#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">this</span>.renderLogin.remove();</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">  </span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">LoginButton</span></span>&#123;</span><br><span class=\"line\">\t<span class=\"keyword\">constructor</span>() &#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">this</span>.options = &#123;</span><br><span class=\"line\">\t\t\tbackground: <span class=\"string\">'grey'</span>,</span><br><span class=\"line\">\t\t\tborderRadius: <span class=\"string\">'50%'</span></span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t\t<span class=\"keyword\">this</span>.renderLoginCommand = <span class=\"keyword\">new</span> RenderLoginCommand();</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n","site":{"data":{"projects":[{"name":"AiTing","url":"https://github.com/renhongl/aiting","desc":"HTML5客户端音乐播放器"},{"name":"AiLiao","url":"https://github.com/renhongl/ailiao","desc":"网页聊天软件"},{"name":"Pomelo Editor","url":"https://renhongl.github.io/markdown-editor/","desc":"功能强大的在线Markdown编辑器"}]}},"excerpt":"","more":"<h1 id=\"什么是命令模式\"><a href=\"#什么是命令模式\" class=\"headerlink\" title=\"什么是命令模式\"></a>什么是命令模式</h1><p>命令模式（Command Pattern）是一种数据驱动的设计模式，它属于行为型模式。请求以命令的形式包裹在对象中，并传给调用对象。</p>\n<p>调用对象寻找可以处理该命令的合适的对象，并把该命令传给相应的对象，该对象执行命令。</p>\n<p>命令模式最常见的应用场景是：有时候需要向某些对象发送请求，但是并不知道请求的接收者是谁，也不知道被请求的操作是什么。此时希望用一种松耦合的方式来设计程序，使得请求发送者和请求接收者能够消除彼此之间的耦合关系。</p>\n<h1 id=\"面向对象例子：\"><a href=\"#面向对象例子：\" class=\"headerlink\" title=\"面向对象例子：\"></a>面向对象例子：</h1><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">RenderLogin</span></span>&#123;</span><br><span class=\"line\">\t<span class=\"keyword\">constructor</span>() &#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">this</span>.login = <span class=\"built_in\">document</span>.createElement(<span class=\"string\">'div'</span>);</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">this</span>.options = &#123;</span><br><span class=\"line\">\t\t\twidth: <span class=\"string\">'100px'</span>,</span><br><span class=\"line\">\t\t\theight: <span class=\"string\">'100px'</span>,</span><br><span class=\"line\">\t\t\tborder: <span class=\"string\">'1px solid red'</span></span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\trender(options) &#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">this</span>.options = &#123;...this.options, ...options&#125;;</span><br><span class=\"line\">\t\t<span class=\"keyword\">for</span> (<span class=\"keyword\">let</span> key <span class=\"keyword\">of</span> <span class=\"built_in\">Object</span>.keys(<span class=\"keyword\">this</span>.options)) &#123;</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">this</span>.login.style[key] = <span class=\"keyword\">this</span>.options[key];</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t\t<span class=\"built_in\">document</span>.body.appendChild(<span class=\"keyword\">this</span>.login);</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t  </span><br><span class=\"line\">\tremove() &#123;</span><br><span class=\"line\">\t\t<span class=\"built_in\">document</span>.body.removeChild(<span class=\"keyword\">this</span>.login);</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;  </span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">RenderLoginCommand</span></span>&#123;</span><br><span class=\"line\">\t<span class=\"keyword\">constructor</span>() &#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">this</span>.renderLogin = <span class=\"keyword\">new</span> RenderLogin();</span><br><span class=\"line\">\t&#125;\t\t  </span><br><span class=\"line\"></span><br><span class=\"line\">\texcute(reciever) &#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">this</span>.renderLogin.render(reciever.options);</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">  </span><br><span class=\"line\">\tundo() &#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">this</span>.renderLogin.remove();</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">  </span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">LoginButton</span></span>&#123;</span><br><span class=\"line\">\t<span class=\"keyword\">constructor</span>() &#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">this</span>.options = &#123;</span><br><span class=\"line\">\t\t\tbackground: <span class=\"string\">'grey'</span>,</span><br><span class=\"line\">\t\t\tborderRadius: <span class=\"string\">'50%'</span></span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t\t<span class=\"keyword\">this</span>.renderLoginCommand = <span class=\"keyword\">new</span> RenderLoginCommand();</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n"},{"title":"实用工具推荐","date":"2016-12-07T14:49:59.000Z","_content":"\n分享一些好用的Windows工具。\n\n# VS Code\n\n我用过notepad++, sublime, atom, vscode, 各有各的特点，但是我更喜欢用后两个，因为作为一个前端开发，更喜欢用Web技术开发的工具。而VS Code 性能更好一点，就选择了它，功能也很强大，可以安装各种插件，丰富主题和功能，本身内置了很多有用的功能，比如：调试工具，终端，Git等等。\n\n很多工作区的设置还可以通过用户设置来重写配置，比如当我使用windows时，终端是cmd,命令特别不好用，就可以去首选项-用户设置中将终端路径改为git的bash，当然首先需要安装过git。改完之后，就可以在不用切换工具的情况下，使用bash。特别实用。\n# Ngrok\n\n这是内网穿透工具，比如在本地启动一个服务器 http://127.0.0.1:8080 使用ngrok可以将8080端口映射到外网，那么即使你没有外网ip地址，没有云服务器，也可以通过这种方式让别人访问到你的本地应用。\n\n如果百度sunny ngrok，可以找到国内免费的ngrok工具，以前是全免费，后来有收费提速的选择。就是不是很稳定，据说是同行nat123总是攻击他们的服务器。\n\n# Hexo\n\n引用官网的话——Hexo 是一个快速、简洁且高效的博客框架。Hexo 使用 Markdown（或其他渲染引擎）解析文章，在几秒内，即可利用靓丽的主题生成静态网页。\n\n本网站就是使用hexo搭建的，增加了多说评论功能，自己改了点主题的bug，用起来还是比较舒服。\n\n# Cmder\n\nWindows下非常好用的Linux终端。干净，漂亮，易于使用。\n\n# MarkdownPad2\n\nWindows下很少有免费且好用的markdown编辑器，而现在又很流行使用markdown写文章或者word，这款软件是不错的选择。","source":"_posts/实用工具推荐.md","raw":"---\ntitle: 实用工具推荐\ndate: 2016-12-07 22:49:59\ntags:\n\t- 分享\n---\n\n分享一些好用的Windows工具。\n\n# VS Code\n\n我用过notepad++, sublime, atom, vscode, 各有各的特点，但是我更喜欢用后两个，因为作为一个前端开发，更喜欢用Web技术开发的工具。而VS Code 性能更好一点，就选择了它，功能也很强大，可以安装各种插件，丰富主题和功能，本身内置了很多有用的功能，比如：调试工具，终端，Git等等。\n\n很多工作区的设置还可以通过用户设置来重写配置，比如当我使用windows时，终端是cmd,命令特别不好用，就可以去首选项-用户设置中将终端路径改为git的bash，当然首先需要安装过git。改完之后，就可以在不用切换工具的情况下，使用bash。特别实用。\n# Ngrok\n\n这是内网穿透工具，比如在本地启动一个服务器 http://127.0.0.1:8080 使用ngrok可以将8080端口映射到外网，那么即使你没有外网ip地址，没有云服务器，也可以通过这种方式让别人访问到你的本地应用。\n\n如果百度sunny ngrok，可以找到国内免费的ngrok工具，以前是全免费，后来有收费提速的选择。就是不是很稳定，据说是同行nat123总是攻击他们的服务器。\n\n# Hexo\n\n引用官网的话——Hexo 是一个快速、简洁且高效的博客框架。Hexo 使用 Markdown（或其他渲染引擎）解析文章，在几秒内，即可利用靓丽的主题生成静态网页。\n\n本网站就是使用hexo搭建的，增加了多说评论功能，自己改了点主题的bug，用起来还是比较舒服。\n\n# Cmder\n\nWindows下非常好用的Linux终端。干净，漂亮，易于使用。\n\n# MarkdownPad2\n\nWindows下很少有免费且好用的markdown编辑器，而现在又很流行使用markdown写文章或者word，这款软件是不错的选择。","slug":"实用工具推荐","published":1,"updated":"2019-03-18T07:08:18.021Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ck2vg6gwo00294cobri7zi8va","content":"<p>分享一些好用的Windows工具。</p>\n<h1 id=\"VS-Code\"><a href=\"#VS-Code\" class=\"headerlink\" title=\"VS Code\"></a>VS Code</h1><p>我用过notepad++, sublime, atom, vscode, 各有各的特点，但是我更喜欢用后两个，因为作为一个前端开发，更喜欢用Web技术开发的工具。而VS Code 性能更好一点，就选择了它，功能也很强大，可以安装各种插件，丰富主题和功能，本身内置了很多有用的功能，比如：调试工具，终端，Git等等。</p>\n<p>很多工作区的设置还可以通过用户设置来重写配置，比如当我使用windows时，终端是cmd,命令特别不好用，就可以去首选项-用户设置中将终端路径改为git的bash，当然首先需要安装过git。改完之后，就可以在不用切换工具的情况下，使用bash。特别实用。</p>\n<h1 id=\"Ngrok\"><a href=\"#Ngrok\" class=\"headerlink\" title=\"Ngrok\"></a>Ngrok</h1><p>这是内网穿透工具，比如在本地启动一个服务器 <a href=\"http://127.0.0.1:8080\" target=\"_blank\" rel=\"noopener\">http://127.0.0.1:8080</a> 使用ngrok可以将8080端口映射到外网，那么即使你没有外网ip地址，没有云服务器，也可以通过这种方式让别人访问到你的本地应用。</p>\n<p>如果百度sunny ngrok，可以找到国内免费的ngrok工具，以前是全免费，后来有收费提速的选择。就是不是很稳定，据说是同行nat123总是攻击他们的服务器。</p>\n<h1 id=\"Hexo\"><a href=\"#Hexo\" class=\"headerlink\" title=\"Hexo\"></a>Hexo</h1><p>引用官网的话——Hexo 是一个快速、简洁且高效的博客框架。Hexo 使用 Markdown（或其他渲染引擎）解析文章，在几秒内，即可利用靓丽的主题生成静态网页。</p>\n<p>本网站就是使用hexo搭建的，增加了多说评论功能，自己改了点主题的bug，用起来还是比较舒服。</p>\n<h1 id=\"Cmder\"><a href=\"#Cmder\" class=\"headerlink\" title=\"Cmder\"></a>Cmder</h1><p>Windows下非常好用的Linux终端。干净，漂亮，易于使用。</p>\n<h1 id=\"MarkdownPad2\"><a href=\"#MarkdownPad2\" class=\"headerlink\" title=\"MarkdownPad2\"></a>MarkdownPad2</h1><p>Windows下很少有免费且好用的markdown编辑器，而现在又很流行使用markdown写文章或者word，这款软件是不错的选择。</p>\n","site":{"data":{"projects":[{"name":"AiTing","url":"https://github.com/renhongl/aiting","desc":"HTML5客户端音乐播放器"},{"name":"AiLiao","url":"https://github.com/renhongl/ailiao","desc":"网页聊天软件"},{"name":"Pomelo Editor","url":"https://renhongl.github.io/markdown-editor/","desc":"功能强大的在线Markdown编辑器"}]}},"excerpt":"","more":"<p>分享一些好用的Windows工具。</p>\n<h1 id=\"VS-Code\"><a href=\"#VS-Code\" class=\"headerlink\" title=\"VS Code\"></a>VS Code</h1><p>我用过notepad++, sublime, atom, vscode, 各有各的特点，但是我更喜欢用后两个，因为作为一个前端开发，更喜欢用Web技术开发的工具。而VS Code 性能更好一点，就选择了它，功能也很强大，可以安装各种插件，丰富主题和功能，本身内置了很多有用的功能，比如：调试工具，终端，Git等等。</p>\n<p>很多工作区的设置还可以通过用户设置来重写配置，比如当我使用windows时，终端是cmd,命令特别不好用，就可以去首选项-用户设置中将终端路径改为git的bash，当然首先需要安装过git。改完之后，就可以在不用切换工具的情况下，使用bash。特别实用。</p>\n<h1 id=\"Ngrok\"><a href=\"#Ngrok\" class=\"headerlink\" title=\"Ngrok\"></a>Ngrok</h1><p>这是内网穿透工具，比如在本地启动一个服务器 <a href=\"http://127.0.0.1:8080\" target=\"_blank\" rel=\"noopener\">http://127.0.0.1:8080</a> 使用ngrok可以将8080端口映射到外网，那么即使你没有外网ip地址，没有云服务器，也可以通过这种方式让别人访问到你的本地应用。</p>\n<p>如果百度sunny ngrok，可以找到国内免费的ngrok工具，以前是全免费，后来有收费提速的选择。就是不是很稳定，据说是同行nat123总是攻击他们的服务器。</p>\n<h1 id=\"Hexo\"><a href=\"#Hexo\" class=\"headerlink\" title=\"Hexo\"></a>Hexo</h1><p>引用官网的话——Hexo 是一个快速、简洁且高效的博客框架。Hexo 使用 Markdown（或其他渲染引擎）解析文章，在几秒内，即可利用靓丽的主题生成静态网页。</p>\n<p>本网站就是使用hexo搭建的，增加了多说评论功能，自己改了点主题的bug，用起来还是比较舒服。</p>\n<h1 id=\"Cmder\"><a href=\"#Cmder\" class=\"headerlink\" title=\"Cmder\"></a>Cmder</h1><p>Windows下非常好用的Linux终端。干净，漂亮，易于使用。</p>\n<h1 id=\"MarkdownPad2\"><a href=\"#MarkdownPad2\" class=\"headerlink\" title=\"MarkdownPad2\"></a>MarkdownPad2</h1><p>Windows下很少有免费且好用的markdown编辑器，而现在又很流行使用markdown写文章或者word，这款软件是不错的选择。</p>\n"},{"title":"对象的扩展","date":"2017-06-22T11:57:38.000Z","_content":"\n\n\n\n\n\n# 属性，方法的简洁写法\n\n* 属性名为变量名，属性值为变量值。\n\n\n\n  ```js\n  const name = 'lrh';\n  const age = 19;\n  const person = {\n    name,\n    age,\n  };\n\n  //用于方法返回值\n  function getInfor() {\n    const name = 'lrh';\n    const age = 18;\n    return {name, age};\n  }\n  ```\n\n* 方法的简写\n\n  ```js\n  const age = 18;\n  const person = {\n      name: 'lrh',\n      age,\n      getName() {\n        return this.name\n      }\n  }\n  ```\n\n\n\n\n\n\n\n# 属性名可以使用表达式\n\n```js\n//ES5定义对象的属性\nconst person = {};\nperson.name = 'lrh';\nperson.['a' + 'ge'] = 18;\n\n//ES5使用字面量定义属性时，只有下面一种方式\nconst person = {\n  name: 'lrh',\n  age: 18\n};\n\n//ES6可以使用表达式为对象字面量定义属性\nconst person = {\n  name: 'lrh',\n  ['a' + 'ge']: 18\n};\n```\n\n\n\n\n\n\n\n# 使用Object.is()方法比较两个值相等\n\n* 相等运算符（==）会自动转换数据类型。\n* 严格相等运算符（===）会导致NaN不等于NaN，+0等于-0。\n* Object.is()方法与严格相等基本一致，并弥补了以上两个不足。\n\n  ```js\n  NaN === NaN;\n  +0 === -0;\n  Object.is(NaN, NaN);\n  Object.is(+0, -0);\n  ```\n\n\n\n\n\n# 使用Object.assign()方法浅拷贝对象\n\n* 将源对象合并到目标对象\n\n* 如果有同名属性，源对象的属性会覆盖掉目标对象的属性。\n\n* 该方法是浅拷贝，即如果源对象的某个属性值是对象，那么目标对象拷贝的是这个对象的引用，源对象的任何变化，都会反映到目标对象上。\n\n  ```js\n    const target = {a: 1};\n    const source1 = {b: 2};\n    const source2 = {c: 3};\n    Object.assign(target, source1, source2);\n    target;//{ a: 1, b: 2, c: 3 }\n  ```\n\n* 常见用途\n\n  1. 为对象添加属性\n\n      ```js\n      class Person{\n      \tconstructor(name, age) {\n            Object.assign(this, {name, age});\n      \t}\n      }\n      new Person('lrh', 18); \n      ```\n    \n  2. 为对象添加方法\n\n\n       ```js\n       class Person{\n         constructor(name, age) {\n           Object.assign(this, {name, age});\n         }\n       }\n      \n       Object.assign(Person.prototype, {\n         getName() {\n           return this.name;\n         },\n         getAge() {\n           return this.age;\n         }\n       });\n      \n       new Person('lrh', 18).getName();//lrh\n      \n       //等同于\n       Person.prototype.getName = function() {\n         return this.name;\n       };\n       ```\n\n  3. 克隆对象\n\n     ```js\n     const person = {\n       name: 'lrh',\n       age: 18\n     };\n\n     const p = Object.assign({}, person);//{ name: 'lrh', age: 18 }\n     Object.is(person, p);//false\n     ```\n\n  4. 合并对象\n\n     ```js\n     const source1 = {name: 'lrh'};\n     const source2 = {age: 18};\n     const p = Object.assign({}, source1, source2);//{ name: 'lrh', age: 18 }\n     ```\n\n  5. 为属性指定默认值\n\n     ```js\n     const options = {\n       container: '#wrap',\n       draggable: true,\n       resizable: true,\n       blinkTime: 4000\n     };\n\n     class Draggable{\n       constructor(options) {\n         const DEFAULT = {\n           container: '',\n           draggable: true,\n           resizable: false,\n         }\n         this.options = Object.assign({}, DEFAULT, options);\n       }\n     }\n     ```\n\n     ​\n\n# 遍历属性\n\n* for...in遍历对象自身的和继承的可枚举属性，不包含Symbol属性。\n\n  ```js\n  class Person{\n    constructor(name, age) {\n      Object.assign(this, {name, age});\n    }\n  }\n\n  Person.prototype.type = 'Person';\n\n  const person = new Person('lrh', 18, 'male');\n  for (let p in person) {\n    console.log(p);\n  }\n  //name\n  //age\n  //gender\n\n  for (let p in person) {\n    if (person.hasOwnProperty(p)) {\n      console.log(p);\n    }\n  }\n  //name\n  //age\n  ```\n\n* Object.keys(obj)返回一个数组，包含对象自身所有的可枚举属性，不包含继承的属性，不包含Symbol属性。\n\n  ```js\n  const type = Symbol('type');\n  const person = {\n    name: 'lrh',\n    age: 18,\n    [type]: 'Student'\n  };\n  Object.keys(person);//['name', 'age']\n  ```\n\n* Object.getOwnPropertyNames(obj)返回一个数组，包含对象自身所有的可枚举属性和不可枚举属性，不包含Symbol属性。\n\n  ```js\n  const arr = [1, 2, 3]\n  Object.getOwnPropertyNames(arr);//['0', '1', '2', 'length']\n  ```\n\n* Object.getOwnPropertySymbols(obj)返回一个数组，包含所有Symbol属性。\n\n* Reflect.ownKeys(obj)返回一个数组，包含所有可枚举属性，不可枚举属性，Symbol属性。\n\n* ES2015新增遍历法：Object.keys()， ES2017新增遍历方法：Object.values(), Object.entries()。\n\n  ```js\n  const person = {\n    name: 'lrh',\n    age: 18\n  };\n  Object.keys(person);//[ 'name', 'age' ]\n  Object.values(person);//[ 'lrh', 18 ]\n  Object.entries(person);//[ [ 'name', 'lrh' ], [ 'age', 18 ] ]\n\n  //自己实现entries()方法\n  function* entries(obj) {\n    for (let key of Object.keys(obj)) {\n      yield [key, obj[key]];\n    }\n  }\n\n  let personEntries = entries(person);\n  for(let p of personEntries) {\n    console.log(p)\n  }\n  //[ 'name', 'lrh' ]\n  //[ 'age', 18 ]\n\n  //如果没有使用entries()方法，可以给Symbol.iterator配置默认的迭代器\n  Object.assign(person, {\n    * [Symbol.iterator]() {\n      for (let key of Object.keys(this)) {\n        yield [key, this[key]];\n      }\n    }\n  });\n  for (let entries of person) {\n    console.log(entries);\n  }\n  //[ 'name', 'lrh' ]\n  //[ 'age', 18 ]\n  ```\n\n\n\n\n\n# 使用扩展运算符\n\n* 扩展运算符是用于操作数组的\n\n* ES2018将这个运算符引入到了对象中\n\n* 用于取出参数对象的所有可遍历属性，拷贝到当前对象中，等同于使用Object.assign()。\n\n  ```js\n  const person = {\n    name: 'lrh',\n    age: 18\n  };\n  const p = {...person, type: 'student'};\n  p;//{ name: 'lrh', age: 18, type: 'student' }\n  ```\n\n  ​","source":"_posts/对象的扩展.md","raw":"\n---\ntitle: 对象的扩展\ndate: 2017-06-22 19:57:38\ntags: ES6\n---\n\n\n\n\n\n\n# 属性，方法的简洁写法\n\n* 属性名为变量名，属性值为变量值。\n\n\n\n  ```js\n  const name = 'lrh';\n  const age = 19;\n  const person = {\n    name,\n    age,\n  };\n\n  //用于方法返回值\n  function getInfor() {\n    const name = 'lrh';\n    const age = 18;\n    return {name, age};\n  }\n  ```\n\n* 方法的简写\n\n  ```js\n  const age = 18;\n  const person = {\n      name: 'lrh',\n      age,\n      getName() {\n        return this.name\n      }\n  }\n  ```\n\n\n\n\n\n\n\n# 属性名可以使用表达式\n\n```js\n//ES5定义对象的属性\nconst person = {};\nperson.name = 'lrh';\nperson.['a' + 'ge'] = 18;\n\n//ES5使用字面量定义属性时，只有下面一种方式\nconst person = {\n  name: 'lrh',\n  age: 18\n};\n\n//ES6可以使用表达式为对象字面量定义属性\nconst person = {\n  name: 'lrh',\n  ['a' + 'ge']: 18\n};\n```\n\n\n\n\n\n\n\n# 使用Object.is()方法比较两个值相等\n\n* 相等运算符（==）会自动转换数据类型。\n* 严格相等运算符（===）会导致NaN不等于NaN，+0等于-0。\n* Object.is()方法与严格相等基本一致，并弥补了以上两个不足。\n\n  ```js\n  NaN === NaN;\n  +0 === -0;\n  Object.is(NaN, NaN);\n  Object.is(+0, -0);\n  ```\n\n\n\n\n\n# 使用Object.assign()方法浅拷贝对象\n\n* 将源对象合并到目标对象\n\n* 如果有同名属性，源对象的属性会覆盖掉目标对象的属性。\n\n* 该方法是浅拷贝，即如果源对象的某个属性值是对象，那么目标对象拷贝的是这个对象的引用，源对象的任何变化，都会反映到目标对象上。\n\n  ```js\n    const target = {a: 1};\n    const source1 = {b: 2};\n    const source2 = {c: 3};\n    Object.assign(target, source1, source2);\n    target;//{ a: 1, b: 2, c: 3 }\n  ```\n\n* 常见用途\n\n  1. 为对象添加属性\n\n      ```js\n      class Person{\n      \tconstructor(name, age) {\n            Object.assign(this, {name, age});\n      \t}\n      }\n      new Person('lrh', 18); \n      ```\n    \n  2. 为对象添加方法\n\n\n       ```js\n       class Person{\n         constructor(name, age) {\n           Object.assign(this, {name, age});\n         }\n       }\n      \n       Object.assign(Person.prototype, {\n         getName() {\n           return this.name;\n         },\n         getAge() {\n           return this.age;\n         }\n       });\n      \n       new Person('lrh', 18).getName();//lrh\n      \n       //等同于\n       Person.prototype.getName = function() {\n         return this.name;\n       };\n       ```\n\n  3. 克隆对象\n\n     ```js\n     const person = {\n       name: 'lrh',\n       age: 18\n     };\n\n     const p = Object.assign({}, person);//{ name: 'lrh', age: 18 }\n     Object.is(person, p);//false\n     ```\n\n  4. 合并对象\n\n     ```js\n     const source1 = {name: 'lrh'};\n     const source2 = {age: 18};\n     const p = Object.assign({}, source1, source2);//{ name: 'lrh', age: 18 }\n     ```\n\n  5. 为属性指定默认值\n\n     ```js\n     const options = {\n       container: '#wrap',\n       draggable: true,\n       resizable: true,\n       blinkTime: 4000\n     };\n\n     class Draggable{\n       constructor(options) {\n         const DEFAULT = {\n           container: '',\n           draggable: true,\n           resizable: false,\n         }\n         this.options = Object.assign({}, DEFAULT, options);\n       }\n     }\n     ```\n\n     ​\n\n# 遍历属性\n\n* for...in遍历对象自身的和继承的可枚举属性，不包含Symbol属性。\n\n  ```js\n  class Person{\n    constructor(name, age) {\n      Object.assign(this, {name, age});\n    }\n  }\n\n  Person.prototype.type = 'Person';\n\n  const person = new Person('lrh', 18, 'male');\n  for (let p in person) {\n    console.log(p);\n  }\n  //name\n  //age\n  //gender\n\n  for (let p in person) {\n    if (person.hasOwnProperty(p)) {\n      console.log(p);\n    }\n  }\n  //name\n  //age\n  ```\n\n* Object.keys(obj)返回一个数组，包含对象自身所有的可枚举属性，不包含继承的属性，不包含Symbol属性。\n\n  ```js\n  const type = Symbol('type');\n  const person = {\n    name: 'lrh',\n    age: 18,\n    [type]: 'Student'\n  };\n  Object.keys(person);//['name', 'age']\n  ```\n\n* Object.getOwnPropertyNames(obj)返回一个数组，包含对象自身所有的可枚举属性和不可枚举属性，不包含Symbol属性。\n\n  ```js\n  const arr = [1, 2, 3]\n  Object.getOwnPropertyNames(arr);//['0', '1', '2', 'length']\n  ```\n\n* Object.getOwnPropertySymbols(obj)返回一个数组，包含所有Symbol属性。\n\n* Reflect.ownKeys(obj)返回一个数组，包含所有可枚举属性，不可枚举属性，Symbol属性。\n\n* ES2015新增遍历法：Object.keys()， ES2017新增遍历方法：Object.values(), Object.entries()。\n\n  ```js\n  const person = {\n    name: 'lrh',\n    age: 18\n  };\n  Object.keys(person);//[ 'name', 'age' ]\n  Object.values(person);//[ 'lrh', 18 ]\n  Object.entries(person);//[ [ 'name', 'lrh' ], [ 'age', 18 ] ]\n\n  //自己实现entries()方法\n  function* entries(obj) {\n    for (let key of Object.keys(obj)) {\n      yield [key, obj[key]];\n    }\n  }\n\n  let personEntries = entries(person);\n  for(let p of personEntries) {\n    console.log(p)\n  }\n  //[ 'name', 'lrh' ]\n  //[ 'age', 18 ]\n\n  //如果没有使用entries()方法，可以给Symbol.iterator配置默认的迭代器\n  Object.assign(person, {\n    * [Symbol.iterator]() {\n      for (let key of Object.keys(this)) {\n        yield [key, this[key]];\n      }\n    }\n  });\n  for (let entries of person) {\n    console.log(entries);\n  }\n  //[ 'name', 'lrh' ]\n  //[ 'age', 18 ]\n  ```\n\n\n\n\n\n# 使用扩展运算符\n\n* 扩展运算符是用于操作数组的\n\n* ES2018将这个运算符引入到了对象中\n\n* 用于取出参数对象的所有可遍历属性，拷贝到当前对象中，等同于使用Object.assign()。\n\n  ```js\n  const person = {\n    name: 'lrh',\n    age: 18\n  };\n  const p = {...person, type: 'student'};\n  p;//{ name: 'lrh', age: 18, type: 'student' }\n  ```\n\n  ​","slug":"对象的扩展","published":1,"updated":"2019-03-18T07:07:06.241Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ck2vg6gwq002b4cob5a006sfs","content":"<h1 id=\"属性，方法的简洁写法\"><a href=\"#属性，方法的简洁写法\" class=\"headerlink\" title=\"属性，方法的简洁写法\"></a>属性，方法的简洁写法</h1><ul>\n<li>属性名为变量名，属性值为变量值。</li>\n</ul>\n  <figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> name = <span class=\"string\">'lrh'</span>;</span><br><span class=\"line\"><span class=\"keyword\">const</span> age = <span class=\"number\">19</span>;</span><br><span class=\"line\"><span class=\"keyword\">const</span> person = &#123;</span><br><span class=\"line\">  name,</span><br><span class=\"line\">  age,</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//用于方法返回值</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">getInfor</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">const</span> name = <span class=\"string\">'lrh'</span>;</span><br><span class=\"line\">  <span class=\"keyword\">const</span> age = <span class=\"number\">18</span>;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> &#123;name, age&#125;;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<ul>\n<li><p>方法的简写</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> age = <span class=\"number\">18</span>;</span><br><span class=\"line\"><span class=\"keyword\">const</span> person = &#123;</span><br><span class=\"line\">    name: <span class=\"string\">'lrh'</span>,</span><br><span class=\"line\">    age,</span><br><span class=\"line\">    getName() &#123;</span><br><span class=\"line\">      <span class=\"keyword\">return</span> <span class=\"keyword\">this</span>.name</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n<h1 id=\"属性名可以使用表达式\"><a href=\"#属性名可以使用表达式\" class=\"headerlink\" title=\"属性名可以使用表达式\"></a>属性名可以使用表达式</h1><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//ES5定义对象的属性</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> person = &#123;&#125;;</span><br><span class=\"line\">person.name = <span class=\"string\">'lrh'</span>;</span><br><span class=\"line\">person.[<span class=\"string\">'a'</span> + <span class=\"string\">'ge'</span>] = <span class=\"number\">18</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//ES5使用字面量定义属性时，只有下面一种方式</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> person = &#123;</span><br><span class=\"line\">  name: <span class=\"string\">'lrh'</span>,</span><br><span class=\"line\">  age: <span class=\"number\">18</span></span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//ES6可以使用表达式为对象字面量定义属性</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> person = &#123;</span><br><span class=\"line\">  name: <span class=\"string\">'lrh'</span>,</span><br><span class=\"line\">  [<span class=\"string\">'a'</span> + <span class=\"string\">'ge'</span>]: <span class=\"number\">18</span></span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n<h1 id=\"使用Object-is-方法比较两个值相等\"><a href=\"#使用Object-is-方法比较两个值相等\" class=\"headerlink\" title=\"使用Object.is()方法比较两个值相等\"></a>使用Object.is()方法比较两个值相等</h1><ul>\n<li>相等运算符（==）会自动转换数据类型。</li>\n<li>严格相等运算符（===）会导致NaN不等于NaN，+0等于-0。</li>\n<li><p>Object.is()方法与严格相等基本一致，并弥补了以上两个不足。</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"literal\">NaN</span> === <span class=\"literal\">NaN</span>;</span><br><span class=\"line\">+<span class=\"number\">0</span> === <span class=\"number\">-0</span>;</span><br><span class=\"line\"><span class=\"built_in\">Object</span>.is(<span class=\"literal\">NaN</span>, <span class=\"literal\">NaN</span>);</span><br><span class=\"line\"><span class=\"built_in\">Object</span>.is(+<span class=\"number\">0</span>, <span class=\"number\">-0</span>);</span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n<h1 id=\"使用Object-assign-方法浅拷贝对象\"><a href=\"#使用Object-assign-方法浅拷贝对象\" class=\"headerlink\" title=\"使用Object.assign()方法浅拷贝对象\"></a>使用Object.assign()方法浅拷贝对象</h1><ul>\n<li><p>将源对象合并到目标对象</p>\n</li>\n<li><p>如果有同名属性，源对象的属性会覆盖掉目标对象的属性。</p>\n</li>\n<li><p>该方法是浅拷贝，即如果源对象的某个属性值是对象，那么目标对象拷贝的是这个对象的引用，源对象的任何变化，都会反映到目标对象上。</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> target = &#123;<span class=\"attr\">a</span>: <span class=\"number\">1</span>&#125;;</span><br><span class=\"line\"><span class=\"keyword\">const</span> source1 = &#123;<span class=\"attr\">b</span>: <span class=\"number\">2</span>&#125;;</span><br><span class=\"line\"><span class=\"keyword\">const</span> source2 = &#123;<span class=\"attr\">c</span>: <span class=\"number\">3</span>&#125;;</span><br><span class=\"line\"><span class=\"built_in\">Object</span>.assign(target, source1, source2);</span><br><span class=\"line\">target;<span class=\"comment\">//&#123; a: 1, b: 2, c: 3 &#125;</span></span><br></pre></td></tr></table></figure>\n</li>\n<li><p>常见用途</p>\n<ol>\n<li><p>为对象添加属性</p>\n <figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Person</span></span>&#123;</span><br><span class=\"line\">\t<span class=\"keyword\">constructor</span>(name, age) &#123;</span><br><span class=\"line\">      <span class=\"built_in\">Object</span>.assign(<span class=\"keyword\">this</span>, &#123;name, age&#125;);</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">new</span> Person(<span class=\"string\">'lrh'</span>, <span class=\"number\">18</span>);</span><br></pre></td></tr></table></figure>\n</li>\n</ol>\n</li>\n</ul>\n<ol start=\"2\">\n<li>为对象添加方法</li>\n</ol>\n<pre><code><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Person</span></span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">constructor</span>(name, age) &#123;</span><br><span class=\"line\">    <span class=\"built_in\">Object</span>.assign(<span class=\"keyword\">this</span>, &#123;name, age&#125;);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">      </span><br><span class=\"line\"><span class=\"built_in\">Object</span>.assign(Person.prototype, &#123;</span><br><span class=\"line\">  getName() &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"keyword\">this</span>.name;</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  getAge() &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"keyword\">this</span>.age;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\">      </span><br><span class=\"line\"><span class=\"keyword\">new</span> Person(<span class=\"string\">'lrh'</span>, <span class=\"number\">18</span>).getName();<span class=\"comment\">//lrh</span></span><br><span class=\"line\">      </span><br><span class=\"line\"><span class=\"comment\">//等同于</span></span><br><span class=\"line\">Person.prototype.getName = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> <span class=\"keyword\">this</span>.name;</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n</code></pre><ol start=\"3\">\n<li><p>克隆对象</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> person = &#123;</span><br><span class=\"line\">  name: <span class=\"string\">'lrh'</span>,</span><br><span class=\"line\">  age: <span class=\"number\">18</span></span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> p = <span class=\"built_in\">Object</span>.assign(&#123;&#125;, person);<span class=\"comment\">//&#123; name: 'lrh', age: 18 &#125;</span></span><br><span class=\"line\"><span class=\"built_in\">Object</span>.is(person, p);<span class=\"comment\">//false</span></span><br></pre></td></tr></table></figure>\n</li>\n<li><p>合并对象</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> source1 = &#123;<span class=\"attr\">name</span>: <span class=\"string\">'lrh'</span>&#125;;</span><br><span class=\"line\"><span class=\"keyword\">const</span> source2 = &#123;<span class=\"attr\">age</span>: <span class=\"number\">18</span>&#125;;</span><br><span class=\"line\"><span class=\"keyword\">const</span> p = <span class=\"built_in\">Object</span>.assign(&#123;&#125;, source1, source2);<span class=\"comment\">//&#123; name: 'lrh', age: 18 &#125;</span></span><br></pre></td></tr></table></figure>\n</li>\n<li><p>为属性指定默认值</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> options = &#123;</span><br><span class=\"line\">  container: <span class=\"string\">'#wrap'</span>,</span><br><span class=\"line\">  draggable: <span class=\"literal\">true</span>,</span><br><span class=\"line\">  resizable: <span class=\"literal\">true</span>,</span><br><span class=\"line\">  blinkTime: <span class=\"number\">4000</span></span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Draggable</span></span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">constructor</span>(options) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">const</span> DEFAULT = &#123;</span><br><span class=\"line\">      container: <span class=\"string\">''</span>,</span><br><span class=\"line\">      draggable: <span class=\"literal\">true</span>,</span><br><span class=\"line\">      resizable: <span class=\"literal\">false</span>,</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">this</span>.options = <span class=\"built_in\">Object</span>.assign(&#123;&#125;, DEFAULT, options);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>​</p>\n</li>\n</ol>\n<h1 id=\"遍历属性\"><a href=\"#遍历属性\" class=\"headerlink\" title=\"遍历属性\"></a>遍历属性</h1><ul>\n<li><p>for…in遍历对象自身的和继承的可枚举属性，不包含Symbol属性。</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Person</span></span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">constructor</span>(name, age) &#123;</span><br><span class=\"line\">    <span class=\"built_in\">Object</span>.assign(<span class=\"keyword\">this</span>, &#123;name, age&#125;);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">Person.prototype.type = <span class=\"string\">'Person'</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> person = <span class=\"keyword\">new</span> Person(<span class=\"string\">'lrh'</span>, <span class=\"number\">18</span>, <span class=\"string\">'male'</span>);</span><br><span class=\"line\"><span class=\"keyword\">for</span> (<span class=\"keyword\">let</span> p <span class=\"keyword\">in</span> person) &#123;</span><br><span class=\"line\">  <span class=\"built_in\">console</span>.log(p);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">//name</span></span><br><span class=\"line\"><span class=\"comment\">//age</span></span><br><span class=\"line\"><span class=\"comment\">//gender</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">for</span> (<span class=\"keyword\">let</span> p <span class=\"keyword\">in</span> person) &#123;</span><br><span class=\"line\">  <span class=\"keyword\">if</span> (person.hasOwnProperty(p)) &#123;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(p);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">//name</span></span><br><span class=\"line\"><span class=\"comment\">//age</span></span><br></pre></td></tr></table></figure>\n</li>\n<li><p>Object.keys(obj)返回一个数组，包含对象自身所有的可枚举属性，不包含继承的属性，不包含Symbol属性。</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> type = <span class=\"built_in\">Symbol</span>(<span class=\"string\">'type'</span>);</span><br><span class=\"line\"><span class=\"keyword\">const</span> person = &#123;</span><br><span class=\"line\">  name: <span class=\"string\">'lrh'</span>,</span><br><span class=\"line\">  age: <span class=\"number\">18</span>,</span><br><span class=\"line\">  [type]: <span class=\"string\">'Student'</span></span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"><span class=\"built_in\">Object</span>.keys(person);<span class=\"comment\">//['name', 'age']</span></span><br></pre></td></tr></table></figure>\n</li>\n<li><p>Object.getOwnPropertyNames(obj)返回一个数组，包含对象自身所有的可枚举属性和不可枚举属性，不包含Symbol属性。</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> arr = [<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>]</span><br><span class=\"line\"><span class=\"built_in\">Object</span>.getOwnPropertyNames(arr);<span class=\"comment\">//['0', '1', '2', 'length']</span></span><br></pre></td></tr></table></figure>\n</li>\n<li><p>Object.getOwnPropertySymbols(obj)返回一个数组，包含所有Symbol属性。</p>\n</li>\n<li><p>Reflect.ownKeys(obj)返回一个数组，包含所有可枚举属性，不可枚举属性，Symbol属性。</p>\n</li>\n<li><p>ES2015新增遍历法：Object.keys()， ES2017新增遍历方法：Object.values(), Object.entries()。</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> person = &#123;</span><br><span class=\"line\">  name: <span class=\"string\">'lrh'</span>,</span><br><span class=\"line\">  age: <span class=\"number\">18</span></span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"><span class=\"built_in\">Object</span>.keys(person);<span class=\"comment\">//[ 'name', 'age' ]</span></span><br><span class=\"line\"><span class=\"built_in\">Object</span>.values(person);<span class=\"comment\">//[ 'lrh', 18 ]</span></span><br><span class=\"line\"><span class=\"built_in\">Object</span>.entries(person);<span class=\"comment\">//[ [ 'name', 'lrh' ], [ 'age', 18 ] ]</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//自己实现entries()方法</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span>* <span class=\"title\">entries</span>(<span class=\"params\">obj</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">for</span> (<span class=\"keyword\">let</span> key <span class=\"keyword\">of</span> <span class=\"built_in\">Object</span>.keys(obj)) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">yield</span> [key, obj[key]];</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">let</span> personEntries = entries(person);</span><br><span class=\"line\"><span class=\"keyword\">for</span>(<span class=\"keyword\">let</span> p <span class=\"keyword\">of</span> personEntries) &#123;</span><br><span class=\"line\">  <span class=\"built_in\">console</span>.log(p)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">//[ 'name', 'lrh' ]</span></span><br><span class=\"line\"><span class=\"comment\">//[ 'age', 18 ]</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//如果没有使用entries()方法，可以给Symbol.iterator配置默认的迭代器</span></span><br><span class=\"line\"><span class=\"built_in\">Object</span>.assign(person, &#123;</span><br><span class=\"line\">  * [<span class=\"built_in\">Symbol</span>.iterator]() &#123;</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">let</span> key <span class=\"keyword\">of</span> <span class=\"built_in\">Object</span>.keys(<span class=\"keyword\">this</span>)) &#123;</span><br><span class=\"line\">      <span class=\"keyword\">yield</span> [key, <span class=\"keyword\">this</span>[key]];</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\"><span class=\"keyword\">for</span> (<span class=\"keyword\">let</span> entries <span class=\"keyword\">of</span> person) &#123;</span><br><span class=\"line\">  <span class=\"built_in\">console</span>.log(entries);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">//[ 'name', 'lrh' ]</span></span><br><span class=\"line\"><span class=\"comment\">//[ 'age', 18 ]</span></span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n<h1 id=\"使用扩展运算符\"><a href=\"#使用扩展运算符\" class=\"headerlink\" title=\"使用扩展运算符\"></a>使用扩展运算符</h1><ul>\n<li><p>扩展运算符是用于操作数组的</p>\n</li>\n<li><p>ES2018将这个运算符引入到了对象中</p>\n</li>\n<li><p>用于取出参数对象的所有可遍历属性，拷贝到当前对象中，等同于使用Object.assign()。</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> person = &#123;</span><br><span class=\"line\">  name: <span class=\"string\">'lrh'</span>,</span><br><span class=\"line\">  age: <span class=\"number\">18</span></span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"><span class=\"keyword\">const</span> p = &#123;...person, <span class=\"attr\">type</span>: <span class=\"string\">'student'</span>&#125;;</span><br><span class=\"line\">p;<span class=\"comment\">//&#123; name: 'lrh', age: 18, type: 'student' &#125;</span></span><br></pre></td></tr></table></figure>\n<p>​</p>\n</li>\n</ul>\n","site":{"data":{"projects":[{"name":"AiTing","url":"https://github.com/renhongl/aiting","desc":"HTML5客户端音乐播放器"},{"name":"AiLiao","url":"https://github.com/renhongl/ailiao","desc":"网页聊天软件"},{"name":"Pomelo Editor","url":"https://renhongl.github.io/markdown-editor/","desc":"功能强大的在线Markdown编辑器"}]}},"excerpt":"","more":"<h1 id=\"属性，方法的简洁写法\"><a href=\"#属性，方法的简洁写法\" class=\"headerlink\" title=\"属性，方法的简洁写法\"></a>属性，方法的简洁写法</h1><ul>\n<li>属性名为变量名，属性值为变量值。</li>\n</ul>\n  <figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> name = <span class=\"string\">'lrh'</span>;</span><br><span class=\"line\"><span class=\"keyword\">const</span> age = <span class=\"number\">19</span>;</span><br><span class=\"line\"><span class=\"keyword\">const</span> person = &#123;</span><br><span class=\"line\">  name,</span><br><span class=\"line\">  age,</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//用于方法返回值</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">getInfor</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">const</span> name = <span class=\"string\">'lrh'</span>;</span><br><span class=\"line\">  <span class=\"keyword\">const</span> age = <span class=\"number\">18</span>;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> &#123;name, age&#125;;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<ul>\n<li><p>方法的简写</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> age = <span class=\"number\">18</span>;</span><br><span class=\"line\"><span class=\"keyword\">const</span> person = &#123;</span><br><span class=\"line\">    name: <span class=\"string\">'lrh'</span>,</span><br><span class=\"line\">    age,</span><br><span class=\"line\">    getName() &#123;</span><br><span class=\"line\">      <span class=\"keyword\">return</span> <span class=\"keyword\">this</span>.name</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n<h1 id=\"属性名可以使用表达式\"><a href=\"#属性名可以使用表达式\" class=\"headerlink\" title=\"属性名可以使用表达式\"></a>属性名可以使用表达式</h1><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//ES5定义对象的属性</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> person = &#123;&#125;;</span><br><span class=\"line\">person.name = <span class=\"string\">'lrh'</span>;</span><br><span class=\"line\">person.[<span class=\"string\">'a'</span> + <span class=\"string\">'ge'</span>] = <span class=\"number\">18</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//ES5使用字面量定义属性时，只有下面一种方式</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> person = &#123;</span><br><span class=\"line\">  name: <span class=\"string\">'lrh'</span>,</span><br><span class=\"line\">  age: <span class=\"number\">18</span></span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//ES6可以使用表达式为对象字面量定义属性</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> person = &#123;</span><br><span class=\"line\">  name: <span class=\"string\">'lrh'</span>,</span><br><span class=\"line\">  [<span class=\"string\">'a'</span> + <span class=\"string\">'ge'</span>]: <span class=\"number\">18</span></span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n<h1 id=\"使用Object-is-方法比较两个值相等\"><a href=\"#使用Object-is-方法比较两个值相等\" class=\"headerlink\" title=\"使用Object.is()方法比较两个值相等\"></a>使用Object.is()方法比较两个值相等</h1><ul>\n<li>相等运算符（==）会自动转换数据类型。</li>\n<li>严格相等运算符（===）会导致NaN不等于NaN，+0等于-0。</li>\n<li><p>Object.is()方法与严格相等基本一致，并弥补了以上两个不足。</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"literal\">NaN</span> === <span class=\"literal\">NaN</span>;</span><br><span class=\"line\">+<span class=\"number\">0</span> === <span class=\"number\">-0</span>;</span><br><span class=\"line\"><span class=\"built_in\">Object</span>.is(<span class=\"literal\">NaN</span>, <span class=\"literal\">NaN</span>);</span><br><span class=\"line\"><span class=\"built_in\">Object</span>.is(+<span class=\"number\">0</span>, <span class=\"number\">-0</span>);</span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n<h1 id=\"使用Object-assign-方法浅拷贝对象\"><a href=\"#使用Object-assign-方法浅拷贝对象\" class=\"headerlink\" title=\"使用Object.assign()方法浅拷贝对象\"></a>使用Object.assign()方法浅拷贝对象</h1><ul>\n<li><p>将源对象合并到目标对象</p>\n</li>\n<li><p>如果有同名属性，源对象的属性会覆盖掉目标对象的属性。</p>\n</li>\n<li><p>该方法是浅拷贝，即如果源对象的某个属性值是对象，那么目标对象拷贝的是这个对象的引用，源对象的任何变化，都会反映到目标对象上。</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> target = &#123;<span class=\"attr\">a</span>: <span class=\"number\">1</span>&#125;;</span><br><span class=\"line\"><span class=\"keyword\">const</span> source1 = &#123;<span class=\"attr\">b</span>: <span class=\"number\">2</span>&#125;;</span><br><span class=\"line\"><span class=\"keyword\">const</span> source2 = &#123;<span class=\"attr\">c</span>: <span class=\"number\">3</span>&#125;;</span><br><span class=\"line\"><span class=\"built_in\">Object</span>.assign(target, source1, source2);</span><br><span class=\"line\">target;<span class=\"comment\">//&#123; a: 1, b: 2, c: 3 &#125;</span></span><br></pre></td></tr></table></figure>\n</li>\n<li><p>常见用途</p>\n<ol>\n<li><p>为对象添加属性</p>\n <figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Person</span></span>&#123;</span><br><span class=\"line\">\t<span class=\"keyword\">constructor</span>(name, age) &#123;</span><br><span class=\"line\">      <span class=\"built_in\">Object</span>.assign(<span class=\"keyword\">this</span>, &#123;name, age&#125;);</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">new</span> Person(<span class=\"string\">'lrh'</span>, <span class=\"number\">18</span>);</span><br></pre></td></tr></table></figure>\n</li>\n</ol>\n</li>\n</ul>\n<ol start=\"2\">\n<li>为对象添加方法</li>\n</ol>\n<pre><code><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Person</span></span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">constructor</span>(name, age) &#123;</span><br><span class=\"line\">    <span class=\"built_in\">Object</span>.assign(<span class=\"keyword\">this</span>, &#123;name, age&#125;);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">      </span><br><span class=\"line\"><span class=\"built_in\">Object</span>.assign(Person.prototype, &#123;</span><br><span class=\"line\">  getName() &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"keyword\">this</span>.name;</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  getAge() &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"keyword\">this</span>.age;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\">      </span><br><span class=\"line\"><span class=\"keyword\">new</span> Person(<span class=\"string\">'lrh'</span>, <span class=\"number\">18</span>).getName();<span class=\"comment\">//lrh</span></span><br><span class=\"line\">      </span><br><span class=\"line\"><span class=\"comment\">//等同于</span></span><br><span class=\"line\">Person.prototype.getName = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> <span class=\"keyword\">this</span>.name;</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n</code></pre><ol start=\"3\">\n<li><p>克隆对象</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> person = &#123;</span><br><span class=\"line\">  name: <span class=\"string\">'lrh'</span>,</span><br><span class=\"line\">  age: <span class=\"number\">18</span></span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> p = <span class=\"built_in\">Object</span>.assign(&#123;&#125;, person);<span class=\"comment\">//&#123; name: 'lrh', age: 18 &#125;</span></span><br><span class=\"line\"><span class=\"built_in\">Object</span>.is(person, p);<span class=\"comment\">//false</span></span><br></pre></td></tr></table></figure>\n</li>\n<li><p>合并对象</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> source1 = &#123;<span class=\"attr\">name</span>: <span class=\"string\">'lrh'</span>&#125;;</span><br><span class=\"line\"><span class=\"keyword\">const</span> source2 = &#123;<span class=\"attr\">age</span>: <span class=\"number\">18</span>&#125;;</span><br><span class=\"line\"><span class=\"keyword\">const</span> p = <span class=\"built_in\">Object</span>.assign(&#123;&#125;, source1, source2);<span class=\"comment\">//&#123; name: 'lrh', age: 18 &#125;</span></span><br></pre></td></tr></table></figure>\n</li>\n<li><p>为属性指定默认值</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> options = &#123;</span><br><span class=\"line\">  container: <span class=\"string\">'#wrap'</span>,</span><br><span class=\"line\">  draggable: <span class=\"literal\">true</span>,</span><br><span class=\"line\">  resizable: <span class=\"literal\">true</span>,</span><br><span class=\"line\">  blinkTime: <span class=\"number\">4000</span></span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Draggable</span></span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">constructor</span>(options) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">const</span> DEFAULT = &#123;</span><br><span class=\"line\">      container: <span class=\"string\">''</span>,</span><br><span class=\"line\">      draggable: <span class=\"literal\">true</span>,</span><br><span class=\"line\">      resizable: <span class=\"literal\">false</span>,</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">this</span>.options = <span class=\"built_in\">Object</span>.assign(&#123;&#125;, DEFAULT, options);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>​</p>\n</li>\n</ol>\n<h1 id=\"遍历属性\"><a href=\"#遍历属性\" class=\"headerlink\" title=\"遍历属性\"></a>遍历属性</h1><ul>\n<li><p>for…in遍历对象自身的和继承的可枚举属性，不包含Symbol属性。</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Person</span></span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">constructor</span>(name, age) &#123;</span><br><span class=\"line\">    <span class=\"built_in\">Object</span>.assign(<span class=\"keyword\">this</span>, &#123;name, age&#125;);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">Person.prototype.type = <span class=\"string\">'Person'</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> person = <span class=\"keyword\">new</span> Person(<span class=\"string\">'lrh'</span>, <span class=\"number\">18</span>, <span class=\"string\">'male'</span>);</span><br><span class=\"line\"><span class=\"keyword\">for</span> (<span class=\"keyword\">let</span> p <span class=\"keyword\">in</span> person) &#123;</span><br><span class=\"line\">  <span class=\"built_in\">console</span>.log(p);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">//name</span></span><br><span class=\"line\"><span class=\"comment\">//age</span></span><br><span class=\"line\"><span class=\"comment\">//gender</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">for</span> (<span class=\"keyword\">let</span> p <span class=\"keyword\">in</span> person) &#123;</span><br><span class=\"line\">  <span class=\"keyword\">if</span> (person.hasOwnProperty(p)) &#123;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(p);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">//name</span></span><br><span class=\"line\"><span class=\"comment\">//age</span></span><br></pre></td></tr></table></figure>\n</li>\n<li><p>Object.keys(obj)返回一个数组，包含对象自身所有的可枚举属性，不包含继承的属性，不包含Symbol属性。</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> type = <span class=\"built_in\">Symbol</span>(<span class=\"string\">'type'</span>);</span><br><span class=\"line\"><span class=\"keyword\">const</span> person = &#123;</span><br><span class=\"line\">  name: <span class=\"string\">'lrh'</span>,</span><br><span class=\"line\">  age: <span class=\"number\">18</span>,</span><br><span class=\"line\">  [type]: <span class=\"string\">'Student'</span></span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"><span class=\"built_in\">Object</span>.keys(person);<span class=\"comment\">//['name', 'age']</span></span><br></pre></td></tr></table></figure>\n</li>\n<li><p>Object.getOwnPropertyNames(obj)返回一个数组，包含对象自身所有的可枚举属性和不可枚举属性，不包含Symbol属性。</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> arr = [<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>]</span><br><span class=\"line\"><span class=\"built_in\">Object</span>.getOwnPropertyNames(arr);<span class=\"comment\">//['0', '1', '2', 'length']</span></span><br></pre></td></tr></table></figure>\n</li>\n<li><p>Object.getOwnPropertySymbols(obj)返回一个数组，包含所有Symbol属性。</p>\n</li>\n<li><p>Reflect.ownKeys(obj)返回一个数组，包含所有可枚举属性，不可枚举属性，Symbol属性。</p>\n</li>\n<li><p>ES2015新增遍历法：Object.keys()， ES2017新增遍历方法：Object.values(), Object.entries()。</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> person = &#123;</span><br><span class=\"line\">  name: <span class=\"string\">'lrh'</span>,</span><br><span class=\"line\">  age: <span class=\"number\">18</span></span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"><span class=\"built_in\">Object</span>.keys(person);<span class=\"comment\">//[ 'name', 'age' ]</span></span><br><span class=\"line\"><span class=\"built_in\">Object</span>.values(person);<span class=\"comment\">//[ 'lrh', 18 ]</span></span><br><span class=\"line\"><span class=\"built_in\">Object</span>.entries(person);<span class=\"comment\">//[ [ 'name', 'lrh' ], [ 'age', 18 ] ]</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//自己实现entries()方法</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span>* <span class=\"title\">entries</span>(<span class=\"params\">obj</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">for</span> (<span class=\"keyword\">let</span> key <span class=\"keyword\">of</span> <span class=\"built_in\">Object</span>.keys(obj)) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">yield</span> [key, obj[key]];</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">let</span> personEntries = entries(person);</span><br><span class=\"line\"><span class=\"keyword\">for</span>(<span class=\"keyword\">let</span> p <span class=\"keyword\">of</span> personEntries) &#123;</span><br><span class=\"line\">  <span class=\"built_in\">console</span>.log(p)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">//[ 'name', 'lrh' ]</span></span><br><span class=\"line\"><span class=\"comment\">//[ 'age', 18 ]</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//如果没有使用entries()方法，可以给Symbol.iterator配置默认的迭代器</span></span><br><span class=\"line\"><span class=\"built_in\">Object</span>.assign(person, &#123;</span><br><span class=\"line\">  * [<span class=\"built_in\">Symbol</span>.iterator]() &#123;</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">let</span> key <span class=\"keyword\">of</span> <span class=\"built_in\">Object</span>.keys(<span class=\"keyword\">this</span>)) &#123;</span><br><span class=\"line\">      <span class=\"keyword\">yield</span> [key, <span class=\"keyword\">this</span>[key]];</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\"><span class=\"keyword\">for</span> (<span class=\"keyword\">let</span> entries <span class=\"keyword\">of</span> person) &#123;</span><br><span class=\"line\">  <span class=\"built_in\">console</span>.log(entries);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">//[ 'name', 'lrh' ]</span></span><br><span class=\"line\"><span class=\"comment\">//[ 'age', 18 ]</span></span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n<h1 id=\"使用扩展运算符\"><a href=\"#使用扩展运算符\" class=\"headerlink\" title=\"使用扩展运算符\"></a>使用扩展运算符</h1><ul>\n<li><p>扩展运算符是用于操作数组的</p>\n</li>\n<li><p>ES2018将这个运算符引入到了对象中</p>\n</li>\n<li><p>用于取出参数对象的所有可遍历属性，拷贝到当前对象中，等同于使用Object.assign()。</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> person = &#123;</span><br><span class=\"line\">  name: <span class=\"string\">'lrh'</span>,</span><br><span class=\"line\">  age: <span class=\"number\">18</span></span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"><span class=\"keyword\">const</span> p = &#123;...person, <span class=\"attr\">type</span>: <span class=\"string\">'student'</span>&#125;;</span><br><span class=\"line\">p;<span class=\"comment\">//&#123; name: 'lrh', age: 18, type: 'student' &#125;</span></span><br></pre></td></tr></table></figure>\n<p>​</p>\n</li>\n</ul>\n"},{"title":"应用平台桌面版","date":"2016-11-15T14:16:38.000Z","_content":"\n# 简介\n\n使用web技术开发的应用平台。\n\n可以将所有应用装在一起，只需要登录一次，就能用所有的应用。效果图如下：\n\n![ap](/images/applicationPlatform.png)\n\n目前做了三个应用，音乐播放器，多人聊天室，爱心鱼游戏。下面将\n会详细介绍它们。\n\n因为我写了一小部分后台，所以运行前需要启动服务器。在下载完\n源码后，打开一个cmd窗口，进入根目录，运行代码：\n\n  ```\n  node server.js\n  ```\n\n将服务器跑起来。然后再打开一个cmd窗口，运行代码：\n\n  ```\n  npm start\n  ```\n\n\n\n应用就打开了。\n\n# 音乐播放器\n它只包含基本的功能：导入本地歌曲列表；切换一个主题；控制正在播放的歌曲。\n效果图如下：\n\n![ap](/images/musicPlayer2.png)\n\nUX方面做得不是很好，以后会更加注重这一块。\n\n\n# 聊天室\n聊天室是我觉得做得比较好的一个，因为它包含了很多功能。\n除了最基本的聊天外，还支持发一些表情，还可以设置字体，背景，以及主题。\n里面还集成了一个地图，如果是用电脑浏览器打开的，将会在地图上显示自己的\n位置。效果图如下：\n\n![ap](/images/chatRoom2.png)\n\n# 爱心鱼\n最后一个是个用js写的游戏，但这并不是原创，只是用来熟悉canvas的api。\n效果图如下：\n\n![ap](/images/loveFish.png)\n\n# 总结\n这些是我刚学Javascript不久做的东西，所以有很多地方不够完善。但是它们让我看到了Javascript强大的一面。","source":"_posts/应用平台桌面版.md","raw":"---\ntitle: 应用平台桌面版\ndate: 2016-11-15 22:16:38\ntags: \n\t- 分享\n\t- Javascript\n\n---\n\n# 简介\n\n使用web技术开发的应用平台。\n\n可以将所有应用装在一起，只需要登录一次，就能用所有的应用。效果图如下：\n\n![ap](/images/applicationPlatform.png)\n\n目前做了三个应用，音乐播放器，多人聊天室，爱心鱼游戏。下面将\n会详细介绍它们。\n\n因为我写了一小部分后台，所以运行前需要启动服务器。在下载完\n源码后，打开一个cmd窗口，进入根目录，运行代码：\n\n  ```\n  node server.js\n  ```\n\n将服务器跑起来。然后再打开一个cmd窗口，运行代码：\n\n  ```\n  npm start\n  ```\n\n\n\n应用就打开了。\n\n# 音乐播放器\n它只包含基本的功能：导入本地歌曲列表；切换一个主题；控制正在播放的歌曲。\n效果图如下：\n\n![ap](/images/musicPlayer2.png)\n\nUX方面做得不是很好，以后会更加注重这一块。\n\n\n# 聊天室\n聊天室是我觉得做得比较好的一个，因为它包含了很多功能。\n除了最基本的聊天外，还支持发一些表情，还可以设置字体，背景，以及主题。\n里面还集成了一个地图，如果是用电脑浏览器打开的，将会在地图上显示自己的\n位置。效果图如下：\n\n![ap](/images/chatRoom2.png)\n\n# 爱心鱼\n最后一个是个用js写的游戏，但这并不是原创，只是用来熟悉canvas的api。\n效果图如下：\n\n![ap](/images/loveFish.png)\n\n# 总结\n这些是我刚学Javascript不久做的东西，所以有很多地方不够完善。但是它们让我看到了Javascript强大的一面。","slug":"应用平台桌面版","published":1,"updated":"2019-03-18T06:54:11.727Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ck2vg6gws002e4cob65slnes1","content":"<h1 id=\"简介\"><a href=\"#简介\" class=\"headerlink\" title=\"简介\"></a>简介</h1><p>使用web技术开发的应用平台。</p>\n<p>可以将所有应用装在一起，只需要登录一次，就能用所有的应用。效果图如下：</p>\n<p><img src=\"/images/applicationPlatform.png\" alt=\"ap\"></p>\n<p>目前做了三个应用，音乐播放器，多人聊天室，爱心鱼游戏。下面将<br>会详细介绍它们。</p>\n<p>因为我写了一小部分后台，所以运行前需要启动服务器。在下载完<br>源码后，打开一个cmd窗口，进入根目录，运行代码：</p>\n  <figure class=\"highlight crmsh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">node</span> <span class=\"title\">server</span>.js</span><br></pre></td></tr></table></figure>\n<p>将服务器跑起来。然后再打开一个cmd窗口，运行代码：</p>\n  <figure class=\"highlight coffeescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">npm</span> start</span><br></pre></td></tr></table></figure>\n<p>应用就打开了。</p>\n<h1 id=\"音乐播放器\"><a href=\"#音乐播放器\" class=\"headerlink\" title=\"音乐播放器\"></a>音乐播放器</h1><p>它只包含基本的功能：导入本地歌曲列表；切换一个主题；控制正在播放的歌曲。<br>效果图如下：</p>\n<p><img src=\"/images/musicPlayer2.png\" alt=\"ap\"></p>\n<p>UX方面做得不是很好，以后会更加注重这一块。</p>\n<h1 id=\"聊天室\"><a href=\"#聊天室\" class=\"headerlink\" title=\"聊天室\"></a>聊天室</h1><p>聊天室是我觉得做得比较好的一个，因为它包含了很多功能。<br>除了最基本的聊天外，还支持发一些表情，还可以设置字体，背景，以及主题。<br>里面还集成了一个地图，如果是用电脑浏览器打开的，将会在地图上显示自己的<br>位置。效果图如下：</p>\n<p><img src=\"/images/chatRoom2.png\" alt=\"ap\"></p>\n<h1 id=\"爱心鱼\"><a href=\"#爱心鱼\" class=\"headerlink\" title=\"爱心鱼\"></a>爱心鱼</h1><p>最后一个是个用js写的游戏，但这并不是原创，只是用来熟悉canvas的api。<br>效果图如下：</p>\n<p><img src=\"/images/loveFish.png\" alt=\"ap\"></p>\n<h1 id=\"总结\"><a href=\"#总结\" class=\"headerlink\" title=\"总结\"></a>总结</h1><p>这些是我刚学Javascript不久做的东西，所以有很多地方不够完善。但是它们让我看到了Javascript强大的一面。</p>\n","site":{"data":{"projects":[{"name":"AiTing","url":"https://github.com/renhongl/aiting","desc":"HTML5客户端音乐播放器"},{"name":"AiLiao","url":"https://github.com/renhongl/ailiao","desc":"网页聊天软件"},{"name":"Pomelo Editor","url":"https://renhongl.github.io/markdown-editor/","desc":"功能强大的在线Markdown编辑器"}]}},"excerpt":"","more":"<h1 id=\"简介\"><a href=\"#简介\" class=\"headerlink\" title=\"简介\"></a>简介</h1><p>使用web技术开发的应用平台。</p>\n<p>可以将所有应用装在一起，只需要登录一次，就能用所有的应用。效果图如下：</p>\n<p><img src=\"/images/applicationPlatform.png\" alt=\"ap\"></p>\n<p>目前做了三个应用，音乐播放器，多人聊天室，爱心鱼游戏。下面将<br>会详细介绍它们。</p>\n<p>因为我写了一小部分后台，所以运行前需要启动服务器。在下载完<br>源码后，打开一个cmd窗口，进入根目录，运行代码：</p>\n  <figure class=\"highlight crmsh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">node</span> <span class=\"title\">server</span>.js</span><br></pre></td></tr></table></figure>\n<p>将服务器跑起来。然后再打开一个cmd窗口，运行代码：</p>\n  <figure class=\"highlight coffeescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">npm</span> start</span><br></pre></td></tr></table></figure>\n<p>应用就打开了。</p>\n<h1 id=\"音乐播放器\"><a href=\"#音乐播放器\" class=\"headerlink\" title=\"音乐播放器\"></a>音乐播放器</h1><p>它只包含基本的功能：导入本地歌曲列表；切换一个主题；控制正在播放的歌曲。<br>效果图如下：</p>\n<p><img src=\"/images/musicPlayer2.png\" alt=\"ap\"></p>\n<p>UX方面做得不是很好，以后会更加注重这一块。</p>\n<h1 id=\"聊天室\"><a href=\"#聊天室\" class=\"headerlink\" title=\"聊天室\"></a>聊天室</h1><p>聊天室是我觉得做得比较好的一个，因为它包含了很多功能。<br>除了最基本的聊天外，还支持发一些表情，还可以设置字体，背景，以及主题。<br>里面还集成了一个地图，如果是用电脑浏览器打开的，将会在地图上显示自己的<br>位置。效果图如下：</p>\n<p><img src=\"/images/chatRoom2.png\" alt=\"ap\"></p>\n<h1 id=\"爱心鱼\"><a href=\"#爱心鱼\" class=\"headerlink\" title=\"爱心鱼\"></a>爱心鱼</h1><p>最后一个是个用js写的游戏，但这并不是原创，只是用来熟悉canvas的api。<br>效果图如下：</p>\n<p><img src=\"/images/loveFish.png\" alt=\"ap\"></p>\n<h1 id=\"总结\"><a href=\"#总结\" class=\"headerlink\" title=\"总结\"></a>总结</h1><p>这些是我刚学Javascript不久做的东西，所以有很多地方不够完善。但是它们让我看到了Javascript强大的一面。</p>\n"},{"title":"数值的扩展","date":"2017-07-16T13:16:52.000Z","_content":"\n\n\n\n# 使用0b和0o表示二进制和八进制\n\n\n```js\n0b111 === 7;\n0o10 === 8;\n```\n\n# Number新API\n\n```js\nNumber.isFinite();\nNumber.isNaN();\nNumber.parseInt();\nNumber.parseFloat();\nNumber.isInteger();\nNumber.isSafeInteget();\n```\n\n# Math扩展API\n\n```js\nMath.trunc(); //去除一个数的小数部分，返回整数部分。\nMath.sign(); //整数返回1，负数返回-1,0返回0，-0返回-0，其他返回NaN\nMath.cbrt(); //计算立方根\n\n```\n\n","source":"_posts/数值的扩展.md","raw":"---\ntitle: 数值的扩展\ndate: 2017-07-16 21:16:52\ntags: ES6\n---\n\n\n\n\n# 使用0b和0o表示二进制和八进制\n\n\n```js\n0b111 === 7;\n0o10 === 8;\n```\n\n# Number新API\n\n```js\nNumber.isFinite();\nNumber.isNaN();\nNumber.parseInt();\nNumber.parseFloat();\nNumber.isInteger();\nNumber.isSafeInteget();\n```\n\n# Math扩展API\n\n```js\nMath.trunc(); //去除一个数的小数部分，返回整数部分。\nMath.sign(); //整数返回1，负数返回-1,0返回0，-0返回-0，其他返回NaN\nMath.cbrt(); //计算立方根\n\n```\n\n","slug":"数值的扩展","published":1,"updated":"2019-03-18T06:52:32.134Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ck2vg6gwu002g4cobyk7ln8m2","content":"<h1 id=\"使用0b和0o表示二进制和八进制\"><a href=\"#使用0b和0o表示二进制和八进制\" class=\"headerlink\" title=\"使用0b和0o表示二进制和八进制\"></a>使用0b和0o表示二进制和八进制</h1><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"number\">0b111</span> === <span class=\"number\">7</span>;</span><br><span class=\"line\"><span class=\"number\">0o10</span> === <span class=\"number\">8</span>;</span><br></pre></td></tr></table></figure>\n<h1 id=\"Number新API\"><a href=\"#Number新API\" class=\"headerlink\" title=\"Number新API\"></a>Number新API</h1><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">Number</span>.isFinite();</span><br><span class=\"line\"><span class=\"built_in\">Number</span>.isNaN();</span><br><span class=\"line\"><span class=\"built_in\">Number</span>.parseInt();</span><br><span class=\"line\"><span class=\"built_in\">Number</span>.parseFloat();</span><br><span class=\"line\"><span class=\"built_in\">Number</span>.isInteger();</span><br><span class=\"line\"><span class=\"built_in\">Number</span>.isSafeInteget();</span><br></pre></td></tr></table></figure>\n<h1 id=\"Math扩展API\"><a href=\"#Math扩展API\" class=\"headerlink\" title=\"Math扩展API\"></a>Math扩展API</h1><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">Math</span>.trunc(); <span class=\"comment\">//去除一个数的小数部分，返回整数部分。</span></span><br><span class=\"line\"><span class=\"built_in\">Math</span>.sign(); <span class=\"comment\">//整数返回1，负数返回-1,0返回0，-0返回-0，其他返回NaN</span></span><br><span class=\"line\"><span class=\"built_in\">Math</span>.cbrt(); <span class=\"comment\">//计算立方根</span></span><br></pre></td></tr></table></figure>\n","site":{"data":{"projects":[{"name":"AiTing","url":"https://github.com/renhongl/aiting","desc":"HTML5客户端音乐播放器"},{"name":"AiLiao","url":"https://github.com/renhongl/ailiao","desc":"网页聊天软件"},{"name":"Pomelo Editor","url":"https://renhongl.github.io/markdown-editor/","desc":"功能强大的在线Markdown编辑器"}]}},"excerpt":"","more":"<h1 id=\"使用0b和0o表示二进制和八进制\"><a href=\"#使用0b和0o表示二进制和八进制\" class=\"headerlink\" title=\"使用0b和0o表示二进制和八进制\"></a>使用0b和0o表示二进制和八进制</h1><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"number\">0b111</span> === <span class=\"number\">7</span>;</span><br><span class=\"line\"><span class=\"number\">0o10</span> === <span class=\"number\">8</span>;</span><br></pre></td></tr></table></figure>\n<h1 id=\"Number新API\"><a href=\"#Number新API\" class=\"headerlink\" title=\"Number新API\"></a>Number新API</h1><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">Number</span>.isFinite();</span><br><span class=\"line\"><span class=\"built_in\">Number</span>.isNaN();</span><br><span class=\"line\"><span class=\"built_in\">Number</span>.parseInt();</span><br><span class=\"line\"><span class=\"built_in\">Number</span>.parseFloat();</span><br><span class=\"line\"><span class=\"built_in\">Number</span>.isInteger();</span><br><span class=\"line\"><span class=\"built_in\">Number</span>.isSafeInteget();</span><br></pre></td></tr></table></figure>\n<h1 id=\"Math扩展API\"><a href=\"#Math扩展API\" class=\"headerlink\" title=\"Math扩展API\"></a>Math扩展API</h1><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">Math</span>.trunc(); <span class=\"comment\">//去除一个数的小数部分，返回整数部分。</span></span><br><span class=\"line\"><span class=\"built_in\">Math</span>.sign(); <span class=\"comment\">//整数返回1，负数返回-1,0返回0，-0返回-0，其他返回NaN</span></span><br><span class=\"line\"><span class=\"built_in\">Math</span>.cbrt(); <span class=\"comment\">//计算立方根</span></span><br></pre></td></tr></table></figure>\n"},{"title":"数组的扩展","date":"2017-07-18T13:16:52.000Z","_content":"\n\n\n# Array.from()\n\n\n\nArray.from()方法用于将**类似数组的对象**和**可遍历的对象**转为真正的数组。\n\n**而扩展运算符只能将部署了Iterator接口的对象（可遍历对象）转换成数组。**\n\n可转换对象包括：\n\n1. 类数组对象DOM集合\n2. 类数组对象arguments\n3. 部署了Iterator接口的Set和Map\n\n# Array.of()\n\nArray.of()方法用于将一组值转换为数组。因为数组的构造函数Array()在传入一个或多个参数时，创建的行为有差异。\n\n# find()方法和findIndex()方法\n\n用于找出第一个符合条件的数组成员，它的第一个参数是回调函数，可用于自定义查找方法。第二个参数可用于绑定this。它们都可以发现NaN，用于替代indexOf。\n\n```js\n[NaN].indexOf(NaN);//-1\n[NaN].findIndex(n => Object.is(NaN, n));//0\n```\n\n# keys(),values()和entries()方法\n\n用于返回遍历器对象，可以使用for...of循环遍历。默认调用values()方法返回遍历器对象。\n\n# includes()\n\n用于表示某个数组是否包含给定值，可用于代替indexOf(),在不需要回调函数增加查找条件时，用includes()代替findIndex()。\n\n```js\n[NaN].includes(NaN);//true\n```\n\n","source":"_posts/数组的扩展.md","raw":"\n---\ntitle: 数组的扩展\ndate: 2017-07-18 21:16:52\ntags: ES6\n---\n\n\n\n# Array.from()\n\n\n\nArray.from()方法用于将**类似数组的对象**和**可遍历的对象**转为真正的数组。\n\n**而扩展运算符只能将部署了Iterator接口的对象（可遍历对象）转换成数组。**\n\n可转换对象包括：\n\n1. 类数组对象DOM集合\n2. 类数组对象arguments\n3. 部署了Iterator接口的Set和Map\n\n# Array.of()\n\nArray.of()方法用于将一组值转换为数组。因为数组的构造函数Array()在传入一个或多个参数时，创建的行为有差异。\n\n# find()方法和findIndex()方法\n\n用于找出第一个符合条件的数组成员，它的第一个参数是回调函数，可用于自定义查找方法。第二个参数可用于绑定this。它们都可以发现NaN，用于替代indexOf。\n\n```js\n[NaN].indexOf(NaN);//-1\n[NaN].findIndex(n => Object.is(NaN, n));//0\n```\n\n# keys(),values()和entries()方法\n\n用于返回遍历器对象，可以使用for...of循环遍历。默认调用values()方法返回遍历器对象。\n\n# includes()\n\n用于表示某个数组是否包含给定值，可用于代替indexOf(),在不需要回调函数增加查找条件时，用includes()代替findIndex()。\n\n```js\n[NaN].includes(NaN);//true\n```\n\n","slug":"数组的扩展","published":1,"updated":"2019-03-18T06:51:24.716Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ck2vg6gwx002j4cob82immsxf","content":"<h1 id=\"Array-from\"><a href=\"#Array-from\" class=\"headerlink\" title=\"Array.from()\"></a>Array.from()</h1><p>Array.from()方法用于将<strong>类似数组的对象</strong>和<strong>可遍历的对象</strong>转为真正的数组。</p>\n<p><strong>而扩展运算符只能将部署了Iterator接口的对象（可遍历对象）转换成数组。</strong></p>\n<p>可转换对象包括：</p>\n<ol>\n<li>类数组对象DOM集合</li>\n<li>类数组对象arguments</li>\n<li>部署了Iterator接口的Set和Map</li>\n</ol>\n<h1 id=\"Array-of\"><a href=\"#Array-of\" class=\"headerlink\" title=\"Array.of()\"></a>Array.of()</h1><p>Array.of()方法用于将一组值转换为数组。因为数组的构造函数Array()在传入一个或多个参数时，创建的行为有差异。</p>\n<h1 id=\"find-方法和findIndex-方法\"><a href=\"#find-方法和findIndex-方法\" class=\"headerlink\" title=\"find()方法和findIndex()方法\"></a>find()方法和findIndex()方法</h1><p>用于找出第一个符合条件的数组成员，它的第一个参数是回调函数，可用于自定义查找方法。第二个参数可用于绑定this。它们都可以发现NaN，用于替代indexOf。</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[<span class=\"literal\">NaN</span>].indexOf(<span class=\"literal\">NaN</span>);<span class=\"comment\">//-1</span></span><br><span class=\"line\">[<span class=\"literal\">NaN</span>].findIndex(<span class=\"function\"><span class=\"params\">n</span> =&gt;</span> <span class=\"built_in\">Object</span>.is(<span class=\"literal\">NaN</span>, n));<span class=\"comment\">//0</span></span><br></pre></td></tr></table></figure>\n<h1 id=\"keys-values-和entries-方法\"><a href=\"#keys-values-和entries-方法\" class=\"headerlink\" title=\"keys(),values()和entries()方法\"></a>keys(),values()和entries()方法</h1><p>用于返回遍历器对象，可以使用for…of循环遍历。默认调用values()方法返回遍历器对象。</p>\n<h1 id=\"includes\"><a href=\"#includes\" class=\"headerlink\" title=\"includes()\"></a>includes()</h1><p>用于表示某个数组是否包含给定值，可用于代替indexOf(),在不需要回调函数增加查找条件时，用includes()代替findIndex()。</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[<span class=\"literal\">NaN</span>].includes(<span class=\"literal\">NaN</span>);<span class=\"comment\">//true</span></span><br></pre></td></tr></table></figure>\n","site":{"data":{"projects":[{"name":"AiTing","url":"https://github.com/renhongl/aiting","desc":"HTML5客户端音乐播放器"},{"name":"AiLiao","url":"https://github.com/renhongl/ailiao","desc":"网页聊天软件"},{"name":"Pomelo Editor","url":"https://renhongl.github.io/markdown-editor/","desc":"功能强大的在线Markdown编辑器"}]}},"excerpt":"","more":"<h1 id=\"Array-from\"><a href=\"#Array-from\" class=\"headerlink\" title=\"Array.from()\"></a>Array.from()</h1><p>Array.from()方法用于将<strong>类似数组的对象</strong>和<strong>可遍历的对象</strong>转为真正的数组。</p>\n<p><strong>而扩展运算符只能将部署了Iterator接口的对象（可遍历对象）转换成数组。</strong></p>\n<p>可转换对象包括：</p>\n<ol>\n<li>类数组对象DOM集合</li>\n<li>类数组对象arguments</li>\n<li>部署了Iterator接口的Set和Map</li>\n</ol>\n<h1 id=\"Array-of\"><a href=\"#Array-of\" class=\"headerlink\" title=\"Array.of()\"></a>Array.of()</h1><p>Array.of()方法用于将一组值转换为数组。因为数组的构造函数Array()在传入一个或多个参数时，创建的行为有差异。</p>\n<h1 id=\"find-方法和findIndex-方法\"><a href=\"#find-方法和findIndex-方法\" class=\"headerlink\" title=\"find()方法和findIndex()方法\"></a>find()方法和findIndex()方法</h1><p>用于找出第一个符合条件的数组成员，它的第一个参数是回调函数，可用于自定义查找方法。第二个参数可用于绑定this。它们都可以发现NaN，用于替代indexOf。</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[<span class=\"literal\">NaN</span>].indexOf(<span class=\"literal\">NaN</span>);<span class=\"comment\">//-1</span></span><br><span class=\"line\">[<span class=\"literal\">NaN</span>].findIndex(<span class=\"function\"><span class=\"params\">n</span> =&gt;</span> <span class=\"built_in\">Object</span>.is(<span class=\"literal\">NaN</span>, n));<span class=\"comment\">//0</span></span><br></pre></td></tr></table></figure>\n<h1 id=\"keys-values-和entries-方法\"><a href=\"#keys-values-和entries-方法\" class=\"headerlink\" title=\"keys(),values()和entries()方法\"></a>keys(),values()和entries()方法</h1><p>用于返回遍历器对象，可以使用for…of循环遍历。默认调用values()方法返回遍历器对象。</p>\n<h1 id=\"includes\"><a href=\"#includes\" class=\"headerlink\" title=\"includes()\"></a>includes()</h1><p>用于表示某个数组是否包含给定值，可用于代替indexOf(),在不需要回调函数增加查找条件时，用includes()代替findIndex()。</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[<span class=\"literal\">NaN</span>].includes(<span class=\"literal\">NaN</span>);<span class=\"comment\">//true</span></span><br></pre></td></tr></table></figure>\n"},{"title":"状态模式","date":"2018-05-26T13:54:32.000Z","_content":"\n\n\n# 什么是状态模式\n在状态模式（State Pattern）中，类的行为是基于它的状态改变的。这种类型的设计模式属于行为型模式。\n\n在状态模式中，我们创建表示各种状态的对象和一个行为随着状态对象改变而改变的 context 对象。\n\n\n\n# 面向对象例子：\n\n```js\nclass BasicState{\n\tconstructor(control) {\n\t\tthis.control = control;\n\t}\n\t\n\tbtnWasPressed(dom) {\n\t\tthrow new Error('Basic function must be rewrite');\n\t}\n  \n\tstopWasPressed(dom) {\n\t\tthrow new Error('Basic function must be rewrite');\n\t}\n}\n\nclass StopState extends BasicState{\n\tconstructor(control) {\n\t\tsuper(control);\n\t}\n\n\tbtnWasPressed(dom) {\n\t\tconsole.log('starting play');\n\t\tdom.innerText = 'pause';\n\t\tthis.control.setState(this.control.playState);\n\t}\n\n\tstopWasPressed(dom) {\n\t\tconsole.log('stoped');\n\t\tdom.innerText = 'start';\n\t\tthis.control.setState(this.control.stopState);\n\t}\n}\n\nclass PlayState extends BasicState{\n\tconstructor(control) {\n\t\tsuper(control);\n\t}\n\n\tbtnWasPressed(dom) {\n\t\tconsole.log('paused');\n\t\tdom.innerText = 'start';\n\t\tthis.control.setState(this.control.pauseState);\n\t}\n\n\tstopWasPressed(dom) {\n\t\tconsole.log('stoped');\n\t\tdom.innerText = 'start';\n\t\tthis.control.setState(this.control.stopState);\n\t}\n}\n\n  \n\nclass PauseState extends BasicState{\n\tconstructor(control) {\n\t\tsuper(control);\n\t}\n\n\tbtnWasPressed(dom) {\n\t\tconsole.log('starting play');\n\t\tdom.innerText = 'pause';\n\t\tthis.control.setState(this.control.playState);\n\t}\n\n\tstopWasPressed(dom) {\n\t\tconsole.log('stoped');\n\t\tdom.innerText = 'start';\n\t\tthis.control.setState(this.control.stopState);\n\t}\n}\n\n  \n\nexport default class Control{\n\tconstructor() {\n\t\tthis.stopState = new StopState(this);\n\t\tthis.playState = new PlayState(this);\n\t\tthis.pauseState = new PauseState(this);\n\t\tthis.currentState = this.stopState;\n\t}\n\n\tsetState(state) {\n\t\tthis.currentState = state;\n\t}\n}\n```\n","source":"_posts/状态模式.md","raw":"---\ntitle: 状态模式\ndate: 2018-05-26 21:54:32\ntags:\n\t- Javascript设计模式\n---\n\n\n\n# 什么是状态模式\n在状态模式（State Pattern）中，类的行为是基于它的状态改变的。这种类型的设计模式属于行为型模式。\n\n在状态模式中，我们创建表示各种状态的对象和一个行为随着状态对象改变而改变的 context 对象。\n\n\n\n# 面向对象例子：\n\n```js\nclass BasicState{\n\tconstructor(control) {\n\t\tthis.control = control;\n\t}\n\t\n\tbtnWasPressed(dom) {\n\t\tthrow new Error('Basic function must be rewrite');\n\t}\n  \n\tstopWasPressed(dom) {\n\t\tthrow new Error('Basic function must be rewrite');\n\t}\n}\n\nclass StopState extends BasicState{\n\tconstructor(control) {\n\t\tsuper(control);\n\t}\n\n\tbtnWasPressed(dom) {\n\t\tconsole.log('starting play');\n\t\tdom.innerText = 'pause';\n\t\tthis.control.setState(this.control.playState);\n\t}\n\n\tstopWasPressed(dom) {\n\t\tconsole.log('stoped');\n\t\tdom.innerText = 'start';\n\t\tthis.control.setState(this.control.stopState);\n\t}\n}\n\nclass PlayState extends BasicState{\n\tconstructor(control) {\n\t\tsuper(control);\n\t}\n\n\tbtnWasPressed(dom) {\n\t\tconsole.log('paused');\n\t\tdom.innerText = 'start';\n\t\tthis.control.setState(this.control.pauseState);\n\t}\n\n\tstopWasPressed(dom) {\n\t\tconsole.log('stoped');\n\t\tdom.innerText = 'start';\n\t\tthis.control.setState(this.control.stopState);\n\t}\n}\n\n  \n\nclass PauseState extends BasicState{\n\tconstructor(control) {\n\t\tsuper(control);\n\t}\n\n\tbtnWasPressed(dom) {\n\t\tconsole.log('starting play');\n\t\tdom.innerText = 'pause';\n\t\tthis.control.setState(this.control.playState);\n\t}\n\n\tstopWasPressed(dom) {\n\t\tconsole.log('stoped');\n\t\tdom.innerText = 'start';\n\t\tthis.control.setState(this.control.stopState);\n\t}\n}\n\n  \n\nexport default class Control{\n\tconstructor() {\n\t\tthis.stopState = new StopState(this);\n\t\tthis.playState = new PlayState(this);\n\t\tthis.pauseState = new PauseState(this);\n\t\tthis.currentState = this.stopState;\n\t}\n\n\tsetState(state) {\n\t\tthis.currentState = state;\n\t}\n}\n```\n","slug":"状态模式","published":1,"updated":"2019-11-04T07:00:33.225Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ck2vg6gwz002l4cob37vt9iro","content":"<h1 id=\"什么是状态模式\"><a href=\"#什么是状态模式\" class=\"headerlink\" title=\"什么是状态模式\"></a>什么是状态模式</h1><p>在状态模式（State Pattern）中，类的行为是基于它的状态改变的。这种类型的设计模式属于行为型模式。</p>\n<p>在状态模式中，我们创建表示各种状态的对象和一个行为随着状态对象改变而改变的 context 对象。</p>\n<h1 id=\"面向对象例子：\"><a href=\"#面向对象例子：\" class=\"headerlink\" title=\"面向对象例子：\"></a>面向对象例子：</h1><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">BasicState</span></span>&#123;</span><br><span class=\"line\">\t<span class=\"keyword\">constructor</span>(control) &#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">this</span>.control = control;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t</span><br><span class=\"line\">\tbtnWasPressed(dom) &#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> <span class=\"built_in\">Error</span>(<span class=\"string\">'Basic function must be rewrite'</span>);</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">  </span><br><span class=\"line\">\tstopWasPressed(dom) &#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> <span class=\"built_in\">Error</span>(<span class=\"string\">'Basic function must be rewrite'</span>);</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">StopState</span> <span class=\"keyword\">extends</span> <span class=\"title\">BasicState</span></span>&#123;</span><br><span class=\"line\">\t<span class=\"keyword\">constructor</span>(control) &#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">super</span>(control);</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\tbtnWasPressed(dom) &#123;</span><br><span class=\"line\">\t\t<span class=\"built_in\">console</span>.log(<span class=\"string\">'starting play'</span>);</span><br><span class=\"line\">\t\tdom.innerText = <span class=\"string\">'pause'</span>;</span><br><span class=\"line\">\t\t<span class=\"keyword\">this</span>.control.setState(<span class=\"keyword\">this</span>.control.playState);</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\tstopWasPressed(dom) &#123;</span><br><span class=\"line\">\t\t<span class=\"built_in\">console</span>.log(<span class=\"string\">'stoped'</span>);</span><br><span class=\"line\">\t\tdom.innerText = <span class=\"string\">'start'</span>;</span><br><span class=\"line\">\t\t<span class=\"keyword\">this</span>.control.setState(<span class=\"keyword\">this</span>.control.stopState);</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">PlayState</span> <span class=\"keyword\">extends</span> <span class=\"title\">BasicState</span></span>&#123;</span><br><span class=\"line\">\t<span class=\"keyword\">constructor</span>(control) &#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">super</span>(control);</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\tbtnWasPressed(dom) &#123;</span><br><span class=\"line\">\t\t<span class=\"built_in\">console</span>.log(<span class=\"string\">'paused'</span>);</span><br><span class=\"line\">\t\tdom.innerText = <span class=\"string\">'start'</span>;</span><br><span class=\"line\">\t\t<span class=\"keyword\">this</span>.control.setState(<span class=\"keyword\">this</span>.control.pauseState);</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\tstopWasPressed(dom) &#123;</span><br><span class=\"line\">\t\t<span class=\"built_in\">console</span>.log(<span class=\"string\">'stoped'</span>);</span><br><span class=\"line\">\t\tdom.innerText = <span class=\"string\">'start'</span>;</span><br><span class=\"line\">\t\t<span class=\"keyword\">this</span>.control.setState(<span class=\"keyword\">this</span>.control.stopState);</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  </span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">PauseState</span> <span class=\"keyword\">extends</span> <span class=\"title\">BasicState</span></span>&#123;</span><br><span class=\"line\">\t<span class=\"keyword\">constructor</span>(control) &#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">super</span>(control);</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\tbtnWasPressed(dom) &#123;</span><br><span class=\"line\">\t\t<span class=\"built_in\">console</span>.log(<span class=\"string\">'starting play'</span>);</span><br><span class=\"line\">\t\tdom.innerText = <span class=\"string\">'pause'</span>;</span><br><span class=\"line\">\t\t<span class=\"keyword\">this</span>.control.setState(<span class=\"keyword\">this</span>.control.playState);</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\tstopWasPressed(dom) &#123;</span><br><span class=\"line\">\t\t<span class=\"built_in\">console</span>.log(<span class=\"string\">'stoped'</span>);</span><br><span class=\"line\">\t\tdom.innerText = <span class=\"string\">'start'</span>;</span><br><span class=\"line\">\t\t<span class=\"keyword\">this</span>.control.setState(<span class=\"keyword\">this</span>.control.stopState);</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  </span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">default</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Control</span></span>&#123;</span><br><span class=\"line\">\t<span class=\"keyword\">constructor</span>() &#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">this</span>.stopState = <span class=\"keyword\">new</span> StopState(<span class=\"keyword\">this</span>);</span><br><span class=\"line\">\t\t<span class=\"keyword\">this</span>.playState = <span class=\"keyword\">new</span> PlayState(<span class=\"keyword\">this</span>);</span><br><span class=\"line\">\t\t<span class=\"keyword\">this</span>.pauseState = <span class=\"keyword\">new</span> PauseState(<span class=\"keyword\">this</span>);</span><br><span class=\"line\">\t\t<span class=\"keyword\">this</span>.currentState = <span class=\"keyword\">this</span>.stopState;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\tsetState(state) &#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">this</span>.currentState = state;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n","site":{"data":{"projects":[{"name":"AiTing","url":"https://github.com/renhongl/aiting","desc":"HTML5客户端音乐播放器"},{"name":"AiLiao","url":"https://github.com/renhongl/ailiao","desc":"网页聊天软件"},{"name":"Pomelo Editor","url":"https://renhongl.github.io/markdown-editor/","desc":"功能强大的在线Markdown编辑器"}]}},"excerpt":"","more":"<h1 id=\"什么是状态模式\"><a href=\"#什么是状态模式\" class=\"headerlink\" title=\"什么是状态模式\"></a>什么是状态模式</h1><p>在状态模式（State Pattern）中，类的行为是基于它的状态改变的。这种类型的设计模式属于行为型模式。</p>\n<p>在状态模式中，我们创建表示各种状态的对象和一个行为随着状态对象改变而改变的 context 对象。</p>\n<h1 id=\"面向对象例子：\"><a href=\"#面向对象例子：\" class=\"headerlink\" title=\"面向对象例子：\"></a>面向对象例子：</h1><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">BasicState</span></span>&#123;</span><br><span class=\"line\">\t<span class=\"keyword\">constructor</span>(control) &#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">this</span>.control = control;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t</span><br><span class=\"line\">\tbtnWasPressed(dom) &#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> <span class=\"built_in\">Error</span>(<span class=\"string\">'Basic function must be rewrite'</span>);</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">  </span><br><span class=\"line\">\tstopWasPressed(dom) &#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> <span class=\"built_in\">Error</span>(<span class=\"string\">'Basic function must be rewrite'</span>);</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">StopState</span> <span class=\"keyword\">extends</span> <span class=\"title\">BasicState</span></span>&#123;</span><br><span class=\"line\">\t<span class=\"keyword\">constructor</span>(control) &#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">super</span>(control);</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\tbtnWasPressed(dom) &#123;</span><br><span class=\"line\">\t\t<span class=\"built_in\">console</span>.log(<span class=\"string\">'starting play'</span>);</span><br><span class=\"line\">\t\tdom.innerText = <span class=\"string\">'pause'</span>;</span><br><span class=\"line\">\t\t<span class=\"keyword\">this</span>.control.setState(<span class=\"keyword\">this</span>.control.playState);</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\tstopWasPressed(dom) &#123;</span><br><span class=\"line\">\t\t<span class=\"built_in\">console</span>.log(<span class=\"string\">'stoped'</span>);</span><br><span class=\"line\">\t\tdom.innerText = <span class=\"string\">'start'</span>;</span><br><span class=\"line\">\t\t<span class=\"keyword\">this</span>.control.setState(<span class=\"keyword\">this</span>.control.stopState);</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">PlayState</span> <span class=\"keyword\">extends</span> <span class=\"title\">BasicState</span></span>&#123;</span><br><span class=\"line\">\t<span class=\"keyword\">constructor</span>(control) &#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">super</span>(control);</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\tbtnWasPressed(dom) &#123;</span><br><span class=\"line\">\t\t<span class=\"built_in\">console</span>.log(<span class=\"string\">'paused'</span>);</span><br><span class=\"line\">\t\tdom.innerText = <span class=\"string\">'start'</span>;</span><br><span class=\"line\">\t\t<span class=\"keyword\">this</span>.control.setState(<span class=\"keyword\">this</span>.control.pauseState);</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\tstopWasPressed(dom) &#123;</span><br><span class=\"line\">\t\t<span class=\"built_in\">console</span>.log(<span class=\"string\">'stoped'</span>);</span><br><span class=\"line\">\t\tdom.innerText = <span class=\"string\">'start'</span>;</span><br><span class=\"line\">\t\t<span class=\"keyword\">this</span>.control.setState(<span class=\"keyword\">this</span>.control.stopState);</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  </span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">PauseState</span> <span class=\"keyword\">extends</span> <span class=\"title\">BasicState</span></span>&#123;</span><br><span class=\"line\">\t<span class=\"keyword\">constructor</span>(control) &#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">super</span>(control);</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\tbtnWasPressed(dom) &#123;</span><br><span class=\"line\">\t\t<span class=\"built_in\">console</span>.log(<span class=\"string\">'starting play'</span>);</span><br><span class=\"line\">\t\tdom.innerText = <span class=\"string\">'pause'</span>;</span><br><span class=\"line\">\t\t<span class=\"keyword\">this</span>.control.setState(<span class=\"keyword\">this</span>.control.playState);</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\tstopWasPressed(dom) &#123;</span><br><span class=\"line\">\t\t<span class=\"built_in\">console</span>.log(<span class=\"string\">'stoped'</span>);</span><br><span class=\"line\">\t\tdom.innerText = <span class=\"string\">'start'</span>;</span><br><span class=\"line\">\t\t<span class=\"keyword\">this</span>.control.setState(<span class=\"keyword\">this</span>.control.stopState);</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  </span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">default</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Control</span></span>&#123;</span><br><span class=\"line\">\t<span class=\"keyword\">constructor</span>() &#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">this</span>.stopState = <span class=\"keyword\">new</span> StopState(<span class=\"keyword\">this</span>);</span><br><span class=\"line\">\t\t<span class=\"keyword\">this</span>.playState = <span class=\"keyword\">new</span> PlayState(<span class=\"keyword\">this</span>);</span><br><span class=\"line\">\t\t<span class=\"keyword\">this</span>.pauseState = <span class=\"keyword\">new</span> PauseState(<span class=\"keyword\">this</span>);</span><br><span class=\"line\">\t\t<span class=\"keyword\">this</span>.currentState = <span class=\"keyword\">this</span>.stopState;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\tsetState(state) &#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">this</span>.currentState = state;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n"},{"title":"爱听播放器","date":"2017-01-21T03:40:40.000Z","_content":"\n\n![AiTing](/images/aiting1.png)\n\n\n# 简介\n\n一个简洁、好看、功能丰富的歌曲，书籍播放器。\n\n\n# 下载\n\n可以直接下载我打包好的windows版本： [点击这里下载免安装版爱听播放器](http://www.demodashi.com/demo/12542.html), [Github点赞](https://github.com/renhongl/AiTing)。\n\n\n# 自己打包\n\n* 运行`npm install`安装依赖。\n\n* 依赖中没有包含打包工具，可以使用`npm install electron-packager -g`，在全局安装打包模块。\n* 使用终端进入根目录，运行`npm run package`。\n* 接着在根目录会生成**AiTing-win32-x64**文件，进入此目录，双击**AiTing.exe**即可运行此软件。\n\n# 功能展示\n\n本软件是在网页中抓的API，音乐播放抓的是酷狗的API，书籍播放抓的是懒人听书的API。主要抓了搜索功能和基本推荐功能。\n\n## 音乐播放\n\n![AiTing](/images/aiting3.png)\n\n这是音乐主页，展示了推荐歌曲分类，以及热门歌手推荐。\n\n![AiTing](/images/aiting2.png)\n\n这是音乐搜索结果界面。\n\n![AiTing](/images/aiting4.png)\n\n这是歌词界面。\n\n## 书籍播放\n\n![AiTing](/images/aiting5.png)\n\n这是书籍的推荐页面。\n\n![AiTing](/images/aiting6.png)\n\n这是书籍搜索结果界面。\n\n![AiTing](/images/aiting7.png)\n\n由于书籍章节的搜索很慢，所以使用分页显示的方式。\n\n# 使用技术\n\nJavascript, Electron, Webpack, React.\n\n","source":"_posts/爱听播放器.md","raw":"---\ntitle: 爱听播放器\ndate: 2017-01-21 11:40:40\ntags:\n\t- 分享 \n\t- Javascript\n\t- React\n\t- Electron\n---\n\n\n![AiTing](/images/aiting1.png)\n\n\n# 简介\n\n一个简洁、好看、功能丰富的歌曲，书籍播放器。\n\n\n# 下载\n\n可以直接下载我打包好的windows版本： [点击这里下载免安装版爱听播放器](http://www.demodashi.com/demo/12542.html), [Github点赞](https://github.com/renhongl/AiTing)。\n\n\n# 自己打包\n\n* 运行`npm install`安装依赖。\n\n* 依赖中没有包含打包工具，可以使用`npm install electron-packager -g`，在全局安装打包模块。\n* 使用终端进入根目录，运行`npm run package`。\n* 接着在根目录会生成**AiTing-win32-x64**文件，进入此目录，双击**AiTing.exe**即可运行此软件。\n\n# 功能展示\n\n本软件是在网页中抓的API，音乐播放抓的是酷狗的API，书籍播放抓的是懒人听书的API。主要抓了搜索功能和基本推荐功能。\n\n## 音乐播放\n\n![AiTing](/images/aiting3.png)\n\n这是音乐主页，展示了推荐歌曲分类，以及热门歌手推荐。\n\n![AiTing](/images/aiting2.png)\n\n这是音乐搜索结果界面。\n\n![AiTing](/images/aiting4.png)\n\n这是歌词界面。\n\n## 书籍播放\n\n![AiTing](/images/aiting5.png)\n\n这是书籍的推荐页面。\n\n![AiTing](/images/aiting6.png)\n\n这是书籍搜索结果界面。\n\n![AiTing](/images/aiting7.png)\n\n由于书籍章节的搜索很慢，所以使用分页显示的方式。\n\n# 使用技术\n\nJavascript, Electron, Webpack, React.\n\n","slug":"爱听播放器","published":1,"updated":"2019-03-18T06:49:03.846Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ck2vg6gx2002o4cobdfa6a142","content":"<p><img src=\"/images/aiting1.png\" alt=\"AiTing\"></p>\n<h1 id=\"简介\"><a href=\"#简介\" class=\"headerlink\" title=\"简介\"></a>简介</h1><p>一个简洁、好看、功能丰富的歌曲，书籍播放器。</p>\n<h1 id=\"下载\"><a href=\"#下载\" class=\"headerlink\" title=\"下载\"></a>下载</h1><p>可以直接下载我打包好的windows版本： <a href=\"http://www.demodashi.com/demo/12542.html\" target=\"_blank\" rel=\"noopener\">点击这里下载免安装版爱听播放器</a>, <a href=\"https://github.com/renhongl/AiTing\">Github点赞</a>。</p>\n<h1 id=\"自己打包\"><a href=\"#自己打包\" class=\"headerlink\" title=\"自己打包\"></a>自己打包</h1><ul>\n<li><p>运行<code>npm install</code>安装依赖。</p>\n</li>\n<li><p>依赖中没有包含打包工具，可以使用<code>npm install electron-packager -g</code>，在全局安装打包模块。</p>\n</li>\n<li>使用终端进入根目录，运行<code>npm run package</code>。</li>\n<li>接着在根目录会生成<strong>AiTing-win32-x64</strong>文件，进入此目录，双击<strong>AiTing.exe</strong>即可运行此软件。</li>\n</ul>\n<h1 id=\"功能展示\"><a href=\"#功能展示\" class=\"headerlink\" title=\"功能展示\"></a>功能展示</h1><p>本软件是在网页中抓的API，音乐播放抓的是酷狗的API，书籍播放抓的是懒人听书的API。主要抓了搜索功能和基本推荐功能。</p>\n<h2 id=\"音乐播放\"><a href=\"#音乐播放\" class=\"headerlink\" title=\"音乐播放\"></a>音乐播放</h2><p><img src=\"/images/aiting3.png\" alt=\"AiTing\"></p>\n<p>这是音乐主页，展示了推荐歌曲分类，以及热门歌手推荐。</p>\n<p><img src=\"/images/aiting2.png\" alt=\"AiTing\"></p>\n<p>这是音乐搜索结果界面。</p>\n<p><img src=\"/images/aiting4.png\" alt=\"AiTing\"></p>\n<p>这是歌词界面。</p>\n<h2 id=\"书籍播放\"><a href=\"#书籍播放\" class=\"headerlink\" title=\"书籍播放\"></a>书籍播放</h2><p><img src=\"/images/aiting5.png\" alt=\"AiTing\"></p>\n<p>这是书籍的推荐页面。</p>\n<p><img src=\"/images/aiting6.png\" alt=\"AiTing\"></p>\n<p>这是书籍搜索结果界面。</p>\n<p><img src=\"/images/aiting7.png\" alt=\"AiTing\"></p>\n<p>由于书籍章节的搜索很慢，所以使用分页显示的方式。</p>\n<h1 id=\"使用技术\"><a href=\"#使用技术\" class=\"headerlink\" title=\"使用技术\"></a>使用技术</h1><p>Javascript, Electron, Webpack, React.</p>\n","site":{"data":{"projects":[{"name":"AiTing","url":"https://github.com/renhongl/aiting","desc":"HTML5客户端音乐播放器"},{"name":"AiLiao","url":"https://github.com/renhongl/ailiao","desc":"网页聊天软件"},{"name":"Pomelo Editor","url":"https://renhongl.github.io/markdown-editor/","desc":"功能强大的在线Markdown编辑器"}]}},"excerpt":"","more":"<p><img src=\"/images/aiting1.png\" alt=\"AiTing\"></p>\n<h1 id=\"简介\"><a href=\"#简介\" class=\"headerlink\" title=\"简介\"></a>简介</h1><p>一个简洁、好看、功能丰富的歌曲，书籍播放器。</p>\n<h1 id=\"下载\"><a href=\"#下载\" class=\"headerlink\" title=\"下载\"></a>下载</h1><p>可以直接下载我打包好的windows版本： <a href=\"http://www.demodashi.com/demo/12542.html\" target=\"_blank\" rel=\"noopener\">点击这里下载免安装版爱听播放器</a>, <a href=\"https://github.com/renhongl/AiTing\">Github点赞</a>。</p>\n<h1 id=\"自己打包\"><a href=\"#自己打包\" class=\"headerlink\" title=\"自己打包\"></a>自己打包</h1><ul>\n<li><p>运行<code>npm install</code>安装依赖。</p>\n</li>\n<li><p>依赖中没有包含打包工具，可以使用<code>npm install electron-packager -g</code>，在全局安装打包模块。</p>\n</li>\n<li>使用终端进入根目录，运行<code>npm run package</code>。</li>\n<li>接着在根目录会生成<strong>AiTing-win32-x64</strong>文件，进入此目录，双击<strong>AiTing.exe</strong>即可运行此软件。</li>\n</ul>\n<h1 id=\"功能展示\"><a href=\"#功能展示\" class=\"headerlink\" title=\"功能展示\"></a>功能展示</h1><p>本软件是在网页中抓的API，音乐播放抓的是酷狗的API，书籍播放抓的是懒人听书的API。主要抓了搜索功能和基本推荐功能。</p>\n<h2 id=\"音乐播放\"><a href=\"#音乐播放\" class=\"headerlink\" title=\"音乐播放\"></a>音乐播放</h2><p><img src=\"/images/aiting3.png\" alt=\"AiTing\"></p>\n<p>这是音乐主页，展示了推荐歌曲分类，以及热门歌手推荐。</p>\n<p><img src=\"/images/aiting2.png\" alt=\"AiTing\"></p>\n<p>这是音乐搜索结果界面。</p>\n<p><img src=\"/images/aiting4.png\" alt=\"AiTing\"></p>\n<p>这是歌词界面。</p>\n<h2 id=\"书籍播放\"><a href=\"#书籍播放\" class=\"headerlink\" title=\"书籍播放\"></a>书籍播放</h2><p><img src=\"/images/aiting5.png\" alt=\"AiTing\"></p>\n<p>这是书籍的推荐页面。</p>\n<p><img src=\"/images/aiting6.png\" alt=\"AiTing\"></p>\n<p>这是书籍搜索结果界面。</p>\n<p><img src=\"/images/aiting7.png\" alt=\"AiTing\"></p>\n<p>由于书籍章节的搜索很慢，所以使用分页显示的方式。</p>\n<h1 id=\"使用技术\"><a href=\"#使用技术\" class=\"headerlink\" title=\"使用技术\"></a>使用技术</h1><p>Javascript, Electron, Webpack, React.</p>\n"},{"title":"模板方法模式","date":"2018-05-17T13:54:32.000Z","_content":"\n\n# 什么是模板方法模式\n假如我们有一些平行的子类，各个子类之间有一些相同的行为，也有一些不同的行为。如果相同和不同的行为都混合在各个子类的实现中，说明这些相同的行为会在各个子类中重复出现。但实际上，相同的行为可以被搬到另外一个单一的地方，模板方法就是为解决这个问题而生的。\n\n在模板方法中，可以使用钩子方法来隔离变化。我们在父类种容易变化的地方放置钩子，钩子可以有一个默认的实现，究竟要不要挂钩，这由子类自行决定。\n\n模板方法模式是一种典型的通过封装变化提高系统扩展性的设计模式。子类的方法种类和执行顺序都是不变的，所以我们把这部分逻辑抽象到父类的模板方法中，而子类的方法具体怎么实现则是可变的，把这部分变化的逻辑封装到子类中。\n\n\n\n# 面向对象例子：\n\n```js\nexport class RenderDom{\n    constructor() {\n\n    }\n\n    createDom() {\n        throw new Error('Must need implement createDom function');\n    }\n\n    configStyle() {\n        throw new Error('Must need implement configStyle function');\n    }\n\n    appendToParent() {\n        throw new Error('Must need implement appendToParent function');\n    }\n}\n\n\n\nexport class RenderDiv extends RenderDom {\n    constructor() {\n        super();\n    }\n\n    createDom() {\n        console.log('div created');\n    }\n}\n```\n# 函数式例子：\n\n```js\nexport const renderDom = function(obj) {\n    let createDom = obj.createDom || function() {\n        throw new Error('Must need implement createDom function');\n    }\n    let configStyle = obj.configStyle || function() {\n        throw new Error('Must need implement configStyle function');\n    }\n    let appendToParent = obj.appendToParent || function() {\n        throw new Error('Must need implement appendToParent function');\n    }\n    let F = function() {};\n    F.prototype.createDom = createDom;\n    F.prototype.configStyle = configStyle;\n    F.prototype.appendToParent = appendToParent;\n\n    return F;\n}\n```\n","source":"_posts/模板方法模式.md","raw":"---\ntitle: 模板方法模式\ndate: 2018-05-17 21:54:32\ntags:\n\t- Javascript设计模式\n---\n\n\n# 什么是模板方法模式\n假如我们有一些平行的子类，各个子类之间有一些相同的行为，也有一些不同的行为。如果相同和不同的行为都混合在各个子类的实现中，说明这些相同的行为会在各个子类中重复出现。但实际上，相同的行为可以被搬到另外一个单一的地方，模板方法就是为解决这个问题而生的。\n\n在模板方法中，可以使用钩子方法来隔离变化。我们在父类种容易变化的地方放置钩子，钩子可以有一个默认的实现，究竟要不要挂钩，这由子类自行决定。\n\n模板方法模式是一种典型的通过封装变化提高系统扩展性的设计模式。子类的方法种类和执行顺序都是不变的，所以我们把这部分逻辑抽象到父类的模板方法中，而子类的方法具体怎么实现则是可变的，把这部分变化的逻辑封装到子类中。\n\n\n\n# 面向对象例子：\n\n```js\nexport class RenderDom{\n    constructor() {\n\n    }\n\n    createDom() {\n        throw new Error('Must need implement createDom function');\n    }\n\n    configStyle() {\n        throw new Error('Must need implement configStyle function');\n    }\n\n    appendToParent() {\n        throw new Error('Must need implement appendToParent function');\n    }\n}\n\n\n\nexport class RenderDiv extends RenderDom {\n    constructor() {\n        super();\n    }\n\n    createDom() {\n        console.log('div created');\n    }\n}\n```\n# 函数式例子：\n\n```js\nexport const renderDom = function(obj) {\n    let createDom = obj.createDom || function() {\n        throw new Error('Must need implement createDom function');\n    }\n    let configStyle = obj.configStyle || function() {\n        throw new Error('Must need implement configStyle function');\n    }\n    let appendToParent = obj.appendToParent || function() {\n        throw new Error('Must need implement appendToParent function');\n    }\n    let F = function() {};\n    F.prototype.createDom = createDom;\n    F.prototype.configStyle = configStyle;\n    F.prototype.appendToParent = appendToParent;\n\n    return F;\n}\n```\n","slug":"模板方法模式","published":1,"updated":"2019-11-04T07:00:30.312Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ck2vg6gx4002q4cobvje2ziao","content":"<h1 id=\"什么是模板方法模式\"><a href=\"#什么是模板方法模式\" class=\"headerlink\" title=\"什么是模板方法模式\"></a>什么是模板方法模式</h1><p>假如我们有一些平行的子类，各个子类之间有一些相同的行为，也有一些不同的行为。如果相同和不同的行为都混合在各个子类的实现中，说明这些相同的行为会在各个子类中重复出现。但实际上，相同的行为可以被搬到另外一个单一的地方，模板方法就是为解决这个问题而生的。</p>\n<p>在模板方法中，可以使用钩子方法来隔离变化。我们在父类种容易变化的地方放置钩子，钩子可以有一个默认的实现，究竟要不要挂钩，这由子类自行决定。</p>\n<p>模板方法模式是一种典型的通过封装变化提高系统扩展性的设计模式。子类的方法种类和执行顺序都是不变的，所以我们把这部分逻辑抽象到父类的模板方法中，而子类的方法具体怎么实现则是可变的，把这部分变化的逻辑封装到子类中。</p>\n<h1 id=\"面向对象例子：\"><a href=\"#面向对象例子：\" class=\"headerlink\" title=\"面向对象例子：\"></a>面向对象例子：</h1><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">RenderDom</span></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">constructor</span>() &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    createDom() &#123;</span><br><span class=\"line\">        <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> <span class=\"built_in\">Error</span>(<span class=\"string\">'Must need implement createDom function'</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    configStyle() &#123;</span><br><span class=\"line\">        <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> <span class=\"built_in\">Error</span>(<span class=\"string\">'Must need implement configStyle function'</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    appendToParent() &#123;</span><br><span class=\"line\">        <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> <span class=\"built_in\">Error</span>(<span class=\"string\">'Must need implement appendToParent function'</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">RenderDiv</span> <span class=\"keyword\">extends</span> <span class=\"title\">RenderDom</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">constructor</span>() &#123;</span><br><span class=\"line\">        <span class=\"keyword\">super</span>();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    createDom() &#123;</span><br><span class=\"line\">        <span class=\"built_in\">console</span>.log(<span class=\"string\">'div created'</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h1 id=\"函数式例子：\"><a href=\"#函数式例子：\" class=\"headerlink\" title=\"函数式例子：\"></a>函数式例子：</h1><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">const</span> renderDom = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">obj</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">let</span> createDom = obj.createDom || <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> <span class=\"built_in\">Error</span>(<span class=\"string\">'Must need implement createDom function'</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">let</span> configStyle = obj.configStyle || <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> <span class=\"built_in\">Error</span>(<span class=\"string\">'Must need implement configStyle function'</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">let</span> appendToParent = obj.appendToParent || <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> <span class=\"built_in\">Error</span>(<span class=\"string\">'Must need implement appendToParent function'</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">let</span> F = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;&#125;;</span><br><span class=\"line\">    F.prototype.createDom = createDom;</span><br><span class=\"line\">    F.prototype.configStyle = configStyle;</span><br><span class=\"line\">    F.prototype.appendToParent = appendToParent;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">return</span> F;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n","site":{"data":{"projects":[{"name":"AiTing","url":"https://github.com/renhongl/aiting","desc":"HTML5客户端音乐播放器"},{"name":"AiLiao","url":"https://github.com/renhongl/ailiao","desc":"网页聊天软件"},{"name":"Pomelo Editor","url":"https://renhongl.github.io/markdown-editor/","desc":"功能强大的在线Markdown编辑器"}]}},"excerpt":"","more":"<h1 id=\"什么是模板方法模式\"><a href=\"#什么是模板方法模式\" class=\"headerlink\" title=\"什么是模板方法模式\"></a>什么是模板方法模式</h1><p>假如我们有一些平行的子类，各个子类之间有一些相同的行为，也有一些不同的行为。如果相同和不同的行为都混合在各个子类的实现中，说明这些相同的行为会在各个子类中重复出现。但实际上，相同的行为可以被搬到另外一个单一的地方，模板方法就是为解决这个问题而生的。</p>\n<p>在模板方法中，可以使用钩子方法来隔离变化。我们在父类种容易变化的地方放置钩子，钩子可以有一个默认的实现，究竟要不要挂钩，这由子类自行决定。</p>\n<p>模板方法模式是一种典型的通过封装变化提高系统扩展性的设计模式。子类的方法种类和执行顺序都是不变的，所以我们把这部分逻辑抽象到父类的模板方法中，而子类的方法具体怎么实现则是可变的，把这部分变化的逻辑封装到子类中。</p>\n<h1 id=\"面向对象例子：\"><a href=\"#面向对象例子：\" class=\"headerlink\" title=\"面向对象例子：\"></a>面向对象例子：</h1><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">RenderDom</span></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">constructor</span>() &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    createDom() &#123;</span><br><span class=\"line\">        <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> <span class=\"built_in\">Error</span>(<span class=\"string\">'Must need implement createDom function'</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    configStyle() &#123;</span><br><span class=\"line\">        <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> <span class=\"built_in\">Error</span>(<span class=\"string\">'Must need implement configStyle function'</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    appendToParent() &#123;</span><br><span class=\"line\">        <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> <span class=\"built_in\">Error</span>(<span class=\"string\">'Must need implement appendToParent function'</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">RenderDiv</span> <span class=\"keyword\">extends</span> <span class=\"title\">RenderDom</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">constructor</span>() &#123;</span><br><span class=\"line\">        <span class=\"keyword\">super</span>();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    createDom() &#123;</span><br><span class=\"line\">        <span class=\"built_in\">console</span>.log(<span class=\"string\">'div created'</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h1 id=\"函数式例子：\"><a href=\"#函数式例子：\" class=\"headerlink\" title=\"函数式例子：\"></a>函数式例子：</h1><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">const</span> renderDom = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">obj</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">let</span> createDom = obj.createDom || <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> <span class=\"built_in\">Error</span>(<span class=\"string\">'Must need implement createDom function'</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">let</span> configStyle = obj.configStyle || <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> <span class=\"built_in\">Error</span>(<span class=\"string\">'Must need implement configStyle function'</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">let</span> appendToParent = obj.appendToParent || <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> <span class=\"built_in\">Error</span>(<span class=\"string\">'Must need implement appendToParent function'</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">let</span> F = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;&#125;;</span><br><span class=\"line\">    F.prototype.createDom = createDom;</span><br><span class=\"line\">    F.prototype.configStyle = configStyle;</span><br><span class=\"line\">    F.prototype.appendToParent = appendToParent;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">return</span> F;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n"},{"title":"电脑远程控制工具","date":"2016-12-04T06:12:27.000Z","_content":"\n# 简介\n\n今天分享的这个项目是用Python写的。通过手机远程控制电脑关机，或者接收指定的文件。\n\n\n# 图文介绍\n\n通过输入简单的命令，就可以控制目标电脑，当别人在使用自己的电脑时，就可以远程关闭。如果想用来偷看别人电脑的信息，也是很方便的工具。只需要将程序复制到目标电脑中，双击运行一次，此程序就会在后台中悄悄运行，并且每次都会随电脑一起启动。接下来就可以获取此电脑的文件了。下面的第一张图片列出了所有符合的信息的具体地址，第二张拿的是具体的那几张图片。\n\n![ap](/images/pc2.png)\n\n![ap](/images/pc1.png)\n\n\n源代码地址（[点这里](https://github.com/renhongl/PCControl)） ，自己玩玩就好了。。别去偷看别人的隐私。。\n\n\n\n","source":"_posts/电脑远程控制工具.md","raw":"---\ntitle: 电脑远程控制工具\ndate: 2016-12-04 14:12:27\ntags:\n\t- 分享\n\t- Python\n---\n\n# 简介\n\n今天分享的这个项目是用Python写的。通过手机远程控制电脑关机，或者接收指定的文件。\n\n\n# 图文介绍\n\n通过输入简单的命令，就可以控制目标电脑，当别人在使用自己的电脑时，就可以远程关闭。如果想用来偷看别人电脑的信息，也是很方便的工具。只需要将程序复制到目标电脑中，双击运行一次，此程序就会在后台中悄悄运行，并且每次都会随电脑一起启动。接下来就可以获取此电脑的文件了。下面的第一张图片列出了所有符合的信息的具体地址，第二张拿的是具体的那几张图片。\n\n![ap](/images/pc2.png)\n\n![ap](/images/pc1.png)\n\n\n源代码地址（[点这里](https://github.com/renhongl/PCControl)） ，自己玩玩就好了。。别去偷看别人的隐私。。\n\n\n\n","slug":"电脑远程控制工具","published":1,"updated":"2019-03-18T06:46:24.861Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ck2vg6gx6002t4cobu4d6azt3","content":"<h1 id=\"简介\"><a href=\"#简介\" class=\"headerlink\" title=\"简介\"></a>简介</h1><p>今天分享的这个项目是用Python写的。通过手机远程控制电脑关机，或者接收指定的文件。</p>\n<h1 id=\"图文介绍\"><a href=\"#图文介绍\" class=\"headerlink\" title=\"图文介绍\"></a>图文介绍</h1><p>通过输入简单的命令，就可以控制目标电脑，当别人在使用自己的电脑时，就可以远程关闭。如果想用来偷看别人电脑的信息，也是很方便的工具。只需要将程序复制到目标电脑中，双击运行一次，此程序就会在后台中悄悄运行，并且每次都会随电脑一起启动。接下来就可以获取此电脑的文件了。下面的第一张图片列出了所有符合的信息的具体地址，第二张拿的是具体的那几张图片。</p>\n<p><img src=\"/images/pc2.png\" alt=\"ap\"></p>\n<p><img src=\"/images/pc1.png\" alt=\"ap\"></p>\n<p>源代码地址（<a href=\"https://github.com/renhongl/PCControl\">点这里</a>） ，自己玩玩就好了。。别去偷看别人的隐私。。</p>\n","site":{"data":{"projects":[{"name":"AiTing","url":"https://github.com/renhongl/aiting","desc":"HTML5客户端音乐播放器"},{"name":"AiLiao","url":"https://github.com/renhongl/ailiao","desc":"网页聊天软件"},{"name":"Pomelo Editor","url":"https://renhongl.github.io/markdown-editor/","desc":"功能强大的在线Markdown编辑器"}]}},"excerpt":"","more":"<h1 id=\"简介\"><a href=\"#简介\" class=\"headerlink\" title=\"简介\"></a>简介</h1><p>今天分享的这个项目是用Python写的。通过手机远程控制电脑关机，或者接收指定的文件。</p>\n<h1 id=\"图文介绍\"><a href=\"#图文介绍\" class=\"headerlink\" title=\"图文介绍\"></a>图文介绍</h1><p>通过输入简单的命令，就可以控制目标电脑，当别人在使用自己的电脑时，就可以远程关闭。如果想用来偷看别人电脑的信息，也是很方便的工具。只需要将程序复制到目标电脑中，双击运行一次，此程序就会在后台中悄悄运行，并且每次都会随电脑一起启动。接下来就可以获取此电脑的文件了。下面的第一张图片列出了所有符合的信息的具体地址，第二张拿的是具体的那几张图片。</p>\n<p><img src=\"/images/pc2.png\" alt=\"ap\"></p>\n<p><img src=\"/images/pc1.png\" alt=\"ap\"></p>\n<p>源代码地址（<a href=\"https://github.com/renhongl/PCControl\">点这里</a>） ，自己玩玩就好了。。别去偷看别人的隐私。。</p>\n"},{"title":"计算机算法之---练习题","date":"2019-04-17T13:16:52.000Z","_content":"\n\n一些常用的算法练习\n\n1. 题目：古典问题：有一对兔子，从出生后第3个月起每个月都生一对兔子，小兔子长到第四个月后每个月又生一对兔子，假如兔子都不死，问每个月的兔子总数为多少？\n2. 题目：判断101-200之间有多少个素数，并输出所有素数。\n3. 题目：打印出所有的 “水仙花数 “，所谓 “水仙花数 “是指一个三位数，其各位数字立方和等于该数本身。例如：153是一个 “水仙花数 “，因为153=1的三次方＋5的三次方＋3的三次方。\n4. 题目：将一个正整数分解质因数。例如：输入90,打印出90=2*3*3*5。\n5. 题目：利用条件运算符的嵌套来完成此题：学习成绩> =90分的同学用A表示，60-89分之间的用B表示，60分以下的用C表示。\n6. 题目：输入两个正整数m和n，求其最大公约数和最小公倍数。\n7. 题目：输入一行字符，分别统计出其中英文字母、空格、数字和其它字符的个数。\n8. 题目：求s=a+aa+aaa+aaaa+aa…a的值，其中a是一个数字。例如2+22+222+2222+22222(此时共有5个数相加)，几个数相加有键盘控制。\n9. 题目：一个数如果恰好等于它的因子之和，这个数就称为 “完数 “。例如6=1＋2＋3.编程 找出1000以内的所有完数。\n10. 题目：一球从100米高度自由落下，每次落地后反跳回原高度的一半；再落下，求它在 第10次落地时，共经过多少米？第10次反弹多高？\n11. 题目：有1、2、3、4个数字，能组成多少个互不相同且无重复数字的三位数？都是多少？\n12. 题目：企业发放的奖金根据利润提成。利润(I)低于或等于10万元时，奖金可提10%；利润高于10万元，低于20万元时，低于10万元的部分按10%提成，高于10万元的部分，可可提成7.5%；20万到40万之间时，高于20万元的部分，可提成5%；40万到60万之间时高于40万元的部分，可提成3%；60万到100万之间时，高于60万元的部分，可提成1.5%，高于100万元时，超过100万元的部分按1%提成，从键盘输入当月利润I，求应发放奖金总数？\n13. 题目：一个整数，它加上100后是一个完全平方数，加上168又是一个完全平方数，请问该数是多少？\n14. 题目：输入某年某月某日，判断这一天是这一年的第几天？\n15. 题目：输入三个整数x,y,z，请把这三个数由小到大输出。\n16. 题目：输出9*9口诀。\n17. 题目：猴子吃桃问题：猴子第一天摘下若干个桃子，当即吃了一半，还不瘾，又多吃了一个 第二天早上又将剩下的桃子吃掉一半，又多吃了一个。以后每天早上都吃了前一天剩下 的一半零一个。到第10天早上想再吃时，见只剩下一个桃子了。求第一天共摘了多少。\n18. 题目：两个乒乓球队进行比赛，各出三人。甲队为a,b,c三人，乙队为x,y,z三人。已抽签决定比赛名单。有人向队员打听比赛的名单。a说他不和x比，c说他不和x,z比，请编程序找出三队赛手的名单。\n19. 题目：打印出如下图案（菱形）\n20. 题目：有一分数序列：2/1，3/2，5/3，8/5，13/8，21/13…求出这个数列的前20项之和。\n21. 题目：求1+2!+3!+…+20!的和。\n22. 题目：利用递归方法求5!。\n23. 题目：有5个人坐在一起，问第五个人多少岁？他说比第4个人大2岁。问第4个人岁数，他说比第3个人大2岁。问第三个人，又说比第2人大两岁。问第2个人，说比第一个人大两岁。最后问第一个人，他说是10岁。请问第五个人多大？\n24. 题目：给一个不多于5位的正整数，要求：一、求它是几位数，二、逆序打印出各位数字。\n25. 题目：一个5位数，判断它是不是回文数。即12321是回文数，个位与万位相同，十位与千位相同。\n26. 题目：请输入星期几的第一个字母来判断一下是星期几，如果第一个字母一样，则继续 判断第二个字母。\n27. 题目：求100之内的素数。\n28. 题目：对10个数进行排序。\n29. 题目：求一个3*3矩阵对角线元素之和。\n21. 题目：求1+2!+3!+…+20!的和。\n30. 题目：有一个已经排好序的数组。现输入一个数，要求按原来的规律将它插入数组中。\n31. 题目：将一个数组逆序输出。\n32. 题目：取一个整数a从右端开始的4～7位。\n33. 题目：打印出杨辉三角形（要求打印出10行如下图）。\n34. 题目：输入3个数a,b,c，按大小顺序输出。\n35. 题目：输入数组，最大的与第一个元素交换，最小的与最后一个元素交换，输出数组。\n36. 题目：有n个整数，使其前面各数顺序向后移m个位置，最后m个数变成最前面的m个数。\n37. 题目：有n个人围成一圈，顺序排号。从第一个人开始报数（从1到3报数），凡报到3的人退出圈子，问最后留下的是原来第几号的那位。\n38. 题目：写一个函数，求一个字符串的长度，在main函数中输入字符串，并输出其长度。\n39. 题目：字符串排序。\n40. 题目：海滩上有一堆桃子，五只猴子来分。第一只猴子把这堆桃子凭据分为五份，多了一个，这只猴子把多的一个扔入海中，拿走了一份。第二只猴子把剩下的桃子又平均分成五份，又多了一个，它同样把多的一个扔入海中，拿走了一份，第三、第四、第五只猴子都是这样做的，问海滩上原来最少有多少个桃子？\n40. 题目：写一个函数，输出所有的排列组合。\n40. 题目：写一个函数，给你一个字符串倒序输出来。\n40. 题目：不使用中间变量 把两个变量的值互换。\n40. 题目：将this is a test 转化为This Is A Test。\n40. 题目：写一个单例模式。\n40. 题目：对字母进行排序，如：s,a,g,d,b。\n40. 题目：一个偶数总能表示为两个素数之和。\n40. 题目：某个公司采用公用电话传递数据，数据是四位的整数，在传递过程中是加密的，加密规则如下：每位数字都加上5,然后用和除以10的余数代替该数字，再将第一位和第四位交换，第二位和第三位交换。\n","source":"_posts/算法练习.md","raw":"---\ntitle: 计算机算法之---练习题\ndate: 2019-04-17 21:16:52\ntags: 计算机算法\n\n---\n\n\n一些常用的算法练习\n\n1. 题目：古典问题：有一对兔子，从出生后第3个月起每个月都生一对兔子，小兔子长到第四个月后每个月又生一对兔子，假如兔子都不死，问每个月的兔子总数为多少？\n2. 题目：判断101-200之间有多少个素数，并输出所有素数。\n3. 题目：打印出所有的 “水仙花数 “，所谓 “水仙花数 “是指一个三位数，其各位数字立方和等于该数本身。例如：153是一个 “水仙花数 “，因为153=1的三次方＋5的三次方＋3的三次方。\n4. 题目：将一个正整数分解质因数。例如：输入90,打印出90=2*3*3*5。\n5. 题目：利用条件运算符的嵌套来完成此题：学习成绩> =90分的同学用A表示，60-89分之间的用B表示，60分以下的用C表示。\n6. 题目：输入两个正整数m和n，求其最大公约数和最小公倍数。\n7. 题目：输入一行字符，分别统计出其中英文字母、空格、数字和其它字符的个数。\n8. 题目：求s=a+aa+aaa+aaaa+aa…a的值，其中a是一个数字。例如2+22+222+2222+22222(此时共有5个数相加)，几个数相加有键盘控制。\n9. 题目：一个数如果恰好等于它的因子之和，这个数就称为 “完数 “。例如6=1＋2＋3.编程 找出1000以内的所有完数。\n10. 题目：一球从100米高度自由落下，每次落地后反跳回原高度的一半；再落下，求它在 第10次落地时，共经过多少米？第10次反弹多高？\n11. 题目：有1、2、3、4个数字，能组成多少个互不相同且无重复数字的三位数？都是多少？\n12. 题目：企业发放的奖金根据利润提成。利润(I)低于或等于10万元时，奖金可提10%；利润高于10万元，低于20万元时，低于10万元的部分按10%提成，高于10万元的部分，可可提成7.5%；20万到40万之间时，高于20万元的部分，可提成5%；40万到60万之间时高于40万元的部分，可提成3%；60万到100万之间时，高于60万元的部分，可提成1.5%，高于100万元时，超过100万元的部分按1%提成，从键盘输入当月利润I，求应发放奖金总数？\n13. 题目：一个整数，它加上100后是一个完全平方数，加上168又是一个完全平方数，请问该数是多少？\n14. 题目：输入某年某月某日，判断这一天是这一年的第几天？\n15. 题目：输入三个整数x,y,z，请把这三个数由小到大输出。\n16. 题目：输出9*9口诀。\n17. 题目：猴子吃桃问题：猴子第一天摘下若干个桃子，当即吃了一半，还不瘾，又多吃了一个 第二天早上又将剩下的桃子吃掉一半，又多吃了一个。以后每天早上都吃了前一天剩下 的一半零一个。到第10天早上想再吃时，见只剩下一个桃子了。求第一天共摘了多少。\n18. 题目：两个乒乓球队进行比赛，各出三人。甲队为a,b,c三人，乙队为x,y,z三人。已抽签决定比赛名单。有人向队员打听比赛的名单。a说他不和x比，c说他不和x,z比，请编程序找出三队赛手的名单。\n19. 题目：打印出如下图案（菱形）\n20. 题目：有一分数序列：2/1，3/2，5/3，8/5，13/8，21/13…求出这个数列的前20项之和。\n21. 题目：求1+2!+3!+…+20!的和。\n22. 题目：利用递归方法求5!。\n23. 题目：有5个人坐在一起，问第五个人多少岁？他说比第4个人大2岁。问第4个人岁数，他说比第3个人大2岁。问第三个人，又说比第2人大两岁。问第2个人，说比第一个人大两岁。最后问第一个人，他说是10岁。请问第五个人多大？\n24. 题目：给一个不多于5位的正整数，要求：一、求它是几位数，二、逆序打印出各位数字。\n25. 题目：一个5位数，判断它是不是回文数。即12321是回文数，个位与万位相同，十位与千位相同。\n26. 题目：请输入星期几的第一个字母来判断一下是星期几，如果第一个字母一样，则继续 判断第二个字母。\n27. 题目：求100之内的素数。\n28. 题目：对10个数进行排序。\n29. 题目：求一个3*3矩阵对角线元素之和。\n21. 题目：求1+2!+3!+…+20!的和。\n30. 题目：有一个已经排好序的数组。现输入一个数，要求按原来的规律将它插入数组中。\n31. 题目：将一个数组逆序输出。\n32. 题目：取一个整数a从右端开始的4～7位。\n33. 题目：打印出杨辉三角形（要求打印出10行如下图）。\n34. 题目：输入3个数a,b,c，按大小顺序输出。\n35. 题目：输入数组，最大的与第一个元素交换，最小的与最后一个元素交换，输出数组。\n36. 题目：有n个整数，使其前面各数顺序向后移m个位置，最后m个数变成最前面的m个数。\n37. 题目：有n个人围成一圈，顺序排号。从第一个人开始报数（从1到3报数），凡报到3的人退出圈子，问最后留下的是原来第几号的那位。\n38. 题目：写一个函数，求一个字符串的长度，在main函数中输入字符串，并输出其长度。\n39. 题目：字符串排序。\n40. 题目：海滩上有一堆桃子，五只猴子来分。第一只猴子把这堆桃子凭据分为五份，多了一个，这只猴子把多的一个扔入海中，拿走了一份。第二只猴子把剩下的桃子又平均分成五份，又多了一个，它同样把多的一个扔入海中，拿走了一份，第三、第四、第五只猴子都是这样做的，问海滩上原来最少有多少个桃子？\n40. 题目：写一个函数，输出所有的排列组合。\n40. 题目：写一个函数，给你一个字符串倒序输出来。\n40. 题目：不使用中间变量 把两个变量的值互换。\n40. 题目：将this is a test 转化为This Is A Test。\n40. 题目：写一个单例模式。\n40. 题目：对字母进行排序，如：s,a,g,d,b。\n40. 题目：一个偶数总能表示为两个素数之和。\n40. 题目：某个公司采用公用电话传递数据，数据是四位的整数，在传递过程中是加密的，加密规则如下：每位数字都加上5,然后用和除以10的余数代替该数字，再将第一位和第四位交换，第二位和第三位交换。\n","slug":"算法练习","published":1,"updated":"2019-06-18T09:54:58.752Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ck2vg6gx8002v4cobcnx9wrjn","content":"<p>一些常用的算法练习</p>\n<ol>\n<li>题目：古典问题：有一对兔子，从出生后第3个月起每个月都生一对兔子，小兔子长到第四个月后每个月又生一对兔子，假如兔子都不死，问每个月的兔子总数为多少？</li>\n<li>题目：判断101-200之间有多少个素数，并输出所有素数。</li>\n<li>题目：打印出所有的 “水仙花数 “，所谓 “水仙花数 “是指一个三位数，其各位数字立方和等于该数本身。例如：153是一个 “水仙花数 “，因为153=1的三次方＋5的三次方＋3的三次方。</li>\n<li>题目：将一个正整数分解质因数。例如：输入90,打印出90=2<em>3</em>3*5。</li>\n<li>题目：利用条件运算符的嵌套来完成此题：学习成绩&gt; =90分的同学用A表示，60-89分之间的用B表示，60分以下的用C表示。</li>\n<li>题目：输入两个正整数m和n，求其最大公约数和最小公倍数。</li>\n<li>题目：输入一行字符，分别统计出其中英文字母、空格、数字和其它字符的个数。</li>\n<li>题目：求s=a+aa+aaa+aaaa+aa…a的值，其中a是一个数字。例如2+22+222+2222+22222(此时共有5个数相加)，几个数相加有键盘控制。</li>\n<li>题目：一个数如果恰好等于它的因子之和，这个数就称为 “完数 “。例如6=1＋2＋3.编程 找出1000以内的所有完数。</li>\n<li>题目：一球从100米高度自由落下，每次落地后反跳回原高度的一半；再落下，求它在 第10次落地时，共经过多少米？第10次反弹多高？</li>\n<li>题目：有1、2、3、4个数字，能组成多少个互不相同且无重复数字的三位数？都是多少？</li>\n<li>题目：企业发放的奖金根据利润提成。利润(I)低于或等于10万元时，奖金可提10%；利润高于10万元，低于20万元时，低于10万元的部分按10%提成，高于10万元的部分，可可提成7.5%；20万到40万之间时，高于20万元的部分，可提成5%；40万到60万之间时高于40万元的部分，可提成3%；60万到100万之间时，高于60万元的部分，可提成1.5%，高于100万元时，超过100万元的部分按1%提成，从键盘输入当月利润I，求应发放奖金总数？</li>\n<li>题目：一个整数，它加上100后是一个完全平方数，加上168又是一个完全平方数，请问该数是多少？</li>\n<li>题目：输入某年某月某日，判断这一天是这一年的第几天？</li>\n<li>题目：输入三个整数x,y,z，请把这三个数由小到大输出。</li>\n<li>题目：输出9*9口诀。</li>\n<li>题目：猴子吃桃问题：猴子第一天摘下若干个桃子，当即吃了一半，还不瘾，又多吃了一个 第二天早上又将剩下的桃子吃掉一半，又多吃了一个。以后每天早上都吃了前一天剩下 的一半零一个。到第10天早上想再吃时，见只剩下一个桃子了。求第一天共摘了多少。</li>\n<li>题目：两个乒乓球队进行比赛，各出三人。甲队为a,b,c三人，乙队为x,y,z三人。已抽签决定比赛名单。有人向队员打听比赛的名单。a说他不和x比，c说他不和x,z比，请编程序找出三队赛手的名单。</li>\n<li>题目：打印出如下图案（菱形）</li>\n<li>题目：有一分数序列：2/1，3/2，5/3，8/5，13/8，21/13…求出这个数列的前20项之和。</li>\n<li>题目：求1+2!+3!+…+20!的和。</li>\n<li>题目：利用递归方法求5!。</li>\n<li>题目：有5个人坐在一起，问第五个人多少岁？他说比第4个人大2岁。问第4个人岁数，他说比第3个人大2岁。问第三个人，又说比第2人大两岁。问第2个人，说比第一个人大两岁。最后问第一个人，他说是10岁。请问第五个人多大？</li>\n<li>题目：给一个不多于5位的正整数，要求：一、求它是几位数，二、逆序打印出各位数字。</li>\n<li>题目：一个5位数，判断它是不是回文数。即12321是回文数，个位与万位相同，十位与千位相同。</li>\n<li>题目：请输入星期几的第一个字母来判断一下是星期几，如果第一个字母一样，则继续 判断第二个字母。</li>\n<li>题目：求100之内的素数。</li>\n<li>题目：对10个数进行排序。</li>\n<li>题目：求一个3*3矩阵对角线元素之和。</li>\n<li>题目：求1+2!+3!+…+20!的和。</li>\n<li>题目：有一个已经排好序的数组。现输入一个数，要求按原来的规律将它插入数组中。</li>\n<li>题目：将一个数组逆序输出。</li>\n<li>题目：取一个整数a从右端开始的4～7位。</li>\n<li>题目：打印出杨辉三角形（要求打印出10行如下图）。</li>\n<li>题目：输入3个数a,b,c，按大小顺序输出。</li>\n<li>题目：输入数组，最大的与第一个元素交换，最小的与最后一个元素交换，输出数组。</li>\n<li>题目：有n个整数，使其前面各数顺序向后移m个位置，最后m个数变成最前面的m个数。</li>\n<li>题目：有n个人围成一圈，顺序排号。从第一个人开始报数（从1到3报数），凡报到3的人退出圈子，问最后留下的是原来第几号的那位。</li>\n<li>题目：写一个函数，求一个字符串的长度，在main函数中输入字符串，并输出其长度。</li>\n<li>题目：字符串排序。</li>\n<li>题目：海滩上有一堆桃子，五只猴子来分。第一只猴子把这堆桃子凭据分为五份，多了一个，这只猴子把多的一个扔入海中，拿走了一份。第二只猴子把剩下的桃子又平均分成五份，又多了一个，它同样把多的一个扔入海中，拿走了一份，第三、第四、第五只猴子都是这样做的，问海滩上原来最少有多少个桃子？</li>\n<li>题目：写一个函数，输出所有的排列组合。</li>\n<li>题目：写一个函数，给你一个字符串倒序输出来。</li>\n<li>题目：不使用中间变量 把两个变量的值互换。</li>\n<li>题目：将this is a test 转化为This Is A Test。</li>\n<li>题目：写一个单例模式。</li>\n<li>题目：对字母进行排序，如：s,a,g,d,b。</li>\n<li>题目：一个偶数总能表示为两个素数之和。</li>\n<li>题目：某个公司采用公用电话传递数据，数据是四位的整数，在传递过程中是加密的，加密规则如下：每位数字都加上5,然后用和除以10的余数代替该数字，再将第一位和第四位交换，第二位和第三位交换。</li>\n</ol>\n","site":{"data":{"projects":[{"name":"AiTing","url":"https://github.com/renhongl/aiting","desc":"HTML5客户端音乐播放器"},{"name":"AiLiao","url":"https://github.com/renhongl/ailiao","desc":"网页聊天软件"},{"name":"Pomelo Editor","url":"https://renhongl.github.io/markdown-editor/","desc":"功能强大的在线Markdown编辑器"}]}},"excerpt":"","more":"<p>一些常用的算法练习</p>\n<ol>\n<li>题目：古典问题：有一对兔子，从出生后第3个月起每个月都生一对兔子，小兔子长到第四个月后每个月又生一对兔子，假如兔子都不死，问每个月的兔子总数为多少？</li>\n<li>题目：判断101-200之间有多少个素数，并输出所有素数。</li>\n<li>题目：打印出所有的 “水仙花数 “，所谓 “水仙花数 “是指一个三位数，其各位数字立方和等于该数本身。例如：153是一个 “水仙花数 “，因为153=1的三次方＋5的三次方＋3的三次方。</li>\n<li>题目：将一个正整数分解质因数。例如：输入90,打印出90=2<em>3</em>3*5。</li>\n<li>题目：利用条件运算符的嵌套来完成此题：学习成绩&gt; =90分的同学用A表示，60-89分之间的用B表示，60分以下的用C表示。</li>\n<li>题目：输入两个正整数m和n，求其最大公约数和最小公倍数。</li>\n<li>题目：输入一行字符，分别统计出其中英文字母、空格、数字和其它字符的个数。</li>\n<li>题目：求s=a+aa+aaa+aaaa+aa…a的值，其中a是一个数字。例如2+22+222+2222+22222(此时共有5个数相加)，几个数相加有键盘控制。</li>\n<li>题目：一个数如果恰好等于它的因子之和，这个数就称为 “完数 “。例如6=1＋2＋3.编程 找出1000以内的所有完数。</li>\n<li>题目：一球从100米高度自由落下，每次落地后反跳回原高度的一半；再落下，求它在 第10次落地时，共经过多少米？第10次反弹多高？</li>\n<li>题目：有1、2、3、4个数字，能组成多少个互不相同且无重复数字的三位数？都是多少？</li>\n<li>题目：企业发放的奖金根据利润提成。利润(I)低于或等于10万元时，奖金可提10%；利润高于10万元，低于20万元时，低于10万元的部分按10%提成，高于10万元的部分，可可提成7.5%；20万到40万之间时，高于20万元的部分，可提成5%；40万到60万之间时高于40万元的部分，可提成3%；60万到100万之间时，高于60万元的部分，可提成1.5%，高于100万元时，超过100万元的部分按1%提成，从键盘输入当月利润I，求应发放奖金总数？</li>\n<li>题目：一个整数，它加上100后是一个完全平方数，加上168又是一个完全平方数，请问该数是多少？</li>\n<li>题目：输入某年某月某日，判断这一天是这一年的第几天？</li>\n<li>题目：输入三个整数x,y,z，请把这三个数由小到大输出。</li>\n<li>题目：输出9*9口诀。</li>\n<li>题目：猴子吃桃问题：猴子第一天摘下若干个桃子，当即吃了一半，还不瘾，又多吃了一个 第二天早上又将剩下的桃子吃掉一半，又多吃了一个。以后每天早上都吃了前一天剩下 的一半零一个。到第10天早上想再吃时，见只剩下一个桃子了。求第一天共摘了多少。</li>\n<li>题目：两个乒乓球队进行比赛，各出三人。甲队为a,b,c三人，乙队为x,y,z三人。已抽签决定比赛名单。有人向队员打听比赛的名单。a说他不和x比，c说他不和x,z比，请编程序找出三队赛手的名单。</li>\n<li>题目：打印出如下图案（菱形）</li>\n<li>题目：有一分数序列：2/1，3/2，5/3，8/5，13/8，21/13…求出这个数列的前20项之和。</li>\n<li>题目：求1+2!+3!+…+20!的和。</li>\n<li>题目：利用递归方法求5!。</li>\n<li>题目：有5个人坐在一起，问第五个人多少岁？他说比第4个人大2岁。问第4个人岁数，他说比第3个人大2岁。问第三个人，又说比第2人大两岁。问第2个人，说比第一个人大两岁。最后问第一个人，他说是10岁。请问第五个人多大？</li>\n<li>题目：给一个不多于5位的正整数，要求：一、求它是几位数，二、逆序打印出各位数字。</li>\n<li>题目：一个5位数，判断它是不是回文数。即12321是回文数，个位与万位相同，十位与千位相同。</li>\n<li>题目：请输入星期几的第一个字母来判断一下是星期几，如果第一个字母一样，则继续 判断第二个字母。</li>\n<li>题目：求100之内的素数。</li>\n<li>题目：对10个数进行排序。</li>\n<li>题目：求一个3*3矩阵对角线元素之和。</li>\n<li>题目：求1+2!+3!+…+20!的和。</li>\n<li>题目：有一个已经排好序的数组。现输入一个数，要求按原来的规律将它插入数组中。</li>\n<li>题目：将一个数组逆序输出。</li>\n<li>题目：取一个整数a从右端开始的4～7位。</li>\n<li>题目：打印出杨辉三角形（要求打印出10行如下图）。</li>\n<li>题目：输入3个数a,b,c，按大小顺序输出。</li>\n<li>题目：输入数组，最大的与第一个元素交换，最小的与最后一个元素交换，输出数组。</li>\n<li>题目：有n个整数，使其前面各数顺序向后移m个位置，最后m个数变成最前面的m个数。</li>\n<li>题目：有n个人围成一圈，顺序排号。从第一个人开始报数（从1到3报数），凡报到3的人退出圈子，问最后留下的是原来第几号的那位。</li>\n<li>题目：写一个函数，求一个字符串的长度，在main函数中输入字符串，并输出其长度。</li>\n<li>题目：字符串排序。</li>\n<li>题目：海滩上有一堆桃子，五只猴子来分。第一只猴子把这堆桃子凭据分为五份，多了一个，这只猴子把多的一个扔入海中，拿走了一份。第二只猴子把剩下的桃子又平均分成五份，又多了一个，它同样把多的一个扔入海中，拿走了一份，第三、第四、第五只猴子都是这样做的，问海滩上原来最少有多少个桃子？</li>\n<li>题目：写一个函数，输出所有的排列组合。</li>\n<li>题目：写一个函数，给你一个字符串倒序输出来。</li>\n<li>题目：不使用中间变量 把两个变量的值互换。</li>\n<li>题目：将this is a test 转化为This Is A Test。</li>\n<li>题目：写一个单例模式。</li>\n<li>题目：对字母进行排序，如：s,a,g,d,b。</li>\n<li>题目：一个偶数总能表示为两个素数之和。</li>\n<li>题目：某个公司采用公用电话传递数据，数据是四位的整数，在传递过程中是加密的，加密规则如下：每位数字都加上5,然后用和除以10的余数代替该数字，再将第一位和第四位交换，第二位和第三位交换。</li>\n</ol>\n"},{"title":"职责链模式","date":"2018-05-21T13:54:32.000Z","_content":"\n\n# 什么是职责链模式\n\n\n# 面向对象例子：\n\n\n```js\nexport class Vip5{\n    constructor() {\n        this.level = 5;\n    }\n\n    getDiscount(pay, level) {\n        if (level === this.level) {\n            console.log(pay * 0.5);\n        } else {\n            this.nextChain.getDiscount(pay, level);\n        }\n    }\n\n    setNextChain(obj) {\n        this.nextChain = obj;\n    }\n}\n\nexport class Vip3{\n    constructor() {\n        this.level = 3;\n    }\n\n    getDiscount(pay, level) {\n        if (level === this.level) {\n            console.log(pay * 0.7);\n        } else {\n            this.nextChain.getDiscount(pay, level);\n        }\n    }\n\n    setNextChain(obj) {\n        this.nextChain = obj;\n    }\n}\n\nexport class Vip1{\n    constructor() {\n        this.level = 1;\n    }\n\n    getDiscount(pay, level) {\n        if (level === this.level) {\n            console.log(pay * 0.9);\n        } else {\n            this.nextChain.getDiscount(pay, level);\n        }\n    }\n\n    setNextChain(obj) {\n        this.nextChain = obj;\n    }\n}\n\n```\n# 函数式例子：\n\n```js\n(function () {\n\n    var order = function (orderType, pay, stock) {\n        if (orderType === 1) {\n            if (pay === true) {\n                console.log('500元定金预购，得到100优惠券');\n            } else {\n                if (stock > 0) {\n                    console.log('普通购买');\n                } else {\n                    console.log('手机库存不足');\n                }\n            }\n        } else if (ordertype === 2) {\n            if (pay === true) {\n                console.log('200元定金预购，得到50元优惠券');\n            } else {\n                if (stock > 0) {\n                    console.log('普通购买');\n                } else {\n                    console.log('手机库存不足');\n                }\n            }\n        } else if (orderType === 3) {\n            if (stock > 0) {\n                console.log('普通购买');\n            } else {\n                console.log('手机库存不足');\n            }\n        }\n    }\n\n    var Chain = function (fn) {\n        this.fn = fn;\n        this.successor = null;\n    };\n\n    Chain.prototype.setNextSuccessor = function (successor) {\n        this.successor = successor;\n    };\n\n    Chain.prototype.passRequest = function () {\n        var ret = this.fn.apply(this, arguments);\n        if (ret === 'nextSuccessor') {\n            return this.successor && this.successor.passRequest.apply(this.successor, arguments);\n        }\n    };\n\n    var order500 = function (orderType, pay, stock) {\n        if (orderType === 1 && pay === true) {\n            console.log('500元定金预购，得到100元优惠券');\n        } else {\n            return 'nextSuccessor';\n        }\n    };\n\n    var order200 = function (orderType, pay, stock) {\n        if (orderType === 2 && pay === true) {\n            console.log('200元定金预购，得到50元优惠券');\n        } else {\n            return 'nextSuccessor';\n        }\n    };\n\n    var orderNormal = function (orderType, pay, stock) {\n        if (stock > 0) {\n            console.log('普通购买，无优惠券');\n        } else {\n            console.log('手机库存不足');\n        }\n    };\n\n    var init = function () {\n        order(1, true, 500);\n        var chainOrder500 = new Chain(order500);\n        var chainOrder200 = new Chain(order200);\n        var chainOrderNomal = new Chain(orderNormal);\n\n        chainOrder500.setNextSuccessor(chainOrder200);\n        chainOrder200.setNextSuccessor(chainOrderNomal);\n        chainOrder500.passRequest(1, false, 100);\n    };\n    init();\n})();\n```","source":"_posts/职责链模式.md","raw":"---\ntitle: 职责链模式\ndate: 2018-05-21 21:54:32\ntags:\n\t- Javascript设计模式\n---\n\n\n# 什么是职责链模式\n\n\n# 面向对象例子：\n\n\n```js\nexport class Vip5{\n    constructor() {\n        this.level = 5;\n    }\n\n    getDiscount(pay, level) {\n        if (level === this.level) {\n            console.log(pay * 0.5);\n        } else {\n            this.nextChain.getDiscount(pay, level);\n        }\n    }\n\n    setNextChain(obj) {\n        this.nextChain = obj;\n    }\n}\n\nexport class Vip3{\n    constructor() {\n        this.level = 3;\n    }\n\n    getDiscount(pay, level) {\n        if (level === this.level) {\n            console.log(pay * 0.7);\n        } else {\n            this.nextChain.getDiscount(pay, level);\n        }\n    }\n\n    setNextChain(obj) {\n        this.nextChain = obj;\n    }\n}\n\nexport class Vip1{\n    constructor() {\n        this.level = 1;\n    }\n\n    getDiscount(pay, level) {\n        if (level === this.level) {\n            console.log(pay * 0.9);\n        } else {\n            this.nextChain.getDiscount(pay, level);\n        }\n    }\n\n    setNextChain(obj) {\n        this.nextChain = obj;\n    }\n}\n\n```\n# 函数式例子：\n\n```js\n(function () {\n\n    var order = function (orderType, pay, stock) {\n        if (orderType === 1) {\n            if (pay === true) {\n                console.log('500元定金预购，得到100优惠券');\n            } else {\n                if (stock > 0) {\n                    console.log('普通购买');\n                } else {\n                    console.log('手机库存不足');\n                }\n            }\n        } else if (ordertype === 2) {\n            if (pay === true) {\n                console.log('200元定金预购，得到50元优惠券');\n            } else {\n                if (stock > 0) {\n                    console.log('普通购买');\n                } else {\n                    console.log('手机库存不足');\n                }\n            }\n        } else if (orderType === 3) {\n            if (stock > 0) {\n                console.log('普通购买');\n            } else {\n                console.log('手机库存不足');\n            }\n        }\n    }\n\n    var Chain = function (fn) {\n        this.fn = fn;\n        this.successor = null;\n    };\n\n    Chain.prototype.setNextSuccessor = function (successor) {\n        this.successor = successor;\n    };\n\n    Chain.prototype.passRequest = function () {\n        var ret = this.fn.apply(this, arguments);\n        if (ret === 'nextSuccessor') {\n            return this.successor && this.successor.passRequest.apply(this.successor, arguments);\n        }\n    };\n\n    var order500 = function (orderType, pay, stock) {\n        if (orderType === 1 && pay === true) {\n            console.log('500元定金预购，得到100元优惠券');\n        } else {\n            return 'nextSuccessor';\n        }\n    };\n\n    var order200 = function (orderType, pay, stock) {\n        if (orderType === 2 && pay === true) {\n            console.log('200元定金预购，得到50元优惠券');\n        } else {\n            return 'nextSuccessor';\n        }\n    };\n\n    var orderNormal = function (orderType, pay, stock) {\n        if (stock > 0) {\n            console.log('普通购买，无优惠券');\n        } else {\n            console.log('手机库存不足');\n        }\n    };\n\n    var init = function () {\n        order(1, true, 500);\n        var chainOrder500 = new Chain(order500);\n        var chainOrder200 = new Chain(order200);\n        var chainOrderNomal = new Chain(orderNormal);\n\n        chainOrder500.setNextSuccessor(chainOrder200);\n        chainOrder200.setNextSuccessor(chainOrderNomal);\n        chainOrder500.passRequest(1, false, 100);\n    };\n    init();\n})();\n```","slug":"职责链模式","published":1,"updated":"2019-11-04T07:00:41.203Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ck2vg6gxb002y4cobb5lwl72z","content":"<h1 id=\"什么是职责链模式\"><a href=\"#什么是职责链模式\" class=\"headerlink\" title=\"什么是职责链模式\"></a>什么是职责链模式</h1><h1 id=\"面向对象例子：\"><a href=\"#面向对象例子：\" class=\"headerlink\" title=\"面向对象例子：\"></a>面向对象例子：</h1><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Vip5</span></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">constructor</span>() &#123;</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.level = <span class=\"number\">5</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    getDiscount(pay, level) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (level === <span class=\"keyword\">this</span>.level) &#123;</span><br><span class=\"line\">            <span class=\"built_in\">console</span>.log(pay * <span class=\"number\">0.5</span>);</span><br><span class=\"line\">        &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">            <span class=\"keyword\">this</span>.nextChain.getDiscount(pay, level);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    setNextChain(obj) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.nextChain = obj;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Vip3</span></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">constructor</span>() &#123;</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.level = <span class=\"number\">3</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    getDiscount(pay, level) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (level === <span class=\"keyword\">this</span>.level) &#123;</span><br><span class=\"line\">            <span class=\"built_in\">console</span>.log(pay * <span class=\"number\">0.7</span>);</span><br><span class=\"line\">        &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">            <span class=\"keyword\">this</span>.nextChain.getDiscount(pay, level);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    setNextChain(obj) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.nextChain = obj;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Vip1</span></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">constructor</span>() &#123;</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.level = <span class=\"number\">1</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    getDiscount(pay, level) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (level === <span class=\"keyword\">this</span>.level) &#123;</span><br><span class=\"line\">            <span class=\"built_in\">console</span>.log(pay * <span class=\"number\">0.9</span>);</span><br><span class=\"line\">        &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">            <span class=\"keyword\">this</span>.nextChain.getDiscount(pay, level);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    setNextChain(obj) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.nextChain = obj;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h1 id=\"函数式例子：\"><a href=\"#函数式例子：\" class=\"headerlink\" title=\"函数式例子：\"></a>函数式例子：</h1><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">(<span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">var</span> order = <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">orderType, pay, stock</span>) </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (orderType === <span class=\"number\">1</span>) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (pay === <span class=\"literal\">true</span>) &#123;</span><br><span class=\"line\">                <span class=\"built_in\">console</span>.log(<span class=\"string\">'500元定金预购，得到100优惠券'</span>);</span><br><span class=\"line\">            &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">                <span class=\"keyword\">if</span> (stock &gt; <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">                    <span class=\"built_in\">console</span>.log(<span class=\"string\">'普通购买'</span>);</span><br><span class=\"line\">                &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">                    <span class=\"built_in\">console</span>.log(<span class=\"string\">'手机库存不足'</span>);</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (ordertype === <span class=\"number\">2</span>) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (pay === <span class=\"literal\">true</span>) &#123;</span><br><span class=\"line\">                <span class=\"built_in\">console</span>.log(<span class=\"string\">'200元定金预购，得到50元优惠券'</span>);</span><br><span class=\"line\">            &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">                <span class=\"keyword\">if</span> (stock &gt; <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">                    <span class=\"built_in\">console</span>.log(<span class=\"string\">'普通购买'</span>);</span><br><span class=\"line\">                &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">                    <span class=\"built_in\">console</span>.log(<span class=\"string\">'手机库存不足'</span>);</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (orderType === <span class=\"number\">3</span>) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (stock &gt; <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">                <span class=\"built_in\">console</span>.log(<span class=\"string\">'普通购买'</span>);</span><br><span class=\"line\">            &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">                <span class=\"built_in\">console</span>.log(<span class=\"string\">'手机库存不足'</span>);</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">var</span> Chain = <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">fn</span>) </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.fn = fn;</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.successor = <span class=\"literal\">null</span>;</span><br><span class=\"line\">    &#125;;</span><br><span class=\"line\"></span><br><span class=\"line\">    Chain.prototype.setNextSuccessor = <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">successor</span>) </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.successor = successor;</span><br><span class=\"line\">    &#125;;</span><br><span class=\"line\"></span><br><span class=\"line\">    Chain.prototype.passRequest = <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">var</span> ret = <span class=\"keyword\">this</span>.fn.apply(<span class=\"keyword\">this</span>, <span class=\"built_in\">arguments</span>);</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (ret === <span class=\"string\">'nextSuccessor'</span>) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"keyword\">this</span>.successor &amp;&amp; <span class=\"keyword\">this</span>.successor.passRequest.apply(<span class=\"keyword\">this</span>.successor, <span class=\"built_in\">arguments</span>);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">var</span> order500 = <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">orderType, pay, stock</span>) </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (orderType === <span class=\"number\">1</span> &amp;&amp; pay === <span class=\"literal\">true</span>) &#123;</span><br><span class=\"line\">            <span class=\"built_in\">console</span>.log(<span class=\"string\">'500元定金预购，得到100元优惠券'</span>);</span><br><span class=\"line\">        &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"string\">'nextSuccessor'</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">var</span> order200 = <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">orderType, pay, stock</span>) </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (orderType === <span class=\"number\">2</span> &amp;&amp; pay === <span class=\"literal\">true</span>) &#123;</span><br><span class=\"line\">            <span class=\"built_in\">console</span>.log(<span class=\"string\">'200元定金预购，得到50元优惠券'</span>);</span><br><span class=\"line\">        &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"string\">'nextSuccessor'</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">var</span> orderNormal = <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">orderType, pay, stock</span>) </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (stock &gt; <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">            <span class=\"built_in\">console</span>.log(<span class=\"string\">'普通购买，无优惠券'</span>);</span><br><span class=\"line\">        &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">            <span class=\"built_in\">console</span>.log(<span class=\"string\">'手机库存不足'</span>);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">var</span> init = <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">        order(<span class=\"number\">1</span>, <span class=\"literal\">true</span>, <span class=\"number\">500</span>);</span><br><span class=\"line\">        <span class=\"keyword\">var</span> chainOrder500 = <span class=\"keyword\">new</span> Chain(order500);</span><br><span class=\"line\">        <span class=\"keyword\">var</span> chainOrder200 = <span class=\"keyword\">new</span> Chain(order200);</span><br><span class=\"line\">        <span class=\"keyword\">var</span> chainOrderNomal = <span class=\"keyword\">new</span> Chain(orderNormal);</span><br><span class=\"line\"></span><br><span class=\"line\">        chainOrder500.setNextSuccessor(chainOrder200);</span><br><span class=\"line\">        chainOrder200.setNextSuccessor(chainOrderNomal);</span><br><span class=\"line\">        chainOrder500.passRequest(<span class=\"number\">1</span>, <span class=\"literal\">false</span>, <span class=\"number\">100</span>);</span><br><span class=\"line\">    &#125;;</span><br><span class=\"line\">    init();</span><br><span class=\"line\">&#125;)();</span><br></pre></td></tr></table></figure>","site":{"data":{"projects":[{"name":"AiTing","url":"https://github.com/renhongl/aiting","desc":"HTML5客户端音乐播放器"},{"name":"AiLiao","url":"https://github.com/renhongl/ailiao","desc":"网页聊天软件"},{"name":"Pomelo Editor","url":"https://renhongl.github.io/markdown-editor/","desc":"功能强大的在线Markdown编辑器"}]}},"excerpt":"","more":"<h1 id=\"什么是职责链模式\"><a href=\"#什么是职责链模式\" class=\"headerlink\" title=\"什么是职责链模式\"></a>什么是职责链模式</h1><h1 id=\"面向对象例子：\"><a href=\"#面向对象例子：\" class=\"headerlink\" title=\"面向对象例子：\"></a>面向对象例子：</h1><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Vip5</span></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">constructor</span>() &#123;</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.level = <span class=\"number\">5</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    getDiscount(pay, level) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (level === <span class=\"keyword\">this</span>.level) &#123;</span><br><span class=\"line\">            <span class=\"built_in\">console</span>.log(pay * <span class=\"number\">0.5</span>);</span><br><span class=\"line\">        &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">            <span class=\"keyword\">this</span>.nextChain.getDiscount(pay, level);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    setNextChain(obj) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.nextChain = obj;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Vip3</span></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">constructor</span>() &#123;</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.level = <span class=\"number\">3</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    getDiscount(pay, level) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (level === <span class=\"keyword\">this</span>.level) &#123;</span><br><span class=\"line\">            <span class=\"built_in\">console</span>.log(pay * <span class=\"number\">0.7</span>);</span><br><span class=\"line\">        &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">            <span class=\"keyword\">this</span>.nextChain.getDiscount(pay, level);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    setNextChain(obj) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.nextChain = obj;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Vip1</span></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">constructor</span>() &#123;</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.level = <span class=\"number\">1</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    getDiscount(pay, level) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (level === <span class=\"keyword\">this</span>.level) &#123;</span><br><span class=\"line\">            <span class=\"built_in\">console</span>.log(pay * <span class=\"number\">0.9</span>);</span><br><span class=\"line\">        &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">            <span class=\"keyword\">this</span>.nextChain.getDiscount(pay, level);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    setNextChain(obj) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.nextChain = obj;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h1 id=\"函数式例子：\"><a href=\"#函数式例子：\" class=\"headerlink\" title=\"函数式例子：\"></a>函数式例子：</h1><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">(<span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">var</span> order = <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">orderType, pay, stock</span>) </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (orderType === <span class=\"number\">1</span>) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (pay === <span class=\"literal\">true</span>) &#123;</span><br><span class=\"line\">                <span class=\"built_in\">console</span>.log(<span class=\"string\">'500元定金预购，得到100优惠券'</span>);</span><br><span class=\"line\">            &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">                <span class=\"keyword\">if</span> (stock &gt; <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">                    <span class=\"built_in\">console</span>.log(<span class=\"string\">'普通购买'</span>);</span><br><span class=\"line\">                &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">                    <span class=\"built_in\">console</span>.log(<span class=\"string\">'手机库存不足'</span>);</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (ordertype === <span class=\"number\">2</span>) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (pay === <span class=\"literal\">true</span>) &#123;</span><br><span class=\"line\">                <span class=\"built_in\">console</span>.log(<span class=\"string\">'200元定金预购，得到50元优惠券'</span>);</span><br><span class=\"line\">            &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">                <span class=\"keyword\">if</span> (stock &gt; <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">                    <span class=\"built_in\">console</span>.log(<span class=\"string\">'普通购买'</span>);</span><br><span class=\"line\">                &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">                    <span class=\"built_in\">console</span>.log(<span class=\"string\">'手机库存不足'</span>);</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (orderType === <span class=\"number\">3</span>) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (stock &gt; <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">                <span class=\"built_in\">console</span>.log(<span class=\"string\">'普通购买'</span>);</span><br><span class=\"line\">            &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">                <span class=\"built_in\">console</span>.log(<span class=\"string\">'手机库存不足'</span>);</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">var</span> Chain = <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">fn</span>) </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.fn = fn;</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.successor = <span class=\"literal\">null</span>;</span><br><span class=\"line\">    &#125;;</span><br><span class=\"line\"></span><br><span class=\"line\">    Chain.prototype.setNextSuccessor = <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">successor</span>) </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.successor = successor;</span><br><span class=\"line\">    &#125;;</span><br><span class=\"line\"></span><br><span class=\"line\">    Chain.prototype.passRequest = <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">var</span> ret = <span class=\"keyword\">this</span>.fn.apply(<span class=\"keyword\">this</span>, <span class=\"built_in\">arguments</span>);</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (ret === <span class=\"string\">'nextSuccessor'</span>) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"keyword\">this</span>.successor &amp;&amp; <span class=\"keyword\">this</span>.successor.passRequest.apply(<span class=\"keyword\">this</span>.successor, <span class=\"built_in\">arguments</span>);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">var</span> order500 = <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">orderType, pay, stock</span>) </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (orderType === <span class=\"number\">1</span> &amp;&amp; pay === <span class=\"literal\">true</span>) &#123;</span><br><span class=\"line\">            <span class=\"built_in\">console</span>.log(<span class=\"string\">'500元定金预购，得到100元优惠券'</span>);</span><br><span class=\"line\">        &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"string\">'nextSuccessor'</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">var</span> order200 = <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">orderType, pay, stock</span>) </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (orderType === <span class=\"number\">2</span> &amp;&amp; pay === <span class=\"literal\">true</span>) &#123;</span><br><span class=\"line\">            <span class=\"built_in\">console</span>.log(<span class=\"string\">'200元定金预购，得到50元优惠券'</span>);</span><br><span class=\"line\">        &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"string\">'nextSuccessor'</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">var</span> orderNormal = <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">orderType, pay, stock</span>) </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (stock &gt; <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">            <span class=\"built_in\">console</span>.log(<span class=\"string\">'普通购买，无优惠券'</span>);</span><br><span class=\"line\">        &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">            <span class=\"built_in\">console</span>.log(<span class=\"string\">'手机库存不足'</span>);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">var</span> init = <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">        order(<span class=\"number\">1</span>, <span class=\"literal\">true</span>, <span class=\"number\">500</span>);</span><br><span class=\"line\">        <span class=\"keyword\">var</span> chainOrder500 = <span class=\"keyword\">new</span> Chain(order500);</span><br><span class=\"line\">        <span class=\"keyword\">var</span> chainOrder200 = <span class=\"keyword\">new</span> Chain(order200);</span><br><span class=\"line\">        <span class=\"keyword\">var</span> chainOrderNomal = <span class=\"keyword\">new</span> Chain(orderNormal);</span><br><span class=\"line\"></span><br><span class=\"line\">        chainOrder500.setNextSuccessor(chainOrder200);</span><br><span class=\"line\">        chainOrder200.setNextSuccessor(chainOrderNomal);</span><br><span class=\"line\">        chainOrder500.passRequest(<span class=\"number\">1</span>, <span class=\"literal\">false</span>, <span class=\"number\">100</span>);</span><br><span class=\"line\">    &#125;;</span><br><span class=\"line\">    init();</span><br><span class=\"line\">&#125;)();</span><br></pre></td></tr></table></figure>"},{"title":"策略模式","date":"2018-05-05T13:54:32.000Z","_content":"\n\n# 什么是策略模式\n定义一系列的算法，把它们一个个封装起来，并且使它们可以互相替换。\n\n一个基于策略模式的程序至少由两部分组成。第一个部分是一组策略类，策略类封装了具体的算法，并负责具体的计算过程。第二个部分是环境类context，context接受客户的请求，随后把请求委托给某一个策略类。\n\n策略模式可以消除程序中大片的条件分支语句。\n\n\n\n\n# 面向对象例子：\n\n```js\nclass LevelA{\n    calculate(salary) {\n        return salary * 2;\n    }\n}\n\nclass LevelB{\n    calculate(salary) {\n        return salary * 3;\n    }\n}\n\nclass LevelC{\n    calculate(salary) {\n        return salary * 4;\n    }\n}\n\nexport class GetBonus{\n    constructor() {\n        this.calculateMapping = {\n            A: new LevelA(),\n            B: new LevelB(),\n            C: new LevelC()\n        }\n    }\n\n    calculate(type, salary) {\n        return this.calculateMapping[type].calculate(salary);\n    }\n}\n```\n# 函数式例子：\n\n```js\n/**\n * 使用策略模式实现表单验证\n */\n\n(function () {\n\n    var strategies = {\n        isNotEmpty: function (value, errorMsg) {\n            if (value === '') {\n                return errorMsg;\n            }\n        },\n        minLength: function (value, length, errorMsg) {\n            if (value.length < length) {\n                return errorMsg;\n            }\n        },\n        isMobile: function (value, errorMsg) {\n            if (!/(^1[3|5|8][0-9]{9}$)/.test(value)) {\n                return errorMsg;\n            }\n        },\n        isNumber: function (value, errorMsg) {\n            if (isNaN(Number(value))) {\n                return errorMsg;\n            }\n        }\n    };\n\n    var registerForm = document.querySelector('form');\n\n    var Validator = function () {\n        this.cache = [];\n    };\n\n    Validator.prototype.add = function (dom, rule, errorMsg) {\n        var arr = rule.split(':');\n        this.cache.push(function () {\n            var strategy = arr.shift();\n            arr.unshift(dom.value);\n            arr.push(errorMsg);\n            return strategies[strategy].apply(dom, arr)\n        });\n    };\n\n    Validator.prototype.start = function () {\n        for (var i = 0, len = this.cache.length; i < len; i++) {\n            var msg = this.cache[i]();\n            if (msg) {\n                return msg;\n            }\n        }\n    };\n\n    var validataFunc = function () {\n        var validator = new Validator();\n        validator.add(registerForm.number, 'isNotEmpty', '数量不能为空');\n        validator.add(registerForm.number, 'isNumber', '请输入数字');\n        validator.add(registerForm.number, 'minLength:2', '数量至少要2位字符');\n        var errorMsg = validator.start();\n        return errorMsg;\n    };\n\n    var init = function () {\n        document.querySelector('.submitBtn').onclick = function () {\n            var errorMsg = validataFunc();\n            if (errorMsg) {\n                alert(errorMsg);\n            } else {\n                Event.trigger('draw-circle', {number: registerForm.number.value});\n            }\n        };\n    };\n\n    init();\n\n})();\n```\n","source":"_posts/策略模式.md","raw":"---\ntitle: 策略模式\ndate: 2018-05-05 21:54:32\ntags:\n\t- Javascript设计模式\n---\n\n\n# 什么是策略模式\n定义一系列的算法，把它们一个个封装起来，并且使它们可以互相替换。\n\n一个基于策略模式的程序至少由两部分组成。第一个部分是一组策略类，策略类封装了具体的算法，并负责具体的计算过程。第二个部分是环境类context，context接受客户的请求，随后把请求委托给某一个策略类。\n\n策略模式可以消除程序中大片的条件分支语句。\n\n\n\n\n# 面向对象例子：\n\n```js\nclass LevelA{\n    calculate(salary) {\n        return salary * 2;\n    }\n}\n\nclass LevelB{\n    calculate(salary) {\n        return salary * 3;\n    }\n}\n\nclass LevelC{\n    calculate(salary) {\n        return salary * 4;\n    }\n}\n\nexport class GetBonus{\n    constructor() {\n        this.calculateMapping = {\n            A: new LevelA(),\n            B: new LevelB(),\n            C: new LevelC()\n        }\n    }\n\n    calculate(type, salary) {\n        return this.calculateMapping[type].calculate(salary);\n    }\n}\n```\n# 函数式例子：\n\n```js\n/**\n * 使用策略模式实现表单验证\n */\n\n(function () {\n\n    var strategies = {\n        isNotEmpty: function (value, errorMsg) {\n            if (value === '') {\n                return errorMsg;\n            }\n        },\n        minLength: function (value, length, errorMsg) {\n            if (value.length < length) {\n                return errorMsg;\n            }\n        },\n        isMobile: function (value, errorMsg) {\n            if (!/(^1[3|5|8][0-9]{9}$)/.test(value)) {\n                return errorMsg;\n            }\n        },\n        isNumber: function (value, errorMsg) {\n            if (isNaN(Number(value))) {\n                return errorMsg;\n            }\n        }\n    };\n\n    var registerForm = document.querySelector('form');\n\n    var Validator = function () {\n        this.cache = [];\n    };\n\n    Validator.prototype.add = function (dom, rule, errorMsg) {\n        var arr = rule.split(':');\n        this.cache.push(function () {\n            var strategy = arr.shift();\n            arr.unshift(dom.value);\n            arr.push(errorMsg);\n            return strategies[strategy].apply(dom, arr)\n        });\n    };\n\n    Validator.prototype.start = function () {\n        for (var i = 0, len = this.cache.length; i < len; i++) {\n            var msg = this.cache[i]();\n            if (msg) {\n                return msg;\n            }\n        }\n    };\n\n    var validataFunc = function () {\n        var validator = new Validator();\n        validator.add(registerForm.number, 'isNotEmpty', '数量不能为空');\n        validator.add(registerForm.number, 'isNumber', '请输入数字');\n        validator.add(registerForm.number, 'minLength:2', '数量至少要2位字符');\n        var errorMsg = validator.start();\n        return errorMsg;\n    };\n\n    var init = function () {\n        document.querySelector('.submitBtn').onclick = function () {\n            var errorMsg = validataFunc();\n            if (errorMsg) {\n                alert(errorMsg);\n            } else {\n                Event.trigger('draw-circle', {number: registerForm.number.value});\n            }\n        };\n    };\n\n    init();\n\n})();\n```\n","slug":"策略模式","published":1,"updated":"2019-11-04T07:00:37.538Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ck2vg6gxd00304cobdesyp08r","content":"<h1 id=\"什么是策略模式\"><a href=\"#什么是策略模式\" class=\"headerlink\" title=\"什么是策略模式\"></a>什么是策略模式</h1><p>定义一系列的算法，把它们一个个封装起来，并且使它们可以互相替换。</p>\n<p>一个基于策略模式的程序至少由两部分组成。第一个部分是一组策略类，策略类封装了具体的算法，并负责具体的计算过程。第二个部分是环境类context，context接受客户的请求，随后把请求委托给某一个策略类。</p>\n<p>策略模式可以消除程序中大片的条件分支语句。</p>\n<h1 id=\"面向对象例子：\"><a href=\"#面向对象例子：\" class=\"headerlink\" title=\"面向对象例子：\"></a>面向对象例子：</h1><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">LevelA</span></span>&#123;</span><br><span class=\"line\">    calculate(salary) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> salary * <span class=\"number\">2</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">LevelB</span></span>&#123;</span><br><span class=\"line\">    calculate(salary) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> salary * <span class=\"number\">3</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">LevelC</span></span>&#123;</span><br><span class=\"line\">    calculate(salary) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> salary * <span class=\"number\">4</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">GetBonus</span></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">constructor</span>() &#123;</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.calculateMapping = &#123;</span><br><span class=\"line\">            A: <span class=\"keyword\">new</span> LevelA(),</span><br><span class=\"line\">            B: <span class=\"keyword\">new</span> LevelB(),</span><br><span class=\"line\">            C: <span class=\"keyword\">new</span> LevelC()</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    calculate(type, salary) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">this</span>.calculateMapping[type].calculate(salary);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h1 id=\"函数式例子：\"><a href=\"#函数式例子：\" class=\"headerlink\" title=\"函数式例子：\"></a>函数式例子：</h1><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * 使用策略模式实现表单验证</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"></span><br><span class=\"line\">(<span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">var</span> strategies = &#123;</span><br><span class=\"line\">        isNotEmpty: <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">value, errorMsg</span>) </span>&#123;</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (value === <span class=\"string\">''</span>) &#123;</span><br><span class=\"line\">                <span class=\"keyword\">return</span> errorMsg;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;,</span><br><span class=\"line\">        minLength: <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">value, length, errorMsg</span>) </span>&#123;</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (value.length &lt; length) &#123;</span><br><span class=\"line\">                <span class=\"keyword\">return</span> errorMsg;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;,</span><br><span class=\"line\">        isMobile: <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">value, errorMsg</span>) </span>&#123;</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (!<span class=\"regexp\">/(^1[3|5|8][0-9]&#123;9&#125;$)/</span>.test(value)) &#123;</span><br><span class=\"line\">                <span class=\"keyword\">return</span> errorMsg;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;,</span><br><span class=\"line\">        isNumber: <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">value, errorMsg</span>) </span>&#123;</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (<span class=\"built_in\">isNaN</span>(<span class=\"built_in\">Number</span>(value))) &#123;</span><br><span class=\"line\">                <span class=\"keyword\">return</span> errorMsg;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">var</span> registerForm = <span class=\"built_in\">document</span>.querySelector(<span class=\"string\">'form'</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">var</span> Validator = <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.cache = [];</span><br><span class=\"line\">    &#125;;</span><br><span class=\"line\"></span><br><span class=\"line\">    Validator.prototype.add = <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">dom, rule, errorMsg</span>) </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">var</span> arr = rule.split(<span class=\"string\">':'</span>);</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.cache.push(<span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">            <span class=\"keyword\">var</span> strategy = arr.shift();</span><br><span class=\"line\">            arr.unshift(dom.value);</span><br><span class=\"line\">            arr.push(errorMsg);</span><br><span class=\"line\">            <span class=\"keyword\">return</span> strategies[strategy].apply(dom, arr)</span><br><span class=\"line\">        &#125;);</span><br><span class=\"line\">    &#125;;</span><br><span class=\"line\"></span><br><span class=\"line\">    Validator.prototype.start = <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"keyword\">var</span> i = <span class=\"number\">0</span>, len = <span class=\"keyword\">this</span>.cache.length; i &lt; len; i++) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">var</span> msg = <span class=\"keyword\">this</span>.cache[i]();</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (msg) &#123;</span><br><span class=\"line\">                <span class=\"keyword\">return</span> msg;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">var</span> validataFunc = <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">var</span> validator = <span class=\"keyword\">new</span> Validator();</span><br><span class=\"line\">        validator.add(registerForm.number, <span class=\"string\">'isNotEmpty'</span>, <span class=\"string\">'数量不能为空'</span>);</span><br><span class=\"line\">        validator.add(registerForm.number, <span class=\"string\">'isNumber'</span>, <span class=\"string\">'请输入数字'</span>);</span><br><span class=\"line\">        validator.add(registerForm.number, <span class=\"string\">'minLength:2'</span>, <span class=\"string\">'数量至少要2位字符'</span>);</span><br><span class=\"line\">        <span class=\"keyword\">var</span> errorMsg = validator.start();</span><br><span class=\"line\">        <span class=\"keyword\">return</span> errorMsg;</span><br><span class=\"line\">    &#125;;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">var</span> init = <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">        <span class=\"built_in\">document</span>.querySelector(<span class=\"string\">'.submitBtn'</span>).onclick = <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">            <span class=\"keyword\">var</span> errorMsg = validataFunc();</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (errorMsg) &#123;</span><br><span class=\"line\">                alert(errorMsg);</span><br><span class=\"line\">            &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">                Event.trigger(<span class=\"string\">'draw-circle'</span>, &#123;<span class=\"attr\">number</span>: registerForm.number.value&#125;);</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;;</span><br><span class=\"line\">    &#125;;</span><br><span class=\"line\"></span><br><span class=\"line\">    init();</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;)();</span><br></pre></td></tr></table></figure>\n","site":{"data":{"projects":[{"name":"AiTing","url":"https://github.com/renhongl/aiting","desc":"HTML5客户端音乐播放器"},{"name":"AiLiao","url":"https://github.com/renhongl/ailiao","desc":"网页聊天软件"},{"name":"Pomelo Editor","url":"https://renhongl.github.io/markdown-editor/","desc":"功能强大的在线Markdown编辑器"}]}},"excerpt":"","more":"<h1 id=\"什么是策略模式\"><a href=\"#什么是策略模式\" class=\"headerlink\" title=\"什么是策略模式\"></a>什么是策略模式</h1><p>定义一系列的算法，把它们一个个封装起来，并且使它们可以互相替换。</p>\n<p>一个基于策略模式的程序至少由两部分组成。第一个部分是一组策略类，策略类封装了具体的算法，并负责具体的计算过程。第二个部分是环境类context，context接受客户的请求，随后把请求委托给某一个策略类。</p>\n<p>策略模式可以消除程序中大片的条件分支语句。</p>\n<h1 id=\"面向对象例子：\"><a href=\"#面向对象例子：\" class=\"headerlink\" title=\"面向对象例子：\"></a>面向对象例子：</h1><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">LevelA</span></span>&#123;</span><br><span class=\"line\">    calculate(salary) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> salary * <span class=\"number\">2</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">LevelB</span></span>&#123;</span><br><span class=\"line\">    calculate(salary) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> salary * <span class=\"number\">3</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">LevelC</span></span>&#123;</span><br><span class=\"line\">    calculate(salary) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> salary * <span class=\"number\">4</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">GetBonus</span></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">constructor</span>() &#123;</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.calculateMapping = &#123;</span><br><span class=\"line\">            A: <span class=\"keyword\">new</span> LevelA(),</span><br><span class=\"line\">            B: <span class=\"keyword\">new</span> LevelB(),</span><br><span class=\"line\">            C: <span class=\"keyword\">new</span> LevelC()</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    calculate(type, salary) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">this</span>.calculateMapping[type].calculate(salary);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h1 id=\"函数式例子：\"><a href=\"#函数式例子：\" class=\"headerlink\" title=\"函数式例子：\"></a>函数式例子：</h1><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * 使用策略模式实现表单验证</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"></span><br><span class=\"line\">(<span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">var</span> strategies = &#123;</span><br><span class=\"line\">        isNotEmpty: <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">value, errorMsg</span>) </span>&#123;</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (value === <span class=\"string\">''</span>) &#123;</span><br><span class=\"line\">                <span class=\"keyword\">return</span> errorMsg;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;,</span><br><span class=\"line\">        minLength: <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">value, length, errorMsg</span>) </span>&#123;</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (value.length &lt; length) &#123;</span><br><span class=\"line\">                <span class=\"keyword\">return</span> errorMsg;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;,</span><br><span class=\"line\">        isMobile: <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">value, errorMsg</span>) </span>&#123;</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (!<span class=\"regexp\">/(^1[3|5|8][0-9]&#123;9&#125;$)/</span>.test(value)) &#123;</span><br><span class=\"line\">                <span class=\"keyword\">return</span> errorMsg;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;,</span><br><span class=\"line\">        isNumber: <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">value, errorMsg</span>) </span>&#123;</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (<span class=\"built_in\">isNaN</span>(<span class=\"built_in\">Number</span>(value))) &#123;</span><br><span class=\"line\">                <span class=\"keyword\">return</span> errorMsg;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">var</span> registerForm = <span class=\"built_in\">document</span>.querySelector(<span class=\"string\">'form'</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">var</span> Validator = <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.cache = [];</span><br><span class=\"line\">    &#125;;</span><br><span class=\"line\"></span><br><span class=\"line\">    Validator.prototype.add = <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">dom, rule, errorMsg</span>) </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">var</span> arr = rule.split(<span class=\"string\">':'</span>);</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.cache.push(<span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">            <span class=\"keyword\">var</span> strategy = arr.shift();</span><br><span class=\"line\">            arr.unshift(dom.value);</span><br><span class=\"line\">            arr.push(errorMsg);</span><br><span class=\"line\">            <span class=\"keyword\">return</span> strategies[strategy].apply(dom, arr)</span><br><span class=\"line\">        &#125;);</span><br><span class=\"line\">    &#125;;</span><br><span class=\"line\"></span><br><span class=\"line\">    Validator.prototype.start = <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"keyword\">var</span> i = <span class=\"number\">0</span>, len = <span class=\"keyword\">this</span>.cache.length; i &lt; len; i++) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">var</span> msg = <span class=\"keyword\">this</span>.cache[i]();</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (msg) &#123;</span><br><span class=\"line\">                <span class=\"keyword\">return</span> msg;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">var</span> validataFunc = <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">var</span> validator = <span class=\"keyword\">new</span> Validator();</span><br><span class=\"line\">        validator.add(registerForm.number, <span class=\"string\">'isNotEmpty'</span>, <span class=\"string\">'数量不能为空'</span>);</span><br><span class=\"line\">        validator.add(registerForm.number, <span class=\"string\">'isNumber'</span>, <span class=\"string\">'请输入数字'</span>);</span><br><span class=\"line\">        validator.add(registerForm.number, <span class=\"string\">'minLength:2'</span>, <span class=\"string\">'数量至少要2位字符'</span>);</span><br><span class=\"line\">        <span class=\"keyword\">var</span> errorMsg = validator.start();</span><br><span class=\"line\">        <span class=\"keyword\">return</span> errorMsg;</span><br><span class=\"line\">    &#125;;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">var</span> init = <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">        <span class=\"built_in\">document</span>.querySelector(<span class=\"string\">'.submitBtn'</span>).onclick = <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">            <span class=\"keyword\">var</span> errorMsg = validataFunc();</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (errorMsg) &#123;</span><br><span class=\"line\">                alert(errorMsg);</span><br><span class=\"line\">            &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">                Event.trigger(<span class=\"string\">'draw-circle'</span>, &#123;<span class=\"attr\">number</span>: registerForm.number.value&#125;);</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;;</span><br><span class=\"line\">    &#125;;</span><br><span class=\"line\"></span><br><span class=\"line\">    init();</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;)();</span><br></pre></td></tr></table></figure>\n"},{"title":"装饰者模式","date":"2018-05-25T13:54:32.000Z","_content":"\n\n\n# 什么是装饰者模式\n\n\n\n\n\n# 函数式例子：\n\n```js\n//Example 1\nFunction.prototype.before = function(beforeFn) {\n    let self = this;\n    return function() {\n        beforeFn.apply(this, arguments);\n        self.apply(this, arguments);\n    }\n}\n\nFunction.prototype.after = function(afterFn) {\n    let self = this;\n    return function() {\n        self.apply(this, arguments);\n        afterFn.apply(this, arguments);\n    }\n}\n\n\n//Example 2\nlet a = function() {\n    alert(1);\n}\n\nlet _a = a;\n\na = function() {\n    _a();\n    alert(2);\n}\n\n//Example 3\nwindow.onload = function() {\n    alert(1);\n}\n\nlet onload = window.onload;\n\nwindow.onload = function() {\n    onload();\n    alert(2);\n}\n```","source":"_posts/装饰者模式.md","raw":"---\ntitle: 装饰者模式\ndate: 2018-05-25 21:54:32\ntags:\n\t- Javascript设计模式\n---\n\n\n\n# 什么是装饰者模式\n\n\n\n\n\n# 函数式例子：\n\n```js\n//Example 1\nFunction.prototype.before = function(beforeFn) {\n    let self = this;\n    return function() {\n        beforeFn.apply(this, arguments);\n        self.apply(this, arguments);\n    }\n}\n\nFunction.prototype.after = function(afterFn) {\n    let self = this;\n    return function() {\n        self.apply(this, arguments);\n        afterFn.apply(this, arguments);\n    }\n}\n\n\n//Example 2\nlet a = function() {\n    alert(1);\n}\n\nlet _a = a;\n\na = function() {\n    _a();\n    alert(2);\n}\n\n//Example 3\nwindow.onload = function() {\n    alert(1);\n}\n\nlet onload = window.onload;\n\nwindow.onload = function() {\n    onload();\n    alert(2);\n}\n```","slug":"装饰者模式","published":1,"updated":"2019-11-04T07:00:44.314Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ck2vg6gxf00334cobtcr6ddls","content":"<h1 id=\"什么是装饰者模式\"><a href=\"#什么是装饰者模式\" class=\"headerlink\" title=\"什么是装饰者模式\"></a>什么是装饰者模式</h1><h1 id=\"函数式例子：\"><a href=\"#函数式例子：\" class=\"headerlink\" title=\"函数式例子：\"></a>函数式例子：</h1><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//Example 1</span></span><br><span class=\"line\"><span class=\"built_in\">Function</span>.prototype.before = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">beforeFn</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">let</span> self = <span class=\"keyword\">this</span>;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">        beforeFn.apply(<span class=\"keyword\">this</span>, <span class=\"built_in\">arguments</span>);</span><br><span class=\"line\">        self.apply(<span class=\"keyword\">this</span>, <span class=\"built_in\">arguments</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">Function</span>.prototype.after = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">afterFn</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">let</span> self = <span class=\"keyword\">this</span>;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">        self.apply(<span class=\"keyword\">this</span>, <span class=\"built_in\">arguments</span>);</span><br><span class=\"line\">        afterFn.apply(<span class=\"keyword\">this</span>, <span class=\"built_in\">arguments</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//Example 2</span></span><br><span class=\"line\"><span class=\"keyword\">let</span> a = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">    alert(<span class=\"number\">1</span>);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">let</span> _a = a;</span><br><span class=\"line\"></span><br><span class=\"line\">a = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">    _a();</span><br><span class=\"line\">    alert(<span class=\"number\">2</span>);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//Example 3</span></span><br><span class=\"line\"><span class=\"built_in\">window</span>.onload = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">    alert(<span class=\"number\">1</span>);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">let</span> onload = <span class=\"built_in\">window</span>.onload;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">window</span>.onload = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">    onload();</span><br><span class=\"line\">    alert(<span class=\"number\">2</span>);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>","site":{"data":{"projects":[{"name":"AiTing","url":"https://github.com/renhongl/aiting","desc":"HTML5客户端音乐播放器"},{"name":"AiLiao","url":"https://github.com/renhongl/ailiao","desc":"网页聊天软件"},{"name":"Pomelo Editor","url":"https://renhongl.github.io/markdown-editor/","desc":"功能强大的在线Markdown编辑器"}]}},"excerpt":"","more":"<h1 id=\"什么是装饰者模式\"><a href=\"#什么是装饰者模式\" class=\"headerlink\" title=\"什么是装饰者模式\"></a>什么是装饰者模式</h1><h1 id=\"函数式例子：\"><a href=\"#函数式例子：\" class=\"headerlink\" title=\"函数式例子：\"></a>函数式例子：</h1><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//Example 1</span></span><br><span class=\"line\"><span class=\"built_in\">Function</span>.prototype.before = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">beforeFn</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">let</span> self = <span class=\"keyword\">this</span>;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">        beforeFn.apply(<span class=\"keyword\">this</span>, <span class=\"built_in\">arguments</span>);</span><br><span class=\"line\">        self.apply(<span class=\"keyword\">this</span>, <span class=\"built_in\">arguments</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">Function</span>.prototype.after = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">afterFn</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">let</span> self = <span class=\"keyword\">this</span>;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">        self.apply(<span class=\"keyword\">this</span>, <span class=\"built_in\">arguments</span>);</span><br><span class=\"line\">        afterFn.apply(<span class=\"keyword\">this</span>, <span class=\"built_in\">arguments</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//Example 2</span></span><br><span class=\"line\"><span class=\"keyword\">let</span> a = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">    alert(<span class=\"number\">1</span>);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">let</span> _a = a;</span><br><span class=\"line\"></span><br><span class=\"line\">a = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">    _a();</span><br><span class=\"line\">    alert(<span class=\"number\">2</span>);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//Example 3</span></span><br><span class=\"line\"><span class=\"built_in\">window</span>.onload = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">    alert(<span class=\"number\">1</span>);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">let</span> onload = <span class=\"built_in\">window</span>.onload;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">window</span>.onload = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">    onload();</span><br><span class=\"line\">    alert(<span class=\"number\">2</span>);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>"},{"title":"观察者模式","date":"2018-05-13T13:54:32.000Z","_content":"\n\n\n# 什么是观察者模式\n具体写法： 使用Map将话题和要执行的回调方法一一对应的存下来，即订阅。在发布这个话题时，使用发布的参数，执行这个话题的回调方法。\n\n订阅前发布： 在发布某个话题时，如果这个话题尚未被订阅，那么将这个话题存储起来，等订阅之后，立即发布。那么，在写代码时，就不会发生发布在订阅之前，导致功能不能被触发的问题。\n\n\n\n命名空间： 如果整个项目都使用了此模式，很容易在没有命名空间的情况下混淆话题。\n\n# 面向对象例子：\n\n```js\nclass Observer{\n\tconstructor() {\n\t\tthis.topicMapping = {};\n\t\tthis.publishStore = {};\n\t}\t  \n\n\tsubscribe(...args) {\n\t\tlet topic = args.shift();\n\t\tlet callback = args.shift();\n\t\tif (!this.topicMapping[topic]) {\n\t\t\tthis.topicMapping[topic] = [];\n\t\t}\n\t\tthis.topicMapping[topic].push(callback);\n\t\tconsole.log(`subscribed topic ${topic}`);\n\t\t//check if had subscribed\n\t\tif (this.publishStore[topic]) {\n\t\t\tconsole.log(`trigger topic ${topic} immediately`);\n\t\t\tthis.publish(topic, this.publishStore[topic]);\n\t\t\tdelete this.publishStore[topic];\n\t\t}\n\t}\n  \n\tpublish(...args) {\n\t\tlet topic = args.shift();\n\t\tif (this.topicMapping[topic]) {\n\t\t\tthis.topicMapping[topic].forEach((v, k) => {\n\t\t\t\tv.apply(null, args);\n\t\t\t});\n\t\t} else {\n\t\t\tconsole.log(`no topic: ${topic} has been subscribed, this publish will store here, after subscribe, will trigger`);\n\t\t\tthis.publishStore[topic] = args;\n\t\t}\n\t}\n  \n\tunsubscribe(...args) {\n\t\tlet topic = args.shift();\n\t\tlet callback = args.shift();\n\t\tif (this.topicMapping[topic]) {\n\t\t\tdelete this.topicMapping[topic];\n\t\t\tif (callback instanceof Function) {\n\t\t\t\tcallback(args);\n\t\t\t}\n\t\t} else {\n\t\tconsole.log(`no topic ${topic} has been subscribe, so no need unsubscribe.`);\n\t\t}\n\t}\n}\nexport default Observer;\n```\n# 函数式例子：\n\n```js\n(function () {\n    window.Event = (function () {\n        var clientList = {},\n            offline = {},\n            listen,\n            trigger,\n            remove;\n            \n        listen = function (key, fn) {\n            if (!clientList[key]) {\n                clientList[key] = [];\n            }\n            clientList[key].push(fn);\n            if (offline[key]) {\n                fn.apply(this, offline[key].shift());\n            }\n        };\n\n        trigger = function () {\n            var key = Array.prototype.shift.call(arguments),\n                fns = clientList[key];\n            if (!fns || fns.length === 0) {\n                if (!offline[key]) {\n                    offline[key] = [];\n                }\n                offline[key].push(arguments);\n                return false;\n            }\n            for (var i = 0, len = fns.length; i < len; i++) {\n                fns[i].apply(this, arguments);\n            }\n        };\n\n        remove = function (key, fn) {\n            var fns = clientList[key];\n            if (!fns) {\n                return false;\n            }\n            if (!fn) {\n                fns.length = 0;\n            } else {\n                for (var i = 0, len = fns.length; i < len; i++) {\n                    var _fn = fns[i];\n                    if (_fn === fn) {\n                        fns.splice(i, 1);\n                    }\n                }\n            }\n        };\n\n        return {\n            listen: listen,\n            trigger: trigger,\n            remove: remove,\n        }\n\n    })();\n\n    var init = function () {\n        Event.trigger('loaded', {\n            name: 'renhongl',\n            age: 18\n        });\n\n        setTimeout(function () {\n            Event.listen('loaded', function (args) {\n                console.log(args);\n            });\n        }, 2000);\n    };\n\n    init();\n\n})();\n```","source":"_posts/观察者模式.md","raw":"---\ntitle: 观察者模式\ndate: 2018-05-13 21:54:32\ntags:\n\t- Javascript设计模式\n---\n\n\n\n# 什么是观察者模式\n具体写法： 使用Map将话题和要执行的回调方法一一对应的存下来，即订阅。在发布这个话题时，使用发布的参数，执行这个话题的回调方法。\n\n订阅前发布： 在发布某个话题时，如果这个话题尚未被订阅，那么将这个话题存储起来，等订阅之后，立即发布。那么，在写代码时，就不会发生发布在订阅之前，导致功能不能被触发的问题。\n\n\n\n命名空间： 如果整个项目都使用了此模式，很容易在没有命名空间的情况下混淆话题。\n\n# 面向对象例子：\n\n```js\nclass Observer{\n\tconstructor() {\n\t\tthis.topicMapping = {};\n\t\tthis.publishStore = {};\n\t}\t  \n\n\tsubscribe(...args) {\n\t\tlet topic = args.shift();\n\t\tlet callback = args.shift();\n\t\tif (!this.topicMapping[topic]) {\n\t\t\tthis.topicMapping[topic] = [];\n\t\t}\n\t\tthis.topicMapping[topic].push(callback);\n\t\tconsole.log(`subscribed topic ${topic}`);\n\t\t//check if had subscribed\n\t\tif (this.publishStore[topic]) {\n\t\t\tconsole.log(`trigger topic ${topic} immediately`);\n\t\t\tthis.publish(topic, this.publishStore[topic]);\n\t\t\tdelete this.publishStore[topic];\n\t\t}\n\t}\n  \n\tpublish(...args) {\n\t\tlet topic = args.shift();\n\t\tif (this.topicMapping[topic]) {\n\t\t\tthis.topicMapping[topic].forEach((v, k) => {\n\t\t\t\tv.apply(null, args);\n\t\t\t});\n\t\t} else {\n\t\t\tconsole.log(`no topic: ${topic} has been subscribed, this publish will store here, after subscribe, will trigger`);\n\t\t\tthis.publishStore[topic] = args;\n\t\t}\n\t}\n  \n\tunsubscribe(...args) {\n\t\tlet topic = args.shift();\n\t\tlet callback = args.shift();\n\t\tif (this.topicMapping[topic]) {\n\t\t\tdelete this.topicMapping[topic];\n\t\t\tif (callback instanceof Function) {\n\t\t\t\tcallback(args);\n\t\t\t}\n\t\t} else {\n\t\tconsole.log(`no topic ${topic} has been subscribe, so no need unsubscribe.`);\n\t\t}\n\t}\n}\nexport default Observer;\n```\n# 函数式例子：\n\n```js\n(function () {\n    window.Event = (function () {\n        var clientList = {},\n            offline = {},\n            listen,\n            trigger,\n            remove;\n            \n        listen = function (key, fn) {\n            if (!clientList[key]) {\n                clientList[key] = [];\n            }\n            clientList[key].push(fn);\n            if (offline[key]) {\n                fn.apply(this, offline[key].shift());\n            }\n        };\n\n        trigger = function () {\n            var key = Array.prototype.shift.call(arguments),\n                fns = clientList[key];\n            if (!fns || fns.length === 0) {\n                if (!offline[key]) {\n                    offline[key] = [];\n                }\n                offline[key].push(arguments);\n                return false;\n            }\n            for (var i = 0, len = fns.length; i < len; i++) {\n                fns[i].apply(this, arguments);\n            }\n        };\n\n        remove = function (key, fn) {\n            var fns = clientList[key];\n            if (!fns) {\n                return false;\n            }\n            if (!fn) {\n                fns.length = 0;\n            } else {\n                for (var i = 0, len = fns.length; i < len; i++) {\n                    var _fn = fns[i];\n                    if (_fn === fn) {\n                        fns.splice(i, 1);\n                    }\n                }\n            }\n        };\n\n        return {\n            listen: listen,\n            trigger: trigger,\n            remove: remove,\n        }\n\n    })();\n\n    var init = function () {\n        Event.trigger('loaded', {\n            name: 'renhongl',\n            age: 18\n        });\n\n        setTimeout(function () {\n            Event.listen('loaded', function (args) {\n                console.log(args);\n            });\n        }, 2000);\n    };\n\n    init();\n\n})();\n```","slug":"观察者模式","published":1,"updated":"2019-11-04T07:00:47.818Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ck2vg6gxh00354cob6nkwkndt","content":"<h1 id=\"什么是观察者模式\"><a href=\"#什么是观察者模式\" class=\"headerlink\" title=\"什么是观察者模式\"></a>什么是观察者模式</h1><p>具体写法： 使用Map将话题和要执行的回调方法一一对应的存下来，即订阅。在发布这个话题时，使用发布的参数，执行这个话题的回调方法。</p>\n<p>订阅前发布： 在发布某个话题时，如果这个话题尚未被订阅，那么将这个话题存储起来，等订阅之后，立即发布。那么，在写代码时，就不会发生发布在订阅之前，导致功能不能被触发的问题。</p>\n<p>命名空间： 如果整个项目都使用了此模式，很容易在没有命名空间的情况下混淆话题。</p>\n<h1 id=\"面向对象例子：\"><a href=\"#面向对象例子：\" class=\"headerlink\" title=\"面向对象例子：\"></a>面向对象例子：</h1><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Observer</span></span>&#123;</span><br><span class=\"line\">\t<span class=\"keyword\">constructor</span>() &#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">this</span>.topicMapping = &#123;&#125;;</span><br><span class=\"line\">\t\t<span class=\"keyword\">this</span>.publishStore = &#123;&#125;;</span><br><span class=\"line\">\t&#125;\t  </span><br><span class=\"line\"></span><br><span class=\"line\">\tsubscribe(...args) &#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">let</span> topic = args.shift();</span><br><span class=\"line\">\t\t<span class=\"keyword\">let</span> callback = args.shift();</span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span> (!<span class=\"keyword\">this</span>.topicMapping[topic]) &#123;</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">this</span>.topicMapping[topic] = [];</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t\t<span class=\"keyword\">this</span>.topicMapping[topic].push(callback);</span><br><span class=\"line\">\t\t<span class=\"built_in\">console</span>.log(<span class=\"string\">`subscribed topic <span class=\"subst\">$&#123;topic&#125;</span>`</span>);</span><br><span class=\"line\">\t\t<span class=\"comment\">//check if had subscribed</span></span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span> (<span class=\"keyword\">this</span>.publishStore[topic]) &#123;</span><br><span class=\"line\">\t\t\t<span class=\"built_in\">console</span>.log(<span class=\"string\">`trigger topic <span class=\"subst\">$&#123;topic&#125;</span> immediately`</span>);</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">this</span>.publish(topic, <span class=\"keyword\">this</span>.publishStore[topic]);</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">delete</span> <span class=\"keyword\">this</span>.publishStore[topic];</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">  </span><br><span class=\"line\">\tpublish(...args) &#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">let</span> topic = args.shift();</span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span> (<span class=\"keyword\">this</span>.topicMapping[topic]) &#123;</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">this</span>.topicMapping[topic].forEach(<span class=\"function\">(<span class=\"params\">v, k</span>) =&gt;</span> &#123;</span><br><span class=\"line\">\t\t\t\tv.apply(<span class=\"literal\">null</span>, args);</span><br><span class=\"line\">\t\t\t&#125;);</span><br><span class=\"line\">\t\t&#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">\t\t\t<span class=\"built_in\">console</span>.log(<span class=\"string\">`no topic: <span class=\"subst\">$&#123;topic&#125;</span> has been subscribed, this publish will store here, after subscribe, will trigger`</span>);</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">this</span>.publishStore[topic] = args;</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">  </span><br><span class=\"line\">\tunsubscribe(...args) &#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">let</span> topic = args.shift();</span><br><span class=\"line\">\t\t<span class=\"keyword\">let</span> callback = args.shift();</span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span> (<span class=\"keyword\">this</span>.topicMapping[topic]) &#123;</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">delete</span> <span class=\"keyword\">this</span>.topicMapping[topic];</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">if</span> (callback <span class=\"keyword\">instanceof</span> <span class=\"built_in\">Function</span>) &#123;</span><br><span class=\"line\">\t\t\t\tcallback(args);</span><br><span class=\"line\">\t\t\t&#125;</span><br><span class=\"line\">\t\t&#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">\t\t<span class=\"built_in\">console</span>.log(<span class=\"string\">`no topic <span class=\"subst\">$&#123;topic&#125;</span> has been subscribe, so no need unsubscribe.`</span>);</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">default</span> Observer;</span><br></pre></td></tr></table></figure>\n<h1 id=\"函数式例子：\"><a href=\"#函数式例子：\" class=\"headerlink\" title=\"函数式例子：\"></a>函数式例子：</h1><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">(<span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"built_in\">window</span>.Event = (<span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">var</span> clientList = &#123;&#125;,</span><br><span class=\"line\">            offline = &#123;&#125;,</span><br><span class=\"line\">            listen,</span><br><span class=\"line\">            trigger,</span><br><span class=\"line\">            remove;</span><br><span class=\"line\">            </span><br><span class=\"line\">        listen = <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">key, fn</span>) </span>&#123;</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (!clientList[key]) &#123;</span><br><span class=\"line\">                clientList[key] = [];</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            clientList[key].push(fn);</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (offline[key]) &#123;</span><br><span class=\"line\">                fn.apply(<span class=\"keyword\">this</span>, offline[key].shift());</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;;</span><br><span class=\"line\"></span><br><span class=\"line\">        trigger = <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">            <span class=\"keyword\">var</span> key = <span class=\"built_in\">Array</span>.prototype.shift.call(<span class=\"built_in\">arguments</span>),</span><br><span class=\"line\">                fns = clientList[key];</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (!fns || fns.length === <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">                <span class=\"keyword\">if</span> (!offline[key]) &#123;</span><br><span class=\"line\">                    offline[key] = [];</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">                offline[key].push(<span class=\"built_in\">arguments</span>);</span><br><span class=\"line\">                <span class=\"keyword\">return</span> <span class=\"literal\">false</span>;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            <span class=\"keyword\">for</span> (<span class=\"keyword\">var</span> i = <span class=\"number\">0</span>, len = fns.length; i &lt; len; i++) &#123;</span><br><span class=\"line\">                fns[i].apply(<span class=\"keyword\">this</span>, <span class=\"built_in\">arguments</span>);</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;;</span><br><span class=\"line\"></span><br><span class=\"line\">        remove = <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">key, fn</span>) </span>&#123;</span><br><span class=\"line\">            <span class=\"keyword\">var</span> fns = clientList[key];</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (!fns) &#123;</span><br><span class=\"line\">                <span class=\"keyword\">return</span> <span class=\"literal\">false</span>;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (!fn) &#123;</span><br><span class=\"line\">                fns.length = <span class=\"number\">0</span>;</span><br><span class=\"line\">            &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">                <span class=\"keyword\">for</span> (<span class=\"keyword\">var</span> i = <span class=\"number\">0</span>, len = fns.length; i &lt; len; i++) &#123;</span><br><span class=\"line\">                    <span class=\"keyword\">var</span> _fn = fns[i];</span><br><span class=\"line\">                    <span class=\"keyword\">if</span> (_fn === fn) &#123;</span><br><span class=\"line\">                        fns.splice(i, <span class=\"number\">1</span>);</span><br><span class=\"line\">                    &#125;</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">return</span> &#123;</span><br><span class=\"line\">            listen: listen,</span><br><span class=\"line\">            trigger: trigger,</span><br><span class=\"line\">            remove: remove,</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    &#125;)();</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">var</span> init = <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">        Event.trigger(<span class=\"string\">'loaded'</span>, &#123;</span><br><span class=\"line\">            name: <span class=\"string\">'renhongl'</span>,</span><br><span class=\"line\">            age: <span class=\"number\">18</span></span><br><span class=\"line\">        &#125;);</span><br><span class=\"line\"></span><br><span class=\"line\">        setTimeout(<span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">            Event.listen(<span class=\"string\">'loaded'</span>, <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">args</span>) </span>&#123;</span><br><span class=\"line\">                <span class=\"built_in\">console</span>.log(args);</span><br><span class=\"line\">            &#125;);</span><br><span class=\"line\">        &#125;, <span class=\"number\">2000</span>);</span><br><span class=\"line\">    &#125;;</span><br><span class=\"line\"></span><br><span class=\"line\">    init();</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;)();</span><br></pre></td></tr></table></figure>","site":{"data":{"projects":[{"name":"AiTing","url":"https://github.com/renhongl/aiting","desc":"HTML5客户端音乐播放器"},{"name":"AiLiao","url":"https://github.com/renhongl/ailiao","desc":"网页聊天软件"},{"name":"Pomelo Editor","url":"https://renhongl.github.io/markdown-editor/","desc":"功能强大的在线Markdown编辑器"}]}},"excerpt":"","more":"<h1 id=\"什么是观察者模式\"><a href=\"#什么是观察者模式\" class=\"headerlink\" title=\"什么是观察者模式\"></a>什么是观察者模式</h1><p>具体写法： 使用Map将话题和要执行的回调方法一一对应的存下来，即订阅。在发布这个话题时，使用发布的参数，执行这个话题的回调方法。</p>\n<p>订阅前发布： 在发布某个话题时，如果这个话题尚未被订阅，那么将这个话题存储起来，等订阅之后，立即发布。那么，在写代码时，就不会发生发布在订阅之前，导致功能不能被触发的问题。</p>\n<p>命名空间： 如果整个项目都使用了此模式，很容易在没有命名空间的情况下混淆话题。</p>\n<h1 id=\"面向对象例子：\"><a href=\"#面向对象例子：\" class=\"headerlink\" title=\"面向对象例子：\"></a>面向对象例子：</h1><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Observer</span></span>&#123;</span><br><span class=\"line\">\t<span class=\"keyword\">constructor</span>() &#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">this</span>.topicMapping = &#123;&#125;;</span><br><span class=\"line\">\t\t<span class=\"keyword\">this</span>.publishStore = &#123;&#125;;</span><br><span class=\"line\">\t&#125;\t  </span><br><span class=\"line\"></span><br><span class=\"line\">\tsubscribe(...args) &#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">let</span> topic = args.shift();</span><br><span class=\"line\">\t\t<span class=\"keyword\">let</span> callback = args.shift();</span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span> (!<span class=\"keyword\">this</span>.topicMapping[topic]) &#123;</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">this</span>.topicMapping[topic] = [];</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t\t<span class=\"keyword\">this</span>.topicMapping[topic].push(callback);</span><br><span class=\"line\">\t\t<span class=\"built_in\">console</span>.log(<span class=\"string\">`subscribed topic <span class=\"subst\">$&#123;topic&#125;</span>`</span>);</span><br><span class=\"line\">\t\t<span class=\"comment\">//check if had subscribed</span></span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span> (<span class=\"keyword\">this</span>.publishStore[topic]) &#123;</span><br><span class=\"line\">\t\t\t<span class=\"built_in\">console</span>.log(<span class=\"string\">`trigger topic <span class=\"subst\">$&#123;topic&#125;</span> immediately`</span>);</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">this</span>.publish(topic, <span class=\"keyword\">this</span>.publishStore[topic]);</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">delete</span> <span class=\"keyword\">this</span>.publishStore[topic];</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">  </span><br><span class=\"line\">\tpublish(...args) &#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">let</span> topic = args.shift();</span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span> (<span class=\"keyword\">this</span>.topicMapping[topic]) &#123;</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">this</span>.topicMapping[topic].forEach(<span class=\"function\">(<span class=\"params\">v, k</span>) =&gt;</span> &#123;</span><br><span class=\"line\">\t\t\t\tv.apply(<span class=\"literal\">null</span>, args);</span><br><span class=\"line\">\t\t\t&#125;);</span><br><span class=\"line\">\t\t&#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">\t\t\t<span class=\"built_in\">console</span>.log(<span class=\"string\">`no topic: <span class=\"subst\">$&#123;topic&#125;</span> has been subscribed, this publish will store here, after subscribe, will trigger`</span>);</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">this</span>.publishStore[topic] = args;</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">  </span><br><span class=\"line\">\tunsubscribe(...args) &#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">let</span> topic = args.shift();</span><br><span class=\"line\">\t\t<span class=\"keyword\">let</span> callback = args.shift();</span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span> (<span class=\"keyword\">this</span>.topicMapping[topic]) &#123;</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">delete</span> <span class=\"keyword\">this</span>.topicMapping[topic];</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">if</span> (callback <span class=\"keyword\">instanceof</span> <span class=\"built_in\">Function</span>) &#123;</span><br><span class=\"line\">\t\t\t\tcallback(args);</span><br><span class=\"line\">\t\t\t&#125;</span><br><span class=\"line\">\t\t&#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">\t\t<span class=\"built_in\">console</span>.log(<span class=\"string\">`no topic <span class=\"subst\">$&#123;topic&#125;</span> has been subscribe, so no need unsubscribe.`</span>);</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">default</span> Observer;</span><br></pre></td></tr></table></figure>\n<h1 id=\"函数式例子：\"><a href=\"#函数式例子：\" class=\"headerlink\" title=\"函数式例子：\"></a>函数式例子：</h1><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">(<span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"built_in\">window</span>.Event = (<span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">var</span> clientList = &#123;&#125;,</span><br><span class=\"line\">            offline = &#123;&#125;,</span><br><span class=\"line\">            listen,</span><br><span class=\"line\">            trigger,</span><br><span class=\"line\">            remove;</span><br><span class=\"line\">            </span><br><span class=\"line\">        listen = <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">key, fn</span>) </span>&#123;</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (!clientList[key]) &#123;</span><br><span class=\"line\">                clientList[key] = [];</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            clientList[key].push(fn);</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (offline[key]) &#123;</span><br><span class=\"line\">                fn.apply(<span class=\"keyword\">this</span>, offline[key].shift());</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;;</span><br><span class=\"line\"></span><br><span class=\"line\">        trigger = <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">            <span class=\"keyword\">var</span> key = <span class=\"built_in\">Array</span>.prototype.shift.call(<span class=\"built_in\">arguments</span>),</span><br><span class=\"line\">                fns = clientList[key];</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (!fns || fns.length === <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">                <span class=\"keyword\">if</span> (!offline[key]) &#123;</span><br><span class=\"line\">                    offline[key] = [];</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">                offline[key].push(<span class=\"built_in\">arguments</span>);</span><br><span class=\"line\">                <span class=\"keyword\">return</span> <span class=\"literal\">false</span>;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            <span class=\"keyword\">for</span> (<span class=\"keyword\">var</span> i = <span class=\"number\">0</span>, len = fns.length; i &lt; len; i++) &#123;</span><br><span class=\"line\">                fns[i].apply(<span class=\"keyword\">this</span>, <span class=\"built_in\">arguments</span>);</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;;</span><br><span class=\"line\"></span><br><span class=\"line\">        remove = <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">key, fn</span>) </span>&#123;</span><br><span class=\"line\">            <span class=\"keyword\">var</span> fns = clientList[key];</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (!fns) &#123;</span><br><span class=\"line\">                <span class=\"keyword\">return</span> <span class=\"literal\">false</span>;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (!fn) &#123;</span><br><span class=\"line\">                fns.length = <span class=\"number\">0</span>;</span><br><span class=\"line\">            &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">                <span class=\"keyword\">for</span> (<span class=\"keyword\">var</span> i = <span class=\"number\">0</span>, len = fns.length; i &lt; len; i++) &#123;</span><br><span class=\"line\">                    <span class=\"keyword\">var</span> _fn = fns[i];</span><br><span class=\"line\">                    <span class=\"keyword\">if</span> (_fn === fn) &#123;</span><br><span class=\"line\">                        fns.splice(i, <span class=\"number\">1</span>);</span><br><span class=\"line\">                    &#125;</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">return</span> &#123;</span><br><span class=\"line\">            listen: listen,</span><br><span class=\"line\">            trigger: trigger,</span><br><span class=\"line\">            remove: remove,</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    &#125;)();</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">var</span> init = <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">        Event.trigger(<span class=\"string\">'loaded'</span>, &#123;</span><br><span class=\"line\">            name: <span class=\"string\">'renhongl'</span>,</span><br><span class=\"line\">            age: <span class=\"number\">18</span></span><br><span class=\"line\">        &#125;);</span><br><span class=\"line\"></span><br><span class=\"line\">        setTimeout(<span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">            Event.listen(<span class=\"string\">'loaded'</span>, <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">args</span>) </span>&#123;</span><br><span class=\"line\">                <span class=\"built_in\">console</span>.log(args);</span><br><span class=\"line\">            &#125;);</span><br><span class=\"line\">        &#125;, <span class=\"number\">2000</span>);</span><br><span class=\"line\">    &#125;;</span><br><span class=\"line\"></span><br><span class=\"line\">    init();</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;)();</span><br></pre></td></tr></table></figure>"},{"title":"迭代器模式","date":"2018-05-12T13:54:32.000Z","_content":"\n\n# 什么是迭代器模式\n\n迭代器模式是指提供一种方法顺序访问一个聚合对象中的各个元素，而又不需要暴露该对象的内部表示。\n\n内部迭代器在调用的时候非常方便，外界不用关心迭代器内部的实现，跟迭代器的交互也仅仅是一次初始调用，但这也刚好是内部迭代器的缺点。\n\n外部迭代器增加了一些调用的复杂度，但相对也增强了迭代器的灵活性，我们可以手工控制迭代的过程或者顺序。\n\n中止迭代器可以像普通for循环中的break一样，提供一种跳出循环的方法。\n\n\n","source":"_posts/迭代器模式.md","raw":"---\ntitle: 迭代器模式\ndate: 2018-05-12 21:54:32\ntags:\n\t- Javascript设计模式\n---\n\n\n# 什么是迭代器模式\n\n迭代器模式是指提供一种方法顺序访问一个聚合对象中的各个元素，而又不需要暴露该对象的内部表示。\n\n内部迭代器在调用的时候非常方便，外界不用关心迭代器内部的实现，跟迭代器的交互也仅仅是一次初始调用，但这也刚好是内部迭代器的缺点。\n\n外部迭代器增加了一些调用的复杂度，但相对也增强了迭代器的灵活性，我们可以手工控制迭代的过程或者顺序。\n\n中止迭代器可以像普通for循环中的break一样，提供一种跳出循环的方法。\n\n\n","slug":"迭代器模式","published":1,"updated":"2019-11-04T07:00:52.512Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ck2vg6gxj00384cobker3ttzi","content":"<h1 id=\"什么是迭代器模式\"><a href=\"#什么是迭代器模式\" class=\"headerlink\" title=\"什么是迭代器模式\"></a>什么是迭代器模式</h1><p>迭代器模式是指提供一种方法顺序访问一个聚合对象中的各个元素，而又不需要暴露该对象的内部表示。</p>\n<p>内部迭代器在调用的时候非常方便，外界不用关心迭代器内部的实现，跟迭代器的交互也仅仅是一次初始调用，但这也刚好是内部迭代器的缺点。</p>\n<p>外部迭代器增加了一些调用的复杂度，但相对也增强了迭代器的灵活性，我们可以手工控制迭代的过程或者顺序。</p>\n<p>中止迭代器可以像普通for循环中的break一样，提供一种跳出循环的方法。</p>\n","site":{"data":{"projects":[{"name":"AiTing","url":"https://github.com/renhongl/aiting","desc":"HTML5客户端音乐播放器"},{"name":"AiLiao","url":"https://github.com/renhongl/ailiao","desc":"网页聊天软件"},{"name":"Pomelo Editor","url":"https://renhongl.github.io/markdown-editor/","desc":"功能强大的在线Markdown编辑器"}]}},"excerpt":"","more":"<h1 id=\"什么是迭代器模式\"><a href=\"#什么是迭代器模式\" class=\"headerlink\" title=\"什么是迭代器模式\"></a>什么是迭代器模式</h1><p>迭代器模式是指提供一种方法顺序访问一个聚合对象中的各个元素，而又不需要暴露该对象的内部表示。</p>\n<p>内部迭代器在调用的时候非常方便，外界不用关心迭代器内部的实现，跟迭代器的交互也仅仅是一次初始调用，但这也刚好是内部迭代器的缺点。</p>\n<p>外部迭代器增加了一些调用的复杂度，但相对也增强了迭代器的灵活性，我们可以手工控制迭代的过程或者顺序。</p>\n<p>中止迭代器可以像普通for循环中的break一样，提供一种跳出循环的方法。</p>\n"},{"title":"适配器模式","date":"2018-06-03T13:54:32.000Z","_content":"\n\n# 什么是适配器模式\n适配器模式（Adapter Pattern）是作为两个不兼容的接口之间的桥梁。这种类型的设计模式属于结构型模式，它结合了两个独立接口的功能。\n\n\n\n# 面向对象例子：\n\n```js\n/**\n* 将方法getFullSingaporeCityData返回的数据适配到\n* getSingaporeCityData的格式\n*/\nclass Adapter{\n\tgetSingaporeCityData() {\n\t\treturn {\n\t\t\tshenggang: {\n\t\t\t\tid: '0001',\n\t\t\t\tcoordinate: [1.3312, 103.32423]\n\t\t\t},\n\t\t\tfenwei: {\n\t\t\t\tid: '0002',\n\t\t\t\tcoordinate: [1.3221, 103.1212]\n\t\t\t},\n\t\t\tangmokio: {\n\t\t\t\tid: '0003',\n\t\t\t\tcoordinate: [1.654, 103.32465423]\n\t\t\t}\n\t\t}\n\t}\n  \n\tgetFullSingaporeCityData() {\n\t\treturn [\n\t\t\t{\n\t\t\t\tname: 'shenggang',\n\t\t\t\tid: '0001',\n\t\t\t\tcoordinate: [1.3312, 103.32423],\n\t\t\t\tpeopleCount: 10000\n\t\t\t},\n\t\t\t{\n\t\t\t\tname: 'fenwei',\n\t\t\t\tid: '0002',\n\t\t\t\tcoordinate: [1.3312, 103.32423],\n\t\t\t\tpeopleCount: 20000\n\t\t\t},\n\t\t\t{\n\t\t\t\tname: 'angmokio',\n\t\t\t\tid: '0003',\n\t\t\t\tcoordinate: [1.3312, 103.32423],\n\t\t\t\tpeopleCount: 30000\n\t\t\t}\n\t\t]\n\t}\n\n\tdataAdapter(fn) {\n\t\tlet ret = {};\n\t\tlet list = fn();\n\t\tlist.forEach(function(v, k) {\n\t\t\tlet {name, ...props} = v;\n\t\t\tret[name] = {...props};\n\t\t});\n\t\treturn function() {\n\t\t\treturn ret;\n\t\t}\n\t}\n}\n```\n","source":"_posts/适配器模式.md","raw":"---\ntitle: 适配器模式\ndate: 2018-06-03 21:54:32\ntags:\n\t- Javascript设计模式\n---\n\n\n# 什么是适配器模式\n适配器模式（Adapter Pattern）是作为两个不兼容的接口之间的桥梁。这种类型的设计模式属于结构型模式，它结合了两个独立接口的功能。\n\n\n\n# 面向对象例子：\n\n```js\n/**\n* 将方法getFullSingaporeCityData返回的数据适配到\n* getSingaporeCityData的格式\n*/\nclass Adapter{\n\tgetSingaporeCityData() {\n\t\treturn {\n\t\t\tshenggang: {\n\t\t\t\tid: '0001',\n\t\t\t\tcoordinate: [1.3312, 103.32423]\n\t\t\t},\n\t\t\tfenwei: {\n\t\t\t\tid: '0002',\n\t\t\t\tcoordinate: [1.3221, 103.1212]\n\t\t\t},\n\t\t\tangmokio: {\n\t\t\t\tid: '0003',\n\t\t\t\tcoordinate: [1.654, 103.32465423]\n\t\t\t}\n\t\t}\n\t}\n  \n\tgetFullSingaporeCityData() {\n\t\treturn [\n\t\t\t{\n\t\t\t\tname: 'shenggang',\n\t\t\t\tid: '0001',\n\t\t\t\tcoordinate: [1.3312, 103.32423],\n\t\t\t\tpeopleCount: 10000\n\t\t\t},\n\t\t\t{\n\t\t\t\tname: 'fenwei',\n\t\t\t\tid: '0002',\n\t\t\t\tcoordinate: [1.3312, 103.32423],\n\t\t\t\tpeopleCount: 20000\n\t\t\t},\n\t\t\t{\n\t\t\t\tname: 'angmokio',\n\t\t\t\tid: '0003',\n\t\t\t\tcoordinate: [1.3312, 103.32423],\n\t\t\t\tpeopleCount: 30000\n\t\t\t}\n\t\t]\n\t}\n\n\tdataAdapter(fn) {\n\t\tlet ret = {};\n\t\tlet list = fn();\n\t\tlist.forEach(function(v, k) {\n\t\t\tlet {name, ...props} = v;\n\t\t\tret[name] = {...props};\n\t\t});\n\t\treturn function() {\n\t\t\treturn ret;\n\t\t}\n\t}\n}\n```\n","slug":"适配器模式","published":1,"updated":"2019-11-04T07:00:54.986Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ck2vg6gxl003a4cobzjuwajgm","content":"<h1 id=\"什么是适配器模式\"><a href=\"#什么是适配器模式\" class=\"headerlink\" title=\"什么是适配器模式\"></a>什么是适配器模式</h1><p>适配器模式（Adapter Pattern）是作为两个不兼容的接口之间的桥梁。这种类型的设计模式属于结构型模式，它结合了两个独立接口的功能。</p>\n<h1 id=\"面向对象例子：\"><a href=\"#面向对象例子：\" class=\"headerlink\" title=\"面向对象例子：\"></a>面向对象例子：</h1><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">* 将方法getFullSingaporeCityData返回的数据适配到</span></span><br><span class=\"line\"><span class=\"comment\">* getSingaporeCityData的格式</span></span><br><span class=\"line\"><span class=\"comment\">*/</span></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Adapter</span></span>&#123;</span><br><span class=\"line\">\tgetSingaporeCityData() &#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> &#123;</span><br><span class=\"line\">\t\t\tshenggang: &#123;</span><br><span class=\"line\">\t\t\t\tid: <span class=\"string\">'0001'</span>,</span><br><span class=\"line\">\t\t\t\tcoordinate: [<span class=\"number\">1.3312</span>, <span class=\"number\">103.32423</span>]</span><br><span class=\"line\">\t\t\t&#125;,</span><br><span class=\"line\">\t\t\tfenwei: &#123;</span><br><span class=\"line\">\t\t\t\tid: <span class=\"string\">'0002'</span>,</span><br><span class=\"line\">\t\t\t\tcoordinate: [<span class=\"number\">1.3221</span>, <span class=\"number\">103.1212</span>]</span><br><span class=\"line\">\t\t\t&#125;,</span><br><span class=\"line\">\t\t\tangmokio: &#123;</span><br><span class=\"line\">\t\t\t\tid: <span class=\"string\">'0003'</span>,</span><br><span class=\"line\">\t\t\t\tcoordinate: [<span class=\"number\">1.654</span>, <span class=\"number\">103.32465423</span>]</span><br><span class=\"line\">\t\t\t&#125;</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">  </span><br><span class=\"line\">\tgetFullSingaporeCityData() &#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> [</span><br><span class=\"line\">\t\t\t&#123;</span><br><span class=\"line\">\t\t\t\tname: <span class=\"string\">'shenggang'</span>,</span><br><span class=\"line\">\t\t\t\tid: <span class=\"string\">'0001'</span>,</span><br><span class=\"line\">\t\t\t\tcoordinate: [<span class=\"number\">1.3312</span>, <span class=\"number\">103.32423</span>],</span><br><span class=\"line\">\t\t\t\tpeopleCount: <span class=\"number\">10000</span></span><br><span class=\"line\">\t\t\t&#125;,</span><br><span class=\"line\">\t\t\t&#123;</span><br><span class=\"line\">\t\t\t\tname: <span class=\"string\">'fenwei'</span>,</span><br><span class=\"line\">\t\t\t\tid: <span class=\"string\">'0002'</span>,</span><br><span class=\"line\">\t\t\t\tcoordinate: [<span class=\"number\">1.3312</span>, <span class=\"number\">103.32423</span>],</span><br><span class=\"line\">\t\t\t\tpeopleCount: <span class=\"number\">20000</span></span><br><span class=\"line\">\t\t\t&#125;,</span><br><span class=\"line\">\t\t\t&#123;</span><br><span class=\"line\">\t\t\t\tname: <span class=\"string\">'angmokio'</span>,</span><br><span class=\"line\">\t\t\t\tid: <span class=\"string\">'0003'</span>,</span><br><span class=\"line\">\t\t\t\tcoordinate: [<span class=\"number\">1.3312</span>, <span class=\"number\">103.32423</span>],</span><br><span class=\"line\">\t\t\t\tpeopleCount: <span class=\"number\">30000</span></span><br><span class=\"line\">\t\t\t&#125;</span><br><span class=\"line\">\t\t]</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\tdataAdapter(fn) &#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">let</span> ret = &#123;&#125;;</span><br><span class=\"line\">\t\t<span class=\"keyword\">let</span> list = fn();</span><br><span class=\"line\">\t\tlist.forEach(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">v, k</span>) </span>&#123;</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">let</span> &#123;name, ...props&#125; = v;</span><br><span class=\"line\">\t\t\tret[name] = &#123;...props&#125;;</span><br><span class=\"line\">\t\t&#125;);</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">return</span> ret;</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n","site":{"data":{"projects":[{"name":"AiTing","url":"https://github.com/renhongl/aiting","desc":"HTML5客户端音乐播放器"},{"name":"AiLiao","url":"https://github.com/renhongl/ailiao","desc":"网页聊天软件"},{"name":"Pomelo Editor","url":"https://renhongl.github.io/markdown-editor/","desc":"功能强大的在线Markdown编辑器"}]}},"excerpt":"","more":"<h1 id=\"什么是适配器模式\"><a href=\"#什么是适配器模式\" class=\"headerlink\" title=\"什么是适配器模式\"></a>什么是适配器模式</h1><p>适配器模式（Adapter Pattern）是作为两个不兼容的接口之间的桥梁。这种类型的设计模式属于结构型模式，它结合了两个独立接口的功能。</p>\n<h1 id=\"面向对象例子：\"><a href=\"#面向对象例子：\" class=\"headerlink\" title=\"面向对象例子：\"></a>面向对象例子：</h1><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">* 将方法getFullSingaporeCityData返回的数据适配到</span></span><br><span class=\"line\"><span class=\"comment\">* getSingaporeCityData的格式</span></span><br><span class=\"line\"><span class=\"comment\">*/</span></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Adapter</span></span>&#123;</span><br><span class=\"line\">\tgetSingaporeCityData() &#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> &#123;</span><br><span class=\"line\">\t\t\tshenggang: &#123;</span><br><span class=\"line\">\t\t\t\tid: <span class=\"string\">'0001'</span>,</span><br><span class=\"line\">\t\t\t\tcoordinate: [<span class=\"number\">1.3312</span>, <span class=\"number\">103.32423</span>]</span><br><span class=\"line\">\t\t\t&#125;,</span><br><span class=\"line\">\t\t\tfenwei: &#123;</span><br><span class=\"line\">\t\t\t\tid: <span class=\"string\">'0002'</span>,</span><br><span class=\"line\">\t\t\t\tcoordinate: [<span class=\"number\">1.3221</span>, <span class=\"number\">103.1212</span>]</span><br><span class=\"line\">\t\t\t&#125;,</span><br><span class=\"line\">\t\t\tangmokio: &#123;</span><br><span class=\"line\">\t\t\t\tid: <span class=\"string\">'0003'</span>,</span><br><span class=\"line\">\t\t\t\tcoordinate: [<span class=\"number\">1.654</span>, <span class=\"number\">103.32465423</span>]</span><br><span class=\"line\">\t\t\t&#125;</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">  </span><br><span class=\"line\">\tgetFullSingaporeCityData() &#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> [</span><br><span class=\"line\">\t\t\t&#123;</span><br><span class=\"line\">\t\t\t\tname: <span class=\"string\">'shenggang'</span>,</span><br><span class=\"line\">\t\t\t\tid: <span class=\"string\">'0001'</span>,</span><br><span class=\"line\">\t\t\t\tcoordinate: [<span class=\"number\">1.3312</span>, <span class=\"number\">103.32423</span>],</span><br><span class=\"line\">\t\t\t\tpeopleCount: <span class=\"number\">10000</span></span><br><span class=\"line\">\t\t\t&#125;,</span><br><span class=\"line\">\t\t\t&#123;</span><br><span class=\"line\">\t\t\t\tname: <span class=\"string\">'fenwei'</span>,</span><br><span class=\"line\">\t\t\t\tid: <span class=\"string\">'0002'</span>,</span><br><span class=\"line\">\t\t\t\tcoordinate: [<span class=\"number\">1.3312</span>, <span class=\"number\">103.32423</span>],</span><br><span class=\"line\">\t\t\t\tpeopleCount: <span class=\"number\">20000</span></span><br><span class=\"line\">\t\t\t&#125;,</span><br><span class=\"line\">\t\t\t&#123;</span><br><span class=\"line\">\t\t\t\tname: <span class=\"string\">'angmokio'</span>,</span><br><span class=\"line\">\t\t\t\tid: <span class=\"string\">'0003'</span>,</span><br><span class=\"line\">\t\t\t\tcoordinate: [<span class=\"number\">1.3312</span>, <span class=\"number\">103.32423</span>],</span><br><span class=\"line\">\t\t\t\tpeopleCount: <span class=\"number\">30000</span></span><br><span class=\"line\">\t\t\t&#125;</span><br><span class=\"line\">\t\t]</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\tdataAdapter(fn) &#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">let</span> ret = &#123;&#125;;</span><br><span class=\"line\">\t\t<span class=\"keyword\">let</span> list = fn();</span><br><span class=\"line\">\t\tlist.forEach(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">v, k</span>) </span>&#123;</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">let</span> &#123;name, ...props&#125; = v;</span><br><span class=\"line\">\t\t\tret[name] = &#123;...props&#125;;</span><br><span class=\"line\">\t\t&#125;);</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">return</span> ret;</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n"},{"title":"Javascript设计模式","date":"2017-04-25T13:25:12.000Z","_content":"\n# 简介\n\n全部代码：[点击这里](https://github.com/renhongl/front-end-demo/tree/master/demo-design-pattern)。\n\n设计模式的主题总是把不变的事物和变化的事物分离开来。\n\n\n# 鸭子类型\n\n如果它走起来像鸭子，叫起来也像鸭子，那么它就是鸭子。\n\n# 多态\n\n* 多态的思想是把“做什么”和“谁去做”分离开来。\n\n* 多态最根本的作用就是通过把过程化的条件分支语句转化为对象的多态性，从而消除这些条件分支语句。\n\n* 多态的最根本好处在于，你不必再像的对象询问“你是什么类型”而后根据得到的答案调用对象的某个行为，\n你只管调用该行为就是了，其他的一切多态机制都会为你安排妥当。\n\n# 封装\n* 封装的目的是将信息影藏。\n* 一般而言，封装是指封装数据和封装实现。\n* 更广义的封装，还包括封装类型和封装变化。\n\n# this\n* 作为对象的方法调用。\n    \n    ```js\n    let obj = {\n        a: 1,\n        getA: function() {\n            console.log(this === obj);//true\n            console.log(this.a);//1\n        }\n    };\n    obj.getA();\n    ```\n\n* 作为普通函数调用。\n\n    ```js\n    window.name = 'global';\n    let getName = function() {\n        return this.name;\n    }\n    console.log(getName());//global\n\n    //or\n\n    window.name = 'global';\n    let myObj = {\n        name: 'renhong',\n        getName: function() {\n            return this.name;\n        }\n    }\n    var getName = myObj.getName;//普通函数调用\n    console.log(getName());//global\n\n    console.log(myObj.getName());//renhong, 对象的方法调用\n    ```\n\n\n* 构造器调用。当用new运算符调用函数时，该函数总会返回一个对象，构造器里的this就指向这个对象。\n\n    ```js\n    let MyClass = function() {\n        this.name = 'renhong';\n    }\n    let obj = new MyClass();\n    console.log(obj.name);//renhong\n\n    //如果构造器显示返回一个对象，那么new之后返回的是这个对象，而不是this。\n\n    let MyClass = function() {\n        this.name = 'renhong',\n        return {\n            name: 'mogu'\n        }\n    }\n    let obj = new MyClass();\n    console.log(obj.name);//mogu\n    ```\n\n* call和apply调用。用于动态的改变传入函数的this。\n\n    ```js\n    let obj1 = {\n        name: 'renhong',\n        getName: function() {\n            return this.name;\n        }\n    }\n\n    let obj2 = {\n        name: 'mogu'\n    }\n\n    console.log(obj1.getName());//renhong\n    console.log(obj1.getName.call(obj2));//mogu\n    ```\n\n# call和apply\n* 作用一模一样，区别只在于传入参数的形式不同。\n* apply接受两个参数，第一个参数指定函数体内部的this指向。第二个参数是一个数组或者类数组，这些元素全部作为参数传递给被调用的函数。\n\n    ```js\n    let func = function(a, b, c) {\n        console.log([a, b, c]);//[1, 2, 3]\n    }\n    func.apply(null, [1, 2, 3]);\n    ```\n\n* call 传入的参数是不固定的，第一个参数同样是代表函数体内的this指向，从第二个参数开始，每个参数一次被当做被调用的函数的参数传入。\n\n    ```js\n    let func = function(a, b, c) {\n        console.log([a, b, c]);//[1, 2, 3]\n    }\n    func.call(null, 1, 2, 3);\n    ```\n\n* 为什么要使用call和apply？\n\n    ```js\n    //改变this指向\n    //---------例子1\n    let obj1 = {\n        name: 'renhong'\n    }\n    let obj2 = {\n        name: 'mogu'\n    }\n    window.name = 'window';\n    let getName = function() {\n        this.name;\n    }\n    getName();//window\n    getName.call(obj1);//renhong\n    getName.call(obj2);//mogu\n\n    //---------例子2\n    let func = function() {\n        console.log(this.id);\n    }\n    document.getElementById('div1').onclick = function() {\n        console.log(this.id);//div1\n        func();//undefined，指向window\n        func.call(this);//div1，指向这个this\n    }\n\n    //---------例子3\n    class Controller{\n        constructor() {\n            let type = 'dialog';\n            this.name = 'controller';\n            renderControl();\n            handleEvents.call(this);\n            renderDialog.call(this, type);\n        }\n    }\n      \n    function renderControl() {\n        console.log(this.name);//undefined，this指向window\n    }\n\n    function handleEvents() {\n        console.log(this.name);//controller\n    }\n\n    function renderDialog(type) {\n        console.log(type);//dialog\n    }\n\n    //借用其他对象的方法\n    //类数组对象arguments，没有push的方法，不能将元素push进去。我们首先调用数组的push方法，再手动将push方法内部的this指向改为arguments，就帮助arguments实现了push功能。\n    (function() {\n        Array.prototype.push.call(arguments, 3);\n        console.log(arguments);//[1, 2, 3]\n    })(1, 2);\n    ```\n\n\n# 闭包\n\n闭包是一个非常强大的特性，但人们对其也有诸多误解。一种耸人听闻的说法是闭包会造成内存泄漏，所以要尽量减少闭包的使用。\n\n局部变量本来应该在函数退出的时候被解除饮用，但如果局部变量被封闭在闭包形成的环境中，那么这个局部变量就能一直生存下去。从这个意义上看，闭包的确会使一些数据无法被及时销毁。使用闭包的一部分原因是我们选择主动把一些变量封闭在闭包中，因为可能在以后还需要使用这些变量，把这些变量放在闭包中和放在全局作用域，对内存方面的影响是一致的。\n\n\n跟闭包和内存泄漏有关系的地方是，使用闭包的同时，比较容易形成循环引用，如果闭包的作用域链中保存着一些DOM节点，这时候有可能造成内存泄漏。但这并非闭包问题，也并非Javascript问题。\n\n**注：** 当代码中需要全局变量时，可以使用闭包，将这个变量封装在一个函数中，那这个函数就封装了一个独立的功能，不再依赖外部的变量。\n\n# 函数柯里化（function currying）\n\ncurrying又称部分求值。一个currying的函数首先会接受一些参数，接受了这些参数之后，该函数并不会立即求值，而是继续返回另外一个函数，刚传入的参数在函数形成的闭包中被保存起来。待到函数真正需要求值的时候，之前传入的所有参数都会被一次性用于求值。\n\n# uncurrying\n\n当我们调用对象的某个方法时，其实不用去关心该对象原本是否被设计为拥有这个方法，这是动态类型语言的特点，也是常说的鸭子类型思想。\n\n同理，一个对象也未必只有使用它自身的方法。通过call和apply方法可以让对象去借用一个原本不属于它的方法。\n\n\n# 降频\n\n在一些情况下，函数的触发不是由用户直接控制的，在这些情景下，函数可能被非常频繁的调用，而造成大的性能问题。\n\n例如在window的resize事件中，或者在div拖动事件中，会频繁的触发这些事件，并且DOM相关的操作非常消耗性能，这时浏览器可能会出现卡顿现象。\n\n以上现象我们可以使用setTimeout来实现每隔固定时间来触发事件，如果过于频繁，将忽略那次的事件。\n\n函数式例子：\n\n  ```js\n  var resize = function(callback, interval) {\n      var timer,\n          firstTime = true;\n      return function() {\n          var args = arguments,\n              self = this;\n          if(firstTime) {\n              callback.apply(self, args);\n              return false;\n          }\n          if(timer) {\n              return false;\n          }\n          timer = setTimeout(function() {\n              clearTimeout(timer);\n              timer = null;\n              callback.apply(self, args);\n          }, interval || 500)\n      }\n  };\n\n  window.onresize = resize(function() {\n      console.log('resized', Date.now());\n  }, 1000);\n  ```\n\n\n\n\n面向对象例子：\n\n  ```js\nexport default class ReduceFrequency{\n    /**\n     * input 输入时，不要每次去检查更改，在结束输入后200毫秒去检查\n     * 这样可以减少监听频繁执行的事件带来的卡顿\n     * @param {DOM Object} target \n     */\n    inputControl(target) {\n        target.addEventListener('input', (e) => {\n            clearTimeout(this.timer);\n            this.timer = setTimeout(() => {\n                console.log(e.target.value);\n            }, 500); \n        });\n    }\n\n    /**\n     * 鼠标每次移动时，并不是每次都去打印它的位置，而是将最近这个事件存起来，使用定时器每隔500毫秒\n     * 打印一次最新的位置。\n     */\n    mouseMoveControl() {\n        this.inTimer = false;\n        document.addEventListener('mousemove', (e) => {\n            this.latestE = e;\n            if (!this.inTimer) {\n                this.inTimer = true;\n                this.timer2 = setTimeout(() => {\n                    let x = this.latestE.pageX;\n                    let y = this.latestE.pageY;\n                    console.log(Date.now(), x, y);\n                    this.inTimer = false;\n                }, 500);\n            }\n        });\n    }\n\n    /**\n     * 一次生成1000个节点，改成每1秒生成100个节点\n     */\n    renderDomControl() {\n        let total = 1000;\n        render();\n        function render() {\n            for (let i = 0; i < 100; i++) {\n                let dom = document.createElement('span');\n                dom.innerText = total;\n                document.body.appendChild(dom);\n                total -= 1;\n            }\n            if(total > 0) {\n                setTimeout(() => {\n                    render();\n                }, 1000);\n            }\n        }\n    }\n}\n  ```\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n","source":"_posts/Javascript设计模式简述.md","raw":"---\ntitle: Javascript设计模式\ndate: 2017-04-25 21:25:12\ntags:\n    - Javascript\n    - 设计模式\n---\n\n# 简介\n\n全部代码：[点击这里](https://github.com/renhongl/front-end-demo/tree/master/demo-design-pattern)。\n\n设计模式的主题总是把不变的事物和变化的事物分离开来。\n\n\n# 鸭子类型\n\n如果它走起来像鸭子，叫起来也像鸭子，那么它就是鸭子。\n\n# 多态\n\n* 多态的思想是把“做什么”和“谁去做”分离开来。\n\n* 多态最根本的作用就是通过把过程化的条件分支语句转化为对象的多态性，从而消除这些条件分支语句。\n\n* 多态的最根本好处在于，你不必再像的对象询问“你是什么类型”而后根据得到的答案调用对象的某个行为，\n你只管调用该行为就是了，其他的一切多态机制都会为你安排妥当。\n\n# 封装\n* 封装的目的是将信息影藏。\n* 一般而言，封装是指封装数据和封装实现。\n* 更广义的封装，还包括封装类型和封装变化。\n\n# this\n* 作为对象的方法调用。\n    \n    ```js\n    let obj = {\n        a: 1,\n        getA: function() {\n            console.log(this === obj);//true\n            console.log(this.a);//1\n        }\n    };\n    obj.getA();\n    ```\n\n* 作为普通函数调用。\n\n    ```js\n    window.name = 'global';\n    let getName = function() {\n        return this.name;\n    }\n    console.log(getName());//global\n\n    //or\n\n    window.name = 'global';\n    let myObj = {\n        name: 'renhong',\n        getName: function() {\n            return this.name;\n        }\n    }\n    var getName = myObj.getName;//普通函数调用\n    console.log(getName());//global\n\n    console.log(myObj.getName());//renhong, 对象的方法调用\n    ```\n\n\n* 构造器调用。当用new运算符调用函数时，该函数总会返回一个对象，构造器里的this就指向这个对象。\n\n    ```js\n    let MyClass = function() {\n        this.name = 'renhong';\n    }\n    let obj = new MyClass();\n    console.log(obj.name);//renhong\n\n    //如果构造器显示返回一个对象，那么new之后返回的是这个对象，而不是this。\n\n    let MyClass = function() {\n        this.name = 'renhong',\n        return {\n            name: 'mogu'\n        }\n    }\n    let obj = new MyClass();\n    console.log(obj.name);//mogu\n    ```\n\n* call和apply调用。用于动态的改变传入函数的this。\n\n    ```js\n    let obj1 = {\n        name: 'renhong',\n        getName: function() {\n            return this.name;\n        }\n    }\n\n    let obj2 = {\n        name: 'mogu'\n    }\n\n    console.log(obj1.getName());//renhong\n    console.log(obj1.getName.call(obj2));//mogu\n    ```\n\n# call和apply\n* 作用一模一样，区别只在于传入参数的形式不同。\n* apply接受两个参数，第一个参数指定函数体内部的this指向。第二个参数是一个数组或者类数组，这些元素全部作为参数传递给被调用的函数。\n\n    ```js\n    let func = function(a, b, c) {\n        console.log([a, b, c]);//[1, 2, 3]\n    }\n    func.apply(null, [1, 2, 3]);\n    ```\n\n* call 传入的参数是不固定的，第一个参数同样是代表函数体内的this指向，从第二个参数开始，每个参数一次被当做被调用的函数的参数传入。\n\n    ```js\n    let func = function(a, b, c) {\n        console.log([a, b, c]);//[1, 2, 3]\n    }\n    func.call(null, 1, 2, 3);\n    ```\n\n* 为什么要使用call和apply？\n\n    ```js\n    //改变this指向\n    //---------例子1\n    let obj1 = {\n        name: 'renhong'\n    }\n    let obj2 = {\n        name: 'mogu'\n    }\n    window.name = 'window';\n    let getName = function() {\n        this.name;\n    }\n    getName();//window\n    getName.call(obj1);//renhong\n    getName.call(obj2);//mogu\n\n    //---------例子2\n    let func = function() {\n        console.log(this.id);\n    }\n    document.getElementById('div1').onclick = function() {\n        console.log(this.id);//div1\n        func();//undefined，指向window\n        func.call(this);//div1，指向这个this\n    }\n\n    //---------例子3\n    class Controller{\n        constructor() {\n            let type = 'dialog';\n            this.name = 'controller';\n            renderControl();\n            handleEvents.call(this);\n            renderDialog.call(this, type);\n        }\n    }\n      \n    function renderControl() {\n        console.log(this.name);//undefined，this指向window\n    }\n\n    function handleEvents() {\n        console.log(this.name);//controller\n    }\n\n    function renderDialog(type) {\n        console.log(type);//dialog\n    }\n\n    //借用其他对象的方法\n    //类数组对象arguments，没有push的方法，不能将元素push进去。我们首先调用数组的push方法，再手动将push方法内部的this指向改为arguments，就帮助arguments实现了push功能。\n    (function() {\n        Array.prototype.push.call(arguments, 3);\n        console.log(arguments);//[1, 2, 3]\n    })(1, 2);\n    ```\n\n\n# 闭包\n\n闭包是一个非常强大的特性，但人们对其也有诸多误解。一种耸人听闻的说法是闭包会造成内存泄漏，所以要尽量减少闭包的使用。\n\n局部变量本来应该在函数退出的时候被解除饮用，但如果局部变量被封闭在闭包形成的环境中，那么这个局部变量就能一直生存下去。从这个意义上看，闭包的确会使一些数据无法被及时销毁。使用闭包的一部分原因是我们选择主动把一些变量封闭在闭包中，因为可能在以后还需要使用这些变量，把这些变量放在闭包中和放在全局作用域，对内存方面的影响是一致的。\n\n\n跟闭包和内存泄漏有关系的地方是，使用闭包的同时，比较容易形成循环引用，如果闭包的作用域链中保存着一些DOM节点，这时候有可能造成内存泄漏。但这并非闭包问题，也并非Javascript问题。\n\n**注：** 当代码中需要全局变量时，可以使用闭包，将这个变量封装在一个函数中，那这个函数就封装了一个独立的功能，不再依赖外部的变量。\n\n# 函数柯里化（function currying）\n\ncurrying又称部分求值。一个currying的函数首先会接受一些参数，接受了这些参数之后，该函数并不会立即求值，而是继续返回另外一个函数，刚传入的参数在函数形成的闭包中被保存起来。待到函数真正需要求值的时候，之前传入的所有参数都会被一次性用于求值。\n\n# uncurrying\n\n当我们调用对象的某个方法时，其实不用去关心该对象原本是否被设计为拥有这个方法，这是动态类型语言的特点，也是常说的鸭子类型思想。\n\n同理，一个对象也未必只有使用它自身的方法。通过call和apply方法可以让对象去借用一个原本不属于它的方法。\n\n\n# 降频\n\n在一些情况下，函数的触发不是由用户直接控制的，在这些情景下，函数可能被非常频繁的调用，而造成大的性能问题。\n\n例如在window的resize事件中，或者在div拖动事件中，会频繁的触发这些事件，并且DOM相关的操作非常消耗性能，这时浏览器可能会出现卡顿现象。\n\n以上现象我们可以使用setTimeout来实现每隔固定时间来触发事件，如果过于频繁，将忽略那次的事件。\n\n函数式例子：\n\n  ```js\n  var resize = function(callback, interval) {\n      var timer,\n          firstTime = true;\n      return function() {\n          var args = arguments,\n              self = this;\n          if(firstTime) {\n              callback.apply(self, args);\n              return false;\n          }\n          if(timer) {\n              return false;\n          }\n          timer = setTimeout(function() {\n              clearTimeout(timer);\n              timer = null;\n              callback.apply(self, args);\n          }, interval || 500)\n      }\n  };\n\n  window.onresize = resize(function() {\n      console.log('resized', Date.now());\n  }, 1000);\n  ```\n\n\n\n\n面向对象例子：\n\n  ```js\nexport default class ReduceFrequency{\n    /**\n     * input 输入时，不要每次去检查更改，在结束输入后200毫秒去检查\n     * 这样可以减少监听频繁执行的事件带来的卡顿\n     * @param {DOM Object} target \n     */\n    inputControl(target) {\n        target.addEventListener('input', (e) => {\n            clearTimeout(this.timer);\n            this.timer = setTimeout(() => {\n                console.log(e.target.value);\n            }, 500); \n        });\n    }\n\n    /**\n     * 鼠标每次移动时，并不是每次都去打印它的位置，而是将最近这个事件存起来，使用定时器每隔500毫秒\n     * 打印一次最新的位置。\n     */\n    mouseMoveControl() {\n        this.inTimer = false;\n        document.addEventListener('mousemove', (e) => {\n            this.latestE = e;\n            if (!this.inTimer) {\n                this.inTimer = true;\n                this.timer2 = setTimeout(() => {\n                    let x = this.latestE.pageX;\n                    let y = this.latestE.pageY;\n                    console.log(Date.now(), x, y);\n                    this.inTimer = false;\n                }, 500);\n            }\n        });\n    }\n\n    /**\n     * 一次生成1000个节点，改成每1秒生成100个节点\n     */\n    renderDomControl() {\n        let total = 1000;\n        render();\n        function render() {\n            for (let i = 0; i < 100; i++) {\n                let dom = document.createElement('span');\n                dom.innerText = total;\n                document.body.appendChild(dom);\n                total -= 1;\n            }\n            if(total > 0) {\n                setTimeout(() => {\n                    render();\n                }, 1000);\n            }\n        }\n    }\n}\n  ```\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n","slug":"Javascript设计模式简述","published":1,"updated":"2019-03-18T07:40:45.221Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ck2vg6gy4003s4cobw7k4wcon","content":"<h1 id=\"简介\"><a href=\"#简介\" class=\"headerlink\" title=\"简介\"></a>简介</h1><p>全部代码：<a href=\"https://github.com/renhongl/front-end-demo/tree/master/demo-design-pattern\">点击这里</a>。</p>\n<p>设计模式的主题总是把不变的事物和变化的事物分离开来。</p>\n<h1 id=\"鸭子类型\"><a href=\"#鸭子类型\" class=\"headerlink\" title=\"鸭子类型\"></a>鸭子类型</h1><p>如果它走起来像鸭子，叫起来也像鸭子，那么它就是鸭子。</p>\n<h1 id=\"多态\"><a href=\"#多态\" class=\"headerlink\" title=\"多态\"></a>多态</h1><ul>\n<li><p>多态的思想是把“做什么”和“谁去做”分离开来。</p>\n</li>\n<li><p>多态最根本的作用就是通过把过程化的条件分支语句转化为对象的多态性，从而消除这些条件分支语句。</p>\n</li>\n<li><p>多态的最根本好处在于，你不必再像的对象询问“你是什么类型”而后根据得到的答案调用对象的某个行为，<br>你只管调用该行为就是了，其他的一切多态机制都会为你安排妥当。</p>\n</li>\n</ul>\n<h1 id=\"封装\"><a href=\"#封装\" class=\"headerlink\" title=\"封装\"></a>封装</h1><ul>\n<li>封装的目的是将信息影藏。</li>\n<li>一般而言，封装是指封装数据和封装实现。</li>\n<li>更广义的封装，还包括封装类型和封装变化。</li>\n</ul>\n<h1 id=\"this\"><a href=\"#this\" class=\"headerlink\" title=\"this\"></a>this</h1><ul>\n<li><p>作为对象的方法调用。</p>\n  <figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> obj = &#123;</span><br><span class=\"line\">    a: <span class=\"number\">1</span>,</span><br><span class=\"line\">    getA: <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">        <span class=\"built_in\">console</span>.log(<span class=\"keyword\">this</span> === obj);<span class=\"comment\">//true</span></span><br><span class=\"line\">        <span class=\"built_in\">console</span>.log(<span class=\"keyword\">this</span>.a);<span class=\"comment\">//1</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\">obj.getA();</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>作为普通函数调用。</p>\n  <figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">window</span>.name = <span class=\"string\">'global'</span>;</span><br><span class=\"line\"><span class=\"keyword\">let</span> getName = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"keyword\">this</span>.name;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(getName());<span class=\"comment\">//global</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//or</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">window</span>.name = <span class=\"string\">'global'</span>;</span><br><span class=\"line\"><span class=\"keyword\">let</span> myObj = &#123;</span><br><span class=\"line\">    name: <span class=\"string\">'renhong'</span>,</span><br><span class=\"line\">    getName: <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">this</span>.name;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">var</span> getName = myObj.getName;<span class=\"comment\">//普通函数调用</span></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(getName());<span class=\"comment\">//global</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(myObj.getName());<span class=\"comment\">//renhong, 对象的方法调用</span></span><br></pre></td></tr></table></figure>\n</li>\n<li><p>构造器调用。当用new运算符调用函数时，该函数总会返回一个对象，构造器里的this就指向这个对象。</p>\n  <figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> MyClass = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">this</span>.name = <span class=\"string\">'renhong'</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">let</span> obj = <span class=\"keyword\">new</span> MyClass();</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(obj.name);<span class=\"comment\">//renhong</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//如果构造器显示返回一个对象，那么new之后返回的是这个对象，而不是this。</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">let</span> MyClass = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">this</span>.name = <span class=\"string\">'renhong'</span>,</span><br><span class=\"line\">    <span class=\"keyword\">return</span> &#123;</span><br><span class=\"line\">        name: <span class=\"string\">'mogu'</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">let</span> obj = <span class=\"keyword\">new</span> MyClass();</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(obj.name);<span class=\"comment\">//mogu</span></span><br></pre></td></tr></table></figure>\n</li>\n<li><p>call和apply调用。用于动态的改变传入函数的this。</p>\n  <figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> obj1 = &#123;</span><br><span class=\"line\">    name: <span class=\"string\">'renhong'</span>,</span><br><span class=\"line\">    getName: <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">this</span>.name;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">let</span> obj2 = &#123;</span><br><span class=\"line\">    name: <span class=\"string\">'mogu'</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(obj1.getName());<span class=\"comment\">//renhong</span></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(obj1.getName.call(obj2));<span class=\"comment\">//mogu</span></span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n<h1 id=\"call和apply\"><a href=\"#call和apply\" class=\"headerlink\" title=\"call和apply\"></a>call和apply</h1><ul>\n<li>作用一模一样，区别只在于传入参数的形式不同。</li>\n<li><p>apply接受两个参数，第一个参数指定函数体内部的this指向。第二个参数是一个数组或者类数组，这些元素全部作为参数传递给被调用的函数。</p>\n  <figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> func = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">a, b, c</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log([a, b, c]);<span class=\"comment\">//[1, 2, 3]</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\">func.apply(<span class=\"literal\">null</span>, [<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>]);</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>call 传入的参数是不固定的，第一个参数同样是代表函数体内的this指向，从第二个参数开始，每个参数一次被当做被调用的函数的参数传入。</p>\n  <figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> func = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">a, b, c</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log([a, b, c]);<span class=\"comment\">//[1, 2, 3]</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\">func.call(<span class=\"literal\">null</span>, <span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>);</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>为什么要使用call和apply？</p>\n  <figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//改变this指向</span></span><br><span class=\"line\"><span class=\"comment\">//---------例子1</span></span><br><span class=\"line\"><span class=\"keyword\">let</span> obj1 = &#123;</span><br><span class=\"line\">    name: <span class=\"string\">'renhong'</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">let</span> obj2 = &#123;</span><br><span class=\"line\">    name: <span class=\"string\">'mogu'</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"built_in\">window</span>.name = <span class=\"string\">'window'</span>;</span><br><span class=\"line\"><span class=\"keyword\">let</span> getName = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">this</span>.name;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">getName();<span class=\"comment\">//window</span></span><br><span class=\"line\">getName.call(obj1);<span class=\"comment\">//renhong</span></span><br><span class=\"line\">getName.call(obj2);<span class=\"comment\">//mogu</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//---------例子2</span></span><br><span class=\"line\"><span class=\"keyword\">let</span> func = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"keyword\">this</span>.id);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"built_in\">document</span>.getElementById(<span class=\"string\">'div1'</span>).onclick = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"keyword\">this</span>.id);<span class=\"comment\">//div1</span></span><br><span class=\"line\">    func();<span class=\"comment\">//undefined，指向window</span></span><br><span class=\"line\">    func.call(<span class=\"keyword\">this</span>);<span class=\"comment\">//div1，指向这个this</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//---------例子3</span></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Controller</span></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">constructor</span>() &#123;</span><br><span class=\"line\">        <span class=\"keyword\">let</span> type = <span class=\"string\">'dialog'</span>;</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.name = <span class=\"string\">'controller'</span>;</span><br><span class=\"line\">        renderControl();</span><br><span class=\"line\">        handleEvents.call(<span class=\"keyword\">this</span>);</span><br><span class=\"line\">        renderDialog.call(<span class=\"keyword\">this</span>, type);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">  </span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">renderControl</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"keyword\">this</span>.name);<span class=\"comment\">//undefined，this指向window</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">handleEvents</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"keyword\">this</span>.name);<span class=\"comment\">//controller</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">renderDialog</span>(<span class=\"params\">type</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(type);<span class=\"comment\">//dialog</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//借用其他对象的方法</span></span><br><span class=\"line\"><span class=\"comment\">//类数组对象arguments，没有push的方法，不能将元素push进去。我们首先调用数组的push方法，再手动将push方法内部的this指向改为arguments，就帮助arguments实现了push功能。</span></span><br><span class=\"line\">(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"built_in\">Array</span>.prototype.push.call(<span class=\"built_in\">arguments</span>, <span class=\"number\">3</span>);</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"built_in\">arguments</span>);<span class=\"comment\">//[1, 2, 3]</span></span><br><span class=\"line\">&#125;)(<span class=\"number\">1</span>, <span class=\"number\">2</span>);</span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n<h1 id=\"闭包\"><a href=\"#闭包\" class=\"headerlink\" title=\"闭包\"></a>闭包</h1><p>闭包是一个非常强大的特性，但人们对其也有诸多误解。一种耸人听闻的说法是闭包会造成内存泄漏，所以要尽量减少闭包的使用。</p>\n<p>局部变量本来应该在函数退出的时候被解除饮用，但如果局部变量被封闭在闭包形成的环境中，那么这个局部变量就能一直生存下去。从这个意义上看，闭包的确会使一些数据无法被及时销毁。使用闭包的一部分原因是我们选择主动把一些变量封闭在闭包中，因为可能在以后还需要使用这些变量，把这些变量放在闭包中和放在全局作用域，对内存方面的影响是一致的。</p>\n<p>跟闭包和内存泄漏有关系的地方是，使用闭包的同时，比较容易形成循环引用，如果闭包的作用域链中保存着一些DOM节点，这时候有可能造成内存泄漏。但这并非闭包问题，也并非Javascript问题。</p>\n<p><strong>注：</strong> 当代码中需要全局变量时，可以使用闭包，将这个变量封装在一个函数中，那这个函数就封装了一个独立的功能，不再依赖外部的变量。</p>\n<h1 id=\"函数柯里化（function-currying）\"><a href=\"#函数柯里化（function-currying）\" class=\"headerlink\" title=\"函数柯里化（function currying）\"></a>函数柯里化（function currying）</h1><p>currying又称部分求值。一个currying的函数首先会接受一些参数，接受了这些参数之后，该函数并不会立即求值，而是继续返回另外一个函数，刚传入的参数在函数形成的闭包中被保存起来。待到函数真正需要求值的时候，之前传入的所有参数都会被一次性用于求值。</p>\n<h1 id=\"uncurrying\"><a href=\"#uncurrying\" class=\"headerlink\" title=\"uncurrying\"></a>uncurrying</h1><p>当我们调用对象的某个方法时，其实不用去关心该对象原本是否被设计为拥有这个方法，这是动态类型语言的特点，也是常说的鸭子类型思想。</p>\n<p>同理，一个对象也未必只有使用它自身的方法。通过call和apply方法可以让对象去借用一个原本不属于它的方法。</p>\n<h1 id=\"降频\"><a href=\"#降频\" class=\"headerlink\" title=\"降频\"></a>降频</h1><p>在一些情况下，函数的触发不是由用户直接控制的，在这些情景下，函数可能被非常频繁的调用，而造成大的性能问题。</p>\n<p>例如在window的resize事件中，或者在div拖动事件中，会频繁的触发这些事件，并且DOM相关的操作非常消耗性能，这时浏览器可能会出现卡顿现象。</p>\n<p>以上现象我们可以使用setTimeout来实现每隔固定时间来触发事件，如果过于频繁，将忽略那次的事件。</p>\n<p>函数式例子：</p>\n  <figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> resize = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">callback, interval</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> timer,</span><br><span class=\"line\">        firstTime = <span class=\"literal\">true</span>;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">var</span> args = <span class=\"built_in\">arguments</span>,</span><br><span class=\"line\">            self = <span class=\"keyword\">this</span>;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(firstTime) &#123;</span><br><span class=\"line\">            callback.apply(self, args);</span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"literal\">false</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(timer) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"literal\">false</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        timer = setTimeout(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">            clearTimeout(timer);</span><br><span class=\"line\">            timer = <span class=\"literal\">null</span>;</span><br><span class=\"line\">            callback.apply(self, args);</span><br><span class=\"line\">        &#125;, interval || <span class=\"number\">500</span>)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">window</span>.onresize = resize(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"string\">'resized'</span>, <span class=\"built_in\">Date</span>.now());</span><br><span class=\"line\">&#125;, <span class=\"number\">1000</span>);</span><br></pre></td></tr></table></figure>\n<p>面向对象例子：</p>\n  <figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">default</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">ReduceFrequency</span></span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * input 输入时，不要每次去检查更改，在结束输入后200毫秒去检查</span></span><br><span class=\"line\"><span class=\"comment\">     * 这样可以减少监听频繁执行的事件带来的卡顿</span></span><br><span class=\"line\"><span class=\"comment\">     * @param &#123;DOM Object&#125; target </span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    inputControl(target) &#123;</span><br><span class=\"line\">        target.addEventListener(<span class=\"string\">'input'</span>, (e) =&gt; &#123;</span><br><span class=\"line\">            clearTimeout(<span class=\"keyword\">this</span>.timer);</span><br><span class=\"line\">            <span class=\"keyword\">this</span>.timer = setTimeout(<span class=\"function\"><span class=\"params\">()</span> =&gt;</span> &#123;</span><br><span class=\"line\">                <span class=\"built_in\">console</span>.log(e.target.value);</span><br><span class=\"line\">            &#125;, <span class=\"number\">500</span>); </span><br><span class=\"line\">        &#125;);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * 鼠标每次移动时，并不是每次都去打印它的位置，而是将最近这个事件存起来，使用定时器每隔500毫秒</span></span><br><span class=\"line\"><span class=\"comment\">     * 打印一次最新的位置。</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    mouseMoveControl() &#123;</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.inTimer = <span class=\"literal\">false</span>;</span><br><span class=\"line\">        <span class=\"built_in\">document</span>.addEventListener(<span class=\"string\">'mousemove'</span>, (e) =&gt; &#123;</span><br><span class=\"line\">            <span class=\"keyword\">this</span>.latestE = e;</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (!<span class=\"keyword\">this</span>.inTimer) &#123;</span><br><span class=\"line\">                <span class=\"keyword\">this</span>.inTimer = <span class=\"literal\">true</span>;</span><br><span class=\"line\">                <span class=\"keyword\">this</span>.timer2 = setTimeout(<span class=\"function\"><span class=\"params\">()</span> =&gt;</span> &#123;</span><br><span class=\"line\">                    <span class=\"keyword\">let</span> x = <span class=\"keyword\">this</span>.latestE.pageX;</span><br><span class=\"line\">                    <span class=\"keyword\">let</span> y = <span class=\"keyword\">this</span>.latestE.pageY;</span><br><span class=\"line\">                    <span class=\"built_in\">console</span>.log(<span class=\"built_in\">Date</span>.now(), x, y);</span><br><span class=\"line\">                    <span class=\"keyword\">this</span>.inTimer = <span class=\"literal\">false</span>;</span><br><span class=\"line\">                &#125;, <span class=\"number\">500</span>);</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * 一次生成1000个节点，改成每1秒生成100个节点</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    renderDomControl() &#123;</span><br><span class=\"line\">        <span class=\"keyword\">let</span> total = <span class=\"number\">1000</span>;</span><br><span class=\"line\">        render();</span><br><span class=\"line\">        <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">render</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">            <span class=\"keyword\">for</span> (<span class=\"keyword\">let</span> i = <span class=\"number\">0</span>; i &lt; <span class=\"number\">100</span>; i++) &#123;</span><br><span class=\"line\">                <span class=\"keyword\">let</span> dom = <span class=\"built_in\">document</span>.createElement(<span class=\"string\">'span'</span>);</span><br><span class=\"line\">                dom.innerText = total;</span><br><span class=\"line\">                <span class=\"built_in\">document</span>.body.appendChild(dom);</span><br><span class=\"line\">                total -= <span class=\"number\">1</span>;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            <span class=\"keyword\">if</span>(total &gt; <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">                setTimeout(<span class=\"function\"><span class=\"params\">()</span> =&gt;</span> &#123;</span><br><span class=\"line\">                    render();</span><br><span class=\"line\">                &#125;, <span class=\"number\">1000</span>);</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n","site":{"data":{"projects":[{"name":"AiTing","url":"https://github.com/renhongl/aiting","desc":"HTML5客户端音乐播放器"},{"name":"AiLiao","url":"https://github.com/renhongl/ailiao","desc":"网页聊天软件"},{"name":"Pomelo Editor","url":"https://renhongl.github.io/markdown-editor/","desc":"功能强大的在线Markdown编辑器"}]}},"excerpt":"","more":"<h1 id=\"简介\"><a href=\"#简介\" class=\"headerlink\" title=\"简介\"></a>简介</h1><p>全部代码：<a href=\"https://github.com/renhongl/front-end-demo/tree/master/demo-design-pattern\">点击这里</a>。</p>\n<p>设计模式的主题总是把不变的事物和变化的事物分离开来。</p>\n<h1 id=\"鸭子类型\"><a href=\"#鸭子类型\" class=\"headerlink\" title=\"鸭子类型\"></a>鸭子类型</h1><p>如果它走起来像鸭子，叫起来也像鸭子，那么它就是鸭子。</p>\n<h1 id=\"多态\"><a href=\"#多态\" class=\"headerlink\" title=\"多态\"></a>多态</h1><ul>\n<li><p>多态的思想是把“做什么”和“谁去做”分离开来。</p>\n</li>\n<li><p>多态最根本的作用就是通过把过程化的条件分支语句转化为对象的多态性，从而消除这些条件分支语句。</p>\n</li>\n<li><p>多态的最根本好处在于，你不必再像的对象询问“你是什么类型”而后根据得到的答案调用对象的某个行为，<br>你只管调用该行为就是了，其他的一切多态机制都会为你安排妥当。</p>\n</li>\n</ul>\n<h1 id=\"封装\"><a href=\"#封装\" class=\"headerlink\" title=\"封装\"></a>封装</h1><ul>\n<li>封装的目的是将信息影藏。</li>\n<li>一般而言，封装是指封装数据和封装实现。</li>\n<li>更广义的封装，还包括封装类型和封装变化。</li>\n</ul>\n<h1 id=\"this\"><a href=\"#this\" class=\"headerlink\" title=\"this\"></a>this</h1><ul>\n<li><p>作为对象的方法调用。</p>\n  <figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> obj = &#123;</span><br><span class=\"line\">    a: <span class=\"number\">1</span>,</span><br><span class=\"line\">    getA: <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">        <span class=\"built_in\">console</span>.log(<span class=\"keyword\">this</span> === obj);<span class=\"comment\">//true</span></span><br><span class=\"line\">        <span class=\"built_in\">console</span>.log(<span class=\"keyword\">this</span>.a);<span class=\"comment\">//1</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\">obj.getA();</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>作为普通函数调用。</p>\n  <figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">window</span>.name = <span class=\"string\">'global'</span>;</span><br><span class=\"line\"><span class=\"keyword\">let</span> getName = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"keyword\">this</span>.name;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(getName());<span class=\"comment\">//global</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//or</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">window</span>.name = <span class=\"string\">'global'</span>;</span><br><span class=\"line\"><span class=\"keyword\">let</span> myObj = &#123;</span><br><span class=\"line\">    name: <span class=\"string\">'renhong'</span>,</span><br><span class=\"line\">    getName: <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">this</span>.name;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">var</span> getName = myObj.getName;<span class=\"comment\">//普通函数调用</span></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(getName());<span class=\"comment\">//global</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(myObj.getName());<span class=\"comment\">//renhong, 对象的方法调用</span></span><br></pre></td></tr></table></figure>\n</li>\n<li><p>构造器调用。当用new运算符调用函数时，该函数总会返回一个对象，构造器里的this就指向这个对象。</p>\n  <figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> MyClass = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">this</span>.name = <span class=\"string\">'renhong'</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">let</span> obj = <span class=\"keyword\">new</span> MyClass();</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(obj.name);<span class=\"comment\">//renhong</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//如果构造器显示返回一个对象，那么new之后返回的是这个对象，而不是this。</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">let</span> MyClass = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">this</span>.name = <span class=\"string\">'renhong'</span>,</span><br><span class=\"line\">    <span class=\"keyword\">return</span> &#123;</span><br><span class=\"line\">        name: <span class=\"string\">'mogu'</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">let</span> obj = <span class=\"keyword\">new</span> MyClass();</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(obj.name);<span class=\"comment\">//mogu</span></span><br></pre></td></tr></table></figure>\n</li>\n<li><p>call和apply调用。用于动态的改变传入函数的this。</p>\n  <figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> obj1 = &#123;</span><br><span class=\"line\">    name: <span class=\"string\">'renhong'</span>,</span><br><span class=\"line\">    getName: <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">this</span>.name;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">let</span> obj2 = &#123;</span><br><span class=\"line\">    name: <span class=\"string\">'mogu'</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(obj1.getName());<span class=\"comment\">//renhong</span></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(obj1.getName.call(obj2));<span class=\"comment\">//mogu</span></span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n<h1 id=\"call和apply\"><a href=\"#call和apply\" class=\"headerlink\" title=\"call和apply\"></a>call和apply</h1><ul>\n<li>作用一模一样，区别只在于传入参数的形式不同。</li>\n<li><p>apply接受两个参数，第一个参数指定函数体内部的this指向。第二个参数是一个数组或者类数组，这些元素全部作为参数传递给被调用的函数。</p>\n  <figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> func = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">a, b, c</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log([a, b, c]);<span class=\"comment\">//[1, 2, 3]</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\">func.apply(<span class=\"literal\">null</span>, [<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>]);</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>call 传入的参数是不固定的，第一个参数同样是代表函数体内的this指向，从第二个参数开始，每个参数一次被当做被调用的函数的参数传入。</p>\n  <figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> func = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">a, b, c</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log([a, b, c]);<span class=\"comment\">//[1, 2, 3]</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\">func.call(<span class=\"literal\">null</span>, <span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>);</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>为什么要使用call和apply？</p>\n  <figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//改变this指向</span></span><br><span class=\"line\"><span class=\"comment\">//---------例子1</span></span><br><span class=\"line\"><span class=\"keyword\">let</span> obj1 = &#123;</span><br><span class=\"line\">    name: <span class=\"string\">'renhong'</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">let</span> obj2 = &#123;</span><br><span class=\"line\">    name: <span class=\"string\">'mogu'</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"built_in\">window</span>.name = <span class=\"string\">'window'</span>;</span><br><span class=\"line\"><span class=\"keyword\">let</span> getName = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">this</span>.name;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">getName();<span class=\"comment\">//window</span></span><br><span class=\"line\">getName.call(obj1);<span class=\"comment\">//renhong</span></span><br><span class=\"line\">getName.call(obj2);<span class=\"comment\">//mogu</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//---------例子2</span></span><br><span class=\"line\"><span class=\"keyword\">let</span> func = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"keyword\">this</span>.id);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"built_in\">document</span>.getElementById(<span class=\"string\">'div1'</span>).onclick = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"keyword\">this</span>.id);<span class=\"comment\">//div1</span></span><br><span class=\"line\">    func();<span class=\"comment\">//undefined，指向window</span></span><br><span class=\"line\">    func.call(<span class=\"keyword\">this</span>);<span class=\"comment\">//div1，指向这个this</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//---------例子3</span></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Controller</span></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">constructor</span>() &#123;</span><br><span class=\"line\">        <span class=\"keyword\">let</span> type = <span class=\"string\">'dialog'</span>;</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.name = <span class=\"string\">'controller'</span>;</span><br><span class=\"line\">        renderControl();</span><br><span class=\"line\">        handleEvents.call(<span class=\"keyword\">this</span>);</span><br><span class=\"line\">        renderDialog.call(<span class=\"keyword\">this</span>, type);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">  </span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">renderControl</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"keyword\">this</span>.name);<span class=\"comment\">//undefined，this指向window</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">handleEvents</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"keyword\">this</span>.name);<span class=\"comment\">//controller</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">renderDialog</span>(<span class=\"params\">type</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(type);<span class=\"comment\">//dialog</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//借用其他对象的方法</span></span><br><span class=\"line\"><span class=\"comment\">//类数组对象arguments，没有push的方法，不能将元素push进去。我们首先调用数组的push方法，再手动将push方法内部的this指向改为arguments，就帮助arguments实现了push功能。</span></span><br><span class=\"line\">(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"built_in\">Array</span>.prototype.push.call(<span class=\"built_in\">arguments</span>, <span class=\"number\">3</span>);</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"built_in\">arguments</span>);<span class=\"comment\">//[1, 2, 3]</span></span><br><span class=\"line\">&#125;)(<span class=\"number\">1</span>, <span class=\"number\">2</span>);</span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n<h1 id=\"闭包\"><a href=\"#闭包\" class=\"headerlink\" title=\"闭包\"></a>闭包</h1><p>闭包是一个非常强大的特性，但人们对其也有诸多误解。一种耸人听闻的说法是闭包会造成内存泄漏，所以要尽量减少闭包的使用。</p>\n<p>局部变量本来应该在函数退出的时候被解除饮用，但如果局部变量被封闭在闭包形成的环境中，那么这个局部变量就能一直生存下去。从这个意义上看，闭包的确会使一些数据无法被及时销毁。使用闭包的一部分原因是我们选择主动把一些变量封闭在闭包中，因为可能在以后还需要使用这些变量，把这些变量放在闭包中和放在全局作用域，对内存方面的影响是一致的。</p>\n<p>跟闭包和内存泄漏有关系的地方是，使用闭包的同时，比较容易形成循环引用，如果闭包的作用域链中保存着一些DOM节点，这时候有可能造成内存泄漏。但这并非闭包问题，也并非Javascript问题。</p>\n<p><strong>注：</strong> 当代码中需要全局变量时，可以使用闭包，将这个变量封装在一个函数中，那这个函数就封装了一个独立的功能，不再依赖外部的变量。</p>\n<h1 id=\"函数柯里化（function-currying）\"><a href=\"#函数柯里化（function-currying）\" class=\"headerlink\" title=\"函数柯里化（function currying）\"></a>函数柯里化（function currying）</h1><p>currying又称部分求值。一个currying的函数首先会接受一些参数，接受了这些参数之后，该函数并不会立即求值，而是继续返回另外一个函数，刚传入的参数在函数形成的闭包中被保存起来。待到函数真正需要求值的时候，之前传入的所有参数都会被一次性用于求值。</p>\n<h1 id=\"uncurrying\"><a href=\"#uncurrying\" class=\"headerlink\" title=\"uncurrying\"></a>uncurrying</h1><p>当我们调用对象的某个方法时，其实不用去关心该对象原本是否被设计为拥有这个方法，这是动态类型语言的特点，也是常说的鸭子类型思想。</p>\n<p>同理，一个对象也未必只有使用它自身的方法。通过call和apply方法可以让对象去借用一个原本不属于它的方法。</p>\n<h1 id=\"降频\"><a href=\"#降频\" class=\"headerlink\" title=\"降频\"></a>降频</h1><p>在一些情况下，函数的触发不是由用户直接控制的，在这些情景下，函数可能被非常频繁的调用，而造成大的性能问题。</p>\n<p>例如在window的resize事件中，或者在div拖动事件中，会频繁的触发这些事件，并且DOM相关的操作非常消耗性能，这时浏览器可能会出现卡顿现象。</p>\n<p>以上现象我们可以使用setTimeout来实现每隔固定时间来触发事件，如果过于频繁，将忽略那次的事件。</p>\n<p>函数式例子：</p>\n  <figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> resize = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">callback, interval</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> timer,</span><br><span class=\"line\">        firstTime = <span class=\"literal\">true</span>;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">var</span> args = <span class=\"built_in\">arguments</span>,</span><br><span class=\"line\">            self = <span class=\"keyword\">this</span>;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(firstTime) &#123;</span><br><span class=\"line\">            callback.apply(self, args);</span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"literal\">false</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(timer) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"literal\">false</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        timer = setTimeout(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">            clearTimeout(timer);</span><br><span class=\"line\">            timer = <span class=\"literal\">null</span>;</span><br><span class=\"line\">            callback.apply(self, args);</span><br><span class=\"line\">        &#125;, interval || <span class=\"number\">500</span>)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">window</span>.onresize = resize(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"string\">'resized'</span>, <span class=\"built_in\">Date</span>.now());</span><br><span class=\"line\">&#125;, <span class=\"number\">1000</span>);</span><br></pre></td></tr></table></figure>\n<p>面向对象例子：</p>\n  <figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">default</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">ReduceFrequency</span></span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * input 输入时，不要每次去检查更改，在结束输入后200毫秒去检查</span></span><br><span class=\"line\"><span class=\"comment\">     * 这样可以减少监听频繁执行的事件带来的卡顿</span></span><br><span class=\"line\"><span class=\"comment\">     * @param &#123;DOM Object&#125; target </span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    inputControl(target) &#123;</span><br><span class=\"line\">        target.addEventListener(<span class=\"string\">'input'</span>, (e) =&gt; &#123;</span><br><span class=\"line\">            clearTimeout(<span class=\"keyword\">this</span>.timer);</span><br><span class=\"line\">            <span class=\"keyword\">this</span>.timer = setTimeout(<span class=\"function\"><span class=\"params\">()</span> =&gt;</span> &#123;</span><br><span class=\"line\">                <span class=\"built_in\">console</span>.log(e.target.value);</span><br><span class=\"line\">            &#125;, <span class=\"number\">500</span>); </span><br><span class=\"line\">        &#125;);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * 鼠标每次移动时，并不是每次都去打印它的位置，而是将最近这个事件存起来，使用定时器每隔500毫秒</span></span><br><span class=\"line\"><span class=\"comment\">     * 打印一次最新的位置。</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    mouseMoveControl() &#123;</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.inTimer = <span class=\"literal\">false</span>;</span><br><span class=\"line\">        <span class=\"built_in\">document</span>.addEventListener(<span class=\"string\">'mousemove'</span>, (e) =&gt; &#123;</span><br><span class=\"line\">            <span class=\"keyword\">this</span>.latestE = e;</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (!<span class=\"keyword\">this</span>.inTimer) &#123;</span><br><span class=\"line\">                <span class=\"keyword\">this</span>.inTimer = <span class=\"literal\">true</span>;</span><br><span class=\"line\">                <span class=\"keyword\">this</span>.timer2 = setTimeout(<span class=\"function\"><span class=\"params\">()</span> =&gt;</span> &#123;</span><br><span class=\"line\">                    <span class=\"keyword\">let</span> x = <span class=\"keyword\">this</span>.latestE.pageX;</span><br><span class=\"line\">                    <span class=\"keyword\">let</span> y = <span class=\"keyword\">this</span>.latestE.pageY;</span><br><span class=\"line\">                    <span class=\"built_in\">console</span>.log(<span class=\"built_in\">Date</span>.now(), x, y);</span><br><span class=\"line\">                    <span class=\"keyword\">this</span>.inTimer = <span class=\"literal\">false</span>;</span><br><span class=\"line\">                &#125;, <span class=\"number\">500</span>);</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * 一次生成1000个节点，改成每1秒生成100个节点</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    renderDomControl() &#123;</span><br><span class=\"line\">        <span class=\"keyword\">let</span> total = <span class=\"number\">1000</span>;</span><br><span class=\"line\">        render();</span><br><span class=\"line\">        <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">render</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">            <span class=\"keyword\">for</span> (<span class=\"keyword\">let</span> i = <span class=\"number\">0</span>; i &lt; <span class=\"number\">100</span>; i++) &#123;</span><br><span class=\"line\">                <span class=\"keyword\">let</span> dom = <span class=\"built_in\">document</span>.createElement(<span class=\"string\">'span'</span>);</span><br><span class=\"line\">                dom.innerText = total;</span><br><span class=\"line\">                <span class=\"built_in\">document</span>.body.appendChild(dom);</span><br><span class=\"line\">                total -= <span class=\"number\">1</span>;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            <span class=\"keyword\">if</span>(total &gt; <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">                setTimeout(<span class=\"function\"><span class=\"params\">()</span> =&gt;</span> &#123;</span><br><span class=\"line\">                    render();</span><br><span class=\"line\">                &#125;, <span class=\"number\">1000</span>);</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n"},{"title":"职业发展方向","date":"2018-06-18T13:16:52.000Z","_content":"\n# 技术类人员的职业发展方向\n\n\n\n几乎每 个企业都需要技术人员的支持，生产制造型企业需要现场生产控制和工艺流程方面的技术人才；IT等高科技行业需要大量软件研发和设备维护的硬件工程师；房地 产、建筑工程领域需要建筑设计师、土木工程师和施工技术人员。此外，不论是国企、民营企业还是外资公司，都需要大量的基础技术工人。甚至很多在豪华写字楼 office内工作的白领，从事的工作都是和技术相关的。\n\n　　不过，一个严峻的现实是，大量的技术类人员对自己的职业定位和职业生涯规划显得非常迷茫和困惑。中国有句古话：劳心者治人，劳力者治于人。与管理类岗 位相比，技术人员往往被人看低一等，他们虽然从事着非常重要、繁琐的技术性工作，但更多的是扮演着幕后英雄的角色。在社会地位、经济收入方面与分光无限的 各级管理层普遍存在差距，这一现实造就了技术人员的巨大心理落差。第二个造成职业规划困惑的原因是部分技术性工作的局限性。拿IT行业来说，由于技术和知 识更新的速度太快，软件开放人员普遍被认为是吃“青春饭”的职位，谁学习的更快、谁的精力更旺盛、谁更能熬夜，谁就更有竞争力，因为这时经验已经不再重 要。如果超过35岁还从事软件开发的话，将很难在本职岗位取得突破。\n\n　　那么，对于技术类人员来说，难道他们的职业发展前景真的如此黯淡？事实当然不会如此悲观，做技术工作同样有着非常广阔的空间，当然，关键一点你要令自己的视野更开阔些，从长远的角度来看待这个问题。根据我的经验，技术人员的职业方向可以有以下几个选择： \n\n　　方向一、成为项目经理\n\n　　对于很多从事技术方面工作的人员来说，发展成为项目经理是一个相当好的工作。项目管理工作既需要扎实的技术背景支持，又涉及多方面的管理工作，最适合 那些技术出身但又不甘于只做技术工作的人员。成为项目经理，一方面可以充分发挥技术人员的专业优势，同时又可在团队管理、协调各方资源、内外部沟通等工作 中体验和发挥作为管理者的角色和作用，从而让自身价值更为充分的实现和得到认可。优秀的项目管理人才，也是今后很长时期内的一个热门职业方向。\n\n　　方向二、成为行业资深专家\n\n　　如果的确非常喜爱技术工作，而不擅长和喜欢与人沟通，则可以完全专注于自身的领域，以发展成为行业资深专家为方向和目标，当然，这一发展过程可能会比 较漫长，任何一个领域的顶尖技术人才都需要长期的行业经验的累积和个人孜孜不倦的投入。不过这类人才的一个优势是越老越吃香，当别人随着年龄的逐步增长而 开始担心饭碗问题时，你则渐入佳境，开始进入职业发展的黄金时期。\n\n　　方向三、成为研发经理或技术总监\n\n　　事实上，在某些行业和企业，技术研发人员的地位是非常高的。譬如在微软、诺基亚、华为等IT产业，技术的支持和研发的速度，成为企业利润增长的最主要 来源，在这些行业，技术研发部门就是企业的主战场。在不少国企和政府部门，也非常重视科技和技术工作，例如，我所知道的广州市市政园林局，就设有总工程 师、副总工程师等技术职位，其中总工程师的职务级别相当于副局级，在这种氛围影响下，技术岗位人才和行政领导同样受人尊敬。所以，在一个尊重和重视技术工 作的行业和企业中，发展成为研发经理、技术总监或总工程师都是一个很好的选择。\n\n　　方向四、做技术型销售和服务\n\n　　技术工作的领域其实非常广泛，如果感觉纯技术工作发展潜力不大，可以考虑转向做销售或技术支持方面。华为、中兴等通信技术公司的销售人员，很少是不具 有专业技术背景的；甲骨文等软件巨头的市场推广，第一步常常是从销售工程师拜访客户开始的。这类高价值、高科技的产品销售推广，非常需要具有丰富技术经验 的销售人员。\n\n　　技术人员转向售后服务，也是非常有前途的。我认识的一个朋友，大学是施工机械专业，毕业后一直在市政工程行业做非开挖顶管施工，在几年的工作中积累了 丰富的地下顶进设备的应用和维修经验，一个合适的机会跳槽到著名的顶管设备生产商－德国海瑞克公司，成为其售后服务工程师，工作上得心应手，收入也有了数 倍的增长。 \n\n　　方向五、转向管理岗位\n\n　　总有一些人，虽然是理工科出身、从事着技术岗位工作，但他们似乎天生就是具有管理天赋的人。这些人会在工作中逐步展现出管理潜质和优秀的领导能力，他 们往往更喜欢跟人打交道，更喜欢与外界沟通。在这种条件下，以技术经验为基础和依托，适当补充学习些管理方面的知识，例如可以在职攻读MBA，假以时日， 完全可以成长为出色的职业经理人。\n\n　　方向六、高级技术操作人员\n\n　　刚才所谈的职业发展方向，适用群体多为高校理工专业出身的人士，但对于数量众多的中等专科学校、技校毕业的一线技术工人来说，成为行业技术专家或研发总监的机会显然非常微小。这一群体的职业人士，最佳的技术发展路线是立足本职岗位，成为高级操作型技术人员。\n\n　　广州市2006年出台的各类岗位工资指导价格中，高级技师就业的工资比博士还要高出500元。出现这一现象的原因很简单，从全国层面来说，产业工人数 量虽然巨大，但高级技工的比例却非常小，“高级技工”的缺乏已经成为制约许多企业发展的“瓶颈”。但随着政策环境、企业认识角度和培育机制方面的不断改 善，这一现象将逐步得到改变，所以成为中高级技师将是一个非常有前途的职业发展方向。\n\n　　最后，我再次拿IT行业为例来具体谈谈技术人员的职业轨迹。\n\n　　IT(Information Technology)行业的分类相当复杂，我这里仅仅分析最典型的三个部分:\n\n　　第一部分是软件开发，通俗来说就是编程。实际上我认为真正的软件开发人员和制鞋工厂中的工人处在一个地位，是企业产品的最终生产者(当然这里没有贬义)。 \n\n　　第二个部分是MIS: Management Information Service/System（管理信息系统），主要负责基础IT建设、网络、通讯、软硬件支持、简单开发等职能，为公司其他部门提供IT基础服务。\n\n　　第三部分是ERP: Enterprise Resource Planning（企业资源计划系统），主要涉及企业管理类软件实施、维护、管理。通过是引入信息化手段在企业现实的实现企业的资源管理，协调企业各方面 的生产运作，它对业务的规范和企业的管理机制有很大的依赖。\n\n　　让我们来分别看看这三部分人员的职业发展空间：\n\n　　1. 开发人员\n\n　　我的观点是，在中小企业做纯粹的软件开发很可能走上一条不归路，长期从事开发的人一般处世能力不足，升任管理人员的机会不大。而还有一个更重要的问题 是中国目前开发行业的环境很不好，正如我之前谈到的基本是在吃青春饭，30往后就很难做下去了。而在美国40岁的开发人员是正吃香的年龄。虽然可能业务越 来越精，但可能会离IT越来越远，向纯蓝领工人发展。\n\n　　如果真的要做开发，应该找一个更好的平台，最好是进入跨国企业或国内龙头企业。如果数据方面的技术很强，可以考虑转向互联网搜索方向；如果在电子和通信设备方面有优势，可以从简单的程序开发转向通信产品的开发。\n\n　　2. MIS人员\n\n　　MIS内容广泛，可从事的职业很多:网管、技术支持等，而且通过努力可以得到提升成为小小的主管(当然要有自身的素质)，进而成为MIS Manager，但做到MIS Manager基本也就到头了，不过倒是可以考虑转到不同的行业或企业做MIS。\n\n　　同样是做IT服务，在不同公司内IT部门的地位还是非常巨大的。就我所了解的，雅芳（中国）公司的IT部门就有100多人，在公司总部的各职能部门中 的地位相当高；而南方航空公司的IT部门竟然达到800多人，这个规模已经远远超过一般的IT公司，其IT部门的总裁也是公司决策层的重要成员。所以，在 这些公司内做IT技术支持工作，既避免了纯编程式的软件开发人员遇到的“人老珠黄”的被动局面，也不必担心IT产业泡沫破灭而产生的生存危机。\n\n　　3. ERP类人员\n\n　　从事企业管理类软件的人员一般起点比较高(公司的起点就比较高)，要求对财务、生产、销售等流程都有清楚地认识，从业人员不一定为IT出身，而有可能 是财务人员或理工科人员等转行而来。IT的迅速发展和企业经营领域的不断拓展，为ERP的推广和发展创造了良好的发展空间。事实上，一个从事企业管理类软 件的技术人员完全可以胜任一个企业的管理者，在这一领域技术人员的前景可以说是非常广阔的。\n\n　　我认识的一位朋友，本科读的是工业装备控制专业，毕业后一直从事ERP方面的应用推广和管理咨询，虽然他对纯粹的IT技术了解并不是特别深刻，但在 ERP系统在企业中的应用方面经验非常丰富，在别人眼中他更像是一名管理咨询师，五年下来已经是这一领域的专家级人物，在个人收入方面也非常可观。","source":"_posts/career-development.md","raw":"---\ntitle: 职业发展方向\ndate: 2018-06-18 21:16:52\ntags: 综合技能\n---\n\n# 技术类人员的职业发展方向\n\n\n\n几乎每 个企业都需要技术人员的支持，生产制造型企业需要现场生产控制和工艺流程方面的技术人才；IT等高科技行业需要大量软件研发和设备维护的硬件工程师；房地 产、建筑工程领域需要建筑设计师、土木工程师和施工技术人员。此外，不论是国企、民营企业还是外资公司，都需要大量的基础技术工人。甚至很多在豪华写字楼 office内工作的白领，从事的工作都是和技术相关的。\n\n　　不过，一个严峻的现实是，大量的技术类人员对自己的职业定位和职业生涯规划显得非常迷茫和困惑。中国有句古话：劳心者治人，劳力者治于人。与管理类岗 位相比，技术人员往往被人看低一等，他们虽然从事着非常重要、繁琐的技术性工作，但更多的是扮演着幕后英雄的角色。在社会地位、经济收入方面与分光无限的 各级管理层普遍存在差距，这一现实造就了技术人员的巨大心理落差。第二个造成职业规划困惑的原因是部分技术性工作的局限性。拿IT行业来说，由于技术和知 识更新的速度太快，软件开放人员普遍被认为是吃“青春饭”的职位，谁学习的更快、谁的精力更旺盛、谁更能熬夜，谁就更有竞争力，因为这时经验已经不再重 要。如果超过35岁还从事软件开发的话，将很难在本职岗位取得突破。\n\n　　那么，对于技术类人员来说，难道他们的职业发展前景真的如此黯淡？事实当然不会如此悲观，做技术工作同样有着非常广阔的空间，当然，关键一点你要令自己的视野更开阔些，从长远的角度来看待这个问题。根据我的经验，技术人员的职业方向可以有以下几个选择： \n\n　　方向一、成为项目经理\n\n　　对于很多从事技术方面工作的人员来说，发展成为项目经理是一个相当好的工作。项目管理工作既需要扎实的技术背景支持，又涉及多方面的管理工作，最适合 那些技术出身但又不甘于只做技术工作的人员。成为项目经理，一方面可以充分发挥技术人员的专业优势，同时又可在团队管理、协调各方资源、内外部沟通等工作 中体验和发挥作为管理者的角色和作用，从而让自身价值更为充分的实现和得到认可。优秀的项目管理人才，也是今后很长时期内的一个热门职业方向。\n\n　　方向二、成为行业资深专家\n\n　　如果的确非常喜爱技术工作，而不擅长和喜欢与人沟通，则可以完全专注于自身的领域，以发展成为行业资深专家为方向和目标，当然，这一发展过程可能会比 较漫长，任何一个领域的顶尖技术人才都需要长期的行业经验的累积和个人孜孜不倦的投入。不过这类人才的一个优势是越老越吃香，当别人随着年龄的逐步增长而 开始担心饭碗问题时，你则渐入佳境，开始进入职业发展的黄金时期。\n\n　　方向三、成为研发经理或技术总监\n\n　　事实上，在某些行业和企业，技术研发人员的地位是非常高的。譬如在微软、诺基亚、华为等IT产业，技术的支持和研发的速度，成为企业利润增长的最主要 来源，在这些行业，技术研发部门就是企业的主战场。在不少国企和政府部门，也非常重视科技和技术工作，例如，我所知道的广州市市政园林局，就设有总工程 师、副总工程师等技术职位，其中总工程师的职务级别相当于副局级，在这种氛围影响下，技术岗位人才和行政领导同样受人尊敬。所以，在一个尊重和重视技术工 作的行业和企业中，发展成为研发经理、技术总监或总工程师都是一个很好的选择。\n\n　　方向四、做技术型销售和服务\n\n　　技术工作的领域其实非常广泛，如果感觉纯技术工作发展潜力不大，可以考虑转向做销售或技术支持方面。华为、中兴等通信技术公司的销售人员，很少是不具 有专业技术背景的；甲骨文等软件巨头的市场推广，第一步常常是从销售工程师拜访客户开始的。这类高价值、高科技的产品销售推广，非常需要具有丰富技术经验 的销售人员。\n\n　　技术人员转向售后服务，也是非常有前途的。我认识的一个朋友，大学是施工机械专业，毕业后一直在市政工程行业做非开挖顶管施工，在几年的工作中积累了 丰富的地下顶进设备的应用和维修经验，一个合适的机会跳槽到著名的顶管设备生产商－德国海瑞克公司，成为其售后服务工程师，工作上得心应手，收入也有了数 倍的增长。 \n\n　　方向五、转向管理岗位\n\n　　总有一些人，虽然是理工科出身、从事着技术岗位工作，但他们似乎天生就是具有管理天赋的人。这些人会在工作中逐步展现出管理潜质和优秀的领导能力，他 们往往更喜欢跟人打交道，更喜欢与外界沟通。在这种条件下，以技术经验为基础和依托，适当补充学习些管理方面的知识，例如可以在职攻读MBA，假以时日， 完全可以成长为出色的职业经理人。\n\n　　方向六、高级技术操作人员\n\n　　刚才所谈的职业发展方向，适用群体多为高校理工专业出身的人士，但对于数量众多的中等专科学校、技校毕业的一线技术工人来说，成为行业技术专家或研发总监的机会显然非常微小。这一群体的职业人士，最佳的技术发展路线是立足本职岗位，成为高级操作型技术人员。\n\n　　广州市2006年出台的各类岗位工资指导价格中，高级技师就业的工资比博士还要高出500元。出现这一现象的原因很简单，从全国层面来说，产业工人数 量虽然巨大，但高级技工的比例却非常小，“高级技工”的缺乏已经成为制约许多企业发展的“瓶颈”。但随着政策环境、企业认识角度和培育机制方面的不断改 善，这一现象将逐步得到改变，所以成为中高级技师将是一个非常有前途的职业发展方向。\n\n　　最后，我再次拿IT行业为例来具体谈谈技术人员的职业轨迹。\n\n　　IT(Information Technology)行业的分类相当复杂，我这里仅仅分析最典型的三个部分:\n\n　　第一部分是软件开发，通俗来说就是编程。实际上我认为真正的软件开发人员和制鞋工厂中的工人处在一个地位，是企业产品的最终生产者(当然这里没有贬义)。 \n\n　　第二个部分是MIS: Management Information Service/System（管理信息系统），主要负责基础IT建设、网络、通讯、软硬件支持、简单开发等职能，为公司其他部门提供IT基础服务。\n\n　　第三部分是ERP: Enterprise Resource Planning（企业资源计划系统），主要涉及企业管理类软件实施、维护、管理。通过是引入信息化手段在企业现实的实现企业的资源管理，协调企业各方面 的生产运作，它对业务的规范和企业的管理机制有很大的依赖。\n\n　　让我们来分别看看这三部分人员的职业发展空间：\n\n　　1. 开发人员\n\n　　我的观点是，在中小企业做纯粹的软件开发很可能走上一条不归路，长期从事开发的人一般处世能力不足，升任管理人员的机会不大。而还有一个更重要的问题 是中国目前开发行业的环境很不好，正如我之前谈到的基本是在吃青春饭，30往后就很难做下去了。而在美国40岁的开发人员是正吃香的年龄。虽然可能业务越 来越精，但可能会离IT越来越远，向纯蓝领工人发展。\n\n　　如果真的要做开发，应该找一个更好的平台，最好是进入跨国企业或国内龙头企业。如果数据方面的技术很强，可以考虑转向互联网搜索方向；如果在电子和通信设备方面有优势，可以从简单的程序开发转向通信产品的开发。\n\n　　2. MIS人员\n\n　　MIS内容广泛，可从事的职业很多:网管、技术支持等，而且通过努力可以得到提升成为小小的主管(当然要有自身的素质)，进而成为MIS Manager，但做到MIS Manager基本也就到头了，不过倒是可以考虑转到不同的行业或企业做MIS。\n\n　　同样是做IT服务，在不同公司内IT部门的地位还是非常巨大的。就我所了解的，雅芳（中国）公司的IT部门就有100多人，在公司总部的各职能部门中 的地位相当高；而南方航空公司的IT部门竟然达到800多人，这个规模已经远远超过一般的IT公司，其IT部门的总裁也是公司决策层的重要成员。所以，在 这些公司内做IT技术支持工作，既避免了纯编程式的软件开发人员遇到的“人老珠黄”的被动局面，也不必担心IT产业泡沫破灭而产生的生存危机。\n\n　　3. ERP类人员\n\n　　从事企业管理类软件的人员一般起点比较高(公司的起点就比较高)，要求对财务、生产、销售等流程都有清楚地认识，从业人员不一定为IT出身，而有可能 是财务人员或理工科人员等转行而来。IT的迅速发展和企业经营领域的不断拓展，为ERP的推广和发展创造了良好的发展空间。事实上，一个从事企业管理类软 件的技术人员完全可以胜任一个企业的管理者，在这一领域技术人员的前景可以说是非常广阔的。\n\n　　我认识的一位朋友，本科读的是工业装备控制专业，毕业后一直从事ERP方面的应用推广和管理咨询，虽然他对纯粹的IT技术了解并不是特别深刻，但在 ERP系统在企业中的应用方面经验非常丰富，在别人眼中他更像是一名管理咨询师，五年下来已经是这一领域的专家级人物，在个人收入方面也非常可观。","slug":"career-development","published":1,"updated":"2019-03-18T07:45:36.653Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ck2vg6gy7003u4cob27zxwo6q","content":"<h1 id=\"技术类人员的职业发展方向\"><a href=\"#技术类人员的职业发展方向\" class=\"headerlink\" title=\"技术类人员的职业发展方向\"></a>技术类人员的职业发展方向</h1><p>几乎每 个企业都需要技术人员的支持，生产制造型企业需要现场生产控制和工艺流程方面的技术人才；IT等高科技行业需要大量软件研发和设备维护的硬件工程师；房地 产、建筑工程领域需要建筑设计师、土木工程师和施工技术人员。此外，不论是国企、民营企业还是外资公司，都需要大量的基础技术工人。甚至很多在豪华写字楼 office内工作的白领，从事的工作都是和技术相关的。</p>\n<p>　　不过，一个严峻的现实是，大量的技术类人员对自己的职业定位和职业生涯规划显得非常迷茫和困惑。中国有句古话：劳心者治人，劳力者治于人。与管理类岗 位相比，技术人员往往被人看低一等，他们虽然从事着非常重要、繁琐的技术性工作，但更多的是扮演着幕后英雄的角色。在社会地位、经济收入方面与分光无限的 各级管理层普遍存在差距，这一现实造就了技术人员的巨大心理落差。第二个造成职业规划困惑的原因是部分技术性工作的局限性。拿IT行业来说，由于技术和知 识更新的速度太快，软件开放人员普遍被认为是吃“青春饭”的职位，谁学习的更快、谁的精力更旺盛、谁更能熬夜，谁就更有竞争力，因为这时经验已经不再重 要。如果超过35岁还从事软件开发的话，将很难在本职岗位取得突破。</p>\n<p>　　那么，对于技术类人员来说，难道他们的职业发展前景真的如此黯淡？事实当然不会如此悲观，做技术工作同样有着非常广阔的空间，当然，关键一点你要令自己的视野更开阔些，从长远的角度来看待这个问题。根据我的经验，技术人员的职业方向可以有以下几个选择： </p>\n<p>　　方向一、成为项目经理</p>\n<p>　　对于很多从事技术方面工作的人员来说，发展成为项目经理是一个相当好的工作。项目管理工作既需要扎实的技术背景支持，又涉及多方面的管理工作，最适合 那些技术出身但又不甘于只做技术工作的人员。成为项目经理，一方面可以充分发挥技术人员的专业优势，同时又可在团队管理、协调各方资源、内外部沟通等工作 中体验和发挥作为管理者的角色和作用，从而让自身价值更为充分的实现和得到认可。优秀的项目管理人才，也是今后很长时期内的一个热门职业方向。</p>\n<p>　　方向二、成为行业资深专家</p>\n<p>　　如果的确非常喜爱技术工作，而不擅长和喜欢与人沟通，则可以完全专注于自身的领域，以发展成为行业资深专家为方向和目标，当然，这一发展过程可能会比 较漫长，任何一个领域的顶尖技术人才都需要长期的行业经验的累积和个人孜孜不倦的投入。不过这类人才的一个优势是越老越吃香，当别人随着年龄的逐步增长而 开始担心饭碗问题时，你则渐入佳境，开始进入职业发展的黄金时期。</p>\n<p>　　方向三、成为研发经理或技术总监</p>\n<p>　　事实上，在某些行业和企业，技术研发人员的地位是非常高的。譬如在微软、诺基亚、华为等IT产业，技术的支持和研发的速度，成为企业利润增长的最主要 来源，在这些行业，技术研发部门就是企业的主战场。在不少国企和政府部门，也非常重视科技和技术工作，例如，我所知道的广州市市政园林局，就设有总工程 师、副总工程师等技术职位，其中总工程师的职务级别相当于副局级，在这种氛围影响下，技术岗位人才和行政领导同样受人尊敬。所以，在一个尊重和重视技术工 作的行业和企业中，发展成为研发经理、技术总监或总工程师都是一个很好的选择。</p>\n<p>　　方向四、做技术型销售和服务</p>\n<p>　　技术工作的领域其实非常广泛，如果感觉纯技术工作发展潜力不大，可以考虑转向做销售或技术支持方面。华为、中兴等通信技术公司的销售人员，很少是不具 有专业技术背景的；甲骨文等软件巨头的市场推广，第一步常常是从销售工程师拜访客户开始的。这类高价值、高科技的产品销售推广，非常需要具有丰富技术经验 的销售人员。</p>\n<p>　　技术人员转向售后服务，也是非常有前途的。我认识的一个朋友，大学是施工机械专业，毕业后一直在市政工程行业做非开挖顶管施工，在几年的工作中积累了 丰富的地下顶进设备的应用和维修经验，一个合适的机会跳槽到著名的顶管设备生产商－德国海瑞克公司，成为其售后服务工程师，工作上得心应手，收入也有了数 倍的增长。 </p>\n<p>　　方向五、转向管理岗位</p>\n<p>　　总有一些人，虽然是理工科出身、从事着技术岗位工作，但他们似乎天生就是具有管理天赋的人。这些人会在工作中逐步展现出管理潜质和优秀的领导能力，他 们往往更喜欢跟人打交道，更喜欢与外界沟通。在这种条件下，以技术经验为基础和依托，适当补充学习些管理方面的知识，例如可以在职攻读MBA，假以时日， 完全可以成长为出色的职业经理人。</p>\n<p>　　方向六、高级技术操作人员</p>\n<p>　　刚才所谈的职业发展方向，适用群体多为高校理工专业出身的人士，但对于数量众多的中等专科学校、技校毕业的一线技术工人来说，成为行业技术专家或研发总监的机会显然非常微小。这一群体的职业人士，最佳的技术发展路线是立足本职岗位，成为高级操作型技术人员。</p>\n<p>　　广州市2006年出台的各类岗位工资指导价格中，高级技师就业的工资比博士还要高出500元。出现这一现象的原因很简单，从全国层面来说，产业工人数 量虽然巨大，但高级技工的比例却非常小，“高级技工”的缺乏已经成为制约许多企业发展的“瓶颈”。但随着政策环境、企业认识角度和培育机制方面的不断改 善，这一现象将逐步得到改变，所以成为中高级技师将是一个非常有前途的职业发展方向。</p>\n<p>　　最后，我再次拿IT行业为例来具体谈谈技术人员的职业轨迹。</p>\n<p>　　IT(Information Technology)行业的分类相当复杂，我这里仅仅分析最典型的三个部分:</p>\n<p>　　第一部分是软件开发，通俗来说就是编程。实际上我认为真正的软件开发人员和制鞋工厂中的工人处在一个地位，是企业产品的最终生产者(当然这里没有贬义)。 </p>\n<p>　　第二个部分是MIS: Management Information Service/System（管理信息系统），主要负责基础IT建设、网络、通讯、软硬件支持、简单开发等职能，为公司其他部门提供IT基础服务。</p>\n<p>　　第三部分是ERP: Enterprise Resource Planning（企业资源计划系统），主要涉及企业管理类软件实施、维护、管理。通过是引入信息化手段在企业现实的实现企业的资源管理，协调企业各方面 的生产运作，它对业务的规范和企业的管理机制有很大的依赖。</p>\n<p>　　让我们来分别看看这三部分人员的职业发展空间：</p>\n<p>　　1. 开发人员</p>\n<p>　　我的观点是，在中小企业做纯粹的软件开发很可能走上一条不归路，长期从事开发的人一般处世能力不足，升任管理人员的机会不大。而还有一个更重要的问题 是中国目前开发行业的环境很不好，正如我之前谈到的基本是在吃青春饭，30往后就很难做下去了。而在美国40岁的开发人员是正吃香的年龄。虽然可能业务越 来越精，但可能会离IT越来越远，向纯蓝领工人发展。</p>\n<p>　　如果真的要做开发，应该找一个更好的平台，最好是进入跨国企业或国内龙头企业。如果数据方面的技术很强，可以考虑转向互联网搜索方向；如果在电子和通信设备方面有优势，可以从简单的程序开发转向通信产品的开发。</p>\n<p>　　2. MIS人员</p>\n<p>　　MIS内容广泛，可从事的职业很多:网管、技术支持等，而且通过努力可以得到提升成为小小的主管(当然要有自身的素质)，进而成为MIS Manager，但做到MIS Manager基本也就到头了，不过倒是可以考虑转到不同的行业或企业做MIS。</p>\n<p>　　同样是做IT服务，在不同公司内IT部门的地位还是非常巨大的。就我所了解的，雅芳（中国）公司的IT部门就有100多人，在公司总部的各职能部门中 的地位相当高；而南方航空公司的IT部门竟然达到800多人，这个规模已经远远超过一般的IT公司，其IT部门的总裁也是公司决策层的重要成员。所以，在 这些公司内做IT技术支持工作，既避免了纯编程式的软件开发人员遇到的“人老珠黄”的被动局面，也不必担心IT产业泡沫破灭而产生的生存危机。</p>\n<p>　　3. ERP类人员</p>\n<p>　　从事企业管理类软件的人员一般起点比较高(公司的起点就比较高)，要求对财务、生产、销售等流程都有清楚地认识，从业人员不一定为IT出身，而有可能 是财务人员或理工科人员等转行而来。IT的迅速发展和企业经营领域的不断拓展，为ERP的推广和发展创造了良好的发展空间。事实上，一个从事企业管理类软 件的技术人员完全可以胜任一个企业的管理者，在这一领域技术人员的前景可以说是非常广阔的。</p>\n<p>　　我认识的一位朋友，本科读的是工业装备控制专业，毕业后一直从事ERP方面的应用推广和管理咨询，虽然他对纯粹的IT技术了解并不是特别深刻，但在 ERP系统在企业中的应用方面经验非常丰富，在别人眼中他更像是一名管理咨询师，五年下来已经是这一领域的专家级人物，在个人收入方面也非常可观。</p>\n","site":{"data":{"projects":[{"name":"AiTing","url":"https://github.com/renhongl/aiting","desc":"HTML5客户端音乐播放器"},{"name":"AiLiao","url":"https://github.com/renhongl/ailiao","desc":"网页聊天软件"},{"name":"Pomelo Editor","url":"https://renhongl.github.io/markdown-editor/","desc":"功能强大的在线Markdown编辑器"}]}},"excerpt":"","more":"<h1 id=\"技术类人员的职业发展方向\"><a href=\"#技术类人员的职业发展方向\" class=\"headerlink\" title=\"技术类人员的职业发展方向\"></a>技术类人员的职业发展方向</h1><p>几乎每 个企业都需要技术人员的支持，生产制造型企业需要现场生产控制和工艺流程方面的技术人才；IT等高科技行业需要大量软件研发和设备维护的硬件工程师；房地 产、建筑工程领域需要建筑设计师、土木工程师和施工技术人员。此外，不论是国企、民营企业还是外资公司，都需要大量的基础技术工人。甚至很多在豪华写字楼 office内工作的白领，从事的工作都是和技术相关的。</p>\n<p>　　不过，一个严峻的现实是，大量的技术类人员对自己的职业定位和职业生涯规划显得非常迷茫和困惑。中国有句古话：劳心者治人，劳力者治于人。与管理类岗 位相比，技术人员往往被人看低一等，他们虽然从事着非常重要、繁琐的技术性工作，但更多的是扮演着幕后英雄的角色。在社会地位、经济收入方面与分光无限的 各级管理层普遍存在差距，这一现实造就了技术人员的巨大心理落差。第二个造成职业规划困惑的原因是部分技术性工作的局限性。拿IT行业来说，由于技术和知 识更新的速度太快，软件开放人员普遍被认为是吃“青春饭”的职位，谁学习的更快、谁的精力更旺盛、谁更能熬夜，谁就更有竞争力，因为这时经验已经不再重 要。如果超过35岁还从事软件开发的话，将很难在本职岗位取得突破。</p>\n<p>　　那么，对于技术类人员来说，难道他们的职业发展前景真的如此黯淡？事实当然不会如此悲观，做技术工作同样有着非常广阔的空间，当然，关键一点你要令自己的视野更开阔些，从长远的角度来看待这个问题。根据我的经验，技术人员的职业方向可以有以下几个选择： </p>\n<p>　　方向一、成为项目经理</p>\n<p>　　对于很多从事技术方面工作的人员来说，发展成为项目经理是一个相当好的工作。项目管理工作既需要扎实的技术背景支持，又涉及多方面的管理工作，最适合 那些技术出身但又不甘于只做技术工作的人员。成为项目经理，一方面可以充分发挥技术人员的专业优势，同时又可在团队管理、协调各方资源、内外部沟通等工作 中体验和发挥作为管理者的角色和作用，从而让自身价值更为充分的实现和得到认可。优秀的项目管理人才，也是今后很长时期内的一个热门职业方向。</p>\n<p>　　方向二、成为行业资深专家</p>\n<p>　　如果的确非常喜爱技术工作，而不擅长和喜欢与人沟通，则可以完全专注于自身的领域，以发展成为行业资深专家为方向和目标，当然，这一发展过程可能会比 较漫长，任何一个领域的顶尖技术人才都需要长期的行业经验的累积和个人孜孜不倦的投入。不过这类人才的一个优势是越老越吃香，当别人随着年龄的逐步增长而 开始担心饭碗问题时，你则渐入佳境，开始进入职业发展的黄金时期。</p>\n<p>　　方向三、成为研发经理或技术总监</p>\n<p>　　事实上，在某些行业和企业，技术研发人员的地位是非常高的。譬如在微软、诺基亚、华为等IT产业，技术的支持和研发的速度，成为企业利润增长的最主要 来源，在这些行业，技术研发部门就是企业的主战场。在不少国企和政府部门，也非常重视科技和技术工作，例如，我所知道的广州市市政园林局，就设有总工程 师、副总工程师等技术职位，其中总工程师的职务级别相当于副局级，在这种氛围影响下，技术岗位人才和行政领导同样受人尊敬。所以，在一个尊重和重视技术工 作的行业和企业中，发展成为研发经理、技术总监或总工程师都是一个很好的选择。</p>\n<p>　　方向四、做技术型销售和服务</p>\n<p>　　技术工作的领域其实非常广泛，如果感觉纯技术工作发展潜力不大，可以考虑转向做销售或技术支持方面。华为、中兴等通信技术公司的销售人员，很少是不具 有专业技术背景的；甲骨文等软件巨头的市场推广，第一步常常是从销售工程师拜访客户开始的。这类高价值、高科技的产品销售推广，非常需要具有丰富技术经验 的销售人员。</p>\n<p>　　技术人员转向售后服务，也是非常有前途的。我认识的一个朋友，大学是施工机械专业，毕业后一直在市政工程行业做非开挖顶管施工，在几年的工作中积累了 丰富的地下顶进设备的应用和维修经验，一个合适的机会跳槽到著名的顶管设备生产商－德国海瑞克公司，成为其售后服务工程师，工作上得心应手，收入也有了数 倍的增长。 </p>\n<p>　　方向五、转向管理岗位</p>\n<p>　　总有一些人，虽然是理工科出身、从事着技术岗位工作，但他们似乎天生就是具有管理天赋的人。这些人会在工作中逐步展现出管理潜质和优秀的领导能力，他 们往往更喜欢跟人打交道，更喜欢与外界沟通。在这种条件下，以技术经验为基础和依托，适当补充学习些管理方面的知识，例如可以在职攻读MBA，假以时日， 完全可以成长为出色的职业经理人。</p>\n<p>　　方向六、高级技术操作人员</p>\n<p>　　刚才所谈的职业发展方向，适用群体多为高校理工专业出身的人士，但对于数量众多的中等专科学校、技校毕业的一线技术工人来说，成为行业技术专家或研发总监的机会显然非常微小。这一群体的职业人士，最佳的技术发展路线是立足本职岗位，成为高级操作型技术人员。</p>\n<p>　　广州市2006年出台的各类岗位工资指导价格中，高级技师就业的工资比博士还要高出500元。出现这一现象的原因很简单，从全国层面来说，产业工人数 量虽然巨大，但高级技工的比例却非常小，“高级技工”的缺乏已经成为制约许多企业发展的“瓶颈”。但随着政策环境、企业认识角度和培育机制方面的不断改 善，这一现象将逐步得到改变，所以成为中高级技师将是一个非常有前途的职业发展方向。</p>\n<p>　　最后，我再次拿IT行业为例来具体谈谈技术人员的职业轨迹。</p>\n<p>　　IT(Information Technology)行业的分类相当复杂，我这里仅仅分析最典型的三个部分:</p>\n<p>　　第一部分是软件开发，通俗来说就是编程。实际上我认为真正的软件开发人员和制鞋工厂中的工人处在一个地位，是企业产品的最终生产者(当然这里没有贬义)。 </p>\n<p>　　第二个部分是MIS: Management Information Service/System（管理信息系统），主要负责基础IT建设、网络、通讯、软硬件支持、简单开发等职能，为公司其他部门提供IT基础服务。</p>\n<p>　　第三部分是ERP: Enterprise Resource Planning（企业资源计划系统），主要涉及企业管理类软件实施、维护、管理。通过是引入信息化手段在企业现实的实现企业的资源管理，协调企业各方面 的生产运作，它对业务的规范和企业的管理机制有很大的依赖。</p>\n<p>　　让我们来分别看看这三部分人员的职业发展空间：</p>\n<p>　　1. 开发人员</p>\n<p>　　我的观点是，在中小企业做纯粹的软件开发很可能走上一条不归路，长期从事开发的人一般处世能力不足，升任管理人员的机会不大。而还有一个更重要的问题 是中国目前开发行业的环境很不好，正如我之前谈到的基本是在吃青春饭，30往后就很难做下去了。而在美国40岁的开发人员是正吃香的年龄。虽然可能业务越 来越精，但可能会离IT越来越远，向纯蓝领工人发展。</p>\n<p>　　如果真的要做开发，应该找一个更好的平台，最好是进入跨国企业或国内龙头企业。如果数据方面的技术很强，可以考虑转向互联网搜索方向；如果在电子和通信设备方面有优势，可以从简单的程序开发转向通信产品的开发。</p>\n<p>　　2. MIS人员</p>\n<p>　　MIS内容广泛，可从事的职业很多:网管、技术支持等，而且通过努力可以得到提升成为小小的主管(当然要有自身的素质)，进而成为MIS Manager，但做到MIS Manager基本也就到头了，不过倒是可以考虑转到不同的行业或企业做MIS。</p>\n<p>　　同样是做IT服务，在不同公司内IT部门的地位还是非常巨大的。就我所了解的，雅芳（中国）公司的IT部门就有100多人，在公司总部的各职能部门中 的地位相当高；而南方航空公司的IT部门竟然达到800多人，这个规模已经远远超过一般的IT公司，其IT部门的总裁也是公司决策层的重要成员。所以，在 这些公司内做IT技术支持工作，既避免了纯编程式的软件开发人员遇到的“人老珠黄”的被动局面，也不必担心IT产业泡沫破灭而产生的生存危机。</p>\n<p>　　3. ERP类人员</p>\n<p>　　从事企业管理类软件的人员一般起点比较高(公司的起点就比较高)，要求对财务、生产、销售等流程都有清楚地认识，从业人员不一定为IT出身，而有可能 是财务人员或理工科人员等转行而来。IT的迅速发展和企业经营领域的不断拓展，为ERP的推广和发展创造了良好的发展空间。事实上，一个从事企业管理类软 件的技术人员完全可以胜任一个企业的管理者，在这一领域技术人员的前景可以说是非常广阔的。</p>\n<p>　　我认识的一位朋友，本科读的是工业装备控制专业，毕业后一直从事ERP方面的应用推广和管理咨询，虽然他对纯粹的IT技术了解并不是特别深刻，但在 ERP系统在企业中的应用方面经验非常丰富，在别人眼中他更像是一名管理咨询师，五年下来已经是这一领域的专家级人物，在个人收入方面也非常可观。</p>\n"},{"title":"计算机算法之---排序","date":"2019-04-14T13:16:52.000Z","_content":"\n\n\n## 快速排序\n\n* 快速排序（英语：Quicksort），又称划分交换排序（partition-exchange sort），简称快排，一种排序算法，最早由东尼·霍尔提出。\n\n* 快速排序使用**分治法**（Divide and conquer）策略来把一个序列（list）分为两个子序列（sub-lists）。\n\n* 步骤为：\n\t1. 从数列中挑出一个元素，称为“基准”（pivot），\n\n\t2. 重新排序数列，所有比基准值小的元素摆放在基准前面，所有比基准值大的元素摆在基准后面（相同的数可以到任何一边）。在这个分区结束之后，该基准就处于数列的中间位置。这个称为分区（partition）操作。\n\n\t3. 递归地（recursively）把小于基准值元素的子数列和大于基准值元素的子数列排序。\n\n\t4. 递归到最底部时，数列的大小是零或一，也就是已经排序好了。这个算法一定会结束，因为在每次的迭代（iteration）中，它至少会把一个元素摆到它最后的位置去。\n\n\t```js\n    /**\n    * 快速排序\n    * 取第一个值，作为中间值，与余下的一次比较\n    * 比中间值小的，放左边数组\n    * 比中间值大的，放右边数组\n    * 递归调用，直到每个数组只剩一个元素，返回该数组\n    */\n    \n    export  const quickSort = (arr) => {\n        if(arr.length <=1){\n            return arr\n        }\n        let mid = arr[0];\n        let left =[];\n        let right =[];\n        for (let i =1; i<arr.length; i++){\n            if(arr[i]<mid){\n                left.push(arr[i]);\n            }else{\n                right.push(arr[i]);\n            }\n        }\n        return quickSort(left).concat([mid],quickSort(right));\n    }\n    ```\n## 冒泡排序\n* 冒泡排序（Bubble Sort），是一种计算机科学领域的较简单的排序算法。\n\n* 它重复地走访过要排序的元素列，依次比较两个相邻的元素，如果他们的顺序（如从大到小、首字母从A到Z）错误就把他们交换过来。走访元素的工作是重复地进行直到没有相邻元素需要交换，也就是说该元素已经排序完成。\n\n* 这个算法的名字由来是因为越大的元素会经由交换慢慢“浮”到数列的顶端（升序或降序排列），就如同碳酸饮料中二氧化碳的气泡最终会上浮到顶端一样，故名“冒泡排序”。\n\n    ```js\n    /**\n    * 冒泡排序\n    * 取前一个和后一个值比较，前者大则交换\n    * 第一次循环结束，最后一个值为最大\n    * 数组有多长，外层循环多少次\n    */\n\n    const bubbleSort = (arr) => {\n      for (let i = 0; i < arr.length; i++) {//控制循环次数\n        for (let j = 0; j < arr.length - i; j++) {//循环一次，最后一位最大，下次不用再循环\n          if (arr[j] > arr[j + 1]) {\n            let temp = arr[j];\n            arr[j] = arr[j+1];\n            arr[j+1] = temp;\n          }\n        }\n      }\n      return arr;\n    }\n    ```\n## 选择排序\n* 选择排序（Selection sort）是一种简单直观的排序算法。它的工作原理是每一次从待排序的数据元素中选出最小（或最大）的一个元素，存放在序列的起始位置，直到全部待排序的数据元素排完。 选择排序是不稳定的排序方法。\n    ```js\n    /**\n    * 选择排序\n    * 首先将最小下标设为第一个值得下标\n    * 依次取后面的值与之相比比，如果更小，将最小下标设为该值的下标\n    * 第一次循环结束，将数组第一位值与最小下标对应的值交换\n    * 第一次循环结束，第一个值为最小值\n    */\n    const selectSort = (arr) => {\n      for (let i = 0; i < arr.length - 1; i++) {\n        let minIndex = i;\n        for (let j = i + 1; j < arr.length; j++) {\n          if (arr[j] < arr[minIndex]) {\n            minIndex = j;\n          }\n        }\n        let temp = arr[i];\n        arr[i] = arr[minIndex];\n        arr[minIndex] = temp;\n      }\n      return arr;\n    }\n    ```\n    \n## 归并排序\n* 归并排序（MERGE-SORT）是建立在归并操作上的一种有效的排序算法,该算法是采用分治法（Divide and Conquer）的一个非常典型的应用。将已有序的子序列合并，得到完全有序的序列；即先使每个子序列有序，再使子序列段间有序。若将两个有序表合并成一个有序表，称为二路归并。\n    ```js\n    //将数组分治， 将分治的数组排序，将有序的数组合并\n    const merge = (left, right) => {\n    \tlet result = [];\n        while(left.length > 0 && right.length > 0) {\n        \tif (left[0] < right[0]) {\n            \tresult.push(left.shift());\n            } else {\n            \tresult.push(right.shift());\n            }\n        }\n        return result.concat(left, right);\n    }\n    \n    const mergeSort = (arr) => {\n    \tif (arr.length <=1) {\n        \treturn arr;\n        }\n        let midIndex = Math.floor(arr.length / 2);\n        let left = arr.slice(0, midIndex);\n        let right = arr.slice(midIndex);\n        return merge(mergeSort(left), mergeSort(right));\n    }\n    ```\n\n## 直接插入排序\n* 直接插入排序，指每次从无序表中取出第一个元素，把它插入到有序表的合适位置，使有序表仍然有序。具体方法是第一趟比较前两个数，然后把第二个数按大小插入到有序表中； 第二趟把第三个数据与前两个数从前向后扫描，把第三个数按大小插入到有序表中；依次进行下去，进行了(n-1)趟扫描以后就完成了整个排序过程。它是由两层嵌套循环组成的，外层循环标识并决定待比较的数值，内层循环为待比较数值确定其最终位置。直接插入排序是将待比较的数值与它的前一个数值进行比较，所以外层循环是从第二个数值开始的。当前一数值比待比较数值大的情况下继续循环比较，直到找到比待比较数值小的并将待比较数值置入其后一位置，结束该次循环。\n    ```js\n    //把将要排序的那个依次与前面排好的比较，倒序比较，比前面的小，就往前换\n    //循环，知道换到前面比它小\n\tconst insertSort = (arr) => {\n      for (let i = 1; i < arr.length; i++) {\n        let j = i;\n        while(j > 0 && arr[j] < arr[j - 1]) {\n          let temp = arr[j];\n          arr[j] = arr[j - 1];\n          arr[j - 1] = temp;\n          j--;\n        }\n      }\n      return arr;\n    }\n    ```\n    \n## 堆排序\n* 堆排序是利用堆这种数据结构而设计的一种排序算法，堆排序是一种选择排序，它的最坏，最好，平均时间复杂度均为O(nlogn)，它也是不稳定排序。首先简单了解下堆结构。\n* 堆排序的基本思想是：将待排序序列构造成一个大顶堆，此时，整个序列的最大值就是堆顶的根节点。将其与末尾元素进行交换，此时末尾就为最大值。然后将剩余n-1个元素重新构造成一个堆，这样会得到n个元素的次小值。如此反复执行，便能得到一个有序序列了。\n* 步骤为：\n\t1. 构造初始堆。将给定无序序列构造成一个大顶堆（一般升序采用大顶堆，降序采用小顶堆)。\n    2. 将堆顶元素与末尾元素进行交换，使末尾元素最大。然后继续调整堆，再将堆顶元素与末尾元素交换，得到第二大元素。如此反复进行交换、重建、交换。\n    3. 反复执行调整+交换步骤，直到整个序列有序。\n    ```js\n\t//堆排序使用的创建顶堆\n    const createMaxHeap = (arr, len) => {\n      const create = (arr, i, len) => {\n        let maxIndex = i;\n        let left = 2 * i;\n        let right = 2 * i + 1;\n        if (left < len && arr[maxIndex] < arr[left]) {\n          maxIndex = left;\n        }\n        if (right < len && arr[maxIndex] < arr[right]) {\n          maxIndex = right;\n        }\n        let temp = arr[maxIndex];\n        arr[maxIndex] = arr[i];\n        arr[i] = temp;\n      }\n      for (let i = Math.floor(len/2); i >= 0; i--) {\n        create(arr, i, len);\n      }\n    }\n\n    //堆排序\n    const heapSort = (arr) => {\n      for (let i = arr.length - 1; i >= 0; i--) {\n        createMaxHeap(arr, i + 1);\n        let max = arr[0];\n        arr[0] = arr[i];\n        arr[i] = max;\n      }\n      return arr;\n    }\n    ```\n\n## 基数排序\n* 基数排序（radix sort）属于“分配式排序”（distribution sort），又称“桶子法”（bucket sort）或bin sort，顾名思义，它是透过键值的部份资讯，将要排序的元素分配至某些“桶”中，藉以达到排序的作用，基数排序法是属于稳定性的排序，其时间复杂度为O (nlog(r)m)，其中r为所采取的基数，而m为堆数，在某些时候，基数排序法的效率高于其它的稳定性排序法。\n\n## 希尔排序\n* 希尔排序(Shell's Sort)是插入排序的一种又称“缩小增量排序”（Diminishing Increment Sort），是直接插入排序算法的一种更高效的改进版本。希尔排序是非稳定排序算法。该方法因D.L.Shell于1959年提出而得名。\n* 希尔排序是把记录按下标的一定增量分组，对每组使用直接插入排序算法排序；随着增量逐渐减少，每组包含的关键词越来越多，当增量减至1时，整个文件恰被分成一组，算法便终止。\n","source":"_posts/sort.md","raw":"---\ntitle: 计算机算法之---排序\ndate: 2019-04-14 21:16:52\ntags: 计算机算法\n\n---\n\n\n\n## 快速排序\n\n* 快速排序（英语：Quicksort），又称划分交换排序（partition-exchange sort），简称快排，一种排序算法，最早由东尼·霍尔提出。\n\n* 快速排序使用**分治法**（Divide and conquer）策略来把一个序列（list）分为两个子序列（sub-lists）。\n\n* 步骤为：\n\t1. 从数列中挑出一个元素，称为“基准”（pivot），\n\n\t2. 重新排序数列，所有比基准值小的元素摆放在基准前面，所有比基准值大的元素摆在基准后面（相同的数可以到任何一边）。在这个分区结束之后，该基准就处于数列的中间位置。这个称为分区（partition）操作。\n\n\t3. 递归地（recursively）把小于基准值元素的子数列和大于基准值元素的子数列排序。\n\n\t4. 递归到最底部时，数列的大小是零或一，也就是已经排序好了。这个算法一定会结束，因为在每次的迭代（iteration）中，它至少会把一个元素摆到它最后的位置去。\n\n\t```js\n    /**\n    * 快速排序\n    * 取第一个值，作为中间值，与余下的一次比较\n    * 比中间值小的，放左边数组\n    * 比中间值大的，放右边数组\n    * 递归调用，直到每个数组只剩一个元素，返回该数组\n    */\n    \n    export  const quickSort = (arr) => {\n        if(arr.length <=1){\n            return arr\n        }\n        let mid = arr[0];\n        let left =[];\n        let right =[];\n        for (let i =1; i<arr.length; i++){\n            if(arr[i]<mid){\n                left.push(arr[i]);\n            }else{\n                right.push(arr[i]);\n            }\n        }\n        return quickSort(left).concat([mid],quickSort(right));\n    }\n    ```\n## 冒泡排序\n* 冒泡排序（Bubble Sort），是一种计算机科学领域的较简单的排序算法。\n\n* 它重复地走访过要排序的元素列，依次比较两个相邻的元素，如果他们的顺序（如从大到小、首字母从A到Z）错误就把他们交换过来。走访元素的工作是重复地进行直到没有相邻元素需要交换，也就是说该元素已经排序完成。\n\n* 这个算法的名字由来是因为越大的元素会经由交换慢慢“浮”到数列的顶端（升序或降序排列），就如同碳酸饮料中二氧化碳的气泡最终会上浮到顶端一样，故名“冒泡排序”。\n\n    ```js\n    /**\n    * 冒泡排序\n    * 取前一个和后一个值比较，前者大则交换\n    * 第一次循环结束，最后一个值为最大\n    * 数组有多长，外层循环多少次\n    */\n\n    const bubbleSort = (arr) => {\n      for (let i = 0; i < arr.length; i++) {//控制循环次数\n        for (let j = 0; j < arr.length - i; j++) {//循环一次，最后一位最大，下次不用再循环\n          if (arr[j] > arr[j + 1]) {\n            let temp = arr[j];\n            arr[j] = arr[j+1];\n            arr[j+1] = temp;\n          }\n        }\n      }\n      return arr;\n    }\n    ```\n## 选择排序\n* 选择排序（Selection sort）是一种简单直观的排序算法。它的工作原理是每一次从待排序的数据元素中选出最小（或最大）的一个元素，存放在序列的起始位置，直到全部待排序的数据元素排完。 选择排序是不稳定的排序方法。\n    ```js\n    /**\n    * 选择排序\n    * 首先将最小下标设为第一个值得下标\n    * 依次取后面的值与之相比比，如果更小，将最小下标设为该值的下标\n    * 第一次循环结束，将数组第一位值与最小下标对应的值交换\n    * 第一次循环结束，第一个值为最小值\n    */\n    const selectSort = (arr) => {\n      for (let i = 0; i < arr.length - 1; i++) {\n        let minIndex = i;\n        for (let j = i + 1; j < arr.length; j++) {\n          if (arr[j] < arr[minIndex]) {\n            minIndex = j;\n          }\n        }\n        let temp = arr[i];\n        arr[i] = arr[minIndex];\n        arr[minIndex] = temp;\n      }\n      return arr;\n    }\n    ```\n    \n## 归并排序\n* 归并排序（MERGE-SORT）是建立在归并操作上的一种有效的排序算法,该算法是采用分治法（Divide and Conquer）的一个非常典型的应用。将已有序的子序列合并，得到完全有序的序列；即先使每个子序列有序，再使子序列段间有序。若将两个有序表合并成一个有序表，称为二路归并。\n    ```js\n    //将数组分治， 将分治的数组排序，将有序的数组合并\n    const merge = (left, right) => {\n    \tlet result = [];\n        while(left.length > 0 && right.length > 0) {\n        \tif (left[0] < right[0]) {\n            \tresult.push(left.shift());\n            } else {\n            \tresult.push(right.shift());\n            }\n        }\n        return result.concat(left, right);\n    }\n    \n    const mergeSort = (arr) => {\n    \tif (arr.length <=1) {\n        \treturn arr;\n        }\n        let midIndex = Math.floor(arr.length / 2);\n        let left = arr.slice(0, midIndex);\n        let right = arr.slice(midIndex);\n        return merge(mergeSort(left), mergeSort(right));\n    }\n    ```\n\n## 直接插入排序\n* 直接插入排序，指每次从无序表中取出第一个元素，把它插入到有序表的合适位置，使有序表仍然有序。具体方法是第一趟比较前两个数，然后把第二个数按大小插入到有序表中； 第二趟把第三个数据与前两个数从前向后扫描，把第三个数按大小插入到有序表中；依次进行下去，进行了(n-1)趟扫描以后就完成了整个排序过程。它是由两层嵌套循环组成的，外层循环标识并决定待比较的数值，内层循环为待比较数值确定其最终位置。直接插入排序是将待比较的数值与它的前一个数值进行比较，所以外层循环是从第二个数值开始的。当前一数值比待比较数值大的情况下继续循环比较，直到找到比待比较数值小的并将待比较数值置入其后一位置，结束该次循环。\n    ```js\n    //把将要排序的那个依次与前面排好的比较，倒序比较，比前面的小，就往前换\n    //循环，知道换到前面比它小\n\tconst insertSort = (arr) => {\n      for (let i = 1; i < arr.length; i++) {\n        let j = i;\n        while(j > 0 && arr[j] < arr[j - 1]) {\n          let temp = arr[j];\n          arr[j] = arr[j - 1];\n          arr[j - 1] = temp;\n          j--;\n        }\n      }\n      return arr;\n    }\n    ```\n    \n## 堆排序\n* 堆排序是利用堆这种数据结构而设计的一种排序算法，堆排序是一种选择排序，它的最坏，最好，平均时间复杂度均为O(nlogn)，它也是不稳定排序。首先简单了解下堆结构。\n* 堆排序的基本思想是：将待排序序列构造成一个大顶堆，此时，整个序列的最大值就是堆顶的根节点。将其与末尾元素进行交换，此时末尾就为最大值。然后将剩余n-1个元素重新构造成一个堆，这样会得到n个元素的次小值。如此反复执行，便能得到一个有序序列了。\n* 步骤为：\n\t1. 构造初始堆。将给定无序序列构造成一个大顶堆（一般升序采用大顶堆，降序采用小顶堆)。\n    2. 将堆顶元素与末尾元素进行交换，使末尾元素最大。然后继续调整堆，再将堆顶元素与末尾元素交换，得到第二大元素。如此反复进行交换、重建、交换。\n    3. 反复执行调整+交换步骤，直到整个序列有序。\n    ```js\n\t//堆排序使用的创建顶堆\n    const createMaxHeap = (arr, len) => {\n      const create = (arr, i, len) => {\n        let maxIndex = i;\n        let left = 2 * i;\n        let right = 2 * i + 1;\n        if (left < len && arr[maxIndex] < arr[left]) {\n          maxIndex = left;\n        }\n        if (right < len && arr[maxIndex] < arr[right]) {\n          maxIndex = right;\n        }\n        let temp = arr[maxIndex];\n        arr[maxIndex] = arr[i];\n        arr[i] = temp;\n      }\n      for (let i = Math.floor(len/2); i >= 0; i--) {\n        create(arr, i, len);\n      }\n    }\n\n    //堆排序\n    const heapSort = (arr) => {\n      for (let i = arr.length - 1; i >= 0; i--) {\n        createMaxHeap(arr, i + 1);\n        let max = arr[0];\n        arr[0] = arr[i];\n        arr[i] = max;\n      }\n      return arr;\n    }\n    ```\n\n## 基数排序\n* 基数排序（radix sort）属于“分配式排序”（distribution sort），又称“桶子法”（bucket sort）或bin sort，顾名思义，它是透过键值的部份资讯，将要排序的元素分配至某些“桶”中，藉以达到排序的作用，基数排序法是属于稳定性的排序，其时间复杂度为O (nlog(r)m)，其中r为所采取的基数，而m为堆数，在某些时候，基数排序法的效率高于其它的稳定性排序法。\n\n## 希尔排序\n* 希尔排序(Shell's Sort)是插入排序的一种又称“缩小增量排序”（Diminishing Increment Sort），是直接插入排序算法的一种更高效的改进版本。希尔排序是非稳定排序算法。该方法因D.L.Shell于1959年提出而得名。\n* 希尔排序是把记录按下标的一定增量分组，对每组使用直接插入排序算法排序；随着增量逐渐减少，每组包含的关键词越来越多，当增量减至1时，整个文件恰被分成一组，算法便终止。\n","slug":"sort","published":1,"updated":"2019-06-20T09:05:46.951Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ck2vg6gy9003x4cobwpoygmks","content":"<h2 id=\"快速排序\"><a href=\"#快速排序\" class=\"headerlink\" title=\"快速排序\"></a>快速排序</h2><ul>\n<li><p>快速排序（英语：Quicksort），又称划分交换排序（partition-exchange sort），简称快排，一种排序算法，最早由东尼·霍尔提出。</p>\n</li>\n<li><p>快速排序使用<strong>分治法</strong>（Divide and conquer）策略来把一个序列（list）分为两个子序列（sub-lists）。</p>\n</li>\n<li><p>步骤为：</p>\n<ol>\n<li><p>从数列中挑出一个元素，称为“基准”（pivot），</p>\n</li>\n<li><p>重新排序数列，所有比基准值小的元素摆放在基准前面，所有比基准值大的元素摆在基准后面（相同的数可以到任何一边）。在这个分区结束之后，该基准就处于数列的中间位置。这个称为分区（partition）操作。</p>\n</li>\n<li><p>递归地（recursively）把小于基准值元素的子数列和大于基准值元素的子数列排序。</p>\n</li>\n<li><p>递归到最底部时，数列的大小是零或一，也就是已经排序好了。这个算法一定会结束，因为在每次的迭代（iteration）中，它至少会把一个元素摆到它最后的位置去。</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">* 快速排序</span></span><br><span class=\"line\"><span class=\"comment\">* 取第一个值，作为中间值，与余下的一次比较</span></span><br><span class=\"line\"><span class=\"comment\">* 比中间值小的，放左边数组</span></span><br><span class=\"line\"><span class=\"comment\">* 比中间值大的，放右边数组</span></span><br><span class=\"line\"><span class=\"comment\">* 递归调用，直到每个数组只剩一个元素，返回该数组</span></span><br><span class=\"line\"><span class=\"comment\">*/</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">export</span>  <span class=\"keyword\">const</span> quickSort = <span class=\"function\">(<span class=\"params\">arr</span>) =&gt;</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(arr.length &lt;=<span class=\"number\">1</span>)&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> arr</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">let</span> mid = arr[<span class=\"number\">0</span>];</span><br><span class=\"line\">    <span class=\"keyword\">let</span> left =[];</span><br><span class=\"line\">    <span class=\"keyword\">let</span> right =[];</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">let</span> i =<span class=\"number\">1</span>; i&lt;arr.length; i++)&#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(arr[i]&lt;mid)&#123;</span><br><span class=\"line\">            left.push(arr[i]);</span><br><span class=\"line\">        &#125;<span class=\"keyword\">else</span>&#123;</span><br><span class=\"line\">            right.push(arr[i]);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> quickSort(left).concat([mid],quickSort(right));</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n</li>\n</ol>\n</li>\n</ul>\n<h2 id=\"冒泡排序\"><a href=\"#冒泡排序\" class=\"headerlink\" title=\"冒泡排序\"></a>冒泡排序</h2><ul>\n<li><p>冒泡排序（Bubble Sort），是一种计算机科学领域的较简单的排序算法。</p>\n</li>\n<li><p>它重复地走访过要排序的元素列，依次比较两个相邻的元素，如果他们的顺序（如从大到小、首字母从A到Z）错误就把他们交换过来。走访元素的工作是重复地进行直到没有相邻元素需要交换，也就是说该元素已经排序完成。</p>\n</li>\n<li><p>这个算法的名字由来是因为越大的元素会经由交换慢慢“浮”到数列的顶端（升序或降序排列），就如同碳酸饮料中二氧化碳的气泡最终会上浮到顶端一样，故名“冒泡排序”。</p>\n  <figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">* 冒泡排序</span></span><br><span class=\"line\"><span class=\"comment\">* 取前一个和后一个值比较，前者大则交换</span></span><br><span class=\"line\"><span class=\"comment\">* 第一次循环结束，最后一个值为最大</span></span><br><span class=\"line\"><span class=\"comment\">* 数组有多长，外层循环多少次</span></span><br><span class=\"line\"><span class=\"comment\">*/</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> bubbleSort = <span class=\"function\">(<span class=\"params\">arr</span>) =&gt;</span> &#123;</span><br><span class=\"line\">  <span class=\"keyword\">for</span> (<span class=\"keyword\">let</span> i = <span class=\"number\">0</span>; i &lt; arr.length; i++) &#123;<span class=\"comment\">//控制循环次数</span></span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">let</span> j = <span class=\"number\">0</span>; j &lt; arr.length - i; j++) &#123;<span class=\"comment\">//循环一次，最后一位最大，下次不用再循环</span></span><br><span class=\"line\">      <span class=\"keyword\">if</span> (arr[j] &gt; arr[j + <span class=\"number\">1</span>]) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">let</span> temp = arr[j];</span><br><span class=\"line\">        arr[j] = arr[j+<span class=\"number\">1</span>];</span><br><span class=\"line\">        arr[j+<span class=\"number\">1</span>] = temp;</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> arr;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n<h2 id=\"选择排序\"><a href=\"#选择排序\" class=\"headerlink\" title=\"选择排序\"></a>选择排序</h2><ul>\n<li>选择排序（Selection sort）是一种简单直观的排序算法。它的工作原理是每一次从待排序的数据元素中选出最小（或最大）的一个元素，存放在序列的起始位置，直到全部待排序的数据元素排完。 选择排序是不稳定的排序方法。  <figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">* 选择排序</span></span><br><span class=\"line\"><span class=\"comment\">* 首先将最小下标设为第一个值得下标</span></span><br><span class=\"line\"><span class=\"comment\">* 依次取后面的值与之相比比，如果更小，将最小下标设为该值的下标</span></span><br><span class=\"line\"><span class=\"comment\">* 第一次循环结束，将数组第一位值与最小下标对应的值交换</span></span><br><span class=\"line\"><span class=\"comment\">* 第一次循环结束，第一个值为最小值</span></span><br><span class=\"line\"><span class=\"comment\">*/</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> selectSort = <span class=\"function\">(<span class=\"params\">arr</span>) =&gt;</span> &#123;</span><br><span class=\"line\">  <span class=\"keyword\">for</span> (<span class=\"keyword\">let</span> i = <span class=\"number\">0</span>; i &lt; arr.length - <span class=\"number\">1</span>; i++) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">let</span> minIndex = i;</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">let</span> j = i + <span class=\"number\">1</span>; j &lt; arr.length; j++) &#123;</span><br><span class=\"line\">      <span class=\"keyword\">if</span> (arr[j] &lt; arr[minIndex]) &#123;</span><br><span class=\"line\">        minIndex = j;</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">let</span> temp = arr[i];</span><br><span class=\"line\">    arr[i] = arr[minIndex];</span><br><span class=\"line\">    arr[minIndex] = temp;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> arr;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n<h2 id=\"归并排序\"><a href=\"#归并排序\" class=\"headerlink\" title=\"归并排序\"></a>归并排序</h2><ul>\n<li>归并排序（MERGE-SORT）是建立在归并操作上的一种有效的排序算法,该算法是采用分治法（Divide and Conquer）的一个非常典型的应用。将已有序的子序列合并，得到完全有序的序列；即先使每个子序列有序，再使子序列段间有序。若将两个有序表合并成一个有序表，称为二路归并。  <figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//将数组分治， 将分治的数组排序，将有序的数组合并</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> merge = <span class=\"function\">(<span class=\"params\">left, right</span>) =&gt;</span> &#123;</span><br><span class=\"line\">\t<span class=\"keyword\">let</span> result = [];</span><br><span class=\"line\">    <span class=\"keyword\">while</span>(left.length &gt; <span class=\"number\">0</span> &amp;&amp; right.length &gt; <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">    \t<span class=\"keyword\">if</span> (left[<span class=\"number\">0</span>] &lt; right[<span class=\"number\">0</span>]) &#123;</span><br><span class=\"line\">        \tresult.push(left.shift());</span><br><span class=\"line\">        &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">        \tresult.push(right.shift());</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> result.concat(left, right);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> mergeSort = <span class=\"function\">(<span class=\"params\">arr</span>) =&gt;</span> &#123;</span><br><span class=\"line\">\t<span class=\"keyword\">if</span> (arr.length &lt;=<span class=\"number\">1</span>) &#123;</span><br><span class=\"line\">    \t<span class=\"keyword\">return</span> arr;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">let</span> midIndex = <span class=\"built_in\">Math</span>.floor(arr.length / <span class=\"number\">2</span>);</span><br><span class=\"line\">    <span class=\"keyword\">let</span> left = arr.slice(<span class=\"number\">0</span>, midIndex);</span><br><span class=\"line\">    <span class=\"keyword\">let</span> right = arr.slice(midIndex);</span><br><span class=\"line\">    <span class=\"keyword\">return</span> merge(mergeSort(left), mergeSort(right));</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n<h2 id=\"直接插入排序\"><a href=\"#直接插入排序\" class=\"headerlink\" title=\"直接插入排序\"></a>直接插入排序</h2><ul>\n<li>直接插入排序，指每次从无序表中取出第一个元素，把它插入到有序表的合适位置，使有序表仍然有序。具体方法是第一趟比较前两个数，然后把第二个数按大小插入到有序表中； 第二趟把第三个数据与前两个数从前向后扫描，把第三个数按大小插入到有序表中；依次进行下去，进行了(n-1)趟扫描以后就完成了整个排序过程。它是由两层嵌套循环组成的，外层循环标识并决定待比较的数值，内层循环为待比较数值确定其最终位置。直接插入排序是将待比较的数值与它的前一个数值进行比较，所以外层循环是从第二个数值开始的。当前一数值比待比较数值大的情况下继续循环比较，直到找到比待比较数值小的并将待比较数值置入其后一位置，结束该次循环。  <figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">   <span class=\"comment\">//把将要排序的那个依次与前面排好的比较，倒序比较，比前面的小，就往前换</span></span><br><span class=\"line\">   <span class=\"comment\">//循环，知道换到前面比它小</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> insertSort = <span class=\"function\">(<span class=\"params\">arr</span>) =&gt;</span> &#123;</span><br><span class=\"line\">     <span class=\"keyword\">for</span> (<span class=\"keyword\">let</span> i = <span class=\"number\">1</span>; i &lt; arr.length; i++) &#123;</span><br><span class=\"line\">       <span class=\"keyword\">let</span> j = i;</span><br><span class=\"line\">       <span class=\"keyword\">while</span>(j &gt; <span class=\"number\">0</span> &amp;&amp; arr[j] &lt; arr[j - <span class=\"number\">1</span>]) &#123;</span><br><span class=\"line\">         <span class=\"keyword\">let</span> temp = arr[j];</span><br><span class=\"line\">         arr[j] = arr[j - <span class=\"number\">1</span>];</span><br><span class=\"line\">         arr[j - <span class=\"number\">1</span>] = temp;</span><br><span class=\"line\">         j--;</span><br><span class=\"line\">       &#125;</span><br><span class=\"line\">     &#125;</span><br><span class=\"line\">     <span class=\"keyword\">return</span> arr;</span><br><span class=\"line\">   &#125;</span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n<h2 id=\"堆排序\"><a href=\"#堆排序\" class=\"headerlink\" title=\"堆排序\"></a>堆排序</h2><ul>\n<li>堆排序是利用堆这种数据结构而设计的一种排序算法，堆排序是一种选择排序，它的最坏，最好，平均时间复杂度均为O(nlogn)，它也是不稳定排序。首先简单了解下堆结构。</li>\n<li>堆排序的基本思想是：将待排序序列构造成一个大顶堆，此时，整个序列的最大值就是堆顶的根节点。将其与末尾元素进行交换，此时末尾就为最大值。然后将剩余n-1个元素重新构造成一个堆，这样会得到n个元素的次小值。如此反复执行，便能得到一个有序序列了。</li>\n<li>步骤为：<ol>\n<li>构造初始堆。将给定无序序列构造成一个大顶堆（一般升序采用大顶堆，降序采用小顶堆)。</li>\n<li>将堆顶元素与末尾元素进行交换，使末尾元素最大。然后继续调整堆，再将堆顶元素与末尾元素交换，得到第二大元素。如此反复进行交换、重建、交换。</li>\n<li>反复执行调整+交换步骤，直到整个序列有序。<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//堆排序使用的创建顶堆</span></span><br><span class=\"line\">   <span class=\"keyword\">const</span> createMaxHeap = <span class=\"function\">(<span class=\"params\">arr, len</span>) =&gt;</span> &#123;</span><br><span class=\"line\">     <span class=\"keyword\">const</span> create = <span class=\"function\">(<span class=\"params\">arr, i, len</span>) =&gt;</span> &#123;</span><br><span class=\"line\">       <span class=\"keyword\">let</span> maxIndex = i;</span><br><span class=\"line\">       <span class=\"keyword\">let</span> left = <span class=\"number\">2</span> * i;</span><br><span class=\"line\">       <span class=\"keyword\">let</span> right = <span class=\"number\">2</span> * i + <span class=\"number\">1</span>;</span><br><span class=\"line\">       <span class=\"keyword\">if</span> (left &lt; len &amp;&amp; arr[maxIndex] &lt; arr[left]) &#123;</span><br><span class=\"line\">         maxIndex = left;</span><br><span class=\"line\">       &#125;</span><br><span class=\"line\">       <span class=\"keyword\">if</span> (right &lt; len &amp;&amp; arr[maxIndex] &lt; arr[right]) &#123;</span><br><span class=\"line\">         maxIndex = right;</span><br><span class=\"line\">       &#125;</span><br><span class=\"line\">       <span class=\"keyword\">let</span> temp = arr[maxIndex];</span><br><span class=\"line\">       arr[maxIndex] = arr[i];</span><br><span class=\"line\">       arr[i] = temp;</span><br><span class=\"line\">     &#125;</span><br><span class=\"line\">     <span class=\"keyword\">for</span> (<span class=\"keyword\">let</span> i = <span class=\"built_in\">Math</span>.floor(len/<span class=\"number\">2</span>); i &gt;= <span class=\"number\">0</span>; i--) &#123;</span><br><span class=\"line\">       create(arr, i, len);</span><br><span class=\"line\">     &#125;</span><br><span class=\"line\">   &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">   <span class=\"comment\">//堆排序</span></span><br><span class=\"line\">   <span class=\"keyword\">const</span> heapSort = <span class=\"function\">(<span class=\"params\">arr</span>) =&gt;</span> &#123;</span><br><span class=\"line\">     <span class=\"keyword\">for</span> (<span class=\"keyword\">let</span> i = arr.length - <span class=\"number\">1</span>; i &gt;= <span class=\"number\">0</span>; i--) &#123;</span><br><span class=\"line\">       createMaxHeap(arr, i + <span class=\"number\">1</span>);</span><br><span class=\"line\">       <span class=\"keyword\">let</span> max = arr[<span class=\"number\">0</span>];</span><br><span class=\"line\">       arr[<span class=\"number\">0</span>] = arr[i];</span><br><span class=\"line\">       arr[i] = max;</span><br><span class=\"line\">     &#125;</span><br><span class=\"line\">     <span class=\"keyword\">return</span> arr;</span><br><span class=\"line\">   &#125;</span><br></pre></td></tr></table></figure>\n</li>\n</ol>\n</li>\n</ul>\n<h2 id=\"基数排序\"><a href=\"#基数排序\" class=\"headerlink\" title=\"基数排序\"></a>基数排序</h2><ul>\n<li>基数排序（radix sort）属于“分配式排序”（distribution sort），又称“桶子法”（bucket sort）或bin sort，顾名思义，它是透过键值的部份资讯，将要排序的元素分配至某些“桶”中，藉以达到排序的作用，基数排序法是属于稳定性的排序，其时间复杂度为O (nlog(r)m)，其中r为所采取的基数，而m为堆数，在某些时候，基数排序法的效率高于其它的稳定性排序法。</li>\n</ul>\n<h2 id=\"希尔排序\"><a href=\"#希尔排序\" class=\"headerlink\" title=\"希尔排序\"></a>希尔排序</h2><ul>\n<li>希尔排序(Shell’s Sort)是插入排序的一种又称“缩小增量排序”（Diminishing Increment Sort），是直接插入排序算法的一种更高效的改进版本。希尔排序是非稳定排序算法。该方法因D.L.Shell于1959年提出而得名。</li>\n<li>希尔排序是把记录按下标的一定增量分组，对每组使用直接插入排序算法排序；随着增量逐渐减少，每组包含的关键词越来越多，当增量减至1时，整个文件恰被分成一组，算法便终止。</li>\n</ul>\n","site":{"data":{"projects":[{"name":"AiTing","url":"https://github.com/renhongl/aiting","desc":"HTML5客户端音乐播放器"},{"name":"AiLiao","url":"https://github.com/renhongl/ailiao","desc":"网页聊天软件"},{"name":"Pomelo Editor","url":"https://renhongl.github.io/markdown-editor/","desc":"功能强大的在线Markdown编辑器"}]}},"excerpt":"","more":"<h2 id=\"快速排序\"><a href=\"#快速排序\" class=\"headerlink\" title=\"快速排序\"></a>快速排序</h2><ul>\n<li><p>快速排序（英语：Quicksort），又称划分交换排序（partition-exchange sort），简称快排，一种排序算法，最早由东尼·霍尔提出。</p>\n</li>\n<li><p>快速排序使用<strong>分治法</strong>（Divide and conquer）策略来把一个序列（list）分为两个子序列（sub-lists）。</p>\n</li>\n<li><p>步骤为：</p>\n<ol>\n<li><p>从数列中挑出一个元素，称为“基准”（pivot），</p>\n</li>\n<li><p>重新排序数列，所有比基准值小的元素摆放在基准前面，所有比基准值大的元素摆在基准后面（相同的数可以到任何一边）。在这个分区结束之后，该基准就处于数列的中间位置。这个称为分区（partition）操作。</p>\n</li>\n<li><p>递归地（recursively）把小于基准值元素的子数列和大于基准值元素的子数列排序。</p>\n</li>\n<li><p>递归到最底部时，数列的大小是零或一，也就是已经排序好了。这个算法一定会结束，因为在每次的迭代（iteration）中，它至少会把一个元素摆到它最后的位置去。</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">* 快速排序</span></span><br><span class=\"line\"><span class=\"comment\">* 取第一个值，作为中间值，与余下的一次比较</span></span><br><span class=\"line\"><span class=\"comment\">* 比中间值小的，放左边数组</span></span><br><span class=\"line\"><span class=\"comment\">* 比中间值大的，放右边数组</span></span><br><span class=\"line\"><span class=\"comment\">* 递归调用，直到每个数组只剩一个元素，返回该数组</span></span><br><span class=\"line\"><span class=\"comment\">*/</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">export</span>  <span class=\"keyword\">const</span> quickSort = <span class=\"function\">(<span class=\"params\">arr</span>) =&gt;</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(arr.length &lt;=<span class=\"number\">1</span>)&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> arr</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">let</span> mid = arr[<span class=\"number\">0</span>];</span><br><span class=\"line\">    <span class=\"keyword\">let</span> left =[];</span><br><span class=\"line\">    <span class=\"keyword\">let</span> right =[];</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">let</span> i =<span class=\"number\">1</span>; i&lt;arr.length; i++)&#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(arr[i]&lt;mid)&#123;</span><br><span class=\"line\">            left.push(arr[i]);</span><br><span class=\"line\">        &#125;<span class=\"keyword\">else</span>&#123;</span><br><span class=\"line\">            right.push(arr[i]);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> quickSort(left).concat([mid],quickSort(right));</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n</li>\n</ol>\n</li>\n</ul>\n<h2 id=\"冒泡排序\"><a href=\"#冒泡排序\" class=\"headerlink\" title=\"冒泡排序\"></a>冒泡排序</h2><ul>\n<li><p>冒泡排序（Bubble Sort），是一种计算机科学领域的较简单的排序算法。</p>\n</li>\n<li><p>它重复地走访过要排序的元素列，依次比较两个相邻的元素，如果他们的顺序（如从大到小、首字母从A到Z）错误就把他们交换过来。走访元素的工作是重复地进行直到没有相邻元素需要交换，也就是说该元素已经排序完成。</p>\n</li>\n<li><p>这个算法的名字由来是因为越大的元素会经由交换慢慢“浮”到数列的顶端（升序或降序排列），就如同碳酸饮料中二氧化碳的气泡最终会上浮到顶端一样，故名“冒泡排序”。</p>\n  <figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">* 冒泡排序</span></span><br><span class=\"line\"><span class=\"comment\">* 取前一个和后一个值比较，前者大则交换</span></span><br><span class=\"line\"><span class=\"comment\">* 第一次循环结束，最后一个值为最大</span></span><br><span class=\"line\"><span class=\"comment\">* 数组有多长，外层循环多少次</span></span><br><span class=\"line\"><span class=\"comment\">*/</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> bubbleSort = <span class=\"function\">(<span class=\"params\">arr</span>) =&gt;</span> &#123;</span><br><span class=\"line\">  <span class=\"keyword\">for</span> (<span class=\"keyword\">let</span> i = <span class=\"number\">0</span>; i &lt; arr.length; i++) &#123;<span class=\"comment\">//控制循环次数</span></span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">let</span> j = <span class=\"number\">0</span>; j &lt; arr.length - i; j++) &#123;<span class=\"comment\">//循环一次，最后一位最大，下次不用再循环</span></span><br><span class=\"line\">      <span class=\"keyword\">if</span> (arr[j] &gt; arr[j + <span class=\"number\">1</span>]) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">let</span> temp = arr[j];</span><br><span class=\"line\">        arr[j] = arr[j+<span class=\"number\">1</span>];</span><br><span class=\"line\">        arr[j+<span class=\"number\">1</span>] = temp;</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> arr;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n<h2 id=\"选择排序\"><a href=\"#选择排序\" class=\"headerlink\" title=\"选择排序\"></a>选择排序</h2><ul>\n<li>选择排序（Selection sort）是一种简单直观的排序算法。它的工作原理是每一次从待排序的数据元素中选出最小（或最大）的一个元素，存放在序列的起始位置，直到全部待排序的数据元素排完。 选择排序是不稳定的排序方法。  <figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">* 选择排序</span></span><br><span class=\"line\"><span class=\"comment\">* 首先将最小下标设为第一个值得下标</span></span><br><span class=\"line\"><span class=\"comment\">* 依次取后面的值与之相比比，如果更小，将最小下标设为该值的下标</span></span><br><span class=\"line\"><span class=\"comment\">* 第一次循环结束，将数组第一位值与最小下标对应的值交换</span></span><br><span class=\"line\"><span class=\"comment\">* 第一次循环结束，第一个值为最小值</span></span><br><span class=\"line\"><span class=\"comment\">*/</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> selectSort = <span class=\"function\">(<span class=\"params\">arr</span>) =&gt;</span> &#123;</span><br><span class=\"line\">  <span class=\"keyword\">for</span> (<span class=\"keyword\">let</span> i = <span class=\"number\">0</span>; i &lt; arr.length - <span class=\"number\">1</span>; i++) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">let</span> minIndex = i;</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">let</span> j = i + <span class=\"number\">1</span>; j &lt; arr.length; j++) &#123;</span><br><span class=\"line\">      <span class=\"keyword\">if</span> (arr[j] &lt; arr[minIndex]) &#123;</span><br><span class=\"line\">        minIndex = j;</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">let</span> temp = arr[i];</span><br><span class=\"line\">    arr[i] = arr[minIndex];</span><br><span class=\"line\">    arr[minIndex] = temp;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> arr;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n<h2 id=\"归并排序\"><a href=\"#归并排序\" class=\"headerlink\" title=\"归并排序\"></a>归并排序</h2><ul>\n<li>归并排序（MERGE-SORT）是建立在归并操作上的一种有效的排序算法,该算法是采用分治法（Divide and Conquer）的一个非常典型的应用。将已有序的子序列合并，得到完全有序的序列；即先使每个子序列有序，再使子序列段间有序。若将两个有序表合并成一个有序表，称为二路归并。  <figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//将数组分治， 将分治的数组排序，将有序的数组合并</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> merge = <span class=\"function\">(<span class=\"params\">left, right</span>) =&gt;</span> &#123;</span><br><span class=\"line\">\t<span class=\"keyword\">let</span> result = [];</span><br><span class=\"line\">    <span class=\"keyword\">while</span>(left.length &gt; <span class=\"number\">0</span> &amp;&amp; right.length &gt; <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">    \t<span class=\"keyword\">if</span> (left[<span class=\"number\">0</span>] &lt; right[<span class=\"number\">0</span>]) &#123;</span><br><span class=\"line\">        \tresult.push(left.shift());</span><br><span class=\"line\">        &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">        \tresult.push(right.shift());</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> result.concat(left, right);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> mergeSort = <span class=\"function\">(<span class=\"params\">arr</span>) =&gt;</span> &#123;</span><br><span class=\"line\">\t<span class=\"keyword\">if</span> (arr.length &lt;=<span class=\"number\">1</span>) &#123;</span><br><span class=\"line\">    \t<span class=\"keyword\">return</span> arr;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">let</span> midIndex = <span class=\"built_in\">Math</span>.floor(arr.length / <span class=\"number\">2</span>);</span><br><span class=\"line\">    <span class=\"keyword\">let</span> left = arr.slice(<span class=\"number\">0</span>, midIndex);</span><br><span class=\"line\">    <span class=\"keyword\">let</span> right = arr.slice(midIndex);</span><br><span class=\"line\">    <span class=\"keyword\">return</span> merge(mergeSort(left), mergeSort(right));</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n<h2 id=\"直接插入排序\"><a href=\"#直接插入排序\" class=\"headerlink\" title=\"直接插入排序\"></a>直接插入排序</h2><ul>\n<li>直接插入排序，指每次从无序表中取出第一个元素，把它插入到有序表的合适位置，使有序表仍然有序。具体方法是第一趟比较前两个数，然后把第二个数按大小插入到有序表中； 第二趟把第三个数据与前两个数从前向后扫描，把第三个数按大小插入到有序表中；依次进行下去，进行了(n-1)趟扫描以后就完成了整个排序过程。它是由两层嵌套循环组成的，外层循环标识并决定待比较的数值，内层循环为待比较数值确定其最终位置。直接插入排序是将待比较的数值与它的前一个数值进行比较，所以外层循环是从第二个数值开始的。当前一数值比待比较数值大的情况下继续循环比较，直到找到比待比较数值小的并将待比较数值置入其后一位置，结束该次循环。  <figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">   <span class=\"comment\">//把将要排序的那个依次与前面排好的比较，倒序比较，比前面的小，就往前换</span></span><br><span class=\"line\">   <span class=\"comment\">//循环，知道换到前面比它小</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> insertSort = <span class=\"function\">(<span class=\"params\">arr</span>) =&gt;</span> &#123;</span><br><span class=\"line\">     <span class=\"keyword\">for</span> (<span class=\"keyword\">let</span> i = <span class=\"number\">1</span>; i &lt; arr.length; i++) &#123;</span><br><span class=\"line\">       <span class=\"keyword\">let</span> j = i;</span><br><span class=\"line\">       <span class=\"keyword\">while</span>(j &gt; <span class=\"number\">0</span> &amp;&amp; arr[j] &lt; arr[j - <span class=\"number\">1</span>]) &#123;</span><br><span class=\"line\">         <span class=\"keyword\">let</span> temp = arr[j];</span><br><span class=\"line\">         arr[j] = arr[j - <span class=\"number\">1</span>];</span><br><span class=\"line\">         arr[j - <span class=\"number\">1</span>] = temp;</span><br><span class=\"line\">         j--;</span><br><span class=\"line\">       &#125;</span><br><span class=\"line\">     &#125;</span><br><span class=\"line\">     <span class=\"keyword\">return</span> arr;</span><br><span class=\"line\">   &#125;</span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n<h2 id=\"堆排序\"><a href=\"#堆排序\" class=\"headerlink\" title=\"堆排序\"></a>堆排序</h2><ul>\n<li>堆排序是利用堆这种数据结构而设计的一种排序算法，堆排序是一种选择排序，它的最坏，最好，平均时间复杂度均为O(nlogn)，它也是不稳定排序。首先简单了解下堆结构。</li>\n<li>堆排序的基本思想是：将待排序序列构造成一个大顶堆，此时，整个序列的最大值就是堆顶的根节点。将其与末尾元素进行交换，此时末尾就为最大值。然后将剩余n-1个元素重新构造成一个堆，这样会得到n个元素的次小值。如此反复执行，便能得到一个有序序列了。</li>\n<li>步骤为：<ol>\n<li>构造初始堆。将给定无序序列构造成一个大顶堆（一般升序采用大顶堆，降序采用小顶堆)。</li>\n<li>将堆顶元素与末尾元素进行交换，使末尾元素最大。然后继续调整堆，再将堆顶元素与末尾元素交换，得到第二大元素。如此反复进行交换、重建、交换。</li>\n<li>反复执行调整+交换步骤，直到整个序列有序。<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//堆排序使用的创建顶堆</span></span><br><span class=\"line\">   <span class=\"keyword\">const</span> createMaxHeap = <span class=\"function\">(<span class=\"params\">arr, len</span>) =&gt;</span> &#123;</span><br><span class=\"line\">     <span class=\"keyword\">const</span> create = <span class=\"function\">(<span class=\"params\">arr, i, len</span>) =&gt;</span> &#123;</span><br><span class=\"line\">       <span class=\"keyword\">let</span> maxIndex = i;</span><br><span class=\"line\">       <span class=\"keyword\">let</span> left = <span class=\"number\">2</span> * i;</span><br><span class=\"line\">       <span class=\"keyword\">let</span> right = <span class=\"number\">2</span> * i + <span class=\"number\">1</span>;</span><br><span class=\"line\">       <span class=\"keyword\">if</span> (left &lt; len &amp;&amp; arr[maxIndex] &lt; arr[left]) &#123;</span><br><span class=\"line\">         maxIndex = left;</span><br><span class=\"line\">       &#125;</span><br><span class=\"line\">       <span class=\"keyword\">if</span> (right &lt; len &amp;&amp; arr[maxIndex] &lt; arr[right]) &#123;</span><br><span class=\"line\">         maxIndex = right;</span><br><span class=\"line\">       &#125;</span><br><span class=\"line\">       <span class=\"keyword\">let</span> temp = arr[maxIndex];</span><br><span class=\"line\">       arr[maxIndex] = arr[i];</span><br><span class=\"line\">       arr[i] = temp;</span><br><span class=\"line\">     &#125;</span><br><span class=\"line\">     <span class=\"keyword\">for</span> (<span class=\"keyword\">let</span> i = <span class=\"built_in\">Math</span>.floor(len/<span class=\"number\">2</span>); i &gt;= <span class=\"number\">0</span>; i--) &#123;</span><br><span class=\"line\">       create(arr, i, len);</span><br><span class=\"line\">     &#125;</span><br><span class=\"line\">   &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">   <span class=\"comment\">//堆排序</span></span><br><span class=\"line\">   <span class=\"keyword\">const</span> heapSort = <span class=\"function\">(<span class=\"params\">arr</span>) =&gt;</span> &#123;</span><br><span class=\"line\">     <span class=\"keyword\">for</span> (<span class=\"keyword\">let</span> i = arr.length - <span class=\"number\">1</span>; i &gt;= <span class=\"number\">0</span>; i--) &#123;</span><br><span class=\"line\">       createMaxHeap(arr, i + <span class=\"number\">1</span>);</span><br><span class=\"line\">       <span class=\"keyword\">let</span> max = arr[<span class=\"number\">0</span>];</span><br><span class=\"line\">       arr[<span class=\"number\">0</span>] = arr[i];</span><br><span class=\"line\">       arr[i] = max;</span><br><span class=\"line\">     &#125;</span><br><span class=\"line\">     <span class=\"keyword\">return</span> arr;</span><br><span class=\"line\">   &#125;</span><br></pre></td></tr></table></figure>\n</li>\n</ol>\n</li>\n</ul>\n<h2 id=\"基数排序\"><a href=\"#基数排序\" class=\"headerlink\" title=\"基数排序\"></a>基数排序</h2><ul>\n<li>基数排序（radix sort）属于“分配式排序”（distribution sort），又称“桶子法”（bucket sort）或bin sort，顾名思义，它是透过键值的部份资讯，将要排序的元素分配至某些“桶”中，藉以达到排序的作用，基数排序法是属于稳定性的排序，其时间复杂度为O (nlog(r)m)，其中r为所采取的基数，而m为堆数，在某些时候，基数排序法的效率高于其它的稳定性排序法。</li>\n</ul>\n<h2 id=\"希尔排序\"><a href=\"#希尔排序\" class=\"headerlink\" title=\"希尔排序\"></a>希尔排序</h2><ul>\n<li>希尔排序(Shell’s Sort)是插入排序的一种又称“缩小增量排序”（Diminishing Increment Sort），是直接插入排序算法的一种更高效的改进版本。希尔排序是非稳定排序算法。该方法因D.L.Shell于1959年提出而得名。</li>\n<li>希尔排序是把记录按下标的一定增量分组，对每组使用直接插入排序算法排序；随着增量逐渐减少，每组包含的关键词越来越多，当增量减至1时，整个文件恰被分成一组，算法便终止。</li>\n</ul>\n"},{"title":"webpack全面理解","date":"2017-05-05T14:40:12.000Z","_content":"\n\n# 什么是Webpack\nWebpack是一个静态模块打包工具。将一切文件视为模块，可以像引入JavaScript文件一样，在代码中引入。\n\n\n\n# Entry Points\n入口点，就是打包的起始文件。有多种定义方式。\n1. 单入口，使用字符串:\n\n    ```js\n    const config = {\n        entry: './path/to/my/entry/file.js'\n    };\n    module.exports = config;\n    ```\n2. 多入口，使用对象语法：\n\n    ```js\n    const config = {\n        entry: {\n            app: './src/app.js',\n            vendors: './src/vendors.js'\n        }\n    };\n    ```\n\n# Output\n输出，告诉webpack怎样将编译后的文件写入磁盘。输出只有一个。\n1. 基本用法:\n\n    ```js\n    const config = {\n        output: {\n            filename: 'bundle.js',\n            path: '/home/proj/public/assets'\n        }\n    };\n    module.exports = config;\n    ```\n2. 多入口点的用法:\n\n    ```js\n    {\n        entry: {\n            app: './src/app.js',\n            search: './src/search.js'\n        },\n        output: {\n            filename: '[name].js',\n            path: __dirname + '/dist'\n        }\n    }\n    // writes to disk: ./dist/app.js, ./dist/search.js\n    ```\n\n# Loaders\n装载机，用于转换一个模块的源代码。类似于其他打包工具的任务功能。它允许你讲其他语言转换成JavaScript，或者像引入JavaScript文件一样引入图片，数据,CSS文件等。\n\n1. 安装: `npm install --save-dev style-loader css-loader`\n\n1. 配置:\n\n    ```js\n     module: {\n        rules: [\n        {\n            test: /\\.css$/,\n            use: [\n            { loader: 'style-loader' },\n            {\n                loader: 'css-loader',\n                options: {\n                modules: true\n                }\n            }\n            ]\n        }\n        ]\n    }\n    ```\n\n# Plugins\n插件，是webpack的支柱，webpack本身就是创建在same plugin system之上的。它用来做loader不能做的事。\n\n1. 插件的结构：是一个有apply属性的JavaScript对象。apply属性会被webpack编译器调用，用于整个编译周期。\n\n2. 基本用法：\n\n    ```js\n    //installed via npm\n    const HtmlWebpackPlugin = require('html-webpack-plugin'); \n    const webpack = require('webpack'); //to access built-in plugins\n    const path = require('path');\n    \n    const config = {\n        entry: './path/to/my/entry/file.js',\n        output: {\n            filename: 'my-first-webpack.bundle.js',\n            path: path.resolve(__dirname, 'dist')\n        },\n        module: {\n            rules: [\n            {\n                test: /\\.(js|jsx)$/,\n                use: 'babel-loader'\n            }\n            ]\n        },\n        plugins: [\n            new webpack.optimize.UglifyJsPlugin(),\n            new HtmlWebpackPlugin({template: './src/index.html'})\n        ]\n    };\n    module.exports = config;\n    ```\n\n3. 常用插件：\n\n    * html-webpack-plugin（输出控制的插件）\n        1. 安装: `npm install --save-dev html-webpack-plugin`\n        2. 配置: \n\n    ```js\n    const path = require('path');\n    + const HtmlWebpackPlugin = require('html-webpack-plugin');\n    \n    module.exports = {\n        entry: {\n        app: './src/index.js',\n        print: './src/print.js'\n        },\n    +   plugins: [\n    +     new HtmlWebpackPlugin({\n    +       title: 'Output Management'\n    +     })\n    +   ],\n        output: {\n        filename: '[name].bundle.js',\n        path: path.resolve(__dirname, 'dist')\n        }\n    };\n    ```\n\n        3. 结论：使用该插件，每次创建会将index.html替换掉，自动引入多个入口的JavaScript文件。当我们在配置中新增、修改入口点时，就不用手动修改源代码。\n    * clean-webpack-plugin(清理/dist文件夹)\n        1. 安装: `npm install --save-dev clen-webpack-plugin`\n        2. 配置：\n\n              ```js\n              const path = require('path');\n              const HtmlWebpackPlugin = require('html-webpack-plugin');\n               + const CleanWebpackPlugin = require('clean-webpack-plugin');\n                          module.exports = {\n                              entry: {\n                              app: './src/index.js',\n                              print: './src/print.js'\n                              },\n                              plugins: [\n                      + new CleanWebpackPlugin(['dist']),\n                                new HtmlWebpackPlugin({\n                                    title: 'Output Management'\n                                })\n                              ],\n                              output: {\n                              filename: '[name].bundle.js',\n                              path: path.resolve(__dirname, 'dist')\n                              }\n                         };\n              ```\n\n        3. 结论：创建之后，不会再有旧文件，只有刚生成的文件。\n    * uglifyjs-webpack-plugin(Tree shaking插件，用于去除为使用的代码，以及最小化代码)\n        1. 安装: `npm install --save-dev uglifyjs-webpack-plugin`\n        2. 配置:\n\n            ```js\n            const path = require('path');\n            + const UglifyJSPlugin = require('uglifyjs-webpack-plugin');\n            \n            module.exports = {\n                entry: './src/index.js',\n                output: {\n                    filename: 'bundle.js',\n                    path: path.resolve(__dirname, 'dist')\n                - }\n                + },\n                + plugins: [\n                +   new UglifyJSPlugin()\n                + ]\n            };\n            ```\n        3. 结论：创建后，最小化了代码文件，并且没有将未使用的代码创建进来。就像一棵树，源代码像绿色的活着的叶子，死代码像秋天到了棕色的，死了的叶子，通过摇动这棵树，将死去的叶子摇下。\n    * CommonsChunkPlugin(代码分裂插件)\n        1. 安装: 属于webpack内建插件\n        2. 配置: \n\n            ```js\n            const path = require('path');\n            + const webpack = require('webpack');\n            const HTMLWebpackPlugin = require('html-webpack-plugin');\n            \n            module.exports = {\n                entry: {\n                index: './src/index.js',\n                another: './src/another-module.js'\n                },\n                plugins: [\n                new HTMLWebpackPlugin({\n                    title: 'Code Splitting'\n            -     })\n            +     }),\n            +     new webpack.optimize.CommonsChunkPlugin({\n            +       name: 'common' // Specify the common bundle's name.\n            +     })\n                ],\n                output: {\n                filename: '[name].bundle.js',\n                path: path.resolve(__dirname, 'dist')\n                }\n            }; \n            ```\n        3. 结论: 在没有使用该插件时，配置了多个入口，每个入口中都会存在共同使用的模块，代码就出现了重复。使用之后，共同使用的代码，会被创建在一个新的，单独的文件中。\n\n# Development\n开发时，我们需要做一些设置，使开发变得容易。\n\n1. Using source maps\n\n    * 描述: 在使用webpack创建代码时，我们很难通过错误和警告去追踪源代码位置。\n    * 配置: \n\n        ```js\n        module.exports = {\n            entry: {\n            app: './src/index.js',\n            print: './src/print.js'\n            },\n        +   devtool: 'inline-source-map',\n            plugins: [\n            new CleanWebpackPlugin(['dist']),\n            new HtmlWebpackPlugin({\n                title: 'Development'\n            })\n            ],\n            output: {\n            filename: '[name].bundle.js',\n            path: path.resolve(__dirname, 'dist')\n            }\n        };\n        ```\n    3. 结论: 在devtool属性中配置 `inline-source-map`之后，我们将可以在控制台中找到出错的行数，并可以链接进源代码。\n\n2. Using Watch Mode\n    * 描述: 如果每次修改源代码，我们都要去手动创建一次，这是一件很麻烦的事。\n    * 配置: \n\n      ```js\n      \"scripts\": {\n          \"test\": \"echo \\\"Error: no test specified\\\" && exit 1\",\n          +\"watch\": \"webpack --watch\",\n          \"build\": \"webpack\"\n      },\n      ```\n    * 结论: 添加watch参数，每次修改源代码之后，webpack会帮忙自动创建。\n3. Using webpack-dev-server\n    * 描述: 提供一个简单的web服务器，并且能够自动刷新页面。\n    * 安装: `npm install --save-dev webpack-dev-server`\n    * 配置: \n    \n      ```js\n      const path = require('path');\n      const HtmlWebpackPlugin = require('html-webpack-plugin');\n      const CleanWebpackPlugin = require('clean-webpack-plugin');\n      \n      module.exports = {\n          entry: {\n          app: './src/index.js',\n          print: './src/print.js'\n          },\n          devtool: 'inline-source-map',\n      +   devServer: {\n      +     contentBase: './dist'\n      +   },\n          plugins: [\n          new CleanWebpackPlugin(['dist']),\n          new HtmlWebpackPlugin({\n              title: 'Development'\n          })\n          ],\n          output: {\n          filename: '[name].bundle.js',\n          path: path.resolve(__dirname, 'dist')\n          }\n      };\n      ```\n     * 添加npm执行脚本: `\"start\": \"webpack-dev-server --open\"`\n\n# Production\n如何添加一个产品配置？我们需要将产品和开发时相同的配置提取出来，通过npm脚本传入不同的参数，在产品和开发时使用不同的webpack配置。\n\n1. 安装: `npm install --save-dev webpack-merge`\n2. 配置:\n\n    ```js\n    project: \n    \n        webpack-demo\n        |- package.json\n        - |- webpack.config.js\n        + |- webpack.common.js\n        + |- webpack.dev.js\n        + |- webpack.prod.js\n        |- /dist\n        |- /src\n            |- index.js\n            |- math.js\n        |- /node_modules\n    \n    webpack.common.js\n    \n        + const path = require('path');\n        + const CleanWebpackPlugin = require('clean-webpack-plugin');\n        + const HtmlWebpackPlugin = require('html-webpack-plugin');\n        +\n        + module.exports = {\n        +   entry: {\n        +     app: './src/index.js'\n        +   },\n        +   plugins: [\n        +     new CleanWebpackPlugin(['dist']),\n        +     new HtmlWebpackPlugin({\n        +       title: 'Production'\n        +     })\n        +   ],\n        +   output: {\n        +     filename: '[name].bundle.js',\n        +     path: path.resolve(__dirname, 'dist')\n        +   }\n        + };\n    \n    webpack.dev.js\n    \n        + const merge = require('webpack-merge');\n        + const common = require('./webpack.common.js');\n        +\n        + module.exports = merge(common, {\n        +   devtool: 'inline-source-map',\n        +   devServer: {\n        +     contentBase: './dist'\n        +   }\n        + });\n    \n    webpack.prod.js\n    \n        + const merge = require('webpack-merge');\n        + const webpack = require('webpack');\n        + const UglifyJSPlugin = require('uglifyjs-webpack-plugin');\n        + const common = require('./webpack.common.js');\n        +\n        + module.exports = merge(common, {\n        +   devtool: 'source-map,\n        +   plugins: [\n        +     new UglifyJSPlugin({\n        +        sourceMap: true\n        +    }),\n        +     new webpack.DefinePlugin({\n        +        'process.env.NODE_ENV': JSON.stringify    +     ('produdction)\n        +      })\n        +   ]\n        + });\n    \n    NPM Scripts\n    \n        {\n            \"name\": \"development\",\n            \"version\": \"1.0.0\",\n            \"description\": \"\",\n            \"main\": \"webpack.config.js\",\n            \"scripts\": {\n        -     \"start\": \"webpack-dev-server --open\",\n        +     \"start\": \"webpack-dev-server --open --config webpack.dev.js\",\n        -     \"build\": \"webpack\"\n        +     \"build\": \"webpack --config webpack.prod.js\"\n            },\n            \"keywords\": [],\n            \"author\": \"\",\n            \"license\": \"ISC\",\n            \"devDependencies\": {\n            \"clean-webpack-plugin\": \"^0.1.17\",\n            \"css-loader\": \"^0.28.4\",\n            \"csv-loader\": \"^2.1.1\",\n            \"express\": \"^4.15.3\",\n            \"file-loader\": \"^0.11.2\",\n            \"html-webpack-plugin\": \"^2.29.0\",\n            \"style-loader\": \"^0.18.2\",\n            \"webpack\": \"^3.0.0\",\n            \"webpack-dev-middleware\": \"^1.12.0\",\n            \"webpack-dev-server\": \"^2.9.1\",\n            \"webpack-merge\": \"^4.1.0\",\n            \"xml-loader\": \"^1.2.1\"\n            }\n        }\n    \n    ```\n# 其他功能：Split CSS\n\n1. 安装: `npm install --save-dev extract-text-webpack-plugin`\n2. 配置:\n\n    ```js\n    const ExtractTextPlugin = require(\"extract-text-webpack-plugin\");\n    \n        module.exports = {\n        module: {\n            rules: [\n            {\n                test: /\\.css$/,\n                use: ExtractTextPlugin.extract({\n                fallback: \"style-loader\",\n                use: \"css-loader\"\n                })\n            }\n            ]\n        },\n        plugins: [\n            new ExtractTextPlugin(\"styles.css\"),\n        ]\n    }\n    ```\n\n","source":"_posts/webpack全面理解.md","raw":"---\ntitle: webpack全面理解\ndate: 2017-05-05 22:40:12\ntags: Webpack\n---\n\n\n# 什么是Webpack\nWebpack是一个静态模块打包工具。将一切文件视为模块，可以像引入JavaScript文件一样，在代码中引入。\n\n\n\n# Entry Points\n入口点，就是打包的起始文件。有多种定义方式。\n1. 单入口，使用字符串:\n\n    ```js\n    const config = {\n        entry: './path/to/my/entry/file.js'\n    };\n    module.exports = config;\n    ```\n2. 多入口，使用对象语法：\n\n    ```js\n    const config = {\n        entry: {\n            app: './src/app.js',\n            vendors: './src/vendors.js'\n        }\n    };\n    ```\n\n# Output\n输出，告诉webpack怎样将编译后的文件写入磁盘。输出只有一个。\n1. 基本用法:\n\n    ```js\n    const config = {\n        output: {\n            filename: 'bundle.js',\n            path: '/home/proj/public/assets'\n        }\n    };\n    module.exports = config;\n    ```\n2. 多入口点的用法:\n\n    ```js\n    {\n        entry: {\n            app: './src/app.js',\n            search: './src/search.js'\n        },\n        output: {\n            filename: '[name].js',\n            path: __dirname + '/dist'\n        }\n    }\n    // writes to disk: ./dist/app.js, ./dist/search.js\n    ```\n\n# Loaders\n装载机，用于转换一个模块的源代码。类似于其他打包工具的任务功能。它允许你讲其他语言转换成JavaScript，或者像引入JavaScript文件一样引入图片，数据,CSS文件等。\n\n1. 安装: `npm install --save-dev style-loader css-loader`\n\n1. 配置:\n\n    ```js\n     module: {\n        rules: [\n        {\n            test: /\\.css$/,\n            use: [\n            { loader: 'style-loader' },\n            {\n                loader: 'css-loader',\n                options: {\n                modules: true\n                }\n            }\n            ]\n        }\n        ]\n    }\n    ```\n\n# Plugins\n插件，是webpack的支柱，webpack本身就是创建在same plugin system之上的。它用来做loader不能做的事。\n\n1. 插件的结构：是一个有apply属性的JavaScript对象。apply属性会被webpack编译器调用，用于整个编译周期。\n\n2. 基本用法：\n\n    ```js\n    //installed via npm\n    const HtmlWebpackPlugin = require('html-webpack-plugin'); \n    const webpack = require('webpack'); //to access built-in plugins\n    const path = require('path');\n    \n    const config = {\n        entry: './path/to/my/entry/file.js',\n        output: {\n            filename: 'my-first-webpack.bundle.js',\n            path: path.resolve(__dirname, 'dist')\n        },\n        module: {\n            rules: [\n            {\n                test: /\\.(js|jsx)$/,\n                use: 'babel-loader'\n            }\n            ]\n        },\n        plugins: [\n            new webpack.optimize.UglifyJsPlugin(),\n            new HtmlWebpackPlugin({template: './src/index.html'})\n        ]\n    };\n    module.exports = config;\n    ```\n\n3. 常用插件：\n\n    * html-webpack-plugin（输出控制的插件）\n        1. 安装: `npm install --save-dev html-webpack-plugin`\n        2. 配置: \n\n    ```js\n    const path = require('path');\n    + const HtmlWebpackPlugin = require('html-webpack-plugin');\n    \n    module.exports = {\n        entry: {\n        app: './src/index.js',\n        print: './src/print.js'\n        },\n    +   plugins: [\n    +     new HtmlWebpackPlugin({\n    +       title: 'Output Management'\n    +     })\n    +   ],\n        output: {\n        filename: '[name].bundle.js',\n        path: path.resolve(__dirname, 'dist')\n        }\n    };\n    ```\n\n        3. 结论：使用该插件，每次创建会将index.html替换掉，自动引入多个入口的JavaScript文件。当我们在配置中新增、修改入口点时，就不用手动修改源代码。\n    * clean-webpack-plugin(清理/dist文件夹)\n        1. 安装: `npm install --save-dev clen-webpack-plugin`\n        2. 配置：\n\n              ```js\n              const path = require('path');\n              const HtmlWebpackPlugin = require('html-webpack-plugin');\n               + const CleanWebpackPlugin = require('clean-webpack-plugin');\n                          module.exports = {\n                              entry: {\n                              app: './src/index.js',\n                              print: './src/print.js'\n                              },\n                              plugins: [\n                      + new CleanWebpackPlugin(['dist']),\n                                new HtmlWebpackPlugin({\n                                    title: 'Output Management'\n                                })\n                              ],\n                              output: {\n                              filename: '[name].bundle.js',\n                              path: path.resolve(__dirname, 'dist')\n                              }\n                         };\n              ```\n\n        3. 结论：创建之后，不会再有旧文件，只有刚生成的文件。\n    * uglifyjs-webpack-plugin(Tree shaking插件，用于去除为使用的代码，以及最小化代码)\n        1. 安装: `npm install --save-dev uglifyjs-webpack-plugin`\n        2. 配置:\n\n            ```js\n            const path = require('path');\n            + const UglifyJSPlugin = require('uglifyjs-webpack-plugin');\n            \n            module.exports = {\n                entry: './src/index.js',\n                output: {\n                    filename: 'bundle.js',\n                    path: path.resolve(__dirname, 'dist')\n                - }\n                + },\n                + plugins: [\n                +   new UglifyJSPlugin()\n                + ]\n            };\n            ```\n        3. 结论：创建后，最小化了代码文件，并且没有将未使用的代码创建进来。就像一棵树，源代码像绿色的活着的叶子，死代码像秋天到了棕色的，死了的叶子，通过摇动这棵树，将死去的叶子摇下。\n    * CommonsChunkPlugin(代码分裂插件)\n        1. 安装: 属于webpack内建插件\n        2. 配置: \n\n            ```js\n            const path = require('path');\n            + const webpack = require('webpack');\n            const HTMLWebpackPlugin = require('html-webpack-plugin');\n            \n            module.exports = {\n                entry: {\n                index: './src/index.js',\n                another: './src/another-module.js'\n                },\n                plugins: [\n                new HTMLWebpackPlugin({\n                    title: 'Code Splitting'\n            -     })\n            +     }),\n            +     new webpack.optimize.CommonsChunkPlugin({\n            +       name: 'common' // Specify the common bundle's name.\n            +     })\n                ],\n                output: {\n                filename: '[name].bundle.js',\n                path: path.resolve(__dirname, 'dist')\n                }\n            }; \n            ```\n        3. 结论: 在没有使用该插件时，配置了多个入口，每个入口中都会存在共同使用的模块，代码就出现了重复。使用之后，共同使用的代码，会被创建在一个新的，单独的文件中。\n\n# Development\n开发时，我们需要做一些设置，使开发变得容易。\n\n1. Using source maps\n\n    * 描述: 在使用webpack创建代码时，我们很难通过错误和警告去追踪源代码位置。\n    * 配置: \n\n        ```js\n        module.exports = {\n            entry: {\n            app: './src/index.js',\n            print: './src/print.js'\n            },\n        +   devtool: 'inline-source-map',\n            plugins: [\n            new CleanWebpackPlugin(['dist']),\n            new HtmlWebpackPlugin({\n                title: 'Development'\n            })\n            ],\n            output: {\n            filename: '[name].bundle.js',\n            path: path.resolve(__dirname, 'dist')\n            }\n        };\n        ```\n    3. 结论: 在devtool属性中配置 `inline-source-map`之后，我们将可以在控制台中找到出错的行数，并可以链接进源代码。\n\n2. Using Watch Mode\n    * 描述: 如果每次修改源代码，我们都要去手动创建一次，这是一件很麻烦的事。\n    * 配置: \n\n      ```js\n      \"scripts\": {\n          \"test\": \"echo \\\"Error: no test specified\\\" && exit 1\",\n          +\"watch\": \"webpack --watch\",\n          \"build\": \"webpack\"\n      },\n      ```\n    * 结论: 添加watch参数，每次修改源代码之后，webpack会帮忙自动创建。\n3. Using webpack-dev-server\n    * 描述: 提供一个简单的web服务器，并且能够自动刷新页面。\n    * 安装: `npm install --save-dev webpack-dev-server`\n    * 配置: \n    \n      ```js\n      const path = require('path');\n      const HtmlWebpackPlugin = require('html-webpack-plugin');\n      const CleanWebpackPlugin = require('clean-webpack-plugin');\n      \n      module.exports = {\n          entry: {\n          app: './src/index.js',\n          print: './src/print.js'\n          },\n          devtool: 'inline-source-map',\n      +   devServer: {\n      +     contentBase: './dist'\n      +   },\n          plugins: [\n          new CleanWebpackPlugin(['dist']),\n          new HtmlWebpackPlugin({\n              title: 'Development'\n          })\n          ],\n          output: {\n          filename: '[name].bundle.js',\n          path: path.resolve(__dirname, 'dist')\n          }\n      };\n      ```\n     * 添加npm执行脚本: `\"start\": \"webpack-dev-server --open\"`\n\n# Production\n如何添加一个产品配置？我们需要将产品和开发时相同的配置提取出来，通过npm脚本传入不同的参数，在产品和开发时使用不同的webpack配置。\n\n1. 安装: `npm install --save-dev webpack-merge`\n2. 配置:\n\n    ```js\n    project: \n    \n        webpack-demo\n        |- package.json\n        - |- webpack.config.js\n        + |- webpack.common.js\n        + |- webpack.dev.js\n        + |- webpack.prod.js\n        |- /dist\n        |- /src\n            |- index.js\n            |- math.js\n        |- /node_modules\n    \n    webpack.common.js\n    \n        + const path = require('path');\n        + const CleanWebpackPlugin = require('clean-webpack-plugin');\n        + const HtmlWebpackPlugin = require('html-webpack-plugin');\n        +\n        + module.exports = {\n        +   entry: {\n        +     app: './src/index.js'\n        +   },\n        +   plugins: [\n        +     new CleanWebpackPlugin(['dist']),\n        +     new HtmlWebpackPlugin({\n        +       title: 'Production'\n        +     })\n        +   ],\n        +   output: {\n        +     filename: '[name].bundle.js',\n        +     path: path.resolve(__dirname, 'dist')\n        +   }\n        + };\n    \n    webpack.dev.js\n    \n        + const merge = require('webpack-merge');\n        + const common = require('./webpack.common.js');\n        +\n        + module.exports = merge(common, {\n        +   devtool: 'inline-source-map',\n        +   devServer: {\n        +     contentBase: './dist'\n        +   }\n        + });\n    \n    webpack.prod.js\n    \n        + const merge = require('webpack-merge');\n        + const webpack = require('webpack');\n        + const UglifyJSPlugin = require('uglifyjs-webpack-plugin');\n        + const common = require('./webpack.common.js');\n        +\n        + module.exports = merge(common, {\n        +   devtool: 'source-map,\n        +   plugins: [\n        +     new UglifyJSPlugin({\n        +        sourceMap: true\n        +    }),\n        +     new webpack.DefinePlugin({\n        +        'process.env.NODE_ENV': JSON.stringify    +     ('produdction)\n        +      })\n        +   ]\n        + });\n    \n    NPM Scripts\n    \n        {\n            \"name\": \"development\",\n            \"version\": \"1.0.0\",\n            \"description\": \"\",\n            \"main\": \"webpack.config.js\",\n            \"scripts\": {\n        -     \"start\": \"webpack-dev-server --open\",\n        +     \"start\": \"webpack-dev-server --open --config webpack.dev.js\",\n        -     \"build\": \"webpack\"\n        +     \"build\": \"webpack --config webpack.prod.js\"\n            },\n            \"keywords\": [],\n            \"author\": \"\",\n            \"license\": \"ISC\",\n            \"devDependencies\": {\n            \"clean-webpack-plugin\": \"^0.1.17\",\n            \"css-loader\": \"^0.28.4\",\n            \"csv-loader\": \"^2.1.1\",\n            \"express\": \"^4.15.3\",\n            \"file-loader\": \"^0.11.2\",\n            \"html-webpack-plugin\": \"^2.29.0\",\n            \"style-loader\": \"^0.18.2\",\n            \"webpack\": \"^3.0.0\",\n            \"webpack-dev-middleware\": \"^1.12.0\",\n            \"webpack-dev-server\": \"^2.9.1\",\n            \"webpack-merge\": \"^4.1.0\",\n            \"xml-loader\": \"^1.2.1\"\n            }\n        }\n    \n    ```\n# 其他功能：Split CSS\n\n1. 安装: `npm install --save-dev extract-text-webpack-plugin`\n2. 配置:\n\n    ```js\n    const ExtractTextPlugin = require(\"extract-text-webpack-plugin\");\n    \n        module.exports = {\n        module: {\n            rules: [\n            {\n                test: /\\.css$/,\n                use: ExtractTextPlugin.extract({\n                fallback: \"style-loader\",\n                use: \"css-loader\"\n                })\n            }\n            ]\n        },\n        plugins: [\n            new ExtractTextPlugin(\"styles.css\"),\n        ]\n    }\n    ```\n\n","slug":"webpack全面理解","published":1,"updated":"2019-03-18T07:32:48.992Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ck2vg6gyc003z4coblm27tzh5","content":"<h1 id=\"什么是Webpack\"><a href=\"#什么是Webpack\" class=\"headerlink\" title=\"什么是Webpack\"></a>什么是Webpack</h1><p>Webpack是一个静态模块打包工具。将一切文件视为模块，可以像引入JavaScript文件一样，在代码中引入。</p>\n<h1 id=\"Entry-Points\"><a href=\"#Entry-Points\" class=\"headerlink\" title=\"Entry Points\"></a>Entry Points</h1><p>入口点，就是打包的起始文件。有多种定义方式。</p>\n<ol>\n<li><p>单入口，使用字符串:</p>\n <figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> config = &#123;</span><br><span class=\"line\">    entry: <span class=\"string\">'./path/to/my/entry/file.js'</span></span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"><span class=\"built_in\">module</span>.exports = config;</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>多入口，使用对象语法：</p>\n <figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> config = &#123;</span><br><span class=\"line\">    entry: &#123;</span><br><span class=\"line\">        app: <span class=\"string\">'./src/app.js'</span>,</span><br><span class=\"line\">        vendors: <span class=\"string\">'./src/vendors.js'</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n</li>\n</ol>\n<h1 id=\"Output\"><a href=\"#Output\" class=\"headerlink\" title=\"Output\"></a>Output</h1><p>输出，告诉webpack怎样将编译后的文件写入磁盘。输出只有一个。</p>\n<ol>\n<li><p>基本用法:</p>\n <figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> config = &#123;</span><br><span class=\"line\">    output: &#123;</span><br><span class=\"line\">        filename: <span class=\"string\">'bundle.js'</span>,</span><br><span class=\"line\">        path: <span class=\"string\">'/home/proj/public/assets'</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"><span class=\"built_in\">module</span>.exports = config;</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>多入口点的用法:</p>\n <figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#123;</span><br><span class=\"line\">    entry: &#123;</span><br><span class=\"line\">        app: <span class=\"string\">'./src/app.js'</span>,</span><br><span class=\"line\">        search: <span class=\"string\">'./src/search.js'</span></span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    output: &#123;</span><br><span class=\"line\">        filename: <span class=\"string\">'[name].js'</span>,</span><br><span class=\"line\">        path: __dirname + <span class=\"string\">'/dist'</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">// writes to disk: ./dist/app.js, ./dist/search.js</span></span><br></pre></td></tr></table></figure>\n</li>\n</ol>\n<h1 id=\"Loaders\"><a href=\"#Loaders\" class=\"headerlink\" title=\"Loaders\"></a>Loaders</h1><p>装载机，用于转换一个模块的源代码。类似于其他打包工具的任务功能。它允许你讲其他语言转换成JavaScript，或者像引入JavaScript文件一样引入图片，数据,CSS文件等。</p>\n<ol>\n<li><p>安装: <code>npm install --save-dev style-loader css-loader</code></p>\n</li>\n<li><p>配置:</p>\n <figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"> <span class=\"built_in\">module</span>: &#123;</span><br><span class=\"line\">    rules: [</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        test: <span class=\"regexp\">/\\.css$/</span>,</span><br><span class=\"line\">        use: [</span><br><span class=\"line\">        &#123; <span class=\"attr\">loader</span>: <span class=\"string\">'style-loader'</span> &#125;,</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            loader: <span class=\"string\">'css-loader'</span>,</span><br><span class=\"line\">            options: &#123;</span><br><span class=\"line\">            modules: <span class=\"literal\">true</span></span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        ]</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    ]</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n</li>\n</ol>\n<h1 id=\"Plugins\"><a href=\"#Plugins\" class=\"headerlink\" title=\"Plugins\"></a>Plugins</h1><p>插件，是webpack的支柱，webpack本身就是创建在same plugin system之上的。它用来做loader不能做的事。</p>\n<ol>\n<li><p>插件的结构：是一个有apply属性的JavaScript对象。apply属性会被webpack编译器调用，用于整个编译周期。</p>\n</li>\n<li><p>基本用法：</p>\n <figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//installed via npm</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> HtmlWebpackPlugin = <span class=\"built_in\">require</span>(<span class=\"string\">'html-webpack-plugin'</span>); </span><br><span class=\"line\"><span class=\"keyword\">const</span> webpack = <span class=\"built_in\">require</span>(<span class=\"string\">'webpack'</span>); <span class=\"comment\">//to access built-in plugins</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> path = <span class=\"built_in\">require</span>(<span class=\"string\">'path'</span>);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> config = &#123;</span><br><span class=\"line\">    entry: <span class=\"string\">'./path/to/my/entry/file.js'</span>,</span><br><span class=\"line\">    output: &#123;</span><br><span class=\"line\">        filename: <span class=\"string\">'my-first-webpack.bundle.js'</span>,</span><br><span class=\"line\">        path: path.resolve(__dirname, <span class=\"string\">'dist'</span>)</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    <span class=\"built_in\">module</span>: &#123;</span><br><span class=\"line\">        rules: [</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            test: <span class=\"regexp\">/\\.(js|jsx)$/</span>,</span><br><span class=\"line\">            use: <span class=\"string\">'babel-loader'</span></span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        ]</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    plugins: [</span><br><span class=\"line\">        <span class=\"keyword\">new</span> webpack.optimize.UglifyJsPlugin(),</span><br><span class=\"line\">        <span class=\"keyword\">new</span> HtmlWebpackPlugin(&#123;<span class=\"attr\">template</span>: <span class=\"string\">'./src/index.html'</span>&#125;)</span><br><span class=\"line\">    ]</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"><span class=\"built_in\">module</span>.exports = config;</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>常用插件：</p>\n<ul>\n<li><p>html-webpack-plugin（输出控制的插件）</p>\n<ol>\n<li>安装: <code>npm install --save-dev html-webpack-plugin</code></li>\n<li>配置: </li>\n</ol>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> path = <span class=\"built_in\">require</span>(<span class=\"string\">'path'</span>);</span><br><span class=\"line\">+ <span class=\"keyword\">const</span> HtmlWebpackPlugin = <span class=\"built_in\">require</span>(<span class=\"string\">'html-webpack-plugin'</span>);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">module</span>.exports = &#123;</span><br><span class=\"line\">    entry: &#123;</span><br><span class=\"line\">    app: <span class=\"string\">'./src/index.js'</span>,</span><br><span class=\"line\">    print: <span class=\"string\">'./src/print.js'</span></span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">+   plugins: [</span><br><span class=\"line\">+     <span class=\"keyword\">new</span> HtmlWebpackPlugin(&#123;</span><br><span class=\"line\">+       title: <span class=\"string\">'Output Management'</span></span><br><span class=\"line\">+     &#125;)</span><br><span class=\"line\">+   ],</span><br><span class=\"line\">    output: &#123;</span><br><span class=\"line\">    filename: <span class=\"string\">'[name].bundle.js'</span>,</span><br><span class=\"line\">    path: path.resolve(__dirname, <span class=\"string\">'dist'</span>)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n<ol start=\"3\">\n<li>结论：使用该插件，每次创建会将index.html替换掉，自动引入多个入口的JavaScript文件。当我们在配置中新增、修改入口点时，就不用手动修改源代码。</li>\n</ol>\n</li>\n<li><p>clean-webpack-plugin(清理/dist文件夹)</p>\n<ol>\n<li>安装: <code>npm install --save-dev clen-webpack-plugin</code></li>\n<li><p>配置：</p>\n   <figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> path = <span class=\"built_in\">require</span>(<span class=\"string\">'path'</span>);</span><br><span class=\"line\"><span class=\"keyword\">const</span> HtmlWebpackPlugin = <span class=\"built_in\">require</span>(<span class=\"string\">'html-webpack-plugin'</span>);</span><br><span class=\"line\"> + <span class=\"keyword\">const</span> CleanWebpackPlugin = <span class=\"built_in\">require</span>(<span class=\"string\">'clean-webpack-plugin'</span>);</span><br><span class=\"line\">            <span class=\"built_in\">module</span>.exports = &#123;</span><br><span class=\"line\">                entry: &#123;</span><br><span class=\"line\">                app: <span class=\"string\">'./src/index.js'</span>,</span><br><span class=\"line\">                print: <span class=\"string\">'./src/print.js'</span></span><br><span class=\"line\">                &#125;,</span><br><span class=\"line\">                plugins: [</span><br><span class=\"line\">        + <span class=\"keyword\">new</span> CleanWebpackPlugin([<span class=\"string\">'dist'</span>]),</span><br><span class=\"line\">                  <span class=\"keyword\">new</span> HtmlWebpackPlugin(&#123;</span><br><span class=\"line\">                      title: <span class=\"string\">'Output Management'</span></span><br><span class=\"line\">                  &#125;)</span><br><span class=\"line\">                ],</span><br><span class=\"line\">                output: &#123;</span><br><span class=\"line\">                filename: <span class=\"string\">'[name].bundle.js'</span>,</span><br><span class=\"line\">                path: path.resolve(__dirname, <span class=\"string\">'dist'</span>)</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">           &#125;;</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>结论：创建之后，不会再有旧文件，只有刚生成的文件。</p>\n</li>\n</ol>\n</li>\n<li><p>uglifyjs-webpack-plugin(Tree shaking插件，用于去除为使用的代码，以及最小化代码)</p>\n<ol>\n<li>安装: <code>npm install --save-dev uglifyjs-webpack-plugin</code></li>\n<li><p>配置:</p>\n <figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> path = <span class=\"built_in\">require</span>(<span class=\"string\">'path'</span>);</span><br><span class=\"line\">+ <span class=\"keyword\">const</span> UglifyJSPlugin = <span class=\"built_in\">require</span>(<span class=\"string\">'uglifyjs-webpack-plugin'</span>);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">module</span>.exports = &#123;</span><br><span class=\"line\">    entry: <span class=\"string\">'./src/index.js'</span>,</span><br><span class=\"line\">    output: &#123;</span><br><span class=\"line\">        filename: <span class=\"string\">'bundle.js'</span>,</span><br><span class=\"line\">        path: path.resolve(__dirname, <span class=\"string\">'dist'</span>)</span><br><span class=\"line\">    - &#125;</span><br><span class=\"line\">    + &#125;,</span><br><span class=\"line\">    + plugins: [</span><br><span class=\"line\">    +   <span class=\"keyword\">new</span> UglifyJSPlugin()</span><br><span class=\"line\">    + ]</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>结论：创建后，最小化了代码文件，并且没有将未使用的代码创建进来。就像一棵树，源代码像绿色的活着的叶子，死代码像秋天到了棕色的，死了的叶子，通过摇动这棵树，将死去的叶子摇下。</p>\n</li>\n</ol>\n</li>\n<li><p>CommonsChunkPlugin(代码分裂插件)</p>\n<ol>\n<li>安装: 属于webpack内建插件</li>\n<li><p>配置: </p>\n <figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> path = <span class=\"built_in\">require</span>(<span class=\"string\">'path'</span>);</span><br><span class=\"line\">+ <span class=\"keyword\">const</span> webpack = <span class=\"built_in\">require</span>(<span class=\"string\">'webpack'</span>);</span><br><span class=\"line\"><span class=\"keyword\">const</span> HTMLWebpackPlugin = <span class=\"built_in\">require</span>(<span class=\"string\">'html-webpack-plugin'</span>);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">module</span>.exports = &#123;</span><br><span class=\"line\">    entry: &#123;</span><br><span class=\"line\">    index: <span class=\"string\">'./src/index.js'</span>,</span><br><span class=\"line\">    another: <span class=\"string\">'./src/another-module.js'</span></span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    plugins: [</span><br><span class=\"line\">    <span class=\"keyword\">new</span> HTMLWebpackPlugin(&#123;</span><br><span class=\"line\">        title: <span class=\"string\">'Code Splitting'</span></span><br><span class=\"line\">-     &#125;)</span><br><span class=\"line\">+     &#125;),</span><br><span class=\"line\">+     <span class=\"keyword\">new</span> webpack.optimize.CommonsChunkPlugin(&#123;</span><br><span class=\"line\">+       name: <span class=\"string\">'common'</span> <span class=\"comment\">// Specify the common bundle's name.</span></span><br><span class=\"line\">+     &#125;)</span><br><span class=\"line\">    ],</span><br><span class=\"line\">    output: &#123;</span><br><span class=\"line\">    filename: <span class=\"string\">'[name].bundle.js'</span>,</span><br><span class=\"line\">    path: path.resolve(__dirname, <span class=\"string\">'dist'</span>)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>结论: 在没有使用该插件时，配置了多个入口，每个入口中都会存在共同使用的模块，代码就出现了重复。使用之后，共同使用的代码，会被创建在一个新的，单独的文件中。</p>\n</li>\n</ol>\n</li>\n</ul>\n</li>\n</ol>\n<h1 id=\"Development\"><a href=\"#Development\" class=\"headerlink\" title=\"Development\"></a>Development</h1><p>开发时，我们需要做一些设置，使开发变得容易。</p>\n<ol>\n<li><p>Using source maps</p>\n<ul>\n<li>描述: 在使用webpack创建代码时，我们很难通过错误和警告去追踪源代码位置。</li>\n<li><p>配置: </p>\n  <figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">module</span>.exports = &#123;</span><br><span class=\"line\">    entry: &#123;</span><br><span class=\"line\">    app: <span class=\"string\">'./src/index.js'</span>,</span><br><span class=\"line\">    print: <span class=\"string\">'./src/print.js'</span></span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">+   devtool: <span class=\"string\">'inline-source-map'</span>,</span><br><span class=\"line\">    plugins: [</span><br><span class=\"line\">    <span class=\"keyword\">new</span> CleanWebpackPlugin([<span class=\"string\">'dist'</span>]),</span><br><span class=\"line\">    <span class=\"keyword\">new</span> HtmlWebpackPlugin(&#123;</span><br><span class=\"line\">        title: <span class=\"string\">'Development'</span></span><br><span class=\"line\">    &#125;)</span><br><span class=\"line\">    ],</span><br><span class=\"line\">    output: &#123;</span><br><span class=\"line\">    filename: <span class=\"string\">'[name].bundle.js'</span>,</span><br><span class=\"line\">    path: path.resolve(__dirname, <span class=\"string\">'dist'</span>)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n<ol start=\"3\">\n<li>结论: 在devtool属性中配置 <code>inline-source-map</code>之后，我们将可以在控制台中找到出错的行数，并可以链接进源代码。</li>\n</ol>\n</li>\n<li><p>Using Watch Mode</p>\n<ul>\n<li>描述: 如果每次修改源代码，我们都要去手动创建一次，这是一件很麻烦的事。</li>\n<li><p>配置: </p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"string\">\"scripts\"</span>: &#123;</span><br><span class=\"line\">    <span class=\"string\">\"test\"</span>: <span class=\"string\">\"echo \\\"Error: no test specified\\\" &amp;&amp; exit 1\"</span>,</span><br><span class=\"line\">    +<span class=\"string\">\"watch\"</span>: <span class=\"string\">\"webpack --watch\"</span>,</span><br><span class=\"line\">    <span class=\"string\">\"build\"</span>: <span class=\"string\">\"webpack\"</span></span><br><span class=\"line\">&#125;,</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>结论: 添加watch参数，每次修改源代码之后，webpack会帮忙自动创建。</p>\n</li>\n</ul>\n</li>\n<li><p>Using webpack-dev-server</p>\n<ul>\n<li>描述: 提供一个简单的web服务器，并且能够自动刷新页面。</li>\n<li>安装: <code>npm install --save-dev webpack-dev-server</code></li>\n<li><p>配置: </p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> path = <span class=\"built_in\">require</span>(<span class=\"string\">'path'</span>);</span><br><span class=\"line\"><span class=\"keyword\">const</span> HtmlWebpackPlugin = <span class=\"built_in\">require</span>(<span class=\"string\">'html-webpack-plugin'</span>);</span><br><span class=\"line\"><span class=\"keyword\">const</span> CleanWebpackPlugin = <span class=\"built_in\">require</span>(<span class=\"string\">'clean-webpack-plugin'</span>);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">module</span>.exports = &#123;</span><br><span class=\"line\">    entry: &#123;</span><br><span class=\"line\">    app: <span class=\"string\">'./src/index.js'</span>,</span><br><span class=\"line\">    print: <span class=\"string\">'./src/print.js'</span></span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    devtool: <span class=\"string\">'inline-source-map'</span>,</span><br><span class=\"line\">+   devServer: &#123;</span><br><span class=\"line\">+     contentBase: <span class=\"string\">'./dist'</span></span><br><span class=\"line\">+   &#125;,</span><br><span class=\"line\">    plugins: [</span><br><span class=\"line\">    <span class=\"keyword\">new</span> CleanWebpackPlugin([<span class=\"string\">'dist'</span>]),</span><br><span class=\"line\">    <span class=\"keyword\">new</span> HtmlWebpackPlugin(&#123;</span><br><span class=\"line\">        title: <span class=\"string\">'Development'</span></span><br><span class=\"line\">    &#125;)</span><br><span class=\"line\">    ],</span><br><span class=\"line\">    output: &#123;</span><br><span class=\"line\">    filename: <span class=\"string\">'[name].bundle.js'</span>,</span><br><span class=\"line\">    path: path.resolve(__dirname, <span class=\"string\">'dist'</span>)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n<ul>\n<li>添加npm执行脚本: <code>&quot;start&quot;: &quot;webpack-dev-server --open&quot;</code></li>\n</ul>\n</li>\n</ul>\n</li>\n</ol>\n<h1 id=\"Production\"><a href=\"#Production\" class=\"headerlink\" title=\"Production\"></a>Production</h1><p>如何添加一个产品配置？我们需要将产品和开发时相同的配置提取出来，通过npm脚本传入不同的参数，在产品和开发时使用不同的webpack配置。</p>\n<ol>\n<li>安装: <code>npm install --save-dev webpack-merge</code></li>\n<li><p>配置:</p>\n <figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">project: </span><br><span class=\"line\"></span><br><span class=\"line\">    webpack-demo</span><br><span class=\"line\">    |- package.json</span><br><span class=\"line\">    - |- webpack.config.js</span><br><span class=\"line\">    + |- webpack.common.js</span><br><span class=\"line\">    + |- webpack.dev.js</span><br><span class=\"line\">    + |- webpack.prod.js</span><br><span class=\"line\">    |- <span class=\"regexp\">/dist</span></span><br><span class=\"line\"><span class=\"regexp\">    |- /</span>src</span><br><span class=\"line\">        |- index.js</span><br><span class=\"line\">        |- math.js</span><br><span class=\"line\">    |- <span class=\"regexp\">/node_modules</span></span><br><span class=\"line\"><span class=\"regexp\"></span></span><br><span class=\"line\"><span class=\"regexp\">webpack.common.js</span></span><br><span class=\"line\"><span class=\"regexp\"></span></span><br><span class=\"line\"><span class=\"regexp\">    + const path = require('path');</span></span><br><span class=\"line\"><span class=\"regexp\">    + const CleanWebpackPlugin = require('clean-webpack-plugin');</span></span><br><span class=\"line\"><span class=\"regexp\">    + const HtmlWebpackPlugin = require('html-webpack-plugin');</span></span><br><span class=\"line\"><span class=\"regexp\">    +</span></span><br><span class=\"line\"><span class=\"regexp\">    + module.exports = &#123;</span></span><br><span class=\"line\"><span class=\"regexp\">    +   entry: &#123;</span></span><br><span class=\"line\"><span class=\"regexp\">    +     app: './</span>src/index.js<span class=\"string\">'</span></span><br><span class=\"line\"><span class=\"string\">    +   &#125;,</span></span><br><span class=\"line\"><span class=\"string\">    +   plugins: [</span></span><br><span class=\"line\"><span class=\"string\">    +     new CleanWebpackPlugin(['</span>dist<span class=\"string\">']),</span></span><br><span class=\"line\"><span class=\"string\">    +     new HtmlWebpackPlugin(&#123;</span></span><br><span class=\"line\"><span class=\"string\">    +       title: '</span>Production<span class=\"string\">'</span></span><br><span class=\"line\"><span class=\"string\">    +     &#125;)</span></span><br><span class=\"line\"><span class=\"string\">    +   ],</span></span><br><span class=\"line\"><span class=\"string\">    +   output: &#123;</span></span><br><span class=\"line\"><span class=\"string\">    +     filename: '</span>[name].bundle.js<span class=\"string\">',</span></span><br><span class=\"line\"><span class=\"string\">    +     path: path.resolve(__dirname, '</span>dist<span class=\"string\">')</span></span><br><span class=\"line\"><span class=\"string\">    +   &#125;</span></span><br><span class=\"line\"><span class=\"string\">    + &#125;;</span></span><br><span class=\"line\"><span class=\"string\"></span></span><br><span class=\"line\"><span class=\"string\">webpack.dev.js</span></span><br><span class=\"line\"><span class=\"string\"></span></span><br><span class=\"line\"><span class=\"string\">    + const merge = require('</span>webpack-merge<span class=\"string\">');</span></span><br><span class=\"line\"><span class=\"string\">    + const common = require('</span>./webpack.common.js<span class=\"string\">');</span></span><br><span class=\"line\"><span class=\"string\">    +</span></span><br><span class=\"line\"><span class=\"string\">    + module.exports = merge(common, &#123;</span></span><br><span class=\"line\"><span class=\"string\">    +   devtool: '</span>inline-source-map<span class=\"string\">',</span></span><br><span class=\"line\"><span class=\"string\">    +   devServer: &#123;</span></span><br><span class=\"line\"><span class=\"string\">    +     contentBase: '</span>./dist<span class=\"string\">'</span></span><br><span class=\"line\"><span class=\"string\">    +   &#125;</span></span><br><span class=\"line\"><span class=\"string\">    + &#125;);</span></span><br><span class=\"line\"><span class=\"string\"></span></span><br><span class=\"line\"><span class=\"string\">webpack.prod.js</span></span><br><span class=\"line\"><span class=\"string\"></span></span><br><span class=\"line\"><span class=\"string\">    + const merge = require('</span>webpack-merge<span class=\"string\">');</span></span><br><span class=\"line\"><span class=\"string\">    + const webpack = require('</span>webpack<span class=\"string\">');</span></span><br><span class=\"line\"><span class=\"string\">    + const UglifyJSPlugin = require('</span>uglifyjs-webpack-plugin<span class=\"string\">');</span></span><br><span class=\"line\"><span class=\"string\">    + const common = require('</span>./webpack.common.js<span class=\"string\">');</span></span><br><span class=\"line\"><span class=\"string\">    +</span></span><br><span class=\"line\"><span class=\"string\">    + module.exports = merge(common, &#123;</span></span><br><span class=\"line\"><span class=\"string\">    +   devtool: '</span>source-map,</span><br><span class=\"line\">    +   plugins: [</span><br><span class=\"line\">    +     <span class=\"keyword\">new</span> UglifyJSPlugin(&#123;</span><br><span class=\"line\">    +        sourceMap: <span class=\"literal\">true</span></span><br><span class=\"line\">    +    &#125;),</span><br><span class=\"line\">    +     <span class=\"keyword\">new</span> webpack.DefinePlugin(&#123;</span><br><span class=\"line\">    +        <span class=\"string\">'process.env.NODE_ENV'</span>: <span class=\"built_in\">JSON</span>.stringify    +     (<span class=\"string\">'produdction)</span></span><br><span class=\"line\"><span class=\"string\">    +      &#125;)</span></span><br><span class=\"line\"><span class=\"string\">    +   ]</span></span><br><span class=\"line\"><span class=\"string\">    + &#125;);</span></span><br><span class=\"line\"><span class=\"string\"></span></span><br><span class=\"line\"><span class=\"string\">NPM Scripts</span></span><br><span class=\"line\"><span class=\"string\"></span></span><br><span class=\"line\"><span class=\"string\">    &#123;</span></span><br><span class=\"line\"><span class=\"string\">        \"name\": \"development\",</span></span><br><span class=\"line\"><span class=\"string\">        \"version\": \"1.0.0\",</span></span><br><span class=\"line\"><span class=\"string\">        \"description\": \"\",</span></span><br><span class=\"line\"><span class=\"string\">        \"main\": \"webpack.config.js\",</span></span><br><span class=\"line\"><span class=\"string\">        \"scripts\": &#123;</span></span><br><span class=\"line\"><span class=\"string\">    -     \"start\": \"webpack-dev-server --open\",</span></span><br><span class=\"line\"><span class=\"string\">    +     \"start\": \"webpack-dev-server --open --config webpack.dev.js\",</span></span><br><span class=\"line\"><span class=\"string\">    -     \"build\": \"webpack\"</span></span><br><span class=\"line\"><span class=\"string\">    +     \"build\": \"webpack --config webpack.prod.js\"</span></span><br><span class=\"line\"><span class=\"string\">        &#125;,</span></span><br><span class=\"line\"><span class=\"string\">        \"keywords\": [],</span></span><br><span class=\"line\"><span class=\"string\">        \"author\": \"\",</span></span><br><span class=\"line\"><span class=\"string\">        \"license\": \"ISC\",</span></span><br><span class=\"line\"><span class=\"string\">        \"devDependencies\": &#123;</span></span><br><span class=\"line\"><span class=\"string\">        \"clean-webpack-plugin\": \"^0.1.17\",</span></span><br><span class=\"line\"><span class=\"string\">        \"css-loader\": \"^0.28.4\",</span></span><br><span class=\"line\"><span class=\"string\">        \"csv-loader\": \"^2.1.1\",</span></span><br><span class=\"line\"><span class=\"string\">        \"express\": \"^4.15.3\",</span></span><br><span class=\"line\"><span class=\"string\">        \"file-loader\": \"^0.11.2\",</span></span><br><span class=\"line\"><span class=\"string\">        \"html-webpack-plugin\": \"^2.29.0\",</span></span><br><span class=\"line\"><span class=\"string\">        \"style-loader\": \"^0.18.2\",</span></span><br><span class=\"line\"><span class=\"string\">        \"webpack\": \"^3.0.0\",</span></span><br><span class=\"line\"><span class=\"string\">        \"webpack-dev-middleware\": \"^1.12.0\",</span></span><br><span class=\"line\"><span class=\"string\">        \"webpack-dev-server\": \"^2.9.1\",</span></span><br><span class=\"line\"><span class=\"string\">        \"webpack-merge\": \"^4.1.0\",</span></span><br><span class=\"line\"><span class=\"string\">        \"xml-loader\": \"^1.2.1\"</span></span><br><span class=\"line\"><span class=\"string\">        &#125;</span></span><br><span class=\"line\"><span class=\"string\">    &#125;</span></span><br></pre></td></tr></table></figure>\n</li>\n</ol>\n<h1 id=\"其他功能：Split-CSS\"><a href=\"#其他功能：Split-CSS\" class=\"headerlink\" title=\"其他功能：Split CSS\"></a>其他功能：Split CSS</h1><ol>\n<li>安装: <code>npm install --save-dev extract-text-webpack-plugin</code></li>\n<li><p>配置:</p>\n <figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> ExtractTextPlugin = <span class=\"built_in\">require</span>(<span class=\"string\">\"extract-text-webpack-plugin\"</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"built_in\">module</span>.exports = &#123;</span><br><span class=\"line\">    <span class=\"built_in\">module</span>: &#123;</span><br><span class=\"line\">        rules: [</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            test: <span class=\"regexp\">/\\.css$/</span>,</span><br><span class=\"line\">            use: ExtractTextPlugin.extract(&#123;</span><br><span class=\"line\">            fallback: <span class=\"string\">\"style-loader\"</span>,</span><br><span class=\"line\">            use: <span class=\"string\">\"css-loader\"</span></span><br><span class=\"line\">            &#125;)</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        ]</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    plugins: [</span><br><span class=\"line\">        <span class=\"keyword\">new</span> ExtractTextPlugin(<span class=\"string\">\"styles.css\"</span>),</span><br><span class=\"line\">    ]</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n</li>\n</ol>\n","site":{"data":{"projects":[{"name":"AiTing","url":"https://github.com/renhongl/aiting","desc":"HTML5客户端音乐播放器"},{"name":"AiLiao","url":"https://github.com/renhongl/ailiao","desc":"网页聊天软件"},{"name":"Pomelo Editor","url":"https://renhongl.github.io/markdown-editor/","desc":"功能强大的在线Markdown编辑器"}]}},"excerpt":"","more":"<h1 id=\"什么是Webpack\"><a href=\"#什么是Webpack\" class=\"headerlink\" title=\"什么是Webpack\"></a>什么是Webpack</h1><p>Webpack是一个静态模块打包工具。将一切文件视为模块，可以像引入JavaScript文件一样，在代码中引入。</p>\n<h1 id=\"Entry-Points\"><a href=\"#Entry-Points\" class=\"headerlink\" title=\"Entry Points\"></a>Entry Points</h1><p>入口点，就是打包的起始文件。有多种定义方式。</p>\n<ol>\n<li><p>单入口，使用字符串:</p>\n <figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> config = &#123;</span><br><span class=\"line\">    entry: <span class=\"string\">'./path/to/my/entry/file.js'</span></span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"><span class=\"built_in\">module</span>.exports = config;</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>多入口，使用对象语法：</p>\n <figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> config = &#123;</span><br><span class=\"line\">    entry: &#123;</span><br><span class=\"line\">        app: <span class=\"string\">'./src/app.js'</span>,</span><br><span class=\"line\">        vendors: <span class=\"string\">'./src/vendors.js'</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n</li>\n</ol>\n<h1 id=\"Output\"><a href=\"#Output\" class=\"headerlink\" title=\"Output\"></a>Output</h1><p>输出，告诉webpack怎样将编译后的文件写入磁盘。输出只有一个。</p>\n<ol>\n<li><p>基本用法:</p>\n <figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> config = &#123;</span><br><span class=\"line\">    output: &#123;</span><br><span class=\"line\">        filename: <span class=\"string\">'bundle.js'</span>,</span><br><span class=\"line\">        path: <span class=\"string\">'/home/proj/public/assets'</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"><span class=\"built_in\">module</span>.exports = config;</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>多入口点的用法:</p>\n <figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#123;</span><br><span class=\"line\">    entry: &#123;</span><br><span class=\"line\">        app: <span class=\"string\">'./src/app.js'</span>,</span><br><span class=\"line\">        search: <span class=\"string\">'./src/search.js'</span></span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    output: &#123;</span><br><span class=\"line\">        filename: <span class=\"string\">'[name].js'</span>,</span><br><span class=\"line\">        path: __dirname + <span class=\"string\">'/dist'</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">// writes to disk: ./dist/app.js, ./dist/search.js</span></span><br></pre></td></tr></table></figure>\n</li>\n</ol>\n<h1 id=\"Loaders\"><a href=\"#Loaders\" class=\"headerlink\" title=\"Loaders\"></a>Loaders</h1><p>装载机，用于转换一个模块的源代码。类似于其他打包工具的任务功能。它允许你讲其他语言转换成JavaScript，或者像引入JavaScript文件一样引入图片，数据,CSS文件等。</p>\n<ol>\n<li><p>安装: <code>npm install --save-dev style-loader css-loader</code></p>\n</li>\n<li><p>配置:</p>\n <figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"> <span class=\"built_in\">module</span>: &#123;</span><br><span class=\"line\">    rules: [</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        test: <span class=\"regexp\">/\\.css$/</span>,</span><br><span class=\"line\">        use: [</span><br><span class=\"line\">        &#123; <span class=\"attr\">loader</span>: <span class=\"string\">'style-loader'</span> &#125;,</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            loader: <span class=\"string\">'css-loader'</span>,</span><br><span class=\"line\">            options: &#123;</span><br><span class=\"line\">            modules: <span class=\"literal\">true</span></span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        ]</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    ]</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n</li>\n</ol>\n<h1 id=\"Plugins\"><a href=\"#Plugins\" class=\"headerlink\" title=\"Plugins\"></a>Plugins</h1><p>插件，是webpack的支柱，webpack本身就是创建在same plugin system之上的。它用来做loader不能做的事。</p>\n<ol>\n<li><p>插件的结构：是一个有apply属性的JavaScript对象。apply属性会被webpack编译器调用，用于整个编译周期。</p>\n</li>\n<li><p>基本用法：</p>\n <figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//installed via npm</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> HtmlWebpackPlugin = <span class=\"built_in\">require</span>(<span class=\"string\">'html-webpack-plugin'</span>); </span><br><span class=\"line\"><span class=\"keyword\">const</span> webpack = <span class=\"built_in\">require</span>(<span class=\"string\">'webpack'</span>); <span class=\"comment\">//to access built-in plugins</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> path = <span class=\"built_in\">require</span>(<span class=\"string\">'path'</span>);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> config = &#123;</span><br><span class=\"line\">    entry: <span class=\"string\">'./path/to/my/entry/file.js'</span>,</span><br><span class=\"line\">    output: &#123;</span><br><span class=\"line\">        filename: <span class=\"string\">'my-first-webpack.bundle.js'</span>,</span><br><span class=\"line\">        path: path.resolve(__dirname, <span class=\"string\">'dist'</span>)</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    <span class=\"built_in\">module</span>: &#123;</span><br><span class=\"line\">        rules: [</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            test: <span class=\"regexp\">/\\.(js|jsx)$/</span>,</span><br><span class=\"line\">            use: <span class=\"string\">'babel-loader'</span></span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        ]</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    plugins: [</span><br><span class=\"line\">        <span class=\"keyword\">new</span> webpack.optimize.UglifyJsPlugin(),</span><br><span class=\"line\">        <span class=\"keyword\">new</span> HtmlWebpackPlugin(&#123;<span class=\"attr\">template</span>: <span class=\"string\">'./src/index.html'</span>&#125;)</span><br><span class=\"line\">    ]</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"><span class=\"built_in\">module</span>.exports = config;</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>常用插件：</p>\n<ul>\n<li><p>html-webpack-plugin（输出控制的插件）</p>\n<ol>\n<li>安装: <code>npm install --save-dev html-webpack-plugin</code></li>\n<li>配置: </li>\n</ol>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> path = <span class=\"built_in\">require</span>(<span class=\"string\">'path'</span>);</span><br><span class=\"line\">+ <span class=\"keyword\">const</span> HtmlWebpackPlugin = <span class=\"built_in\">require</span>(<span class=\"string\">'html-webpack-plugin'</span>);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">module</span>.exports = &#123;</span><br><span class=\"line\">    entry: &#123;</span><br><span class=\"line\">    app: <span class=\"string\">'./src/index.js'</span>,</span><br><span class=\"line\">    print: <span class=\"string\">'./src/print.js'</span></span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">+   plugins: [</span><br><span class=\"line\">+     <span class=\"keyword\">new</span> HtmlWebpackPlugin(&#123;</span><br><span class=\"line\">+       title: <span class=\"string\">'Output Management'</span></span><br><span class=\"line\">+     &#125;)</span><br><span class=\"line\">+   ],</span><br><span class=\"line\">    output: &#123;</span><br><span class=\"line\">    filename: <span class=\"string\">'[name].bundle.js'</span>,</span><br><span class=\"line\">    path: path.resolve(__dirname, <span class=\"string\">'dist'</span>)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n<ol start=\"3\">\n<li>结论：使用该插件，每次创建会将index.html替换掉，自动引入多个入口的JavaScript文件。当我们在配置中新增、修改入口点时，就不用手动修改源代码。</li>\n</ol>\n</li>\n<li><p>clean-webpack-plugin(清理/dist文件夹)</p>\n<ol>\n<li>安装: <code>npm install --save-dev clen-webpack-plugin</code></li>\n<li><p>配置：</p>\n   <figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> path = <span class=\"built_in\">require</span>(<span class=\"string\">'path'</span>);</span><br><span class=\"line\"><span class=\"keyword\">const</span> HtmlWebpackPlugin = <span class=\"built_in\">require</span>(<span class=\"string\">'html-webpack-plugin'</span>);</span><br><span class=\"line\"> + <span class=\"keyword\">const</span> CleanWebpackPlugin = <span class=\"built_in\">require</span>(<span class=\"string\">'clean-webpack-plugin'</span>);</span><br><span class=\"line\">            <span class=\"built_in\">module</span>.exports = &#123;</span><br><span class=\"line\">                entry: &#123;</span><br><span class=\"line\">                app: <span class=\"string\">'./src/index.js'</span>,</span><br><span class=\"line\">                print: <span class=\"string\">'./src/print.js'</span></span><br><span class=\"line\">                &#125;,</span><br><span class=\"line\">                plugins: [</span><br><span class=\"line\">        + <span class=\"keyword\">new</span> CleanWebpackPlugin([<span class=\"string\">'dist'</span>]),</span><br><span class=\"line\">                  <span class=\"keyword\">new</span> HtmlWebpackPlugin(&#123;</span><br><span class=\"line\">                      title: <span class=\"string\">'Output Management'</span></span><br><span class=\"line\">                  &#125;)</span><br><span class=\"line\">                ],</span><br><span class=\"line\">                output: &#123;</span><br><span class=\"line\">                filename: <span class=\"string\">'[name].bundle.js'</span>,</span><br><span class=\"line\">                path: path.resolve(__dirname, <span class=\"string\">'dist'</span>)</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">           &#125;;</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>结论：创建之后，不会再有旧文件，只有刚生成的文件。</p>\n</li>\n</ol>\n</li>\n<li><p>uglifyjs-webpack-plugin(Tree shaking插件，用于去除为使用的代码，以及最小化代码)</p>\n<ol>\n<li>安装: <code>npm install --save-dev uglifyjs-webpack-plugin</code></li>\n<li><p>配置:</p>\n <figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> path = <span class=\"built_in\">require</span>(<span class=\"string\">'path'</span>);</span><br><span class=\"line\">+ <span class=\"keyword\">const</span> UglifyJSPlugin = <span class=\"built_in\">require</span>(<span class=\"string\">'uglifyjs-webpack-plugin'</span>);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">module</span>.exports = &#123;</span><br><span class=\"line\">    entry: <span class=\"string\">'./src/index.js'</span>,</span><br><span class=\"line\">    output: &#123;</span><br><span class=\"line\">        filename: <span class=\"string\">'bundle.js'</span>,</span><br><span class=\"line\">        path: path.resolve(__dirname, <span class=\"string\">'dist'</span>)</span><br><span class=\"line\">    - &#125;</span><br><span class=\"line\">    + &#125;,</span><br><span class=\"line\">    + plugins: [</span><br><span class=\"line\">    +   <span class=\"keyword\">new</span> UglifyJSPlugin()</span><br><span class=\"line\">    + ]</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>结论：创建后，最小化了代码文件，并且没有将未使用的代码创建进来。就像一棵树，源代码像绿色的活着的叶子，死代码像秋天到了棕色的，死了的叶子，通过摇动这棵树，将死去的叶子摇下。</p>\n</li>\n</ol>\n</li>\n<li><p>CommonsChunkPlugin(代码分裂插件)</p>\n<ol>\n<li>安装: 属于webpack内建插件</li>\n<li><p>配置: </p>\n <figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> path = <span class=\"built_in\">require</span>(<span class=\"string\">'path'</span>);</span><br><span class=\"line\">+ <span class=\"keyword\">const</span> webpack = <span class=\"built_in\">require</span>(<span class=\"string\">'webpack'</span>);</span><br><span class=\"line\"><span class=\"keyword\">const</span> HTMLWebpackPlugin = <span class=\"built_in\">require</span>(<span class=\"string\">'html-webpack-plugin'</span>);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">module</span>.exports = &#123;</span><br><span class=\"line\">    entry: &#123;</span><br><span class=\"line\">    index: <span class=\"string\">'./src/index.js'</span>,</span><br><span class=\"line\">    another: <span class=\"string\">'./src/another-module.js'</span></span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    plugins: [</span><br><span class=\"line\">    <span class=\"keyword\">new</span> HTMLWebpackPlugin(&#123;</span><br><span class=\"line\">        title: <span class=\"string\">'Code Splitting'</span></span><br><span class=\"line\">-     &#125;)</span><br><span class=\"line\">+     &#125;),</span><br><span class=\"line\">+     <span class=\"keyword\">new</span> webpack.optimize.CommonsChunkPlugin(&#123;</span><br><span class=\"line\">+       name: <span class=\"string\">'common'</span> <span class=\"comment\">// Specify the common bundle's name.</span></span><br><span class=\"line\">+     &#125;)</span><br><span class=\"line\">    ],</span><br><span class=\"line\">    output: &#123;</span><br><span class=\"line\">    filename: <span class=\"string\">'[name].bundle.js'</span>,</span><br><span class=\"line\">    path: path.resolve(__dirname, <span class=\"string\">'dist'</span>)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>结论: 在没有使用该插件时，配置了多个入口，每个入口中都会存在共同使用的模块，代码就出现了重复。使用之后，共同使用的代码，会被创建在一个新的，单独的文件中。</p>\n</li>\n</ol>\n</li>\n</ul>\n</li>\n</ol>\n<h1 id=\"Development\"><a href=\"#Development\" class=\"headerlink\" title=\"Development\"></a>Development</h1><p>开发时，我们需要做一些设置，使开发变得容易。</p>\n<ol>\n<li><p>Using source maps</p>\n<ul>\n<li>描述: 在使用webpack创建代码时，我们很难通过错误和警告去追踪源代码位置。</li>\n<li><p>配置: </p>\n  <figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">module</span>.exports = &#123;</span><br><span class=\"line\">    entry: &#123;</span><br><span class=\"line\">    app: <span class=\"string\">'./src/index.js'</span>,</span><br><span class=\"line\">    print: <span class=\"string\">'./src/print.js'</span></span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">+   devtool: <span class=\"string\">'inline-source-map'</span>,</span><br><span class=\"line\">    plugins: [</span><br><span class=\"line\">    <span class=\"keyword\">new</span> CleanWebpackPlugin([<span class=\"string\">'dist'</span>]),</span><br><span class=\"line\">    <span class=\"keyword\">new</span> HtmlWebpackPlugin(&#123;</span><br><span class=\"line\">        title: <span class=\"string\">'Development'</span></span><br><span class=\"line\">    &#125;)</span><br><span class=\"line\">    ],</span><br><span class=\"line\">    output: &#123;</span><br><span class=\"line\">    filename: <span class=\"string\">'[name].bundle.js'</span>,</span><br><span class=\"line\">    path: path.resolve(__dirname, <span class=\"string\">'dist'</span>)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n<ol start=\"3\">\n<li>结论: 在devtool属性中配置 <code>inline-source-map</code>之后，我们将可以在控制台中找到出错的行数，并可以链接进源代码。</li>\n</ol>\n</li>\n<li><p>Using Watch Mode</p>\n<ul>\n<li>描述: 如果每次修改源代码，我们都要去手动创建一次，这是一件很麻烦的事。</li>\n<li><p>配置: </p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"string\">\"scripts\"</span>: &#123;</span><br><span class=\"line\">    <span class=\"string\">\"test\"</span>: <span class=\"string\">\"echo \\\"Error: no test specified\\\" &amp;&amp; exit 1\"</span>,</span><br><span class=\"line\">    +<span class=\"string\">\"watch\"</span>: <span class=\"string\">\"webpack --watch\"</span>,</span><br><span class=\"line\">    <span class=\"string\">\"build\"</span>: <span class=\"string\">\"webpack\"</span></span><br><span class=\"line\">&#125;,</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>结论: 添加watch参数，每次修改源代码之后，webpack会帮忙自动创建。</p>\n</li>\n</ul>\n</li>\n<li><p>Using webpack-dev-server</p>\n<ul>\n<li>描述: 提供一个简单的web服务器，并且能够自动刷新页面。</li>\n<li>安装: <code>npm install --save-dev webpack-dev-server</code></li>\n<li><p>配置: </p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> path = <span class=\"built_in\">require</span>(<span class=\"string\">'path'</span>);</span><br><span class=\"line\"><span class=\"keyword\">const</span> HtmlWebpackPlugin = <span class=\"built_in\">require</span>(<span class=\"string\">'html-webpack-plugin'</span>);</span><br><span class=\"line\"><span class=\"keyword\">const</span> CleanWebpackPlugin = <span class=\"built_in\">require</span>(<span class=\"string\">'clean-webpack-plugin'</span>);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">module</span>.exports = &#123;</span><br><span class=\"line\">    entry: &#123;</span><br><span class=\"line\">    app: <span class=\"string\">'./src/index.js'</span>,</span><br><span class=\"line\">    print: <span class=\"string\">'./src/print.js'</span></span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    devtool: <span class=\"string\">'inline-source-map'</span>,</span><br><span class=\"line\">+   devServer: &#123;</span><br><span class=\"line\">+     contentBase: <span class=\"string\">'./dist'</span></span><br><span class=\"line\">+   &#125;,</span><br><span class=\"line\">    plugins: [</span><br><span class=\"line\">    <span class=\"keyword\">new</span> CleanWebpackPlugin([<span class=\"string\">'dist'</span>]),</span><br><span class=\"line\">    <span class=\"keyword\">new</span> HtmlWebpackPlugin(&#123;</span><br><span class=\"line\">        title: <span class=\"string\">'Development'</span></span><br><span class=\"line\">    &#125;)</span><br><span class=\"line\">    ],</span><br><span class=\"line\">    output: &#123;</span><br><span class=\"line\">    filename: <span class=\"string\">'[name].bundle.js'</span>,</span><br><span class=\"line\">    path: path.resolve(__dirname, <span class=\"string\">'dist'</span>)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n<ul>\n<li>添加npm执行脚本: <code>&quot;start&quot;: &quot;webpack-dev-server --open&quot;</code></li>\n</ul>\n</li>\n</ul>\n</li>\n</ol>\n<h1 id=\"Production\"><a href=\"#Production\" class=\"headerlink\" title=\"Production\"></a>Production</h1><p>如何添加一个产品配置？我们需要将产品和开发时相同的配置提取出来，通过npm脚本传入不同的参数，在产品和开发时使用不同的webpack配置。</p>\n<ol>\n<li>安装: <code>npm install --save-dev webpack-merge</code></li>\n<li><p>配置:</p>\n <figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">project: </span><br><span class=\"line\"></span><br><span class=\"line\">    webpack-demo</span><br><span class=\"line\">    |- package.json</span><br><span class=\"line\">    - |- webpack.config.js</span><br><span class=\"line\">    + |- webpack.common.js</span><br><span class=\"line\">    + |- webpack.dev.js</span><br><span class=\"line\">    + |- webpack.prod.js</span><br><span class=\"line\">    |- <span class=\"regexp\">/dist</span></span><br><span class=\"line\"><span class=\"regexp\">    |- /</span>src</span><br><span class=\"line\">        |- index.js</span><br><span class=\"line\">        |- math.js</span><br><span class=\"line\">    |- <span class=\"regexp\">/node_modules</span></span><br><span class=\"line\"><span class=\"regexp\"></span></span><br><span class=\"line\"><span class=\"regexp\">webpack.common.js</span></span><br><span class=\"line\"><span class=\"regexp\"></span></span><br><span class=\"line\"><span class=\"regexp\">    + const path = require('path');</span></span><br><span class=\"line\"><span class=\"regexp\">    + const CleanWebpackPlugin = require('clean-webpack-plugin');</span></span><br><span class=\"line\"><span class=\"regexp\">    + const HtmlWebpackPlugin = require('html-webpack-plugin');</span></span><br><span class=\"line\"><span class=\"regexp\">    +</span></span><br><span class=\"line\"><span class=\"regexp\">    + module.exports = &#123;</span></span><br><span class=\"line\"><span class=\"regexp\">    +   entry: &#123;</span></span><br><span class=\"line\"><span class=\"regexp\">    +     app: './</span>src/index.js<span class=\"string\">'</span></span><br><span class=\"line\"><span class=\"string\">    +   &#125;,</span></span><br><span class=\"line\"><span class=\"string\">    +   plugins: [</span></span><br><span class=\"line\"><span class=\"string\">    +     new CleanWebpackPlugin(['</span>dist<span class=\"string\">']),</span></span><br><span class=\"line\"><span class=\"string\">    +     new HtmlWebpackPlugin(&#123;</span></span><br><span class=\"line\"><span class=\"string\">    +       title: '</span>Production<span class=\"string\">'</span></span><br><span class=\"line\"><span class=\"string\">    +     &#125;)</span></span><br><span class=\"line\"><span class=\"string\">    +   ],</span></span><br><span class=\"line\"><span class=\"string\">    +   output: &#123;</span></span><br><span class=\"line\"><span class=\"string\">    +     filename: '</span>[name].bundle.js<span class=\"string\">',</span></span><br><span class=\"line\"><span class=\"string\">    +     path: path.resolve(__dirname, '</span>dist<span class=\"string\">')</span></span><br><span class=\"line\"><span class=\"string\">    +   &#125;</span></span><br><span class=\"line\"><span class=\"string\">    + &#125;;</span></span><br><span class=\"line\"><span class=\"string\"></span></span><br><span class=\"line\"><span class=\"string\">webpack.dev.js</span></span><br><span class=\"line\"><span class=\"string\"></span></span><br><span class=\"line\"><span class=\"string\">    + const merge = require('</span>webpack-merge<span class=\"string\">');</span></span><br><span class=\"line\"><span class=\"string\">    + const common = require('</span>./webpack.common.js<span class=\"string\">');</span></span><br><span class=\"line\"><span class=\"string\">    +</span></span><br><span class=\"line\"><span class=\"string\">    + module.exports = merge(common, &#123;</span></span><br><span class=\"line\"><span class=\"string\">    +   devtool: '</span>inline-source-map<span class=\"string\">',</span></span><br><span class=\"line\"><span class=\"string\">    +   devServer: &#123;</span></span><br><span class=\"line\"><span class=\"string\">    +     contentBase: '</span>./dist<span class=\"string\">'</span></span><br><span class=\"line\"><span class=\"string\">    +   &#125;</span></span><br><span class=\"line\"><span class=\"string\">    + &#125;);</span></span><br><span class=\"line\"><span class=\"string\"></span></span><br><span class=\"line\"><span class=\"string\">webpack.prod.js</span></span><br><span class=\"line\"><span class=\"string\"></span></span><br><span class=\"line\"><span class=\"string\">    + const merge = require('</span>webpack-merge<span class=\"string\">');</span></span><br><span class=\"line\"><span class=\"string\">    + const webpack = require('</span>webpack<span class=\"string\">');</span></span><br><span class=\"line\"><span class=\"string\">    + const UglifyJSPlugin = require('</span>uglifyjs-webpack-plugin<span class=\"string\">');</span></span><br><span class=\"line\"><span class=\"string\">    + const common = require('</span>./webpack.common.js<span class=\"string\">');</span></span><br><span class=\"line\"><span class=\"string\">    +</span></span><br><span class=\"line\"><span class=\"string\">    + module.exports = merge(common, &#123;</span></span><br><span class=\"line\"><span class=\"string\">    +   devtool: '</span>source-map,</span><br><span class=\"line\">    +   plugins: [</span><br><span class=\"line\">    +     <span class=\"keyword\">new</span> UglifyJSPlugin(&#123;</span><br><span class=\"line\">    +        sourceMap: <span class=\"literal\">true</span></span><br><span class=\"line\">    +    &#125;),</span><br><span class=\"line\">    +     <span class=\"keyword\">new</span> webpack.DefinePlugin(&#123;</span><br><span class=\"line\">    +        <span class=\"string\">'process.env.NODE_ENV'</span>: <span class=\"built_in\">JSON</span>.stringify    +     (<span class=\"string\">'produdction)</span></span><br><span class=\"line\"><span class=\"string\">    +      &#125;)</span></span><br><span class=\"line\"><span class=\"string\">    +   ]</span></span><br><span class=\"line\"><span class=\"string\">    + &#125;);</span></span><br><span class=\"line\"><span class=\"string\"></span></span><br><span class=\"line\"><span class=\"string\">NPM Scripts</span></span><br><span class=\"line\"><span class=\"string\"></span></span><br><span class=\"line\"><span class=\"string\">    &#123;</span></span><br><span class=\"line\"><span class=\"string\">        \"name\": \"development\",</span></span><br><span class=\"line\"><span class=\"string\">        \"version\": \"1.0.0\",</span></span><br><span class=\"line\"><span class=\"string\">        \"description\": \"\",</span></span><br><span class=\"line\"><span class=\"string\">        \"main\": \"webpack.config.js\",</span></span><br><span class=\"line\"><span class=\"string\">        \"scripts\": &#123;</span></span><br><span class=\"line\"><span class=\"string\">    -     \"start\": \"webpack-dev-server --open\",</span></span><br><span class=\"line\"><span class=\"string\">    +     \"start\": \"webpack-dev-server --open --config webpack.dev.js\",</span></span><br><span class=\"line\"><span class=\"string\">    -     \"build\": \"webpack\"</span></span><br><span class=\"line\"><span class=\"string\">    +     \"build\": \"webpack --config webpack.prod.js\"</span></span><br><span class=\"line\"><span class=\"string\">        &#125;,</span></span><br><span class=\"line\"><span class=\"string\">        \"keywords\": [],</span></span><br><span class=\"line\"><span class=\"string\">        \"author\": \"\",</span></span><br><span class=\"line\"><span class=\"string\">        \"license\": \"ISC\",</span></span><br><span class=\"line\"><span class=\"string\">        \"devDependencies\": &#123;</span></span><br><span class=\"line\"><span class=\"string\">        \"clean-webpack-plugin\": \"^0.1.17\",</span></span><br><span class=\"line\"><span class=\"string\">        \"css-loader\": \"^0.28.4\",</span></span><br><span class=\"line\"><span class=\"string\">        \"csv-loader\": \"^2.1.1\",</span></span><br><span class=\"line\"><span class=\"string\">        \"express\": \"^4.15.3\",</span></span><br><span class=\"line\"><span class=\"string\">        \"file-loader\": \"^0.11.2\",</span></span><br><span class=\"line\"><span class=\"string\">        \"html-webpack-plugin\": \"^2.29.0\",</span></span><br><span class=\"line\"><span class=\"string\">        \"style-loader\": \"^0.18.2\",</span></span><br><span class=\"line\"><span class=\"string\">        \"webpack\": \"^3.0.0\",</span></span><br><span class=\"line\"><span class=\"string\">        \"webpack-dev-middleware\": \"^1.12.0\",</span></span><br><span class=\"line\"><span class=\"string\">        \"webpack-dev-server\": \"^2.9.1\",</span></span><br><span class=\"line\"><span class=\"string\">        \"webpack-merge\": \"^4.1.0\",</span></span><br><span class=\"line\"><span class=\"string\">        \"xml-loader\": \"^1.2.1\"</span></span><br><span class=\"line\"><span class=\"string\">        &#125;</span></span><br><span class=\"line\"><span class=\"string\">    &#125;</span></span><br></pre></td></tr></table></figure>\n</li>\n</ol>\n<h1 id=\"其他功能：Split-CSS\"><a href=\"#其他功能：Split-CSS\" class=\"headerlink\" title=\"其他功能：Split CSS\"></a>其他功能：Split CSS</h1><ol>\n<li>安装: <code>npm install --save-dev extract-text-webpack-plugin</code></li>\n<li><p>配置:</p>\n <figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> ExtractTextPlugin = <span class=\"built_in\">require</span>(<span class=\"string\">\"extract-text-webpack-plugin\"</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"built_in\">module</span>.exports = &#123;</span><br><span class=\"line\">    <span class=\"built_in\">module</span>: &#123;</span><br><span class=\"line\">        rules: [</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            test: <span class=\"regexp\">/\\.css$/</span>,</span><br><span class=\"line\">            use: ExtractTextPlugin.extract(&#123;</span><br><span class=\"line\">            fallback: <span class=\"string\">\"style-loader\"</span>,</span><br><span class=\"line\">            use: <span class=\"string\">\"css-loader\"</span></span><br><span class=\"line\">            &#125;)</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        ]</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    plugins: [</span><br><span class=\"line\">        <span class=\"keyword\">new</span> ExtractTextPlugin(<span class=\"string\">\"styles.css\"</span>),</span><br><span class=\"line\">    ]</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n</li>\n</ol>\n"},{"title":"应用平台WEB","date":"2016-11-24T11:51:29.000Z","_content":"\n\n![ap](/images/homeAndRoom.png)\n\n# 简介\n\n项目涉及技术：RequireJS, Vue.js, NodeJS, Express, MongoDB, Bootstrap, WebSocket, JQuery, ES2015。\n\n应用平台WEB版，是为了做一个网页版的APP store，也就是可以扩展出其他应用的一个平台。目前平台除了搭建了基本的结构之外，还做了一个简单的一对一聊天应用和简单的博客系统。下面将进行简单的介绍，源代码可在demo大师上下载：[源码](http://www.demodashi.com/demo/12539.html)，[github点赞](https://github.com/renhongl/ailiao)。\n# 图文介绍\n\n![ap](/images/signIn.png)\n\n这是登录页面，可以使用用户名和验证了的邮箱登录。\n\n![ap](/images/signUp.png)\n\n这是注册页面，很简单的注册一下。 \n\n![ap](/images/resetPwd.png)\n\n这是重置密码页面，需要通过验证邮箱的随机码，来实现重置密码。主要是通过后台服务器向邮箱发送信息。\n\n![ap](/images/chatHome.png)\n\n这是主模块，包含登录用户的信息显示，并且可以随意设置。可以修改头像，设置状态，还可以添加邮箱，设置是否有消息提示音和提示框。还有就是显示自己的好友分组信息。可以任意修改分组。\n\n![ap](/images/homeAndRoom.png)\n\n图的右边就是聊天的窗口，可以同时和多个人聊天，都会列在左边，点击就能切换聊天对象。窗口可以通过关闭所有聊天对象来关闭，或者通过右上角关闭按钮关闭。消息中可以发送一些表情。可以发送抖动窗口的消息。\n\n![ap](/images/docs.png)\n\n这个应用是聊天主页的按钮点击出来的，可以显示一些简单的文档，并且可以点击喜欢某个文档，以及添加简单的评论信息。\n\n# 后端部分代码介绍\n\n## Email.js\n\n用于发送邮件\n\n  ```js\n  'use strict';\n\tconst nodemailer = require('nodemailer');\n\tconst Config = require('./Config');\n\n\tclass Email {\n\t\tconstructor(to, subject, text, html) {\n\t\t\tthis.config = {\n\t\t\t\tservice: '126',\n\t\t\t\tauth: {\n\t\t\t\t\tuser: Config.EMAIL_SERVER,\n\t\t\t\t\tpass: Config.EMAIL_PWD            \n\t\t\t\t}\n\t\t\t};\n\t\t\tthis.mailOptions = {\n\t\t\t\tfrom: Config.EMAIL_SERVER,\n\t\t\t\tto: to,\n\t\t\t\tsubject: subject,\n\t\t\t\ttext: text,\n\t\t\t\t//html: html\n\t\t\t};\n\t\t\tthis._send();\n\t\t}\n\n\t\t_send() {\n\t\t\tlet transporter = nodemailer.createTransport(this.config);\n\t\t\ttransporter.sendMail(this.mailOptions, function (error, info) {\n\t\t\t\tif (error) {\n\t\t\t\t\treturn console.log(error);\n\t\t\t\t}\n\t\t\t\tconsole.log('Message sent: ' + info.response);\n\t\t\t\ttransporter.close();\n\t\t\t});\n\t\t}\n\t}\n\n\tmodule.exports = Email;\n  ```\n\n\n## Server.js\n作为服务器，并且是Websocket的父类。\n\n\n  ```js\n  'use strict';\n  const express = require('express');\n  const http = require('http');\n  const socket = require('socket.io');\n  const Router = require('./Router');\n  const bodyParser = require('body-parser');\n\n  class Server{\n      constructor(port){\n        this.port = port;\n        this.app = express();\n        this.server = http.createServer(this.app);\n        this.io = socket.listen(this.server);\n        this._run();\n      }\n    _run(){\n        this.server.listen(this.port);\n        this.app.use(bodyParser.json());\n        this.app.use(bodyParser.urlencoded({ extended: false }));\n        this.app.use(express.static(__dirname.replace(/server\\\\core/, 'app')));\n        new Router(this.app);\n        console.log('HTTP listening: 127.0.0.1:' + this.port);\n    }\n }\n\n module.exports = Server;\n  ```\n\n\n## User.js\n和用户相关的所有接口都在这里。下面是一个获取验证码的接口，在获取请求后，会随机生成五位数验证码，发送到用户的邮箱中，并且在生成验证码的同时，会调用删除验证码的方法，在一定时间内将此验证码删除，那么用户就不能再使用此验证码修改密码了。\n\n```js\n_getCode(){\n  this.app.get('/getCode', (req, res) => {\n    let email = req.query.email;\n    let code = '';\n    for(let i = 0; i < 5; i++){\n      code += Math.floor(Math.random() * 10);\n    }\n    let queryData = {\n      email: email\n    };\n    let updateData = {\n      code: code\n    };\n    let callback = (db) => {\n      let collection = db.collection(this.userCollection);\n      collection.updateOne(queryData, {$set: updateData}, (err, result) => {\n        assert.equal(null, err);\n        db.close();\n        if(result.result.n === 1){\n          new Email(email, '重置密码', '你的验证码是：' + code);\n          this._removeCode(email);\n          res.send({status: 'success', text: '验证码已发往你的邮箱，请查收。30分钟内有效。'});\n        }else{\n          res.send({status: 'error', text: '没有此邮箱，或许你需要注册账号。'});\n        }\n      });\n    };\n    new MongoDB(this.currentDB, callback);\n  });\n}```\n\n\n# 前端部分代码介绍\n\n前端模块化采用的是RequireJS，AP_WEB2.0会使用Webpack,那时候会使用ES2015的模块管理。前端的代码较多，这里主要介绍下自己写的特别的功能。QueryString.js用户获取url上的参数信息。\n\n  ```js\n  define([], function() {\n    'use strict';\n    class QueryString {\n      constructor(){\n        let search = window.location.search.substring(1).split('&');\n        let tempGroup = [];\n        for (let p of search) {\n          tempGroup.push(p.split('='));\n        }\n        this.params = new Map(tempGroup);\n      }\n      getValue(name){\n        return this.params.get(name);\n      }\n    }\n    let queryString = new QueryString();\n    return queryString;\n  });\n  ```\n\n## Draggable.js\n\n用于添加拖动功能，在创建时，传入需要拖动的元素，这个元素就能拖动了。\n\n  ```js\n  define([], function() {\n    'use strict';\n    class Draggable {\n      constructor($container) {\n        this.$container = $container;\n        for (let subContainer of $container.children()) {\n          this._handleEvents($(subContainer));\n        }\n      }\n      \n      _handleEvents($subContainer) {\n        $subContainer.on('mousedown', (e) => {\n          if (!$(e.target).hasClass('button')) {\n            this._handleMousedown(e);\n          }\n        });\n        $(document).on('mousemove', (e) => {\n          if (!$(e.target).hasClass('button')) {\n            this._handleMousemove(e);\n          }\n        });\n        $(document).on('mouseup', (e) => {\n          if (!$(e.target).hasClass('button')) {\n            this._handleMouseup(e);\n          }\n        });\n      }\n      \n      _handleMousedown(e) {\n        let {left, top} = this.$container.css(['left', 'top']);\n        this.offsetX = this._parseStr(left) - e.clientX;\n        this.offsetY = this._parseStr(top) - e.clientY;\n        this.mouseDown = true;\n      }\n      \n      _handleMousemove(e) {\n        $(e.target).css('cursor', 'url(/images/m1.cur),default !important');\n        if (this.mouseDown) {\n          let x = e.clientX;\n          let y = e.clientY;\n          let positionX = x + this.offsetX;\n          let positionY = y + this.offsetY;\n          this.$container.css({\n            left: positionX,\n            top: positionY,\n          });\n        }\n      }\n      \n      _handleMouseup(e) {\n        $(e.target).css('cursor', 'url(/images/m1.cur),default !important');\n        this.mouseDown = false;\n      }\n      \n      _parseStr(str) {\n        if(typeof str !== 'string'){\n          str += ''; \n        }\n        return Number(str.split('px')[0]);\n      }\n    }\n    \n    return Draggable;\n  });\n ```\n\n## Rain.js\n\n用于添加鼠标点击效果，创建之后，在整个网页中，除了class中有button的元素，其他都会在点击时，出现像雨滴落在地上的效果。\n\n  ```js\n  define([], function() {\n    'use strict';\n    class Rain {\n      constructor() {\n        this.settings = {\n          width: 10,\n          height: 10,\n          borderColor: '#c6cac9',\n          opacity: 0.7,\n          borderRadius: 5,\n          borderWidth: 5,\n          maxWidth: 70,\n          widthOffset: 2,\n          radiusOffset: 1,\n          opacityOffset: 0.05,\n          borderOffset: 1,\n          position: 'fixed',\n          zIndex: 100,\n          borderStyle: 'solid',\n          class: 'rain',\n        };\n        this._handleEvents();\n      }\n      \n      _handleEvents() {\n        let settings = this.settings;\n        $(document).on('click', (e) => {\n          if($(e.target).hasClass('button')){\n            return;\n          }\n          let $rain = $('<div>').attr('class', settings.class).css({\n            position: settings.position,\n            zIndex: settings.zIndex,\n            borderStyle: settings.borderStyle,\n          });\n          $('body').append($rain);\n          let x = e.clientX;\n          let y = e.clientY;\n          this._initRain($rain, x, y);\n          this._updateRain($rain, x, y);\n        });\n      }\n      \n      _updateRain($rain, x, y) {\n        let settings = this.settings;\n        let rainThread = setInterval( () => {\n          let {width, height,top, left, opacity, borderWidth, borderRadius} = $rain.css(['width', 'height','top', 'left', 'opacity', 'borderWidth', 'borderRadius']);\n          $rain.css({\n            width: this._parseStr(width) + settings.widthOffset,\n            height: this._parseStr(height) + settings.widthOffset,\n            top: y - this._parseStr(height) / 2,\n            left: x - this._parseStr(width) / 2,\n            opacity: this._parseStr(opacity) - settings.opacityOffset,\n            borderWidth: this._parseStr(borderWidth) + settings.borderOffset,\n            borderRadius: this._parseStr(borderRadius) + settings.radiusOffset,\n          });\n          if (this._parseStr(width) > settings.maxWidth) {\n            clearInterval(rainThread);\n            $rain.remove();\n          }\n        }, 10);\n      }\n      \n      _initRain($rain, x, y) {\n        let settings = this.settings;\n        $rain.css({\n          width: settings.width,\n          height: settings.height,\n          borderColor: settings.borderColor,\n          opacity: settings.opacity,\n          borderRadius: settings.borderRadius,\n          borderWidth: settings.borderWidth,\n          top: y - this._parseStr(settings.height) / 2,\n          left: x - this._parseStr(settings.width) / 2,\n        });\n      }\n      \n      _parseStr(str){\n        if(typeof str !== 'string'){\n          str += ''; \n        }\n        return Number(str.split('px')[0]);\n      }\n      \n    }\n    \n    return Rain;\n  });\n ```\n\n\n## Message.js\n最后一个要介绍的是Message.js，它是一个全局提示的工具，项目中使用它做ajax返回信息的控制，做聊天室消息预览等。当有一些信息要发送给用户时，会在浏览器的右上角出现对话框，包含信息标题，信息内容等。并且分为几种类型的提示，不同类型会有不同主题的对话框出现。由于代码太多，这里只列出了它的构造方法。\n\n  ```js\n  constructor(type, content) {\n    this.title = '';\n    this.content = content;\n    this.showTime = 5000;\n    this.clearTime = 1000;\n    this.clearThread = null;\n    this.timeThread = null;\n    this.$Message = $('<div>').css({\n      color: '#fff',\n      borderRadius: 5,\n      width: 300,\n      display: 'none',\n      zIndex: 110,\n      margin: '2px 5px',\n      clear: 'both',\n      float: 'right',\n      position: 'relative',\n      boxShadow: '0px 0px 10px rgba(255, 255, 255, 1)',\n      opacity: 0.9,\n    }).addClass('message');\n    \n    this.$icon = $('<i>').css({\n      display: 'inline-block',\n      float: 'left',\n      marginLeft: 10,\n      width: 20,\n      textAlign: 'center',\n      fontSize: '1.2em',\n    }).addClass('msgIcon').appendTo(this.$Message);\n    \n    this.$title = $('<div>').css({\n      height: '45%',\n      width: 260,\n      float: 'right',\n      fontSize: '1.2em',\n    }).addClass('msgTitle').appendTo(this.$Message);\n    \n    this.$time = $('<span>').css({\n      position: 'absolute',\n      top: 2,\n      right: 2,\n      fontSize: '0.7em',\n    }).addClass('msgTime').appendTo(this.$Message);\n    \n    this.$content = $('<div>').css({\n      float: 'right',\n      height: '56%',\n      width: 260,\n      paddingBottom: 5,\n      paddingRight: 5,\n      fontSize: '0.8em',\n    }).addClass('msgContent').appendTo(this.$Message);\n    \n    switch (type) {\n      case 'infor':\n        this.title = '提示';\n        this._infor();\n        break;\n      case 'success':\n        this.title = '成功';\n        this._success();\n        break;\n      case 'error':\n        this.title = '错误';\n        this._error();\n        break;\n      case 'warning':\n        this.title = '警告';\n        this._warning();\n        break;\n      case 'message':\n        this._message();\n        break;\n      default:\n        break;\n  }\n ```\n\n# 总结\n写代码很重要，调试也很重要，好的调试方法，可以更快的发现、解决问题。正视错误，用积极的态度去处理错误，会提升自己面临问题时的处理能力。","source":"_posts/应用平台WEB.md","raw":"---\ntitle: 应用平台WEB\ndate: 2016-11-24 19:51:29\ntags:\n\t- 分享\n\t- Javascript\n\n---\n\n\n![ap](/images/homeAndRoom.png)\n\n# 简介\n\n项目涉及技术：RequireJS, Vue.js, NodeJS, Express, MongoDB, Bootstrap, WebSocket, JQuery, ES2015。\n\n应用平台WEB版，是为了做一个网页版的APP store，也就是可以扩展出其他应用的一个平台。目前平台除了搭建了基本的结构之外，还做了一个简单的一对一聊天应用和简单的博客系统。下面将进行简单的介绍，源代码可在demo大师上下载：[源码](http://www.demodashi.com/demo/12539.html)，[github点赞](https://github.com/renhongl/ailiao)。\n# 图文介绍\n\n![ap](/images/signIn.png)\n\n这是登录页面，可以使用用户名和验证了的邮箱登录。\n\n![ap](/images/signUp.png)\n\n这是注册页面，很简单的注册一下。 \n\n![ap](/images/resetPwd.png)\n\n这是重置密码页面，需要通过验证邮箱的随机码，来实现重置密码。主要是通过后台服务器向邮箱发送信息。\n\n![ap](/images/chatHome.png)\n\n这是主模块，包含登录用户的信息显示，并且可以随意设置。可以修改头像，设置状态，还可以添加邮箱，设置是否有消息提示音和提示框。还有就是显示自己的好友分组信息。可以任意修改分组。\n\n![ap](/images/homeAndRoom.png)\n\n图的右边就是聊天的窗口，可以同时和多个人聊天，都会列在左边，点击就能切换聊天对象。窗口可以通过关闭所有聊天对象来关闭，或者通过右上角关闭按钮关闭。消息中可以发送一些表情。可以发送抖动窗口的消息。\n\n![ap](/images/docs.png)\n\n这个应用是聊天主页的按钮点击出来的，可以显示一些简单的文档，并且可以点击喜欢某个文档，以及添加简单的评论信息。\n\n# 后端部分代码介绍\n\n## Email.js\n\n用于发送邮件\n\n  ```js\n  'use strict';\n\tconst nodemailer = require('nodemailer');\n\tconst Config = require('./Config');\n\n\tclass Email {\n\t\tconstructor(to, subject, text, html) {\n\t\t\tthis.config = {\n\t\t\t\tservice: '126',\n\t\t\t\tauth: {\n\t\t\t\t\tuser: Config.EMAIL_SERVER,\n\t\t\t\t\tpass: Config.EMAIL_PWD            \n\t\t\t\t}\n\t\t\t};\n\t\t\tthis.mailOptions = {\n\t\t\t\tfrom: Config.EMAIL_SERVER,\n\t\t\t\tto: to,\n\t\t\t\tsubject: subject,\n\t\t\t\ttext: text,\n\t\t\t\t//html: html\n\t\t\t};\n\t\t\tthis._send();\n\t\t}\n\n\t\t_send() {\n\t\t\tlet transporter = nodemailer.createTransport(this.config);\n\t\t\ttransporter.sendMail(this.mailOptions, function (error, info) {\n\t\t\t\tif (error) {\n\t\t\t\t\treturn console.log(error);\n\t\t\t\t}\n\t\t\t\tconsole.log('Message sent: ' + info.response);\n\t\t\t\ttransporter.close();\n\t\t\t});\n\t\t}\n\t}\n\n\tmodule.exports = Email;\n  ```\n\n\n## Server.js\n作为服务器，并且是Websocket的父类。\n\n\n  ```js\n  'use strict';\n  const express = require('express');\n  const http = require('http');\n  const socket = require('socket.io');\n  const Router = require('./Router');\n  const bodyParser = require('body-parser');\n\n  class Server{\n      constructor(port){\n        this.port = port;\n        this.app = express();\n        this.server = http.createServer(this.app);\n        this.io = socket.listen(this.server);\n        this._run();\n      }\n    _run(){\n        this.server.listen(this.port);\n        this.app.use(bodyParser.json());\n        this.app.use(bodyParser.urlencoded({ extended: false }));\n        this.app.use(express.static(__dirname.replace(/server\\\\core/, 'app')));\n        new Router(this.app);\n        console.log('HTTP listening: 127.0.0.1:' + this.port);\n    }\n }\n\n module.exports = Server;\n  ```\n\n\n## User.js\n和用户相关的所有接口都在这里。下面是一个获取验证码的接口，在获取请求后，会随机生成五位数验证码，发送到用户的邮箱中，并且在生成验证码的同时，会调用删除验证码的方法，在一定时间内将此验证码删除，那么用户就不能再使用此验证码修改密码了。\n\n```js\n_getCode(){\n  this.app.get('/getCode', (req, res) => {\n    let email = req.query.email;\n    let code = '';\n    for(let i = 0; i < 5; i++){\n      code += Math.floor(Math.random() * 10);\n    }\n    let queryData = {\n      email: email\n    };\n    let updateData = {\n      code: code\n    };\n    let callback = (db) => {\n      let collection = db.collection(this.userCollection);\n      collection.updateOne(queryData, {$set: updateData}, (err, result) => {\n        assert.equal(null, err);\n        db.close();\n        if(result.result.n === 1){\n          new Email(email, '重置密码', '你的验证码是：' + code);\n          this._removeCode(email);\n          res.send({status: 'success', text: '验证码已发往你的邮箱，请查收。30分钟内有效。'});\n        }else{\n          res.send({status: 'error', text: '没有此邮箱，或许你需要注册账号。'});\n        }\n      });\n    };\n    new MongoDB(this.currentDB, callback);\n  });\n}```\n\n\n# 前端部分代码介绍\n\n前端模块化采用的是RequireJS，AP_WEB2.0会使用Webpack,那时候会使用ES2015的模块管理。前端的代码较多，这里主要介绍下自己写的特别的功能。QueryString.js用户获取url上的参数信息。\n\n  ```js\n  define([], function() {\n    'use strict';\n    class QueryString {\n      constructor(){\n        let search = window.location.search.substring(1).split('&');\n        let tempGroup = [];\n        for (let p of search) {\n          tempGroup.push(p.split('='));\n        }\n        this.params = new Map(tempGroup);\n      }\n      getValue(name){\n        return this.params.get(name);\n      }\n    }\n    let queryString = new QueryString();\n    return queryString;\n  });\n  ```\n\n## Draggable.js\n\n用于添加拖动功能，在创建时，传入需要拖动的元素，这个元素就能拖动了。\n\n  ```js\n  define([], function() {\n    'use strict';\n    class Draggable {\n      constructor($container) {\n        this.$container = $container;\n        for (let subContainer of $container.children()) {\n          this._handleEvents($(subContainer));\n        }\n      }\n      \n      _handleEvents($subContainer) {\n        $subContainer.on('mousedown', (e) => {\n          if (!$(e.target).hasClass('button')) {\n            this._handleMousedown(e);\n          }\n        });\n        $(document).on('mousemove', (e) => {\n          if (!$(e.target).hasClass('button')) {\n            this._handleMousemove(e);\n          }\n        });\n        $(document).on('mouseup', (e) => {\n          if (!$(e.target).hasClass('button')) {\n            this._handleMouseup(e);\n          }\n        });\n      }\n      \n      _handleMousedown(e) {\n        let {left, top} = this.$container.css(['left', 'top']);\n        this.offsetX = this._parseStr(left) - e.clientX;\n        this.offsetY = this._parseStr(top) - e.clientY;\n        this.mouseDown = true;\n      }\n      \n      _handleMousemove(e) {\n        $(e.target).css('cursor', 'url(/images/m1.cur),default !important');\n        if (this.mouseDown) {\n          let x = e.clientX;\n          let y = e.clientY;\n          let positionX = x + this.offsetX;\n          let positionY = y + this.offsetY;\n          this.$container.css({\n            left: positionX,\n            top: positionY,\n          });\n        }\n      }\n      \n      _handleMouseup(e) {\n        $(e.target).css('cursor', 'url(/images/m1.cur),default !important');\n        this.mouseDown = false;\n      }\n      \n      _parseStr(str) {\n        if(typeof str !== 'string'){\n          str += ''; \n        }\n        return Number(str.split('px')[0]);\n      }\n    }\n    \n    return Draggable;\n  });\n ```\n\n## Rain.js\n\n用于添加鼠标点击效果，创建之后，在整个网页中，除了class中有button的元素，其他都会在点击时，出现像雨滴落在地上的效果。\n\n  ```js\n  define([], function() {\n    'use strict';\n    class Rain {\n      constructor() {\n        this.settings = {\n          width: 10,\n          height: 10,\n          borderColor: '#c6cac9',\n          opacity: 0.7,\n          borderRadius: 5,\n          borderWidth: 5,\n          maxWidth: 70,\n          widthOffset: 2,\n          radiusOffset: 1,\n          opacityOffset: 0.05,\n          borderOffset: 1,\n          position: 'fixed',\n          zIndex: 100,\n          borderStyle: 'solid',\n          class: 'rain',\n        };\n        this._handleEvents();\n      }\n      \n      _handleEvents() {\n        let settings = this.settings;\n        $(document).on('click', (e) => {\n          if($(e.target).hasClass('button')){\n            return;\n          }\n          let $rain = $('<div>').attr('class', settings.class).css({\n            position: settings.position,\n            zIndex: settings.zIndex,\n            borderStyle: settings.borderStyle,\n          });\n          $('body').append($rain);\n          let x = e.clientX;\n          let y = e.clientY;\n          this._initRain($rain, x, y);\n          this._updateRain($rain, x, y);\n        });\n      }\n      \n      _updateRain($rain, x, y) {\n        let settings = this.settings;\n        let rainThread = setInterval( () => {\n          let {width, height,top, left, opacity, borderWidth, borderRadius} = $rain.css(['width', 'height','top', 'left', 'opacity', 'borderWidth', 'borderRadius']);\n          $rain.css({\n            width: this._parseStr(width) + settings.widthOffset,\n            height: this._parseStr(height) + settings.widthOffset,\n            top: y - this._parseStr(height) / 2,\n            left: x - this._parseStr(width) / 2,\n            opacity: this._parseStr(opacity) - settings.opacityOffset,\n            borderWidth: this._parseStr(borderWidth) + settings.borderOffset,\n            borderRadius: this._parseStr(borderRadius) + settings.radiusOffset,\n          });\n          if (this._parseStr(width) > settings.maxWidth) {\n            clearInterval(rainThread);\n            $rain.remove();\n          }\n        }, 10);\n      }\n      \n      _initRain($rain, x, y) {\n        let settings = this.settings;\n        $rain.css({\n          width: settings.width,\n          height: settings.height,\n          borderColor: settings.borderColor,\n          opacity: settings.opacity,\n          borderRadius: settings.borderRadius,\n          borderWidth: settings.borderWidth,\n          top: y - this._parseStr(settings.height) / 2,\n          left: x - this._parseStr(settings.width) / 2,\n        });\n      }\n      \n      _parseStr(str){\n        if(typeof str !== 'string'){\n          str += ''; \n        }\n        return Number(str.split('px')[0]);\n      }\n      \n    }\n    \n    return Rain;\n  });\n ```\n\n\n## Message.js\n最后一个要介绍的是Message.js，它是一个全局提示的工具，项目中使用它做ajax返回信息的控制，做聊天室消息预览等。当有一些信息要发送给用户时，会在浏览器的右上角出现对话框，包含信息标题，信息内容等。并且分为几种类型的提示，不同类型会有不同主题的对话框出现。由于代码太多，这里只列出了它的构造方法。\n\n  ```js\n  constructor(type, content) {\n    this.title = '';\n    this.content = content;\n    this.showTime = 5000;\n    this.clearTime = 1000;\n    this.clearThread = null;\n    this.timeThread = null;\n    this.$Message = $('<div>').css({\n      color: '#fff',\n      borderRadius: 5,\n      width: 300,\n      display: 'none',\n      zIndex: 110,\n      margin: '2px 5px',\n      clear: 'both',\n      float: 'right',\n      position: 'relative',\n      boxShadow: '0px 0px 10px rgba(255, 255, 255, 1)',\n      opacity: 0.9,\n    }).addClass('message');\n    \n    this.$icon = $('<i>').css({\n      display: 'inline-block',\n      float: 'left',\n      marginLeft: 10,\n      width: 20,\n      textAlign: 'center',\n      fontSize: '1.2em',\n    }).addClass('msgIcon').appendTo(this.$Message);\n    \n    this.$title = $('<div>').css({\n      height: '45%',\n      width: 260,\n      float: 'right',\n      fontSize: '1.2em',\n    }).addClass('msgTitle').appendTo(this.$Message);\n    \n    this.$time = $('<span>').css({\n      position: 'absolute',\n      top: 2,\n      right: 2,\n      fontSize: '0.7em',\n    }).addClass('msgTime').appendTo(this.$Message);\n    \n    this.$content = $('<div>').css({\n      float: 'right',\n      height: '56%',\n      width: 260,\n      paddingBottom: 5,\n      paddingRight: 5,\n      fontSize: '0.8em',\n    }).addClass('msgContent').appendTo(this.$Message);\n    \n    switch (type) {\n      case 'infor':\n        this.title = '提示';\n        this._infor();\n        break;\n      case 'success':\n        this.title = '成功';\n        this._success();\n        break;\n      case 'error':\n        this.title = '错误';\n        this._error();\n        break;\n      case 'warning':\n        this.title = '警告';\n        this._warning();\n        break;\n      case 'message':\n        this._message();\n        break;\n      default:\n        break;\n  }\n ```\n\n# 总结\n写代码很重要，调试也很重要，好的调试方法，可以更快的发现、解决问题。正视错误，用积极的态度去处理错误，会提升自己面临问题时的处理能力。","slug":"应用平台WEB","published":1,"updated":"2019-03-18T06:59:10.094Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ck2vg6gye00414cob19iji6em","content":"<p><img src=\"/images/homeAndRoom.png\" alt=\"ap\"></p>\n<h1 id=\"简介\"><a href=\"#简介\" class=\"headerlink\" title=\"简介\"></a>简介</h1><p>项目涉及技术：RequireJS, Vue.js, NodeJS, Express, MongoDB, Bootstrap, WebSocket, JQuery, ES2015。</p>\n<p>应用平台WEB版，是为了做一个网页版的APP store，也就是可以扩展出其他应用的一个平台。目前平台除了搭建了基本的结构之外，还做了一个简单的一对一聊天应用和简单的博客系统。下面将进行简单的介绍，源代码可在demo大师上下载：<a href=\"http://www.demodashi.com/demo/12539.html\" target=\"_blank\" rel=\"noopener\">源码</a>，<a href=\"https://github.com/renhongl/ailiao\">github点赞</a>。</p>\n<h1 id=\"图文介绍\"><a href=\"#图文介绍\" class=\"headerlink\" title=\"图文介绍\"></a>图文介绍</h1><p><img src=\"/images/signIn.png\" alt=\"ap\"></p>\n<p>这是登录页面，可以使用用户名和验证了的邮箱登录。</p>\n<p><img src=\"/images/signUp.png\" alt=\"ap\"></p>\n<p>这是注册页面，很简单的注册一下。 </p>\n<p><img src=\"/images/resetPwd.png\" alt=\"ap\"></p>\n<p>这是重置密码页面，需要通过验证邮箱的随机码，来实现重置密码。主要是通过后台服务器向邮箱发送信息。</p>\n<p><img src=\"/images/chatHome.png\" alt=\"ap\"></p>\n<p>这是主模块，包含登录用户的信息显示，并且可以随意设置。可以修改头像，设置状态，还可以添加邮箱，设置是否有消息提示音和提示框。还有就是显示自己的好友分组信息。可以任意修改分组。</p>\n<p><img src=\"/images/homeAndRoom.png\" alt=\"ap\"></p>\n<p>图的右边就是聊天的窗口，可以同时和多个人聊天，都会列在左边，点击就能切换聊天对象。窗口可以通过关闭所有聊天对象来关闭，或者通过右上角关闭按钮关闭。消息中可以发送一些表情。可以发送抖动窗口的消息。</p>\n<p><img src=\"/images/docs.png\" alt=\"ap\"></p>\n<p>这个应用是聊天主页的按钮点击出来的，可以显示一些简单的文档，并且可以点击喜欢某个文档，以及添加简单的评论信息。</p>\n<h1 id=\"后端部分代码介绍\"><a href=\"#后端部分代码介绍\" class=\"headerlink\" title=\"后端部分代码介绍\"></a>后端部分代码介绍</h1><h2 id=\"Email-js\"><a href=\"#Email-js\" class=\"headerlink\" title=\"Email.js\"></a>Email.js</h2><p>用于发送邮件</p>\n  <figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\"> 'use strict'</span>;</span><br><span class=\"line\"><span class=\"keyword\">const</span> nodemailer = <span class=\"built_in\">require</span>(<span class=\"string\">'nodemailer'</span>);</span><br><span class=\"line\"><span class=\"keyword\">const</span> Config = <span class=\"built_in\">require</span>(<span class=\"string\">'./Config'</span>);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Email</span> </span>&#123;</span><br><span class=\"line\">\t<span class=\"keyword\">constructor</span>(to, subject, text, html) &#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">this</span>.config = &#123;</span><br><span class=\"line\">\t\t\tservice: <span class=\"string\">'126'</span>,</span><br><span class=\"line\">\t\t\tauth: &#123;</span><br><span class=\"line\">\t\t\t\tuser: Config.EMAIL_SERVER,</span><br><span class=\"line\">\t\t\t\tpass: Config.EMAIL_PWD            </span><br><span class=\"line\">\t\t\t&#125;</span><br><span class=\"line\">\t\t&#125;;</span><br><span class=\"line\">\t\t<span class=\"keyword\">this</span>.mailOptions = &#123;</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">from</span>: Config.EMAIL_SERVER,</span><br><span class=\"line\">\t\t\tto: to,</span><br><span class=\"line\">\t\t\tsubject: subject,</span><br><span class=\"line\">\t\t\ttext: text,</span><br><span class=\"line\">\t\t\t<span class=\"comment\">//html: html</span></span><br><span class=\"line\">\t\t&#125;;</span><br><span class=\"line\">\t\t<span class=\"keyword\">this</span>._send();</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t_send() &#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">let</span> transporter = nodemailer.createTransport(<span class=\"keyword\">this</span>.config);</span><br><span class=\"line\">\t\ttransporter.sendMail(<span class=\"keyword\">this</span>.mailOptions, <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">error, info</span>) </span>&#123;</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">if</span> (error) &#123;</span><br><span class=\"line\">\t\t\t\t<span class=\"keyword\">return</span> <span class=\"built_in\">console</span>.log(error);</span><br><span class=\"line\">\t\t\t&#125;</span><br><span class=\"line\">\t\t\t<span class=\"built_in\">console</span>.log(<span class=\"string\">'Message sent: '</span> + info.response);</span><br><span class=\"line\">\t\t\ttransporter.close();</span><br><span class=\"line\">\t\t&#125;);</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">module</span>.exports = Email;</span><br></pre></td></tr></table></figure>\n<h2 id=\"Server-js\"><a href=\"#Server-js\" class=\"headerlink\" title=\"Server.js\"></a>Server.js</h2><p>作为服务器，并且是Websocket的父类。</p>\n  <figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\"> 'use strict'</span>;</span><br><span class=\"line\"> <span class=\"keyword\">const</span> express = <span class=\"built_in\">require</span>(<span class=\"string\">'express'</span>);</span><br><span class=\"line\"> <span class=\"keyword\">const</span> http = <span class=\"built_in\">require</span>(<span class=\"string\">'http'</span>);</span><br><span class=\"line\"> <span class=\"keyword\">const</span> socket = <span class=\"built_in\">require</span>(<span class=\"string\">'socket.io'</span>);</span><br><span class=\"line\"> <span class=\"keyword\">const</span> Router = <span class=\"built_in\">require</span>(<span class=\"string\">'./Router'</span>);</span><br><span class=\"line\"> <span class=\"keyword\">const</span> bodyParser = <span class=\"built_in\">require</span>(<span class=\"string\">'body-parser'</span>);</span><br><span class=\"line\"></span><br><span class=\"line\"> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Server</span></span>&#123;</span><br><span class=\"line\">     <span class=\"keyword\">constructor</span>(port)&#123;</span><br><span class=\"line\">       <span class=\"keyword\">this</span>.port = port;</span><br><span class=\"line\">       <span class=\"keyword\">this</span>.app = express();</span><br><span class=\"line\">       <span class=\"keyword\">this</span>.server = http.createServer(<span class=\"keyword\">this</span>.app);</span><br><span class=\"line\">       <span class=\"keyword\">this</span>.io = socket.listen(<span class=\"keyword\">this</span>.server);</span><br><span class=\"line\">       <span class=\"keyword\">this</span>._run();</span><br><span class=\"line\">     &#125;</span><br><span class=\"line\">   _run()&#123;</span><br><span class=\"line\">       <span class=\"keyword\">this</span>.server.listen(<span class=\"keyword\">this</span>.port);</span><br><span class=\"line\">       <span class=\"keyword\">this</span>.app.use(bodyParser.json());</span><br><span class=\"line\">       <span class=\"keyword\">this</span>.app.use(bodyParser.urlencoded(&#123; <span class=\"attr\">extended</span>: <span class=\"literal\">false</span> &#125;));</span><br><span class=\"line\">       <span class=\"keyword\">this</span>.app.use(express.static(__dirname.replace(<span class=\"regexp\">/server\\\\core/</span>, <span class=\"string\">'app'</span>)));</span><br><span class=\"line\">       <span class=\"keyword\">new</span> Router(<span class=\"keyword\">this</span>.app);</span><br><span class=\"line\">       <span class=\"built_in\">console</span>.log(<span class=\"string\">'HTTP listening: 127.0.0.1:'</span> + <span class=\"keyword\">this</span>.port);</span><br><span class=\"line\">   &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">module</span>.exports = Server;</span><br></pre></td></tr></table></figure>\n<h2 id=\"User-js\"><a href=\"#User-js\" class=\"headerlink\" title=\"User.js\"></a>User.js</h2><p>和用户相关的所有接口都在这里。下面是一个获取验证码的接口，在获取请求后，会随机生成五位数验证码，发送到用户的邮箱中，并且在生成验证码的同时，会调用删除验证码的方法，在一定时间内将此验证码删除，那么用户就不能再使用此验证码修改密码了。</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">_getCode()&#123;</span><br><span class=\"line\">  <span class=\"keyword\">this</span>.app.get(<span class=\"string\">'/getCode'</span>, (req, res) =&gt; &#123;</span><br><span class=\"line\">    <span class=\"keyword\">let</span> email = req.query.email;</span><br><span class=\"line\">    <span class=\"keyword\">let</span> code = <span class=\"string\">''</span>;</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"keyword\">let</span> i = <span class=\"number\">0</span>; i &lt; <span class=\"number\">5</span>; i++)&#123;</span><br><span class=\"line\">      code += <span class=\"built_in\">Math</span>.floor(<span class=\"built_in\">Math</span>.random() * <span class=\"number\">10</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">let</span> queryData = &#123;</span><br><span class=\"line\">      email: email</span><br><span class=\"line\">    &#125;;</span><br><span class=\"line\">    <span class=\"keyword\">let</span> updateData = &#123;</span><br><span class=\"line\">      code: code</span><br><span class=\"line\">    &#125;;</span><br><span class=\"line\">    <span class=\"keyword\">let</span> callback = <span class=\"function\">(<span class=\"params\">db</span>) =&gt;</span> &#123;</span><br><span class=\"line\">      <span class=\"keyword\">let</span> collection = db.collection(<span class=\"keyword\">this</span>.userCollection);</span><br><span class=\"line\">      collection.updateOne(queryData, &#123;<span class=\"attr\">$set</span>: updateData&#125;, (err, result) =&gt; &#123;</span><br><span class=\"line\">        assert.equal(<span class=\"literal\">null</span>, err);</span><br><span class=\"line\">        db.close();</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(result.result.n === <span class=\"number\">1</span>)&#123;</span><br><span class=\"line\">          <span class=\"keyword\">new</span> Email(email, <span class=\"string\">'重置密码'</span>, <span class=\"string\">'你的验证码是：'</span> + code);</span><br><span class=\"line\">          <span class=\"keyword\">this</span>._removeCode(email);</span><br><span class=\"line\">          res.send(&#123;<span class=\"attr\">status</span>: <span class=\"string\">'success'</span>, <span class=\"attr\">text</span>: <span class=\"string\">'验证码已发往你的邮箱，请查收。30分钟内有效。'</span>&#125;);</span><br><span class=\"line\">        &#125;<span class=\"keyword\">else</span>&#123;</span><br><span class=\"line\">          res.send(&#123;<span class=\"attr\">status</span>: <span class=\"string\">'error'</span>, <span class=\"attr\">text</span>: <span class=\"string\">'没有此邮箱，或许你需要注册账号。'</span>&#125;);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">      &#125;);</span><br><span class=\"line\">    &#125;;</span><br><span class=\"line\">    <span class=\"keyword\">new</span> MongoDB(<span class=\"keyword\">this</span>.currentDB, callback);</span><br><span class=\"line\">  &#125;);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h1 id=\"前端部分代码介绍\"><a href=\"#前端部分代码介绍\" class=\"headerlink\" title=\"前端部分代码介绍\"></a>前端部分代码介绍</h1><p>前端模块化采用的是RequireJS，AP_WEB2.0会使用Webpack,那时候会使用ES2015的模块管理。前端的代码较多，这里主要介绍下自己写的特别的功能。QueryString.js用户获取url上的参数信息。</p>\n  <figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">define([], <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\"><span class=\"meta\">  'use strict'</span>;</span><br><span class=\"line\">  <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">QueryString</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">constructor</span>()&#123;</span><br><span class=\"line\">      <span class=\"keyword\">let</span> search = <span class=\"built_in\">window</span>.location.search.substring(<span class=\"number\">1</span>).split(<span class=\"string\">'&amp;'</span>);</span><br><span class=\"line\">      <span class=\"keyword\">let</span> tempGroup = [];</span><br><span class=\"line\">      <span class=\"keyword\">for</span> (<span class=\"keyword\">let</span> p <span class=\"keyword\">of</span> search) &#123;</span><br><span class=\"line\">        tempGroup.push(p.split(<span class=\"string\">'='</span>));</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">      <span class=\"keyword\">this</span>.params = <span class=\"keyword\">new</span> <span class=\"built_in\">Map</span>(tempGroup);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    getValue(name)&#123;</span><br><span class=\"line\">      <span class=\"keyword\">return</span> <span class=\"keyword\">this</span>.params.get(name);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"keyword\">let</span> queryString = <span class=\"keyword\">new</span> QueryString();</span><br><span class=\"line\">  <span class=\"keyword\">return</span> queryString;</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n<h2 id=\"Draggable-js\"><a href=\"#Draggable-js\" class=\"headerlink\" title=\"Draggable.js\"></a>Draggable.js</h2><p>用于添加拖动功能，在创建时，传入需要拖动的元素，这个元素就能拖动了。</p>\n  <figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">define([], <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\"><span class=\"meta\">  'use strict'</span>;</span><br><span class=\"line\">  <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Draggable</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">constructor</span>($container) &#123;</span><br><span class=\"line\">      <span class=\"keyword\">this</span>.$container = $container;</span><br><span class=\"line\">      <span class=\"keyword\">for</span> (<span class=\"keyword\">let</span> subContainer <span class=\"keyword\">of</span> $container.children()) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">this</span>._handleEvents($(subContainer));</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    </span><br><span class=\"line\">    _handleEvents($subContainer) &#123;</span><br><span class=\"line\">      $subContainer.on(<span class=\"string\">'mousedown'</span>, (e) =&gt; &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (!$(e.target).hasClass(<span class=\"string\">'button'</span>)) &#123;</span><br><span class=\"line\">          <span class=\"keyword\">this</span>._handleMousedown(e);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">      &#125;);</span><br><span class=\"line\">      $(<span class=\"built_in\">document</span>).on(<span class=\"string\">'mousemove'</span>, (e) =&gt; &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (!$(e.target).hasClass(<span class=\"string\">'button'</span>)) &#123;</span><br><span class=\"line\">          <span class=\"keyword\">this</span>._handleMousemove(e);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">      &#125;);</span><br><span class=\"line\">      $(<span class=\"built_in\">document</span>).on(<span class=\"string\">'mouseup'</span>, (e) =&gt; &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (!$(e.target).hasClass(<span class=\"string\">'button'</span>)) &#123;</span><br><span class=\"line\">          <span class=\"keyword\">this</span>._handleMouseup(e);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">      &#125;);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    </span><br><span class=\"line\">    _handleMousedown(e) &#123;</span><br><span class=\"line\">      <span class=\"keyword\">let</span> &#123;left, top&#125; = <span class=\"keyword\">this</span>.$container.css([<span class=\"string\">'left'</span>, <span class=\"string\">'top'</span>]);</span><br><span class=\"line\">      <span class=\"keyword\">this</span>.offsetX = <span class=\"keyword\">this</span>._parseStr(left) - e.clientX;</span><br><span class=\"line\">      <span class=\"keyword\">this</span>.offsetY = <span class=\"keyword\">this</span>._parseStr(top) - e.clientY;</span><br><span class=\"line\">      <span class=\"keyword\">this</span>.mouseDown = <span class=\"literal\">true</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    </span><br><span class=\"line\">    _handleMousemove(e) &#123;</span><br><span class=\"line\">      $(e.target).css(<span class=\"string\">'cursor'</span>, <span class=\"string\">'url(/images/m1.cur),default !important'</span>);</span><br><span class=\"line\">      <span class=\"keyword\">if</span> (<span class=\"keyword\">this</span>.mouseDown) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">let</span> x = e.clientX;</span><br><span class=\"line\">        <span class=\"keyword\">let</span> y = e.clientY;</span><br><span class=\"line\">        <span class=\"keyword\">let</span> positionX = x + <span class=\"keyword\">this</span>.offsetX;</span><br><span class=\"line\">        <span class=\"keyword\">let</span> positionY = y + <span class=\"keyword\">this</span>.offsetY;</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.$container.css(&#123;</span><br><span class=\"line\">          left: positionX,</span><br><span class=\"line\">          top: positionY,</span><br><span class=\"line\">        &#125;);</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    </span><br><span class=\"line\">    _handleMouseup(e) &#123;</span><br><span class=\"line\">      $(e.target).css(<span class=\"string\">'cursor'</span>, <span class=\"string\">'url(/images/m1.cur),default !important'</span>);</span><br><span class=\"line\">      <span class=\"keyword\">this</span>.mouseDown = <span class=\"literal\">false</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    </span><br><span class=\"line\">    _parseStr(str) &#123;</span><br><span class=\"line\">      <span class=\"keyword\">if</span>(<span class=\"keyword\">typeof</span> str !== <span class=\"string\">'string'</span>)&#123;</span><br><span class=\"line\">        str += <span class=\"string\">''</span>; </span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">      <span class=\"keyword\">return</span> <span class=\"built_in\">Number</span>(str.split(<span class=\"string\">'px'</span>)[<span class=\"number\">0</span>]);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  </span><br><span class=\"line\">  <span class=\"keyword\">return</span> Draggable;</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n<h2 id=\"Rain-js\"><a href=\"#Rain-js\" class=\"headerlink\" title=\"Rain.js\"></a>Rain.js</h2><p>用于添加鼠标点击效果，创建之后，在整个网页中，除了class中有button的元素，其他都会在点击时，出现像雨滴落在地上的效果。</p>\n  <figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">define([], <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\"><span class=\"meta\">  'use strict'</span>;</span><br><span class=\"line\">  <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Rain</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">constructor</span>() &#123;</span><br><span class=\"line\">      <span class=\"keyword\">this</span>.settings = &#123;</span><br><span class=\"line\">        width: <span class=\"number\">10</span>,</span><br><span class=\"line\">        height: <span class=\"number\">10</span>,</span><br><span class=\"line\">        borderColor: <span class=\"string\">'#c6cac9'</span>,</span><br><span class=\"line\">        opacity: <span class=\"number\">0.7</span>,</span><br><span class=\"line\">        borderRadius: <span class=\"number\">5</span>,</span><br><span class=\"line\">        borderWidth: <span class=\"number\">5</span>,</span><br><span class=\"line\">        maxWidth: <span class=\"number\">70</span>,</span><br><span class=\"line\">        widthOffset: <span class=\"number\">2</span>,</span><br><span class=\"line\">        radiusOffset: <span class=\"number\">1</span>,</span><br><span class=\"line\">        opacityOffset: <span class=\"number\">0.05</span>,</span><br><span class=\"line\">        borderOffset: <span class=\"number\">1</span>,</span><br><span class=\"line\">        position: <span class=\"string\">'fixed'</span>,</span><br><span class=\"line\">        zIndex: <span class=\"number\">100</span>,</span><br><span class=\"line\">        borderStyle: <span class=\"string\">'solid'</span>,</span><br><span class=\"line\">        class: 'rain',</span><br><span class=\"line\">      &#125;;</span><br><span class=\"line\">      <span class=\"keyword\">this</span>._handleEvents();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    </span><br><span class=\"line\">    _handleEvents() &#123;</span><br><span class=\"line\">      <span class=\"keyword\">let</span> settings = <span class=\"keyword\">this</span>.settings;</span><br><span class=\"line\">      $(<span class=\"built_in\">document</span>).on(<span class=\"string\">'click'</span>, (e) =&gt; &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>($(e.target).hasClass(<span class=\"string\">'button'</span>))&#123;</span><br><span class=\"line\">          <span class=\"keyword\">return</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">let</span> $rain = $(<span class=\"string\">'&lt;div&gt;'</span>).attr(<span class=\"string\">'class'</span>, settings.class).css(&#123;</span><br><span class=\"line\">          position: settings.position,</span><br><span class=\"line\">          zIndex: settings.zIndex,</span><br><span class=\"line\">          borderStyle: settings.borderStyle,</span><br><span class=\"line\">        &#125;);</span><br><span class=\"line\">        $(<span class=\"string\">'body'</span>).append($rain);</span><br><span class=\"line\">        <span class=\"keyword\">let</span> x = e.clientX;</span><br><span class=\"line\">        <span class=\"keyword\">let</span> y = e.clientY;</span><br><span class=\"line\">        <span class=\"keyword\">this</span>._initRain($rain, x, y);</span><br><span class=\"line\">        <span class=\"keyword\">this</span>._updateRain($rain, x, y);</span><br><span class=\"line\">      &#125;);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    </span><br><span class=\"line\">    _updateRain($rain, x, y) &#123;</span><br><span class=\"line\">      <span class=\"keyword\">let</span> settings = <span class=\"keyword\">this</span>.settings;</span><br><span class=\"line\">      <span class=\"keyword\">let</span> rainThread = setInterval( <span class=\"function\"><span class=\"params\">()</span> =&gt;</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">let</span> &#123;width, height,top, left, opacity, borderWidth, borderRadius&#125; = $rain.css([<span class=\"string\">'width'</span>, <span class=\"string\">'height'</span>,<span class=\"string\">'top'</span>, <span class=\"string\">'left'</span>, <span class=\"string\">'opacity'</span>, <span class=\"string\">'borderWidth'</span>, <span class=\"string\">'borderRadius'</span>]);</span><br><span class=\"line\">        $rain.css(&#123;</span><br><span class=\"line\">          width: <span class=\"keyword\">this</span>._parseStr(width) + settings.widthOffset,</span><br><span class=\"line\">          height: <span class=\"keyword\">this</span>._parseStr(height) + settings.widthOffset,</span><br><span class=\"line\">          top: y - <span class=\"keyword\">this</span>._parseStr(height) / <span class=\"number\">2</span>,</span><br><span class=\"line\">          left: x - <span class=\"keyword\">this</span>._parseStr(width) / <span class=\"number\">2</span>,</span><br><span class=\"line\">          opacity: <span class=\"keyword\">this</span>._parseStr(opacity) - settings.opacityOffset,</span><br><span class=\"line\">          borderWidth: <span class=\"keyword\">this</span>._parseStr(borderWidth) + settings.borderOffset,</span><br><span class=\"line\">          borderRadius: <span class=\"keyword\">this</span>._parseStr(borderRadius) + settings.radiusOffset,</span><br><span class=\"line\">        &#125;);</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (<span class=\"keyword\">this</span>._parseStr(width) &gt; settings.maxWidth) &#123;</span><br><span class=\"line\">          clearInterval(rainThread);</span><br><span class=\"line\">          $rain.remove();</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">      &#125;, <span class=\"number\">10</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    </span><br><span class=\"line\">    _initRain($rain, x, y) &#123;</span><br><span class=\"line\">      <span class=\"keyword\">let</span> settings = <span class=\"keyword\">this</span>.settings;</span><br><span class=\"line\">      $rain.css(&#123;</span><br><span class=\"line\">        width: settings.width,</span><br><span class=\"line\">        height: settings.height,</span><br><span class=\"line\">        borderColor: settings.borderColor,</span><br><span class=\"line\">        opacity: settings.opacity,</span><br><span class=\"line\">        borderRadius: settings.borderRadius,</span><br><span class=\"line\">        borderWidth: settings.borderWidth,</span><br><span class=\"line\">        top: y - <span class=\"keyword\">this</span>._parseStr(settings.height) / <span class=\"number\">2</span>,</span><br><span class=\"line\">        left: x - <span class=\"keyword\">this</span>._parseStr(settings.width) / <span class=\"number\">2</span>,</span><br><span class=\"line\">      &#125;);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    </span><br><span class=\"line\">    _parseStr(str)&#123;</span><br><span class=\"line\">      <span class=\"keyword\">if</span>(<span class=\"keyword\">typeof</span> str !== <span class=\"string\">'string'</span>)&#123;</span><br><span class=\"line\">        str += <span class=\"string\">''</span>; </span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">      <span class=\"keyword\">return</span> <span class=\"built_in\">Number</span>(str.split(<span class=\"string\">'px'</span>)[<span class=\"number\">0</span>]);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    </span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  </span><br><span class=\"line\">  <span class=\"keyword\">return</span> Rain;</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n<h2 id=\"Message-js\"><a href=\"#Message-js\" class=\"headerlink\" title=\"Message.js\"></a>Message.js</h2><p>最后一个要介绍的是Message.js，它是一个全局提示的工具，项目中使用它做ajax返回信息的控制，做聊天室消息预览等。当有一些信息要发送给用户时，会在浏览器的右上角出现对话框，包含信息标题，信息内容等。并且分为几种类型的提示，不同类型会有不同主题的对话框出现。由于代码太多，这里只列出了它的构造方法。</p>\n  <figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">constructor</span>(type, content) &#123;</span><br><span class=\"line\">  <span class=\"keyword\">this</span>.title = <span class=\"string\">''</span>;</span><br><span class=\"line\">  <span class=\"keyword\">this</span>.content = content;</span><br><span class=\"line\">  <span class=\"keyword\">this</span>.showTime = <span class=\"number\">5000</span>;</span><br><span class=\"line\">  <span class=\"keyword\">this</span>.clearTime = <span class=\"number\">1000</span>;</span><br><span class=\"line\">  <span class=\"keyword\">this</span>.clearThread = <span class=\"literal\">null</span>;</span><br><span class=\"line\">  <span class=\"keyword\">this</span>.timeThread = <span class=\"literal\">null</span>;</span><br><span class=\"line\">  <span class=\"keyword\">this</span>.$Message = $(<span class=\"string\">'&lt;div&gt;'</span>).css(&#123;</span><br><span class=\"line\">    color: <span class=\"string\">'#fff'</span>,</span><br><span class=\"line\">    borderRadius: <span class=\"number\">5</span>,</span><br><span class=\"line\">    width: <span class=\"number\">300</span>,</span><br><span class=\"line\">    display: <span class=\"string\">'none'</span>,</span><br><span class=\"line\">    zIndex: <span class=\"number\">110</span>,</span><br><span class=\"line\">    margin: <span class=\"string\">'2px 5px'</span>,</span><br><span class=\"line\">    clear: <span class=\"string\">'both'</span>,</span><br><span class=\"line\">    float: <span class=\"string\">'right'</span>,</span><br><span class=\"line\">    position: <span class=\"string\">'relative'</span>,</span><br><span class=\"line\">    boxShadow: <span class=\"string\">'0px 0px 10px rgba(255, 255, 255, 1)'</span>,</span><br><span class=\"line\">    opacity: <span class=\"number\">0.9</span>,</span><br><span class=\"line\">  &#125;).addClass(<span class=\"string\">'message'</span>);</span><br><span class=\"line\">  </span><br><span class=\"line\">  <span class=\"keyword\">this</span>.$icon = $(<span class=\"string\">'&lt;i&gt;'</span>).css(&#123;</span><br><span class=\"line\">    display: <span class=\"string\">'inline-block'</span>,</span><br><span class=\"line\">    float: <span class=\"string\">'left'</span>,</span><br><span class=\"line\">    marginLeft: <span class=\"number\">10</span>,</span><br><span class=\"line\">    width: <span class=\"number\">20</span>,</span><br><span class=\"line\">    textAlign: <span class=\"string\">'center'</span>,</span><br><span class=\"line\">    fontSize: <span class=\"string\">'1.2em'</span>,</span><br><span class=\"line\">  &#125;).addClass(<span class=\"string\">'msgIcon'</span>).appendTo(<span class=\"keyword\">this</span>.$Message);</span><br><span class=\"line\">  </span><br><span class=\"line\">  <span class=\"keyword\">this</span>.$title = $(<span class=\"string\">'&lt;div&gt;'</span>).css(&#123;</span><br><span class=\"line\">    height: <span class=\"string\">'45%'</span>,</span><br><span class=\"line\">    width: <span class=\"number\">260</span>,</span><br><span class=\"line\">    float: <span class=\"string\">'right'</span>,</span><br><span class=\"line\">    fontSize: <span class=\"string\">'1.2em'</span>,</span><br><span class=\"line\">  &#125;).addClass(<span class=\"string\">'msgTitle'</span>).appendTo(<span class=\"keyword\">this</span>.$Message);</span><br><span class=\"line\">  </span><br><span class=\"line\">  <span class=\"keyword\">this</span>.$time = $(<span class=\"string\">'&lt;span&gt;'</span>).css(&#123;</span><br><span class=\"line\">    position: <span class=\"string\">'absolute'</span>,</span><br><span class=\"line\">    top: <span class=\"number\">2</span>,</span><br><span class=\"line\">    right: <span class=\"number\">2</span>,</span><br><span class=\"line\">    fontSize: <span class=\"string\">'0.7em'</span>,</span><br><span class=\"line\">  &#125;).addClass(<span class=\"string\">'msgTime'</span>).appendTo(<span class=\"keyword\">this</span>.$Message);</span><br><span class=\"line\">  </span><br><span class=\"line\">  <span class=\"keyword\">this</span>.$content = $(<span class=\"string\">'&lt;div&gt;'</span>).css(&#123;</span><br><span class=\"line\">    float: <span class=\"string\">'right'</span>,</span><br><span class=\"line\">    height: <span class=\"string\">'56%'</span>,</span><br><span class=\"line\">    width: <span class=\"number\">260</span>,</span><br><span class=\"line\">    paddingBottom: <span class=\"number\">5</span>,</span><br><span class=\"line\">    paddingRight: <span class=\"number\">5</span>,</span><br><span class=\"line\">    fontSize: <span class=\"string\">'0.8em'</span>,</span><br><span class=\"line\">  &#125;).addClass(<span class=\"string\">'msgContent'</span>).appendTo(<span class=\"keyword\">this</span>.$Message);</span><br><span class=\"line\">  </span><br><span class=\"line\">  <span class=\"keyword\">switch</span> (type) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">case</span> <span class=\"string\">'infor'</span>:</span><br><span class=\"line\">      <span class=\"keyword\">this</span>.title = <span class=\"string\">'提示'</span>;</span><br><span class=\"line\">      <span class=\"keyword\">this</span>._infor();</span><br><span class=\"line\">      <span class=\"keyword\">break</span>;</span><br><span class=\"line\">    <span class=\"keyword\">case</span> <span class=\"string\">'success'</span>:</span><br><span class=\"line\">      <span class=\"keyword\">this</span>.title = <span class=\"string\">'成功'</span>;</span><br><span class=\"line\">      <span class=\"keyword\">this</span>._success();</span><br><span class=\"line\">      <span class=\"keyword\">break</span>;</span><br><span class=\"line\">    <span class=\"keyword\">case</span> <span class=\"string\">'error'</span>:</span><br><span class=\"line\">      <span class=\"keyword\">this</span>.title = <span class=\"string\">'错误'</span>;</span><br><span class=\"line\">      <span class=\"keyword\">this</span>._error();</span><br><span class=\"line\">      <span class=\"keyword\">break</span>;</span><br><span class=\"line\">    <span class=\"keyword\">case</span> <span class=\"string\">'warning'</span>:</span><br><span class=\"line\">      <span class=\"keyword\">this</span>.title = <span class=\"string\">'警告'</span>;</span><br><span class=\"line\">      <span class=\"keyword\">this</span>._warning();</span><br><span class=\"line\">      <span class=\"keyword\">break</span>;</span><br><span class=\"line\">    <span class=\"keyword\">case</span> <span class=\"string\">'message'</span>:</span><br><span class=\"line\">      <span class=\"keyword\">this</span>._message();</span><br><span class=\"line\">      <span class=\"keyword\">break</span>;</span><br><span class=\"line\">    <span class=\"keyword\">default</span>:</span><br><span class=\"line\">      <span class=\"keyword\">break</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h1 id=\"总结\"><a href=\"#总结\" class=\"headerlink\" title=\"总结\"></a>总结</h1><p>写代码很重要，调试也很重要，好的调试方法，可以更快的发现、解决问题。正视错误，用积极的态度去处理错误，会提升自己面临问题时的处理能力。</p>\n","site":{"data":{"projects":[{"name":"AiTing","url":"https://github.com/renhongl/aiting","desc":"HTML5客户端音乐播放器"},{"name":"AiLiao","url":"https://github.com/renhongl/ailiao","desc":"网页聊天软件"},{"name":"Pomelo Editor","url":"https://renhongl.github.io/markdown-editor/","desc":"功能强大的在线Markdown编辑器"}]}},"excerpt":"","more":"<p><img src=\"/images/homeAndRoom.png\" alt=\"ap\"></p>\n<h1 id=\"简介\"><a href=\"#简介\" class=\"headerlink\" title=\"简介\"></a>简介</h1><p>项目涉及技术：RequireJS, Vue.js, NodeJS, Express, MongoDB, Bootstrap, WebSocket, JQuery, ES2015。</p>\n<p>应用平台WEB版，是为了做一个网页版的APP store，也就是可以扩展出其他应用的一个平台。目前平台除了搭建了基本的结构之外，还做了一个简单的一对一聊天应用和简单的博客系统。下面将进行简单的介绍，源代码可在demo大师上下载：<a href=\"http://www.demodashi.com/demo/12539.html\" target=\"_blank\" rel=\"noopener\">源码</a>，<a href=\"https://github.com/renhongl/ailiao\">github点赞</a>。</p>\n<h1 id=\"图文介绍\"><a href=\"#图文介绍\" class=\"headerlink\" title=\"图文介绍\"></a>图文介绍</h1><p><img src=\"/images/signIn.png\" alt=\"ap\"></p>\n<p>这是登录页面，可以使用用户名和验证了的邮箱登录。</p>\n<p><img src=\"/images/signUp.png\" alt=\"ap\"></p>\n<p>这是注册页面，很简单的注册一下。 </p>\n<p><img src=\"/images/resetPwd.png\" alt=\"ap\"></p>\n<p>这是重置密码页面，需要通过验证邮箱的随机码，来实现重置密码。主要是通过后台服务器向邮箱发送信息。</p>\n<p><img src=\"/images/chatHome.png\" alt=\"ap\"></p>\n<p>这是主模块，包含登录用户的信息显示，并且可以随意设置。可以修改头像，设置状态，还可以添加邮箱，设置是否有消息提示音和提示框。还有就是显示自己的好友分组信息。可以任意修改分组。</p>\n<p><img src=\"/images/homeAndRoom.png\" alt=\"ap\"></p>\n<p>图的右边就是聊天的窗口，可以同时和多个人聊天，都会列在左边，点击就能切换聊天对象。窗口可以通过关闭所有聊天对象来关闭，或者通过右上角关闭按钮关闭。消息中可以发送一些表情。可以发送抖动窗口的消息。</p>\n<p><img src=\"/images/docs.png\" alt=\"ap\"></p>\n<p>这个应用是聊天主页的按钮点击出来的，可以显示一些简单的文档，并且可以点击喜欢某个文档，以及添加简单的评论信息。</p>\n<h1 id=\"后端部分代码介绍\"><a href=\"#后端部分代码介绍\" class=\"headerlink\" title=\"后端部分代码介绍\"></a>后端部分代码介绍</h1><h2 id=\"Email-js\"><a href=\"#Email-js\" class=\"headerlink\" title=\"Email.js\"></a>Email.js</h2><p>用于发送邮件</p>\n  <figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\"> 'use strict'</span>;</span><br><span class=\"line\"><span class=\"keyword\">const</span> nodemailer = <span class=\"built_in\">require</span>(<span class=\"string\">'nodemailer'</span>);</span><br><span class=\"line\"><span class=\"keyword\">const</span> Config = <span class=\"built_in\">require</span>(<span class=\"string\">'./Config'</span>);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Email</span> </span>&#123;</span><br><span class=\"line\">\t<span class=\"keyword\">constructor</span>(to, subject, text, html) &#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">this</span>.config = &#123;</span><br><span class=\"line\">\t\t\tservice: <span class=\"string\">'126'</span>,</span><br><span class=\"line\">\t\t\tauth: &#123;</span><br><span class=\"line\">\t\t\t\tuser: Config.EMAIL_SERVER,</span><br><span class=\"line\">\t\t\t\tpass: Config.EMAIL_PWD            </span><br><span class=\"line\">\t\t\t&#125;</span><br><span class=\"line\">\t\t&#125;;</span><br><span class=\"line\">\t\t<span class=\"keyword\">this</span>.mailOptions = &#123;</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">from</span>: Config.EMAIL_SERVER,</span><br><span class=\"line\">\t\t\tto: to,</span><br><span class=\"line\">\t\t\tsubject: subject,</span><br><span class=\"line\">\t\t\ttext: text,</span><br><span class=\"line\">\t\t\t<span class=\"comment\">//html: html</span></span><br><span class=\"line\">\t\t&#125;;</span><br><span class=\"line\">\t\t<span class=\"keyword\">this</span>._send();</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t_send() &#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">let</span> transporter = nodemailer.createTransport(<span class=\"keyword\">this</span>.config);</span><br><span class=\"line\">\t\ttransporter.sendMail(<span class=\"keyword\">this</span>.mailOptions, <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">error, info</span>) </span>&#123;</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">if</span> (error) &#123;</span><br><span class=\"line\">\t\t\t\t<span class=\"keyword\">return</span> <span class=\"built_in\">console</span>.log(error);</span><br><span class=\"line\">\t\t\t&#125;</span><br><span class=\"line\">\t\t\t<span class=\"built_in\">console</span>.log(<span class=\"string\">'Message sent: '</span> + info.response);</span><br><span class=\"line\">\t\t\ttransporter.close();</span><br><span class=\"line\">\t\t&#125;);</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">module</span>.exports = Email;</span><br></pre></td></tr></table></figure>\n<h2 id=\"Server-js\"><a href=\"#Server-js\" class=\"headerlink\" title=\"Server.js\"></a>Server.js</h2><p>作为服务器，并且是Websocket的父类。</p>\n  <figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\"> 'use strict'</span>;</span><br><span class=\"line\"> <span class=\"keyword\">const</span> express = <span class=\"built_in\">require</span>(<span class=\"string\">'express'</span>);</span><br><span class=\"line\"> <span class=\"keyword\">const</span> http = <span class=\"built_in\">require</span>(<span class=\"string\">'http'</span>);</span><br><span class=\"line\"> <span class=\"keyword\">const</span> socket = <span class=\"built_in\">require</span>(<span class=\"string\">'socket.io'</span>);</span><br><span class=\"line\"> <span class=\"keyword\">const</span> Router = <span class=\"built_in\">require</span>(<span class=\"string\">'./Router'</span>);</span><br><span class=\"line\"> <span class=\"keyword\">const</span> bodyParser = <span class=\"built_in\">require</span>(<span class=\"string\">'body-parser'</span>);</span><br><span class=\"line\"></span><br><span class=\"line\"> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Server</span></span>&#123;</span><br><span class=\"line\">     <span class=\"keyword\">constructor</span>(port)&#123;</span><br><span class=\"line\">       <span class=\"keyword\">this</span>.port = port;</span><br><span class=\"line\">       <span class=\"keyword\">this</span>.app = express();</span><br><span class=\"line\">       <span class=\"keyword\">this</span>.server = http.createServer(<span class=\"keyword\">this</span>.app);</span><br><span class=\"line\">       <span class=\"keyword\">this</span>.io = socket.listen(<span class=\"keyword\">this</span>.server);</span><br><span class=\"line\">       <span class=\"keyword\">this</span>._run();</span><br><span class=\"line\">     &#125;</span><br><span class=\"line\">   _run()&#123;</span><br><span class=\"line\">       <span class=\"keyword\">this</span>.server.listen(<span class=\"keyword\">this</span>.port);</span><br><span class=\"line\">       <span class=\"keyword\">this</span>.app.use(bodyParser.json());</span><br><span class=\"line\">       <span class=\"keyword\">this</span>.app.use(bodyParser.urlencoded(&#123; <span class=\"attr\">extended</span>: <span class=\"literal\">false</span> &#125;));</span><br><span class=\"line\">       <span class=\"keyword\">this</span>.app.use(express.static(__dirname.replace(<span class=\"regexp\">/server\\\\core/</span>, <span class=\"string\">'app'</span>)));</span><br><span class=\"line\">       <span class=\"keyword\">new</span> Router(<span class=\"keyword\">this</span>.app);</span><br><span class=\"line\">       <span class=\"built_in\">console</span>.log(<span class=\"string\">'HTTP listening: 127.0.0.1:'</span> + <span class=\"keyword\">this</span>.port);</span><br><span class=\"line\">   &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">module</span>.exports = Server;</span><br></pre></td></tr></table></figure>\n<h2 id=\"User-js\"><a href=\"#User-js\" class=\"headerlink\" title=\"User.js\"></a>User.js</h2><p>和用户相关的所有接口都在这里。下面是一个获取验证码的接口，在获取请求后，会随机生成五位数验证码，发送到用户的邮箱中，并且在生成验证码的同时，会调用删除验证码的方法，在一定时间内将此验证码删除，那么用户就不能再使用此验证码修改密码了。</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">_getCode()&#123;</span><br><span class=\"line\">  <span class=\"keyword\">this</span>.app.get(<span class=\"string\">'/getCode'</span>, (req, res) =&gt; &#123;</span><br><span class=\"line\">    <span class=\"keyword\">let</span> email = req.query.email;</span><br><span class=\"line\">    <span class=\"keyword\">let</span> code = <span class=\"string\">''</span>;</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"keyword\">let</span> i = <span class=\"number\">0</span>; i &lt; <span class=\"number\">5</span>; i++)&#123;</span><br><span class=\"line\">      code += <span class=\"built_in\">Math</span>.floor(<span class=\"built_in\">Math</span>.random() * <span class=\"number\">10</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">let</span> queryData = &#123;</span><br><span class=\"line\">      email: email</span><br><span class=\"line\">    &#125;;</span><br><span class=\"line\">    <span class=\"keyword\">let</span> updateData = &#123;</span><br><span class=\"line\">      code: code</span><br><span class=\"line\">    &#125;;</span><br><span class=\"line\">    <span class=\"keyword\">let</span> callback = <span class=\"function\">(<span class=\"params\">db</span>) =&gt;</span> &#123;</span><br><span class=\"line\">      <span class=\"keyword\">let</span> collection = db.collection(<span class=\"keyword\">this</span>.userCollection);</span><br><span class=\"line\">      collection.updateOne(queryData, &#123;<span class=\"attr\">$set</span>: updateData&#125;, (err, result) =&gt; &#123;</span><br><span class=\"line\">        assert.equal(<span class=\"literal\">null</span>, err);</span><br><span class=\"line\">        db.close();</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(result.result.n === <span class=\"number\">1</span>)&#123;</span><br><span class=\"line\">          <span class=\"keyword\">new</span> Email(email, <span class=\"string\">'重置密码'</span>, <span class=\"string\">'你的验证码是：'</span> + code);</span><br><span class=\"line\">          <span class=\"keyword\">this</span>._removeCode(email);</span><br><span class=\"line\">          res.send(&#123;<span class=\"attr\">status</span>: <span class=\"string\">'success'</span>, <span class=\"attr\">text</span>: <span class=\"string\">'验证码已发往你的邮箱，请查收。30分钟内有效。'</span>&#125;);</span><br><span class=\"line\">        &#125;<span class=\"keyword\">else</span>&#123;</span><br><span class=\"line\">          res.send(&#123;<span class=\"attr\">status</span>: <span class=\"string\">'error'</span>, <span class=\"attr\">text</span>: <span class=\"string\">'没有此邮箱，或许你需要注册账号。'</span>&#125;);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">      &#125;);</span><br><span class=\"line\">    &#125;;</span><br><span class=\"line\">    <span class=\"keyword\">new</span> MongoDB(<span class=\"keyword\">this</span>.currentDB, callback);</span><br><span class=\"line\">  &#125;);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h1 id=\"前端部分代码介绍\"><a href=\"#前端部分代码介绍\" class=\"headerlink\" title=\"前端部分代码介绍\"></a>前端部分代码介绍</h1><p>前端模块化采用的是RequireJS，AP_WEB2.0会使用Webpack,那时候会使用ES2015的模块管理。前端的代码较多，这里主要介绍下自己写的特别的功能。QueryString.js用户获取url上的参数信息。</p>\n  <figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">define([], <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\"><span class=\"meta\">  'use strict'</span>;</span><br><span class=\"line\">  <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">QueryString</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">constructor</span>()&#123;</span><br><span class=\"line\">      <span class=\"keyword\">let</span> search = <span class=\"built_in\">window</span>.location.search.substring(<span class=\"number\">1</span>).split(<span class=\"string\">'&amp;'</span>);</span><br><span class=\"line\">      <span class=\"keyword\">let</span> tempGroup = [];</span><br><span class=\"line\">      <span class=\"keyword\">for</span> (<span class=\"keyword\">let</span> p <span class=\"keyword\">of</span> search) &#123;</span><br><span class=\"line\">        tempGroup.push(p.split(<span class=\"string\">'='</span>));</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">      <span class=\"keyword\">this</span>.params = <span class=\"keyword\">new</span> <span class=\"built_in\">Map</span>(tempGroup);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    getValue(name)&#123;</span><br><span class=\"line\">      <span class=\"keyword\">return</span> <span class=\"keyword\">this</span>.params.get(name);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"keyword\">let</span> queryString = <span class=\"keyword\">new</span> QueryString();</span><br><span class=\"line\">  <span class=\"keyword\">return</span> queryString;</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n<h2 id=\"Draggable-js\"><a href=\"#Draggable-js\" class=\"headerlink\" title=\"Draggable.js\"></a>Draggable.js</h2><p>用于添加拖动功能，在创建时，传入需要拖动的元素，这个元素就能拖动了。</p>\n  <figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">define([], <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\"><span class=\"meta\">  'use strict'</span>;</span><br><span class=\"line\">  <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Draggable</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">constructor</span>($container) &#123;</span><br><span class=\"line\">      <span class=\"keyword\">this</span>.$container = $container;</span><br><span class=\"line\">      <span class=\"keyword\">for</span> (<span class=\"keyword\">let</span> subContainer <span class=\"keyword\">of</span> $container.children()) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">this</span>._handleEvents($(subContainer));</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    </span><br><span class=\"line\">    _handleEvents($subContainer) &#123;</span><br><span class=\"line\">      $subContainer.on(<span class=\"string\">'mousedown'</span>, (e) =&gt; &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (!$(e.target).hasClass(<span class=\"string\">'button'</span>)) &#123;</span><br><span class=\"line\">          <span class=\"keyword\">this</span>._handleMousedown(e);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">      &#125;);</span><br><span class=\"line\">      $(<span class=\"built_in\">document</span>).on(<span class=\"string\">'mousemove'</span>, (e) =&gt; &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (!$(e.target).hasClass(<span class=\"string\">'button'</span>)) &#123;</span><br><span class=\"line\">          <span class=\"keyword\">this</span>._handleMousemove(e);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">      &#125;);</span><br><span class=\"line\">      $(<span class=\"built_in\">document</span>).on(<span class=\"string\">'mouseup'</span>, (e) =&gt; &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (!$(e.target).hasClass(<span class=\"string\">'button'</span>)) &#123;</span><br><span class=\"line\">          <span class=\"keyword\">this</span>._handleMouseup(e);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">      &#125;);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    </span><br><span class=\"line\">    _handleMousedown(e) &#123;</span><br><span class=\"line\">      <span class=\"keyword\">let</span> &#123;left, top&#125; = <span class=\"keyword\">this</span>.$container.css([<span class=\"string\">'left'</span>, <span class=\"string\">'top'</span>]);</span><br><span class=\"line\">      <span class=\"keyword\">this</span>.offsetX = <span class=\"keyword\">this</span>._parseStr(left) - e.clientX;</span><br><span class=\"line\">      <span class=\"keyword\">this</span>.offsetY = <span class=\"keyword\">this</span>._parseStr(top) - e.clientY;</span><br><span class=\"line\">      <span class=\"keyword\">this</span>.mouseDown = <span class=\"literal\">true</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    </span><br><span class=\"line\">    _handleMousemove(e) &#123;</span><br><span class=\"line\">      $(e.target).css(<span class=\"string\">'cursor'</span>, <span class=\"string\">'url(/images/m1.cur),default !important'</span>);</span><br><span class=\"line\">      <span class=\"keyword\">if</span> (<span class=\"keyword\">this</span>.mouseDown) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">let</span> x = e.clientX;</span><br><span class=\"line\">        <span class=\"keyword\">let</span> y = e.clientY;</span><br><span class=\"line\">        <span class=\"keyword\">let</span> positionX = x + <span class=\"keyword\">this</span>.offsetX;</span><br><span class=\"line\">        <span class=\"keyword\">let</span> positionY = y + <span class=\"keyword\">this</span>.offsetY;</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.$container.css(&#123;</span><br><span class=\"line\">          left: positionX,</span><br><span class=\"line\">          top: positionY,</span><br><span class=\"line\">        &#125;);</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    </span><br><span class=\"line\">    _handleMouseup(e) &#123;</span><br><span class=\"line\">      $(e.target).css(<span class=\"string\">'cursor'</span>, <span class=\"string\">'url(/images/m1.cur),default !important'</span>);</span><br><span class=\"line\">      <span class=\"keyword\">this</span>.mouseDown = <span class=\"literal\">false</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    </span><br><span class=\"line\">    _parseStr(str) &#123;</span><br><span class=\"line\">      <span class=\"keyword\">if</span>(<span class=\"keyword\">typeof</span> str !== <span class=\"string\">'string'</span>)&#123;</span><br><span class=\"line\">        str += <span class=\"string\">''</span>; </span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">      <span class=\"keyword\">return</span> <span class=\"built_in\">Number</span>(str.split(<span class=\"string\">'px'</span>)[<span class=\"number\">0</span>]);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  </span><br><span class=\"line\">  <span class=\"keyword\">return</span> Draggable;</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n<h2 id=\"Rain-js\"><a href=\"#Rain-js\" class=\"headerlink\" title=\"Rain.js\"></a>Rain.js</h2><p>用于添加鼠标点击效果，创建之后，在整个网页中，除了class中有button的元素，其他都会在点击时，出现像雨滴落在地上的效果。</p>\n  <figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">define([], <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\"><span class=\"meta\">  'use strict'</span>;</span><br><span class=\"line\">  <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Rain</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">constructor</span>() &#123;</span><br><span class=\"line\">      <span class=\"keyword\">this</span>.settings = &#123;</span><br><span class=\"line\">        width: <span class=\"number\">10</span>,</span><br><span class=\"line\">        height: <span class=\"number\">10</span>,</span><br><span class=\"line\">        borderColor: <span class=\"string\">'#c6cac9'</span>,</span><br><span class=\"line\">        opacity: <span class=\"number\">0.7</span>,</span><br><span class=\"line\">        borderRadius: <span class=\"number\">5</span>,</span><br><span class=\"line\">        borderWidth: <span class=\"number\">5</span>,</span><br><span class=\"line\">        maxWidth: <span class=\"number\">70</span>,</span><br><span class=\"line\">        widthOffset: <span class=\"number\">2</span>,</span><br><span class=\"line\">        radiusOffset: <span class=\"number\">1</span>,</span><br><span class=\"line\">        opacityOffset: <span class=\"number\">0.05</span>,</span><br><span class=\"line\">        borderOffset: <span class=\"number\">1</span>,</span><br><span class=\"line\">        position: <span class=\"string\">'fixed'</span>,</span><br><span class=\"line\">        zIndex: <span class=\"number\">100</span>,</span><br><span class=\"line\">        borderStyle: <span class=\"string\">'solid'</span>,</span><br><span class=\"line\">        class: 'rain',</span><br><span class=\"line\">      &#125;;</span><br><span class=\"line\">      <span class=\"keyword\">this</span>._handleEvents();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    </span><br><span class=\"line\">    _handleEvents() &#123;</span><br><span class=\"line\">      <span class=\"keyword\">let</span> settings = <span class=\"keyword\">this</span>.settings;</span><br><span class=\"line\">      $(<span class=\"built_in\">document</span>).on(<span class=\"string\">'click'</span>, (e) =&gt; &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>($(e.target).hasClass(<span class=\"string\">'button'</span>))&#123;</span><br><span class=\"line\">          <span class=\"keyword\">return</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">let</span> $rain = $(<span class=\"string\">'&lt;div&gt;'</span>).attr(<span class=\"string\">'class'</span>, settings.class).css(&#123;</span><br><span class=\"line\">          position: settings.position,</span><br><span class=\"line\">          zIndex: settings.zIndex,</span><br><span class=\"line\">          borderStyle: settings.borderStyle,</span><br><span class=\"line\">        &#125;);</span><br><span class=\"line\">        $(<span class=\"string\">'body'</span>).append($rain);</span><br><span class=\"line\">        <span class=\"keyword\">let</span> x = e.clientX;</span><br><span class=\"line\">        <span class=\"keyword\">let</span> y = e.clientY;</span><br><span class=\"line\">        <span class=\"keyword\">this</span>._initRain($rain, x, y);</span><br><span class=\"line\">        <span class=\"keyword\">this</span>._updateRain($rain, x, y);</span><br><span class=\"line\">      &#125;);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    </span><br><span class=\"line\">    _updateRain($rain, x, y) &#123;</span><br><span class=\"line\">      <span class=\"keyword\">let</span> settings = <span class=\"keyword\">this</span>.settings;</span><br><span class=\"line\">      <span class=\"keyword\">let</span> rainThread = setInterval( <span class=\"function\"><span class=\"params\">()</span> =&gt;</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">let</span> &#123;width, height,top, left, opacity, borderWidth, borderRadius&#125; = $rain.css([<span class=\"string\">'width'</span>, <span class=\"string\">'height'</span>,<span class=\"string\">'top'</span>, <span class=\"string\">'left'</span>, <span class=\"string\">'opacity'</span>, <span class=\"string\">'borderWidth'</span>, <span class=\"string\">'borderRadius'</span>]);</span><br><span class=\"line\">        $rain.css(&#123;</span><br><span class=\"line\">          width: <span class=\"keyword\">this</span>._parseStr(width) + settings.widthOffset,</span><br><span class=\"line\">          height: <span class=\"keyword\">this</span>._parseStr(height) + settings.widthOffset,</span><br><span class=\"line\">          top: y - <span class=\"keyword\">this</span>._parseStr(height) / <span class=\"number\">2</span>,</span><br><span class=\"line\">          left: x - <span class=\"keyword\">this</span>._parseStr(width) / <span class=\"number\">2</span>,</span><br><span class=\"line\">          opacity: <span class=\"keyword\">this</span>._parseStr(opacity) - settings.opacityOffset,</span><br><span class=\"line\">          borderWidth: <span class=\"keyword\">this</span>._parseStr(borderWidth) + settings.borderOffset,</span><br><span class=\"line\">          borderRadius: <span class=\"keyword\">this</span>._parseStr(borderRadius) + settings.radiusOffset,</span><br><span class=\"line\">        &#125;);</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (<span class=\"keyword\">this</span>._parseStr(width) &gt; settings.maxWidth) &#123;</span><br><span class=\"line\">          clearInterval(rainThread);</span><br><span class=\"line\">          $rain.remove();</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">      &#125;, <span class=\"number\">10</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    </span><br><span class=\"line\">    _initRain($rain, x, y) &#123;</span><br><span class=\"line\">      <span class=\"keyword\">let</span> settings = <span class=\"keyword\">this</span>.settings;</span><br><span class=\"line\">      $rain.css(&#123;</span><br><span class=\"line\">        width: settings.width,</span><br><span class=\"line\">        height: settings.height,</span><br><span class=\"line\">        borderColor: settings.borderColor,</span><br><span class=\"line\">        opacity: settings.opacity,</span><br><span class=\"line\">        borderRadius: settings.borderRadius,</span><br><span class=\"line\">        borderWidth: settings.borderWidth,</span><br><span class=\"line\">        top: y - <span class=\"keyword\">this</span>._parseStr(settings.height) / <span class=\"number\">2</span>,</span><br><span class=\"line\">        left: x - <span class=\"keyword\">this</span>._parseStr(settings.width) / <span class=\"number\">2</span>,</span><br><span class=\"line\">      &#125;);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    </span><br><span class=\"line\">    _parseStr(str)&#123;</span><br><span class=\"line\">      <span class=\"keyword\">if</span>(<span class=\"keyword\">typeof</span> str !== <span class=\"string\">'string'</span>)&#123;</span><br><span class=\"line\">        str += <span class=\"string\">''</span>; </span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">      <span class=\"keyword\">return</span> <span class=\"built_in\">Number</span>(str.split(<span class=\"string\">'px'</span>)[<span class=\"number\">0</span>]);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    </span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  </span><br><span class=\"line\">  <span class=\"keyword\">return</span> Rain;</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n<h2 id=\"Message-js\"><a href=\"#Message-js\" class=\"headerlink\" title=\"Message.js\"></a>Message.js</h2><p>最后一个要介绍的是Message.js，它是一个全局提示的工具，项目中使用它做ajax返回信息的控制，做聊天室消息预览等。当有一些信息要发送给用户时，会在浏览器的右上角出现对话框，包含信息标题，信息内容等。并且分为几种类型的提示，不同类型会有不同主题的对话框出现。由于代码太多，这里只列出了它的构造方法。</p>\n  <figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">constructor</span>(type, content) &#123;</span><br><span class=\"line\">  <span class=\"keyword\">this</span>.title = <span class=\"string\">''</span>;</span><br><span class=\"line\">  <span class=\"keyword\">this</span>.content = content;</span><br><span class=\"line\">  <span class=\"keyword\">this</span>.showTime = <span class=\"number\">5000</span>;</span><br><span class=\"line\">  <span class=\"keyword\">this</span>.clearTime = <span class=\"number\">1000</span>;</span><br><span class=\"line\">  <span class=\"keyword\">this</span>.clearThread = <span class=\"literal\">null</span>;</span><br><span class=\"line\">  <span class=\"keyword\">this</span>.timeThread = <span class=\"literal\">null</span>;</span><br><span class=\"line\">  <span class=\"keyword\">this</span>.$Message = $(<span class=\"string\">'&lt;div&gt;'</span>).css(&#123;</span><br><span class=\"line\">    color: <span class=\"string\">'#fff'</span>,</span><br><span class=\"line\">    borderRadius: <span class=\"number\">5</span>,</span><br><span class=\"line\">    width: <span class=\"number\">300</span>,</span><br><span class=\"line\">    display: <span class=\"string\">'none'</span>,</span><br><span class=\"line\">    zIndex: <span class=\"number\">110</span>,</span><br><span class=\"line\">    margin: <span class=\"string\">'2px 5px'</span>,</span><br><span class=\"line\">    clear: <span class=\"string\">'both'</span>,</span><br><span class=\"line\">    float: <span class=\"string\">'right'</span>,</span><br><span class=\"line\">    position: <span class=\"string\">'relative'</span>,</span><br><span class=\"line\">    boxShadow: <span class=\"string\">'0px 0px 10px rgba(255, 255, 255, 1)'</span>,</span><br><span class=\"line\">    opacity: <span class=\"number\">0.9</span>,</span><br><span class=\"line\">  &#125;).addClass(<span class=\"string\">'message'</span>);</span><br><span class=\"line\">  </span><br><span class=\"line\">  <span class=\"keyword\">this</span>.$icon = $(<span class=\"string\">'&lt;i&gt;'</span>).css(&#123;</span><br><span class=\"line\">    display: <span class=\"string\">'inline-block'</span>,</span><br><span class=\"line\">    float: <span class=\"string\">'left'</span>,</span><br><span class=\"line\">    marginLeft: <span class=\"number\">10</span>,</span><br><span class=\"line\">    width: <span class=\"number\">20</span>,</span><br><span class=\"line\">    textAlign: <span class=\"string\">'center'</span>,</span><br><span class=\"line\">    fontSize: <span class=\"string\">'1.2em'</span>,</span><br><span class=\"line\">  &#125;).addClass(<span class=\"string\">'msgIcon'</span>).appendTo(<span class=\"keyword\">this</span>.$Message);</span><br><span class=\"line\">  </span><br><span class=\"line\">  <span class=\"keyword\">this</span>.$title = $(<span class=\"string\">'&lt;div&gt;'</span>).css(&#123;</span><br><span class=\"line\">    height: <span class=\"string\">'45%'</span>,</span><br><span class=\"line\">    width: <span class=\"number\">260</span>,</span><br><span class=\"line\">    float: <span class=\"string\">'right'</span>,</span><br><span class=\"line\">    fontSize: <span class=\"string\">'1.2em'</span>,</span><br><span class=\"line\">  &#125;).addClass(<span class=\"string\">'msgTitle'</span>).appendTo(<span class=\"keyword\">this</span>.$Message);</span><br><span class=\"line\">  </span><br><span class=\"line\">  <span class=\"keyword\">this</span>.$time = $(<span class=\"string\">'&lt;span&gt;'</span>).css(&#123;</span><br><span class=\"line\">    position: <span class=\"string\">'absolute'</span>,</span><br><span class=\"line\">    top: <span class=\"number\">2</span>,</span><br><span class=\"line\">    right: <span class=\"number\">2</span>,</span><br><span class=\"line\">    fontSize: <span class=\"string\">'0.7em'</span>,</span><br><span class=\"line\">  &#125;).addClass(<span class=\"string\">'msgTime'</span>).appendTo(<span class=\"keyword\">this</span>.$Message);</span><br><span class=\"line\">  </span><br><span class=\"line\">  <span class=\"keyword\">this</span>.$content = $(<span class=\"string\">'&lt;div&gt;'</span>).css(&#123;</span><br><span class=\"line\">    float: <span class=\"string\">'right'</span>,</span><br><span class=\"line\">    height: <span class=\"string\">'56%'</span>,</span><br><span class=\"line\">    width: <span class=\"number\">260</span>,</span><br><span class=\"line\">    paddingBottom: <span class=\"number\">5</span>,</span><br><span class=\"line\">    paddingRight: <span class=\"number\">5</span>,</span><br><span class=\"line\">    fontSize: <span class=\"string\">'0.8em'</span>,</span><br><span class=\"line\">  &#125;).addClass(<span class=\"string\">'msgContent'</span>).appendTo(<span class=\"keyword\">this</span>.$Message);</span><br><span class=\"line\">  </span><br><span class=\"line\">  <span class=\"keyword\">switch</span> (type) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">case</span> <span class=\"string\">'infor'</span>:</span><br><span class=\"line\">      <span class=\"keyword\">this</span>.title = <span class=\"string\">'提示'</span>;</span><br><span class=\"line\">      <span class=\"keyword\">this</span>._infor();</span><br><span class=\"line\">      <span class=\"keyword\">break</span>;</span><br><span class=\"line\">    <span class=\"keyword\">case</span> <span class=\"string\">'success'</span>:</span><br><span class=\"line\">      <span class=\"keyword\">this</span>.title = <span class=\"string\">'成功'</span>;</span><br><span class=\"line\">      <span class=\"keyword\">this</span>._success();</span><br><span class=\"line\">      <span class=\"keyword\">break</span>;</span><br><span class=\"line\">    <span class=\"keyword\">case</span> <span class=\"string\">'error'</span>:</span><br><span class=\"line\">      <span class=\"keyword\">this</span>.title = <span class=\"string\">'错误'</span>;</span><br><span class=\"line\">      <span class=\"keyword\">this</span>._error();</span><br><span class=\"line\">      <span class=\"keyword\">break</span>;</span><br><span class=\"line\">    <span class=\"keyword\">case</span> <span class=\"string\">'warning'</span>:</span><br><span class=\"line\">      <span class=\"keyword\">this</span>.title = <span class=\"string\">'警告'</span>;</span><br><span class=\"line\">      <span class=\"keyword\">this</span>._warning();</span><br><span class=\"line\">      <span class=\"keyword\">break</span>;</span><br><span class=\"line\">    <span class=\"keyword\">case</span> <span class=\"string\">'message'</span>:</span><br><span class=\"line\">      <span class=\"keyword\">this</span>._message();</span><br><span class=\"line\">      <span class=\"keyword\">break</span>;</span><br><span class=\"line\">    <span class=\"keyword\">default</span>:</span><br><span class=\"line\">      <span class=\"keyword\">break</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h1 id=\"总结\"><a href=\"#总结\" class=\"headerlink\" title=\"总结\"></a>总结</h1><p>写代码很重要，调试也很重要，好的调试方法，可以更快的发现、解决问题。正视错误，用积极的态度去处理错误，会提升自己面临问题时的处理能力。</p>\n"},{"title":"技术选型","date":"2018-06-18T12:16:52.000Z","_content":"\n\n# 做技术选型时，要注意些什么？\n\n\n对于技术选型，有些建议供你参考。此外，还有一个实践案例供你借鉴。\n\n\n\n# 写在前面\n对于一名热爱技术的工程师来说，很容易出现非常热衷于使用新技术的情况，记得有一次和一位做平台应用的同事闲聊，他问我最近在搞什么，我说在研究 Hadoop，正在用 MapReduce 处理海量图片的智能分析，他一脸羡慕：“能搞新技术，真好！”。\n\n作为一名工程师，我可以理解大家的心情，我们都是热爱尝试新技术、抛弃过时技术的人。但是首先得明确，到底技术是不是过时的，还是仅仅是你认为它过时了。这篇文章我想谈谈我对技术选型的理解。\n\n这篇文章不仅仅是写给工程师，更多是写给技术团队负责人（大多数也是从工程师升职上去的，起初思维和工程师差距不大），因为你们具体负责技术选型的方向、方法、过程、结论明确。\n\n# 技术选型的注意事项\n先来看看软件开发领域的变化，变化实在是太快了。在 JavaScript 里，几乎每天都有新框架诞生。Node.js(关键词：事件编程），React 编程，Meteor.js（关键词：共享状态），前端 MVC，React.js…… 你可以随便举例。软件工程领域里新概念也层出不穷：领域驱动开发，六边形架构理论，DCI 架构（数据 - 场景 - 交互）。\n\n洛克希德•马丁公司的著名飞机设计师凯利•约翰逊所提出的 KISS 原则，指出架构设计能简单绝不复杂，坚决砍掉任何华而不实的设计，不要因为 3 年后可能怎样甚至是一些现实中根本无法出现的场景，加入到当下的架构设计中，导致系统无比复杂。有时候看似引入的是一个很简单很容易解决的问题，可能在具体的执行过程中带来一系列不必要的麻烦。技术选型其实遇到的问题和系统架构设计类似，也容易出现人为因素导致的偏差，进而出现和系统架构过度设计类似的麻烦。\n\n对于技术选型，有以下几个建议：\n\n# 选择你最熟悉的技术\n记得看过一篇文章，里面提到一个新项目最好不要使用超过 30% 的新技术，我觉得这有一定道理，因为对于你完全不知道的技术，你不可能控制使用过程中出现的风险。我在技术管理中的向下管理里提起过，任何一位技术 Leader，如果你不能得到下属的技术尊重，你必将受到惩罚。\n\n也不能说完全不能使用新技术，前几天和朋友聊天，他提到了另外一位总监下属有几个人转岗了，都是技术牛人，最主要的原因是这位总监坚决排斥新技术，坚持自己熟悉 的十年前的框架和编写代码规范。他对于一个新技术的天然不信任，在技术接受程度还不够高，并且认为公司内没有人能吃透这个技术的情况下，不愿意让自己的业务做第一个吃螃蟹的人，这种做法不能说完全错误，至少对于他自己来说很稳健，但是却压制了一些有追求人的内心。\n\n谨慎是个美德，不过如果在一个非常追求速度的业务里，这可能也意味着过于保守，会延误时机。\n\n那我们应该怎样做到选择技术呢？我认为，在选择技术时有两个大原则。第一，要取其长避其短；第二，要关注技术的发展前景。每种技术都是有它特定的适用场景，开发者经常犯的错误就是盲目追新，当一个新语言、框架、工具出现后，特别是开发者自己学会了这种新技术后，就会有种“拿着锤子找钉子”的感觉，将新技术滥用于各种项目。\n\n记住，技术选型是稳定压倒一切。\n\n# 选择拥有强大社区支撑的开源技术\n没有人喜欢“alone in the dark”的感觉，同样，也很少有工程师喜欢孤独地面对代码缺陷。我们之所以喜欢在 Apache 上挑选合适的新框架尝试使用，是因为 Apache 始终保持运作着强大的社区，每天都有很多新建的框架，也设计了一整套生命周期管理标准，让一个项目能够从孵化项目逐渐一步步地走向顶级项目。除了像 Apache 这样的社区，我们也可以评估是否存在一些商业公司提供针对该技术或者框架的有偿支撑，一般来说，有公司愿意围绕该技术布局，也能说明确实存在使用空间。例如 Apache Cassandra，目前就有 Datastax 和 LastPickle 两家公司对它提供技术指导和有偿辅助软件支撑。\n\n其实看一项技术活不活跃，只要去 StackOverflow 这样的网站看看提问的人多不多就知道了。\n\n# 确保技术前进步伐\n选择一个技术的最低标准是，技术的生命周期必须显著长于项目的生命周期。\n\n为什么需要确保所选择的技术不断前进？因为这个世界是发展的，科技发展更是非常得快速，你可以看看，所有的成功的科技公司都是因为跑在了别人前面，而不是慢悠悠的工作态度，这就是科技界的残酷，也正是为什么 FaceBook 办公室里贴着：“要么做到最好，要么死亡”。\n\n技术的前进不仅仅取决于它本身，而是和大环境发展、上下游用户也密切相关。比如 AI，60 年代其实就已经提出了相应概念，为什么直到今年才进入发展元年？因为芯片的计算效率、数据样本规模没有达到要求。而 Functional Language 为什么这么多年一直默默无闻，而从前几年开始逐渐盛行？因为机器学习来了，AI 来了，它们有了用武之地。\n\n总的来说，你需要使用你所选择的软件技术，快速地实现应用程序的构建。记住一句话：好的技术栈永远跑在用户需求前面。\n\n# 学会从业务端开始思考\n\n技术选型必须贴着业务来选择，不同业务阶段会有不同的选型方式。处于初创期的业务，选型的基准是灵活。只要一个技术够用并且开发效率足够高，那么就可以选择它。初创的业务往往带有风险性和不确定性，朝令夕改、反复试错是常态，技术必须适应业务的节奏，然后才是其他方面。等业务进入稳定期，选型的基准是可靠。技术始终是业务的基石，当业务稳定了技术不稳，那就会成为业务的一块短板，就必须要修正。当业务进入维护期，选型的基准是妥协。代码永远有变乱的趋势，一般经过一两年就有必要对代码来一次大一点的重构。在这种时候，必须得正视各种遗留代码的迁移成本，如果改变技术选型会带来遗留代码重写，这背后带来的代价业务无法承受，那么我们就不得不考虑在现有技术选型之上做一些小修小补或者螺旋式上升的重构。\n\n正因为技术选型和业务相关，我们能够观察到一些很明显的现象：新技术往往被早期创业团队或大公司的新兴业务使用；中大型公司的核心业务则更倾向于用一些稳定了几年的技术；一个公司如果长期使用一种技术，就会倾向于一直使用下去，甚至连版本都不更新的使用下去。这现象背后都是有道理的。\n\n回到我们的主题，学会从业务端思考。首先我们需要充分地理解业务，理解用户需求，理解当下需要解决的首要问题，以及可能的风险有哪些，再将目标进行分解，进行具体的技术选型、模型设计、架构设计。\n\n举个例子。假设我们需要解决的核心问题是并发，则可以通过各种缓存手段（本地缓存、分布式缓存），来提高查询的吞吐，这样虽然会一定程度上需要在数据一致性上做出牺牲，由强一致性变为最终一致性。\n\n但是，如果数据一致性不是核心需要解决的问题，那么，此问题的优先级则可以先放一放，反过来如果核心问题变为数据的一致性，如交易系统，那么再怎么强调数据的一致性都不为过，由于分布式环境下为了应对高并发的写入以及海量数据的存储，通常需要对关系型数据库进行分库分表扩展，这也给数据一致性带来了很大的挑战，原本的单库事务的强一致性保障，在这个时候升级为跨库的分布式事务，而通过二阶段或者三阶段提交所保障的分布式事务，由于分布式事务管理器与资源管理器之间的多次网络通信成本，吞吐及效率上很难满足高并发场景下的要求，而这实际上对于交易系统来说，又是一个很难回避的问题。\n\n因此，大家又想出很多的招来解决这个问题，通过可靠消息系统来保障不失为一种方式，变同步为异步，但是，又引入新的问题，消息系统为保证不丢消息，则很难保证消息的顺序性以及是否重复投递，这样作为消息的接收方，则需要保障消息处理的幂等性，以及对消息去重。\n\n# 先验证，后使用\n对于未经验证的新技术、新理念的引入一定要慎重，一定要在全方位的验证过后，再大规模的使用。新技术、新理念的出现，自然有它的诱惑，慎重并不代表保守，技术总是在不断前进，拥抱变化本身没有问题，但是引入不成熟的技术看似能带来短期的收益，但是它的风险或者是后期的成本可能远远大于收益。\n\n# 重视经验\n技术选型是个很需要经验的活，得有大量的信息积累和输入，再根据具体现实情况输出一个结果。我们在选型的时候最忌讳的是临时抱佛脚、用网上收集一些碎片知识来决策，这是非常危险的，我们得确保自己所有思考都是基于以前的事实，还要弄清楚这些事实背后的假设，这都需要让知识内化形成经验。\n\n经验的本质是什么，有什么方法能够确定自己的经验增长了，而不是不断在重复一些很熟悉的东西。我现在的结论是，经验等于知识索引的完备程度。\n\n我们一生中会积累很多的知识，如果把我们的大脑比作数据库的话，那我们一定有一部分脑存储贡献给了内容的索引，它能帮助我们将关联知识更快的取出来，并且辅助决策。经验增长等同于我们知识索引的增长，意味着我们能轻易的调动更多的关联知识来做更全面的决策。\n\n要想建立好这个知识索引，我们得保持技术敏感性和广度，也就是要做到持续的信息输入、内化，并发现信息之间的关联性，建立索引，记下来。说起来容易，做起来还是挺有难度的。\n\n首先难在信息输入量大，忘记了怎么办。我们的大脑不是磁盘，不常用的知识就会忘记，忘记了就跟没看过是一回事。我的经验是一定要对知识进行压缩，记住的是最关键的细节，并且反复的去回味这个细节。\n\n# 我的实际案例\n去年我做了一次对于分布式数据库的选型工作。我们为什么要做这次选型？因为存在明确的需求，我们需要解决大规模高并发数据存储，单次数据不大，但是存储频率、读取频率都很高，并且要确保不丢失数据，这样的需求对于关系型数据库来说，出现了性能瓶颈。\n\n我对于技术选型有自己的一套方法论，我知道，我不可能什么技术都懂，所以我会按照自己的这套方法论来具体执行，避免出现选型误差。我的步骤是：“列出需求”-“细分需求”-“明确搜索方向”-“网络搜索”-“明确评判标准”-“分头执行”-“汇总材料”-“初步选择”-“进一步调研”-“会议评审”-“做出决定”。这些步骤太多，需求我已经介绍了，这里具体再讲讲我这一次是如何进入下一步选型的，也就是“初步选择”-“进一步调研”之间的过程。\n\n我通过网络搜索（进入 Google，搜索 Distributed Database、NoSQL Database 等关键词），我找到了如下这些国内外专家推荐的分布式数据库，他们的基本描述如下所示：\n\nHyperTable： 一个开源、高性能、可伸缩的数据库，它采用与 Google 的 BigTable 相似的模型。该数据库数据按主键在物理上排序，适用于数据分析领域，采用 C++ 编写，可以运行在 HDFS 上面。该数据库受到 GPLV3 协议约束，考虑到它和 HBase 从系统架构上来说很相似，但是协议约束较多，所以放弃调研，转而调研 HBase。\n\nHBase： 即 Hadoop Database，是一个高可靠性、高性能、面向列、可伸缩的分布式存储系统，采用主 / 从架构设计，利用 HBase 技术可在廉价 PC Server 上搭建起大规模结构化存储集群。它是 Google BigTable 的开源实现。\n\nVoltDB： 一个内存数据库，提供了 NoSQL 数据库的可伸缩性和传统关系型数据库系统的 ACID 一致性，支持单节点 53000TPS/s。该数据库受到 GPLV3 协议约束。VoltDB 有两个版本，一个开源社区版本和一个付费企业版本。付费企业版本除包含了所有开源社区版的功能，还有些其他特点，诸如计算机集群管理控制台、系统性能仪表盘、数据库宕机恢复、在线数据库 Schema 修改、在线数据库节点重新加入、JDBC 和 OLAP 导出支持、命令日志。\n\n由于该框架开源社区不活跃，主导者更加希望使用付费版本，所以决定放弃它，转而调研类似的 Redis。\n\nCloudData： 一个结构化数据库，没有中文资料，从系统架构、功能上分析，类似于 MongoDB。\n\nGridool： 一种基于 MapReduce 原理设计的网格计算引擎，不支持数据存储，所以放弃。\n\nDdb-query-optimizer： 找不到资料，放弃。\n\nCages： 基于 ZooKeeper 实现数据协调 / 同步，不仅能性数据分布式存储，放弃。\n\nRedis： 一个开源的基于键值对和存储系统，具备高性能特征。支持主从复制（master-slave replication），并且具有非常快速的非阻塞首先同步（non-blockingfirst synchronization）、网络断开自动重连等功能。同时 Redis 还具有其他一些特征，其中包括简单的 check-and-set 机制、pub/sub 和配置设置等，以便使得 Redis 能够表现得更像缓存（Cace）。绝大部分主流编程语言都有官方推荐的客户端。\n\nMongoDB： 一个开源的 C++ 编写的面向集合且模式自由的文档性数据库，是 NoSQL 中功能最丰富、最像关系型数据库的产品。\n\n核心优势：灵活文档模型 + 高可用复制集 + 可扩展分片集群；\n\n功能特点：二级索引、地理位置索引、aggregate、map-reduce、OridFS 支持文件存储。\n\n不足之处：不支持事务，仅支持简单 left join。\n\nSpanner：Google 的可扩展的、多版本的、全球分布式的同步复制方式数据库。Spanner 是第一个支持全球规模的分布式数据、外部一致性分布式事务的分布式数据库。它是一个在遍布全球范围的数据中心内部通过多套 Paxos 状态机器共享数据的数据库。复制被用于全局可用性和地理位置；客户在副本之间自动切换。当数据量或者服务器数量发生变化时，Spanner 在机器之间自动共享数据，并且 Spanner 在机器之间自动迁移数据（甚至在数据中心之间），用以负载均衡和响应失败。Spanner 被设计为在几百万台机器之上横向扩展，这些扩展穿过了数百个数据中心和万亿行数据。功能很强大，可惜没有开源。\n\nElasticSearch： 一个基于 Lucene 的搜索服务器。它提供了一个分布式多用户能力的全文搜索引擎，基于 Restful Web 接口。ElasticSearch 是用 Java 开发的，并作为 Apache 许可条款下的开放源码发布，是当前流行的企业级搜索引擎。\n\n最终通过这些技术之间的互相相似度对比，并且我们设定了一些规则，例如开源协议的约束，这一点其实逐渐开始真正起到约束了，看看 FaceBook 针对 Reactor 的专利约束给大家造成的麻烦，你就懂了。最终，我选择了 Cassandra、MongoDB、Reddis、MySQL、HBase 等几款进入下一步深入调研。\n\n# 写在最后\n我们进行技术选型，有的团队会根据社交媒体上的讨论来决定选择哪种架构，有的团队会跟风走，哪个热门就选哪个，这些都不是正确的方式，我们应该按照方法论执行。此外，我们作为团队管理者，一边要督促自己不断学习新技术，自己能够上手使用，也要结合实际团队情况，规划新技术的预研、落地步骤，让团队成员既能享受到稳定技术的红利，也能不断地尝试新事物，让大家能够看到未来，不担心自己逐渐落后于行业的发展，更能提升对于公司的归属感。做到这些，真不容易，加油，诸位。","source":"_posts/技术选型.md","raw":"---\ntitle: 技术选型\ndate: 2018-06-18 20:16:52\ntags: 综合技能\n---\n\n\n# 做技术选型时，要注意些什么？\n\n\n对于技术选型，有些建议供你参考。此外，还有一个实践案例供你借鉴。\n\n\n\n# 写在前面\n对于一名热爱技术的工程师来说，很容易出现非常热衷于使用新技术的情况，记得有一次和一位做平台应用的同事闲聊，他问我最近在搞什么，我说在研究 Hadoop，正在用 MapReduce 处理海量图片的智能分析，他一脸羡慕：“能搞新技术，真好！”。\n\n作为一名工程师，我可以理解大家的心情，我们都是热爱尝试新技术、抛弃过时技术的人。但是首先得明确，到底技术是不是过时的，还是仅仅是你认为它过时了。这篇文章我想谈谈我对技术选型的理解。\n\n这篇文章不仅仅是写给工程师，更多是写给技术团队负责人（大多数也是从工程师升职上去的，起初思维和工程师差距不大），因为你们具体负责技术选型的方向、方法、过程、结论明确。\n\n# 技术选型的注意事项\n先来看看软件开发领域的变化，变化实在是太快了。在 JavaScript 里，几乎每天都有新框架诞生。Node.js(关键词：事件编程），React 编程，Meteor.js（关键词：共享状态），前端 MVC，React.js…… 你可以随便举例。软件工程领域里新概念也层出不穷：领域驱动开发，六边形架构理论，DCI 架构（数据 - 场景 - 交互）。\n\n洛克希德•马丁公司的著名飞机设计师凯利•约翰逊所提出的 KISS 原则，指出架构设计能简单绝不复杂，坚决砍掉任何华而不实的设计，不要因为 3 年后可能怎样甚至是一些现实中根本无法出现的场景，加入到当下的架构设计中，导致系统无比复杂。有时候看似引入的是一个很简单很容易解决的问题，可能在具体的执行过程中带来一系列不必要的麻烦。技术选型其实遇到的问题和系统架构设计类似，也容易出现人为因素导致的偏差，进而出现和系统架构过度设计类似的麻烦。\n\n对于技术选型，有以下几个建议：\n\n# 选择你最熟悉的技术\n记得看过一篇文章，里面提到一个新项目最好不要使用超过 30% 的新技术，我觉得这有一定道理，因为对于你完全不知道的技术，你不可能控制使用过程中出现的风险。我在技术管理中的向下管理里提起过，任何一位技术 Leader，如果你不能得到下属的技术尊重，你必将受到惩罚。\n\n也不能说完全不能使用新技术，前几天和朋友聊天，他提到了另外一位总监下属有几个人转岗了，都是技术牛人，最主要的原因是这位总监坚决排斥新技术，坚持自己熟悉 的十年前的框架和编写代码规范。他对于一个新技术的天然不信任，在技术接受程度还不够高，并且认为公司内没有人能吃透这个技术的情况下，不愿意让自己的业务做第一个吃螃蟹的人，这种做法不能说完全错误，至少对于他自己来说很稳健，但是却压制了一些有追求人的内心。\n\n谨慎是个美德，不过如果在一个非常追求速度的业务里，这可能也意味着过于保守，会延误时机。\n\n那我们应该怎样做到选择技术呢？我认为，在选择技术时有两个大原则。第一，要取其长避其短；第二，要关注技术的发展前景。每种技术都是有它特定的适用场景，开发者经常犯的错误就是盲目追新，当一个新语言、框架、工具出现后，特别是开发者自己学会了这种新技术后，就会有种“拿着锤子找钉子”的感觉，将新技术滥用于各种项目。\n\n记住，技术选型是稳定压倒一切。\n\n# 选择拥有强大社区支撑的开源技术\n没有人喜欢“alone in the dark”的感觉，同样，也很少有工程师喜欢孤独地面对代码缺陷。我们之所以喜欢在 Apache 上挑选合适的新框架尝试使用，是因为 Apache 始终保持运作着强大的社区，每天都有很多新建的框架，也设计了一整套生命周期管理标准，让一个项目能够从孵化项目逐渐一步步地走向顶级项目。除了像 Apache 这样的社区，我们也可以评估是否存在一些商业公司提供针对该技术或者框架的有偿支撑，一般来说，有公司愿意围绕该技术布局，也能说明确实存在使用空间。例如 Apache Cassandra，目前就有 Datastax 和 LastPickle 两家公司对它提供技术指导和有偿辅助软件支撑。\n\n其实看一项技术活不活跃，只要去 StackOverflow 这样的网站看看提问的人多不多就知道了。\n\n# 确保技术前进步伐\n选择一个技术的最低标准是，技术的生命周期必须显著长于项目的生命周期。\n\n为什么需要确保所选择的技术不断前进？因为这个世界是发展的，科技发展更是非常得快速，你可以看看，所有的成功的科技公司都是因为跑在了别人前面，而不是慢悠悠的工作态度，这就是科技界的残酷，也正是为什么 FaceBook 办公室里贴着：“要么做到最好，要么死亡”。\n\n技术的前进不仅仅取决于它本身，而是和大环境发展、上下游用户也密切相关。比如 AI，60 年代其实就已经提出了相应概念，为什么直到今年才进入发展元年？因为芯片的计算效率、数据样本规模没有达到要求。而 Functional Language 为什么这么多年一直默默无闻，而从前几年开始逐渐盛行？因为机器学习来了，AI 来了，它们有了用武之地。\n\n总的来说，你需要使用你所选择的软件技术，快速地实现应用程序的构建。记住一句话：好的技术栈永远跑在用户需求前面。\n\n# 学会从业务端开始思考\n\n技术选型必须贴着业务来选择，不同业务阶段会有不同的选型方式。处于初创期的业务，选型的基准是灵活。只要一个技术够用并且开发效率足够高，那么就可以选择它。初创的业务往往带有风险性和不确定性，朝令夕改、反复试错是常态，技术必须适应业务的节奏，然后才是其他方面。等业务进入稳定期，选型的基准是可靠。技术始终是业务的基石，当业务稳定了技术不稳，那就会成为业务的一块短板，就必须要修正。当业务进入维护期，选型的基准是妥协。代码永远有变乱的趋势，一般经过一两年就有必要对代码来一次大一点的重构。在这种时候，必须得正视各种遗留代码的迁移成本，如果改变技术选型会带来遗留代码重写，这背后带来的代价业务无法承受，那么我们就不得不考虑在现有技术选型之上做一些小修小补或者螺旋式上升的重构。\n\n正因为技术选型和业务相关，我们能够观察到一些很明显的现象：新技术往往被早期创业团队或大公司的新兴业务使用；中大型公司的核心业务则更倾向于用一些稳定了几年的技术；一个公司如果长期使用一种技术，就会倾向于一直使用下去，甚至连版本都不更新的使用下去。这现象背后都是有道理的。\n\n回到我们的主题，学会从业务端思考。首先我们需要充分地理解业务，理解用户需求，理解当下需要解决的首要问题，以及可能的风险有哪些，再将目标进行分解，进行具体的技术选型、模型设计、架构设计。\n\n举个例子。假设我们需要解决的核心问题是并发，则可以通过各种缓存手段（本地缓存、分布式缓存），来提高查询的吞吐，这样虽然会一定程度上需要在数据一致性上做出牺牲，由强一致性变为最终一致性。\n\n但是，如果数据一致性不是核心需要解决的问题，那么，此问题的优先级则可以先放一放，反过来如果核心问题变为数据的一致性，如交易系统，那么再怎么强调数据的一致性都不为过，由于分布式环境下为了应对高并发的写入以及海量数据的存储，通常需要对关系型数据库进行分库分表扩展，这也给数据一致性带来了很大的挑战，原本的单库事务的强一致性保障，在这个时候升级为跨库的分布式事务，而通过二阶段或者三阶段提交所保障的分布式事务，由于分布式事务管理器与资源管理器之间的多次网络通信成本，吞吐及效率上很难满足高并发场景下的要求，而这实际上对于交易系统来说，又是一个很难回避的问题。\n\n因此，大家又想出很多的招来解决这个问题，通过可靠消息系统来保障不失为一种方式，变同步为异步，但是，又引入新的问题，消息系统为保证不丢消息，则很难保证消息的顺序性以及是否重复投递，这样作为消息的接收方，则需要保障消息处理的幂等性，以及对消息去重。\n\n# 先验证，后使用\n对于未经验证的新技术、新理念的引入一定要慎重，一定要在全方位的验证过后，再大规模的使用。新技术、新理念的出现，自然有它的诱惑，慎重并不代表保守，技术总是在不断前进，拥抱变化本身没有问题，但是引入不成熟的技术看似能带来短期的收益，但是它的风险或者是后期的成本可能远远大于收益。\n\n# 重视经验\n技术选型是个很需要经验的活，得有大量的信息积累和输入，再根据具体现实情况输出一个结果。我们在选型的时候最忌讳的是临时抱佛脚、用网上收集一些碎片知识来决策，这是非常危险的，我们得确保自己所有思考都是基于以前的事实，还要弄清楚这些事实背后的假设，这都需要让知识内化形成经验。\n\n经验的本质是什么，有什么方法能够确定自己的经验增长了，而不是不断在重复一些很熟悉的东西。我现在的结论是，经验等于知识索引的完备程度。\n\n我们一生中会积累很多的知识，如果把我们的大脑比作数据库的话，那我们一定有一部分脑存储贡献给了内容的索引，它能帮助我们将关联知识更快的取出来，并且辅助决策。经验增长等同于我们知识索引的增长，意味着我们能轻易的调动更多的关联知识来做更全面的决策。\n\n要想建立好这个知识索引，我们得保持技术敏感性和广度，也就是要做到持续的信息输入、内化，并发现信息之间的关联性，建立索引，记下来。说起来容易，做起来还是挺有难度的。\n\n首先难在信息输入量大，忘记了怎么办。我们的大脑不是磁盘，不常用的知识就会忘记，忘记了就跟没看过是一回事。我的经验是一定要对知识进行压缩，记住的是最关键的细节，并且反复的去回味这个细节。\n\n# 我的实际案例\n去年我做了一次对于分布式数据库的选型工作。我们为什么要做这次选型？因为存在明确的需求，我们需要解决大规模高并发数据存储，单次数据不大，但是存储频率、读取频率都很高，并且要确保不丢失数据，这样的需求对于关系型数据库来说，出现了性能瓶颈。\n\n我对于技术选型有自己的一套方法论，我知道，我不可能什么技术都懂，所以我会按照自己的这套方法论来具体执行，避免出现选型误差。我的步骤是：“列出需求”-“细分需求”-“明确搜索方向”-“网络搜索”-“明确评判标准”-“分头执行”-“汇总材料”-“初步选择”-“进一步调研”-“会议评审”-“做出决定”。这些步骤太多，需求我已经介绍了，这里具体再讲讲我这一次是如何进入下一步选型的，也就是“初步选择”-“进一步调研”之间的过程。\n\n我通过网络搜索（进入 Google，搜索 Distributed Database、NoSQL Database 等关键词），我找到了如下这些国内外专家推荐的分布式数据库，他们的基本描述如下所示：\n\nHyperTable： 一个开源、高性能、可伸缩的数据库，它采用与 Google 的 BigTable 相似的模型。该数据库数据按主键在物理上排序，适用于数据分析领域，采用 C++ 编写，可以运行在 HDFS 上面。该数据库受到 GPLV3 协议约束，考虑到它和 HBase 从系统架构上来说很相似，但是协议约束较多，所以放弃调研，转而调研 HBase。\n\nHBase： 即 Hadoop Database，是一个高可靠性、高性能、面向列、可伸缩的分布式存储系统，采用主 / 从架构设计，利用 HBase 技术可在廉价 PC Server 上搭建起大规模结构化存储集群。它是 Google BigTable 的开源实现。\n\nVoltDB： 一个内存数据库，提供了 NoSQL 数据库的可伸缩性和传统关系型数据库系统的 ACID 一致性，支持单节点 53000TPS/s。该数据库受到 GPLV3 协议约束。VoltDB 有两个版本，一个开源社区版本和一个付费企业版本。付费企业版本除包含了所有开源社区版的功能，还有些其他特点，诸如计算机集群管理控制台、系统性能仪表盘、数据库宕机恢复、在线数据库 Schema 修改、在线数据库节点重新加入、JDBC 和 OLAP 导出支持、命令日志。\n\n由于该框架开源社区不活跃，主导者更加希望使用付费版本，所以决定放弃它，转而调研类似的 Redis。\n\nCloudData： 一个结构化数据库，没有中文资料，从系统架构、功能上分析，类似于 MongoDB。\n\nGridool： 一种基于 MapReduce 原理设计的网格计算引擎，不支持数据存储，所以放弃。\n\nDdb-query-optimizer： 找不到资料，放弃。\n\nCages： 基于 ZooKeeper 实现数据协调 / 同步，不仅能性数据分布式存储，放弃。\n\nRedis： 一个开源的基于键值对和存储系统，具备高性能特征。支持主从复制（master-slave replication），并且具有非常快速的非阻塞首先同步（non-blockingfirst synchronization）、网络断开自动重连等功能。同时 Redis 还具有其他一些特征，其中包括简单的 check-and-set 机制、pub/sub 和配置设置等，以便使得 Redis 能够表现得更像缓存（Cace）。绝大部分主流编程语言都有官方推荐的客户端。\n\nMongoDB： 一个开源的 C++ 编写的面向集合且模式自由的文档性数据库，是 NoSQL 中功能最丰富、最像关系型数据库的产品。\n\n核心优势：灵活文档模型 + 高可用复制集 + 可扩展分片集群；\n\n功能特点：二级索引、地理位置索引、aggregate、map-reduce、OridFS 支持文件存储。\n\n不足之处：不支持事务，仅支持简单 left join。\n\nSpanner：Google 的可扩展的、多版本的、全球分布式的同步复制方式数据库。Spanner 是第一个支持全球规模的分布式数据、外部一致性分布式事务的分布式数据库。它是一个在遍布全球范围的数据中心内部通过多套 Paxos 状态机器共享数据的数据库。复制被用于全局可用性和地理位置；客户在副本之间自动切换。当数据量或者服务器数量发生变化时，Spanner 在机器之间自动共享数据，并且 Spanner 在机器之间自动迁移数据（甚至在数据中心之间），用以负载均衡和响应失败。Spanner 被设计为在几百万台机器之上横向扩展，这些扩展穿过了数百个数据中心和万亿行数据。功能很强大，可惜没有开源。\n\nElasticSearch： 一个基于 Lucene 的搜索服务器。它提供了一个分布式多用户能力的全文搜索引擎，基于 Restful Web 接口。ElasticSearch 是用 Java 开发的，并作为 Apache 许可条款下的开放源码发布，是当前流行的企业级搜索引擎。\n\n最终通过这些技术之间的互相相似度对比，并且我们设定了一些规则，例如开源协议的约束，这一点其实逐渐开始真正起到约束了，看看 FaceBook 针对 Reactor 的专利约束给大家造成的麻烦，你就懂了。最终，我选择了 Cassandra、MongoDB、Reddis、MySQL、HBase 等几款进入下一步深入调研。\n\n# 写在最后\n我们进行技术选型，有的团队会根据社交媒体上的讨论来决定选择哪种架构，有的团队会跟风走，哪个热门就选哪个，这些都不是正确的方式，我们应该按照方法论执行。此外，我们作为团队管理者，一边要督促自己不断学习新技术，自己能够上手使用，也要结合实际团队情况，规划新技术的预研、落地步骤，让团队成员既能享受到稳定技术的红利，也能不断地尝试新事物，让大家能够看到未来，不担心自己逐渐落后于行业的发展，更能提升对于公司的归属感。做到这些，真不容易，加油，诸位。","slug":"技术选型","published":1,"updated":"2019-03-18T06:53:18.770Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ck2vg6gyo004a4cob70ribg2s","content":"<h1 id=\"做技术选型时，要注意些什么？\"><a href=\"#做技术选型时，要注意些什么？\" class=\"headerlink\" title=\"做技术选型时，要注意些什么？\"></a>做技术选型时，要注意些什么？</h1><p>对于技术选型，有些建议供你参考。此外，还有一个实践案例供你借鉴。</p>\n<h1 id=\"写在前面\"><a href=\"#写在前面\" class=\"headerlink\" title=\"写在前面\"></a>写在前面</h1><p>对于一名热爱技术的工程师来说，很容易出现非常热衷于使用新技术的情况，记得有一次和一位做平台应用的同事闲聊，他问我最近在搞什么，我说在研究 Hadoop，正在用 MapReduce 处理海量图片的智能分析，他一脸羡慕：“能搞新技术，真好！”。</p>\n<p>作为一名工程师，我可以理解大家的心情，我们都是热爱尝试新技术、抛弃过时技术的人。但是首先得明确，到底技术是不是过时的，还是仅仅是你认为它过时了。这篇文章我想谈谈我对技术选型的理解。</p>\n<p>这篇文章不仅仅是写给工程师，更多是写给技术团队负责人（大多数也是从工程师升职上去的，起初思维和工程师差距不大），因为你们具体负责技术选型的方向、方法、过程、结论明确。</p>\n<h1 id=\"技术选型的注意事项\"><a href=\"#技术选型的注意事项\" class=\"headerlink\" title=\"技术选型的注意事项\"></a>技术选型的注意事项</h1><p>先来看看软件开发领域的变化，变化实在是太快了。在 JavaScript 里，几乎每天都有新框架诞生。Node.js(关键词：事件编程），React 编程，Meteor.js（关键词：共享状态），前端 MVC，React.js…… 你可以随便举例。软件工程领域里新概念也层出不穷：领域驱动开发，六边形架构理论，DCI 架构（数据 - 场景 - 交互）。</p>\n<p>洛克希德•马丁公司的著名飞机设计师凯利•约翰逊所提出的 KISS 原则，指出架构设计能简单绝不复杂，坚决砍掉任何华而不实的设计，不要因为 3 年后可能怎样甚至是一些现实中根本无法出现的场景，加入到当下的架构设计中，导致系统无比复杂。有时候看似引入的是一个很简单很容易解决的问题，可能在具体的执行过程中带来一系列不必要的麻烦。技术选型其实遇到的问题和系统架构设计类似，也容易出现人为因素导致的偏差，进而出现和系统架构过度设计类似的麻烦。</p>\n<p>对于技术选型，有以下几个建议：</p>\n<h1 id=\"选择你最熟悉的技术\"><a href=\"#选择你最熟悉的技术\" class=\"headerlink\" title=\"选择你最熟悉的技术\"></a>选择你最熟悉的技术</h1><p>记得看过一篇文章，里面提到一个新项目最好不要使用超过 30% 的新技术，我觉得这有一定道理，因为对于你完全不知道的技术，你不可能控制使用过程中出现的风险。我在技术管理中的向下管理里提起过，任何一位技术 Leader，如果你不能得到下属的技术尊重，你必将受到惩罚。</p>\n<p>也不能说完全不能使用新技术，前几天和朋友聊天，他提到了另外一位总监下属有几个人转岗了，都是技术牛人，最主要的原因是这位总监坚决排斥新技术，坚持自己熟悉 的十年前的框架和编写代码规范。他对于一个新技术的天然不信任，在技术接受程度还不够高，并且认为公司内没有人能吃透这个技术的情况下，不愿意让自己的业务做第一个吃螃蟹的人，这种做法不能说完全错误，至少对于他自己来说很稳健，但是却压制了一些有追求人的内心。</p>\n<p>谨慎是个美德，不过如果在一个非常追求速度的业务里，这可能也意味着过于保守，会延误时机。</p>\n<p>那我们应该怎样做到选择技术呢？我认为，在选择技术时有两个大原则。第一，要取其长避其短；第二，要关注技术的发展前景。每种技术都是有它特定的适用场景，开发者经常犯的错误就是盲目追新，当一个新语言、框架、工具出现后，特别是开发者自己学会了这种新技术后，就会有种“拿着锤子找钉子”的感觉，将新技术滥用于各种项目。</p>\n<p>记住，技术选型是稳定压倒一切。</p>\n<h1 id=\"选择拥有强大社区支撑的开源技术\"><a href=\"#选择拥有强大社区支撑的开源技术\" class=\"headerlink\" title=\"选择拥有强大社区支撑的开源技术\"></a>选择拥有强大社区支撑的开源技术</h1><p>没有人喜欢“alone in the dark”的感觉，同样，也很少有工程师喜欢孤独地面对代码缺陷。我们之所以喜欢在 Apache 上挑选合适的新框架尝试使用，是因为 Apache 始终保持运作着强大的社区，每天都有很多新建的框架，也设计了一整套生命周期管理标准，让一个项目能够从孵化项目逐渐一步步地走向顶级项目。除了像 Apache 这样的社区，我们也可以评估是否存在一些商业公司提供针对该技术或者框架的有偿支撑，一般来说，有公司愿意围绕该技术布局，也能说明确实存在使用空间。例如 Apache Cassandra，目前就有 Datastax 和 LastPickle 两家公司对它提供技术指导和有偿辅助软件支撑。</p>\n<p>其实看一项技术活不活跃，只要去 StackOverflow 这样的网站看看提问的人多不多就知道了。</p>\n<h1 id=\"确保技术前进步伐\"><a href=\"#确保技术前进步伐\" class=\"headerlink\" title=\"确保技术前进步伐\"></a>确保技术前进步伐</h1><p>选择一个技术的最低标准是，技术的生命周期必须显著长于项目的生命周期。</p>\n<p>为什么需要确保所选择的技术不断前进？因为这个世界是发展的，科技发展更是非常得快速，你可以看看，所有的成功的科技公司都是因为跑在了别人前面，而不是慢悠悠的工作态度，这就是科技界的残酷，也正是为什么 FaceBook 办公室里贴着：“要么做到最好，要么死亡”。</p>\n<p>技术的前进不仅仅取决于它本身，而是和大环境发展、上下游用户也密切相关。比如 AI，60 年代其实就已经提出了相应概念，为什么直到今年才进入发展元年？因为芯片的计算效率、数据样本规模没有达到要求。而 Functional Language 为什么这么多年一直默默无闻，而从前几年开始逐渐盛行？因为机器学习来了，AI 来了，它们有了用武之地。</p>\n<p>总的来说，你需要使用你所选择的软件技术，快速地实现应用程序的构建。记住一句话：好的技术栈永远跑在用户需求前面。</p>\n<h1 id=\"学会从业务端开始思考\"><a href=\"#学会从业务端开始思考\" class=\"headerlink\" title=\"学会从业务端开始思考\"></a>学会从业务端开始思考</h1><p>技术选型必须贴着业务来选择，不同业务阶段会有不同的选型方式。处于初创期的业务，选型的基准是灵活。只要一个技术够用并且开发效率足够高，那么就可以选择它。初创的业务往往带有风险性和不确定性，朝令夕改、反复试错是常态，技术必须适应业务的节奏，然后才是其他方面。等业务进入稳定期，选型的基准是可靠。技术始终是业务的基石，当业务稳定了技术不稳，那就会成为业务的一块短板，就必须要修正。当业务进入维护期，选型的基准是妥协。代码永远有变乱的趋势，一般经过一两年就有必要对代码来一次大一点的重构。在这种时候，必须得正视各种遗留代码的迁移成本，如果改变技术选型会带来遗留代码重写，这背后带来的代价业务无法承受，那么我们就不得不考虑在现有技术选型之上做一些小修小补或者螺旋式上升的重构。</p>\n<p>正因为技术选型和业务相关，我们能够观察到一些很明显的现象：新技术往往被早期创业团队或大公司的新兴业务使用；中大型公司的核心业务则更倾向于用一些稳定了几年的技术；一个公司如果长期使用一种技术，就会倾向于一直使用下去，甚至连版本都不更新的使用下去。这现象背后都是有道理的。</p>\n<p>回到我们的主题，学会从业务端思考。首先我们需要充分地理解业务，理解用户需求，理解当下需要解决的首要问题，以及可能的风险有哪些，再将目标进行分解，进行具体的技术选型、模型设计、架构设计。</p>\n<p>举个例子。假设我们需要解决的核心问题是并发，则可以通过各种缓存手段（本地缓存、分布式缓存），来提高查询的吞吐，这样虽然会一定程度上需要在数据一致性上做出牺牲，由强一致性变为最终一致性。</p>\n<p>但是，如果数据一致性不是核心需要解决的问题，那么，此问题的优先级则可以先放一放，反过来如果核心问题变为数据的一致性，如交易系统，那么再怎么强调数据的一致性都不为过，由于分布式环境下为了应对高并发的写入以及海量数据的存储，通常需要对关系型数据库进行分库分表扩展，这也给数据一致性带来了很大的挑战，原本的单库事务的强一致性保障，在这个时候升级为跨库的分布式事务，而通过二阶段或者三阶段提交所保障的分布式事务，由于分布式事务管理器与资源管理器之间的多次网络通信成本，吞吐及效率上很难满足高并发场景下的要求，而这实际上对于交易系统来说，又是一个很难回避的问题。</p>\n<p>因此，大家又想出很多的招来解决这个问题，通过可靠消息系统来保障不失为一种方式，变同步为异步，但是，又引入新的问题，消息系统为保证不丢消息，则很难保证消息的顺序性以及是否重复投递，这样作为消息的接收方，则需要保障消息处理的幂等性，以及对消息去重。</p>\n<h1 id=\"先验证，后使用\"><a href=\"#先验证，后使用\" class=\"headerlink\" title=\"先验证，后使用\"></a>先验证，后使用</h1><p>对于未经验证的新技术、新理念的引入一定要慎重，一定要在全方位的验证过后，再大规模的使用。新技术、新理念的出现，自然有它的诱惑，慎重并不代表保守，技术总是在不断前进，拥抱变化本身没有问题，但是引入不成熟的技术看似能带来短期的收益，但是它的风险或者是后期的成本可能远远大于收益。</p>\n<h1 id=\"重视经验\"><a href=\"#重视经验\" class=\"headerlink\" title=\"重视经验\"></a>重视经验</h1><p>技术选型是个很需要经验的活，得有大量的信息积累和输入，再根据具体现实情况输出一个结果。我们在选型的时候最忌讳的是临时抱佛脚、用网上收集一些碎片知识来决策，这是非常危险的，我们得确保自己所有思考都是基于以前的事实，还要弄清楚这些事实背后的假设，这都需要让知识内化形成经验。</p>\n<p>经验的本质是什么，有什么方法能够确定自己的经验增长了，而不是不断在重复一些很熟悉的东西。我现在的结论是，经验等于知识索引的完备程度。</p>\n<p>我们一生中会积累很多的知识，如果把我们的大脑比作数据库的话，那我们一定有一部分脑存储贡献给了内容的索引，它能帮助我们将关联知识更快的取出来，并且辅助决策。经验增长等同于我们知识索引的增长，意味着我们能轻易的调动更多的关联知识来做更全面的决策。</p>\n<p>要想建立好这个知识索引，我们得保持技术敏感性和广度，也就是要做到持续的信息输入、内化，并发现信息之间的关联性，建立索引，记下来。说起来容易，做起来还是挺有难度的。</p>\n<p>首先难在信息输入量大，忘记了怎么办。我们的大脑不是磁盘，不常用的知识就会忘记，忘记了就跟没看过是一回事。我的经验是一定要对知识进行压缩，记住的是最关键的细节，并且反复的去回味这个细节。</p>\n<h1 id=\"我的实际案例\"><a href=\"#我的实际案例\" class=\"headerlink\" title=\"我的实际案例\"></a>我的实际案例</h1><p>去年我做了一次对于分布式数据库的选型工作。我们为什么要做这次选型？因为存在明确的需求，我们需要解决大规模高并发数据存储，单次数据不大，但是存储频率、读取频率都很高，并且要确保不丢失数据，这样的需求对于关系型数据库来说，出现了性能瓶颈。</p>\n<p>我对于技术选型有自己的一套方法论，我知道，我不可能什么技术都懂，所以我会按照自己的这套方法论来具体执行，避免出现选型误差。我的步骤是：“列出需求”-“细分需求”-“明确搜索方向”-“网络搜索”-“明确评判标准”-“分头执行”-“汇总材料”-“初步选择”-“进一步调研”-“会议评审”-“做出决定”。这些步骤太多，需求我已经介绍了，这里具体再讲讲我这一次是如何进入下一步选型的，也就是“初步选择”-“进一步调研”之间的过程。</p>\n<p>我通过网络搜索（进入 Google，搜索 Distributed Database、NoSQL Database 等关键词），我找到了如下这些国内外专家推荐的分布式数据库，他们的基本描述如下所示：</p>\n<p>HyperTable： 一个开源、高性能、可伸缩的数据库，它采用与 Google 的 BigTable 相似的模型。该数据库数据按主键在物理上排序，适用于数据分析领域，采用 C++ 编写，可以运行在 HDFS 上面。该数据库受到 GPLV3 协议约束，考虑到它和 HBase 从系统架构上来说很相似，但是协议约束较多，所以放弃调研，转而调研 HBase。</p>\n<p>HBase： 即 Hadoop Database，是一个高可靠性、高性能、面向列、可伸缩的分布式存储系统，采用主 / 从架构设计，利用 HBase 技术可在廉价 PC Server 上搭建起大规模结构化存储集群。它是 Google BigTable 的开源实现。</p>\n<p>VoltDB： 一个内存数据库，提供了 NoSQL 数据库的可伸缩性和传统关系型数据库系统的 ACID 一致性，支持单节点 53000TPS/s。该数据库受到 GPLV3 协议约束。VoltDB 有两个版本，一个开源社区版本和一个付费企业版本。付费企业版本除包含了所有开源社区版的功能，还有些其他特点，诸如计算机集群管理控制台、系统性能仪表盘、数据库宕机恢复、在线数据库 Schema 修改、在线数据库节点重新加入、JDBC 和 OLAP 导出支持、命令日志。</p>\n<p>由于该框架开源社区不活跃，主导者更加希望使用付费版本，所以决定放弃它，转而调研类似的 Redis。</p>\n<p>CloudData： 一个结构化数据库，没有中文资料，从系统架构、功能上分析，类似于 MongoDB。</p>\n<p>Gridool： 一种基于 MapReduce 原理设计的网格计算引擎，不支持数据存储，所以放弃。</p>\n<p>Ddb-query-optimizer： 找不到资料，放弃。</p>\n<p>Cages： 基于 ZooKeeper 实现数据协调 / 同步，不仅能性数据分布式存储，放弃。</p>\n<p>Redis： 一个开源的基于键值对和存储系统，具备高性能特征。支持主从复制（master-slave replication），并且具有非常快速的非阻塞首先同步（non-blockingfirst synchronization）、网络断开自动重连等功能。同时 Redis 还具有其他一些特征，其中包括简单的 check-and-set 机制、pub/sub 和配置设置等，以便使得 Redis 能够表现得更像缓存（Cace）。绝大部分主流编程语言都有官方推荐的客户端。</p>\n<p>MongoDB： 一个开源的 C++ 编写的面向集合且模式自由的文档性数据库，是 NoSQL 中功能最丰富、最像关系型数据库的产品。</p>\n<p>核心优势：灵活文档模型 + 高可用复制集 + 可扩展分片集群；</p>\n<p>功能特点：二级索引、地理位置索引、aggregate、map-reduce、OridFS 支持文件存储。</p>\n<p>不足之处：不支持事务，仅支持简单 left join。</p>\n<p>Spanner：Google 的可扩展的、多版本的、全球分布式的同步复制方式数据库。Spanner 是第一个支持全球规模的分布式数据、外部一致性分布式事务的分布式数据库。它是一个在遍布全球范围的数据中心内部通过多套 Paxos 状态机器共享数据的数据库。复制被用于全局可用性和地理位置；客户在副本之间自动切换。当数据量或者服务器数量发生变化时，Spanner 在机器之间自动共享数据，并且 Spanner 在机器之间自动迁移数据（甚至在数据中心之间），用以负载均衡和响应失败。Spanner 被设计为在几百万台机器之上横向扩展，这些扩展穿过了数百个数据中心和万亿行数据。功能很强大，可惜没有开源。</p>\n<p>ElasticSearch： 一个基于 Lucene 的搜索服务器。它提供了一个分布式多用户能力的全文搜索引擎，基于 Restful Web 接口。ElasticSearch 是用 Java 开发的，并作为 Apache 许可条款下的开放源码发布，是当前流行的企业级搜索引擎。</p>\n<p>最终通过这些技术之间的互相相似度对比，并且我们设定了一些规则，例如开源协议的约束，这一点其实逐渐开始真正起到约束了，看看 FaceBook 针对 Reactor 的专利约束给大家造成的麻烦，你就懂了。最终，我选择了 Cassandra、MongoDB、Reddis、MySQL、HBase 等几款进入下一步深入调研。</p>\n<h1 id=\"写在最后\"><a href=\"#写在最后\" class=\"headerlink\" title=\"写在最后\"></a>写在最后</h1><p>我们进行技术选型，有的团队会根据社交媒体上的讨论来决定选择哪种架构，有的团队会跟风走，哪个热门就选哪个，这些都不是正确的方式，我们应该按照方法论执行。此外，我们作为团队管理者，一边要督促自己不断学习新技术，自己能够上手使用，也要结合实际团队情况，规划新技术的预研、落地步骤，让团队成员既能享受到稳定技术的红利，也能不断地尝试新事物，让大家能够看到未来，不担心自己逐渐落后于行业的发展，更能提升对于公司的归属感。做到这些，真不容易，加油，诸位。</p>\n","site":{"data":{"projects":[{"name":"AiTing","url":"https://github.com/renhongl/aiting","desc":"HTML5客户端音乐播放器"},{"name":"AiLiao","url":"https://github.com/renhongl/ailiao","desc":"网页聊天软件"},{"name":"Pomelo Editor","url":"https://renhongl.github.io/markdown-editor/","desc":"功能强大的在线Markdown编辑器"}]}},"excerpt":"","more":"<h1 id=\"做技术选型时，要注意些什么？\"><a href=\"#做技术选型时，要注意些什么？\" class=\"headerlink\" title=\"做技术选型时，要注意些什么？\"></a>做技术选型时，要注意些什么？</h1><p>对于技术选型，有些建议供你参考。此外，还有一个实践案例供你借鉴。</p>\n<h1 id=\"写在前面\"><a href=\"#写在前面\" class=\"headerlink\" title=\"写在前面\"></a>写在前面</h1><p>对于一名热爱技术的工程师来说，很容易出现非常热衷于使用新技术的情况，记得有一次和一位做平台应用的同事闲聊，他问我最近在搞什么，我说在研究 Hadoop，正在用 MapReduce 处理海量图片的智能分析，他一脸羡慕：“能搞新技术，真好！”。</p>\n<p>作为一名工程师，我可以理解大家的心情，我们都是热爱尝试新技术、抛弃过时技术的人。但是首先得明确，到底技术是不是过时的，还是仅仅是你认为它过时了。这篇文章我想谈谈我对技术选型的理解。</p>\n<p>这篇文章不仅仅是写给工程师，更多是写给技术团队负责人（大多数也是从工程师升职上去的，起初思维和工程师差距不大），因为你们具体负责技术选型的方向、方法、过程、结论明确。</p>\n<h1 id=\"技术选型的注意事项\"><a href=\"#技术选型的注意事项\" class=\"headerlink\" title=\"技术选型的注意事项\"></a>技术选型的注意事项</h1><p>先来看看软件开发领域的变化，变化实在是太快了。在 JavaScript 里，几乎每天都有新框架诞生。Node.js(关键词：事件编程），React 编程，Meteor.js（关键词：共享状态），前端 MVC，React.js…… 你可以随便举例。软件工程领域里新概念也层出不穷：领域驱动开发，六边形架构理论，DCI 架构（数据 - 场景 - 交互）。</p>\n<p>洛克希德•马丁公司的著名飞机设计师凯利•约翰逊所提出的 KISS 原则，指出架构设计能简单绝不复杂，坚决砍掉任何华而不实的设计，不要因为 3 年后可能怎样甚至是一些现实中根本无法出现的场景，加入到当下的架构设计中，导致系统无比复杂。有时候看似引入的是一个很简单很容易解决的问题，可能在具体的执行过程中带来一系列不必要的麻烦。技术选型其实遇到的问题和系统架构设计类似，也容易出现人为因素导致的偏差，进而出现和系统架构过度设计类似的麻烦。</p>\n<p>对于技术选型，有以下几个建议：</p>\n<h1 id=\"选择你最熟悉的技术\"><a href=\"#选择你最熟悉的技术\" class=\"headerlink\" title=\"选择你最熟悉的技术\"></a>选择你最熟悉的技术</h1><p>记得看过一篇文章，里面提到一个新项目最好不要使用超过 30% 的新技术，我觉得这有一定道理，因为对于你完全不知道的技术，你不可能控制使用过程中出现的风险。我在技术管理中的向下管理里提起过，任何一位技术 Leader，如果你不能得到下属的技术尊重，你必将受到惩罚。</p>\n<p>也不能说完全不能使用新技术，前几天和朋友聊天，他提到了另外一位总监下属有几个人转岗了，都是技术牛人，最主要的原因是这位总监坚决排斥新技术，坚持自己熟悉 的十年前的框架和编写代码规范。他对于一个新技术的天然不信任，在技术接受程度还不够高，并且认为公司内没有人能吃透这个技术的情况下，不愿意让自己的业务做第一个吃螃蟹的人，这种做法不能说完全错误，至少对于他自己来说很稳健，但是却压制了一些有追求人的内心。</p>\n<p>谨慎是个美德，不过如果在一个非常追求速度的业务里，这可能也意味着过于保守，会延误时机。</p>\n<p>那我们应该怎样做到选择技术呢？我认为，在选择技术时有两个大原则。第一，要取其长避其短；第二，要关注技术的发展前景。每种技术都是有它特定的适用场景，开发者经常犯的错误就是盲目追新，当一个新语言、框架、工具出现后，特别是开发者自己学会了这种新技术后，就会有种“拿着锤子找钉子”的感觉，将新技术滥用于各种项目。</p>\n<p>记住，技术选型是稳定压倒一切。</p>\n<h1 id=\"选择拥有强大社区支撑的开源技术\"><a href=\"#选择拥有强大社区支撑的开源技术\" class=\"headerlink\" title=\"选择拥有强大社区支撑的开源技术\"></a>选择拥有强大社区支撑的开源技术</h1><p>没有人喜欢“alone in the dark”的感觉，同样，也很少有工程师喜欢孤独地面对代码缺陷。我们之所以喜欢在 Apache 上挑选合适的新框架尝试使用，是因为 Apache 始终保持运作着强大的社区，每天都有很多新建的框架，也设计了一整套生命周期管理标准，让一个项目能够从孵化项目逐渐一步步地走向顶级项目。除了像 Apache 这样的社区，我们也可以评估是否存在一些商业公司提供针对该技术或者框架的有偿支撑，一般来说，有公司愿意围绕该技术布局，也能说明确实存在使用空间。例如 Apache Cassandra，目前就有 Datastax 和 LastPickle 两家公司对它提供技术指导和有偿辅助软件支撑。</p>\n<p>其实看一项技术活不活跃，只要去 StackOverflow 这样的网站看看提问的人多不多就知道了。</p>\n<h1 id=\"确保技术前进步伐\"><a href=\"#确保技术前进步伐\" class=\"headerlink\" title=\"确保技术前进步伐\"></a>确保技术前进步伐</h1><p>选择一个技术的最低标准是，技术的生命周期必须显著长于项目的生命周期。</p>\n<p>为什么需要确保所选择的技术不断前进？因为这个世界是发展的，科技发展更是非常得快速，你可以看看，所有的成功的科技公司都是因为跑在了别人前面，而不是慢悠悠的工作态度，这就是科技界的残酷，也正是为什么 FaceBook 办公室里贴着：“要么做到最好，要么死亡”。</p>\n<p>技术的前进不仅仅取决于它本身，而是和大环境发展、上下游用户也密切相关。比如 AI，60 年代其实就已经提出了相应概念，为什么直到今年才进入发展元年？因为芯片的计算效率、数据样本规模没有达到要求。而 Functional Language 为什么这么多年一直默默无闻，而从前几年开始逐渐盛行？因为机器学习来了，AI 来了，它们有了用武之地。</p>\n<p>总的来说，你需要使用你所选择的软件技术，快速地实现应用程序的构建。记住一句话：好的技术栈永远跑在用户需求前面。</p>\n<h1 id=\"学会从业务端开始思考\"><a href=\"#学会从业务端开始思考\" class=\"headerlink\" title=\"学会从业务端开始思考\"></a>学会从业务端开始思考</h1><p>技术选型必须贴着业务来选择，不同业务阶段会有不同的选型方式。处于初创期的业务，选型的基准是灵活。只要一个技术够用并且开发效率足够高，那么就可以选择它。初创的业务往往带有风险性和不确定性，朝令夕改、反复试错是常态，技术必须适应业务的节奏，然后才是其他方面。等业务进入稳定期，选型的基准是可靠。技术始终是业务的基石，当业务稳定了技术不稳，那就会成为业务的一块短板，就必须要修正。当业务进入维护期，选型的基准是妥协。代码永远有变乱的趋势，一般经过一两年就有必要对代码来一次大一点的重构。在这种时候，必须得正视各种遗留代码的迁移成本，如果改变技术选型会带来遗留代码重写，这背后带来的代价业务无法承受，那么我们就不得不考虑在现有技术选型之上做一些小修小补或者螺旋式上升的重构。</p>\n<p>正因为技术选型和业务相关，我们能够观察到一些很明显的现象：新技术往往被早期创业团队或大公司的新兴业务使用；中大型公司的核心业务则更倾向于用一些稳定了几年的技术；一个公司如果长期使用一种技术，就会倾向于一直使用下去，甚至连版本都不更新的使用下去。这现象背后都是有道理的。</p>\n<p>回到我们的主题，学会从业务端思考。首先我们需要充分地理解业务，理解用户需求，理解当下需要解决的首要问题，以及可能的风险有哪些，再将目标进行分解，进行具体的技术选型、模型设计、架构设计。</p>\n<p>举个例子。假设我们需要解决的核心问题是并发，则可以通过各种缓存手段（本地缓存、分布式缓存），来提高查询的吞吐，这样虽然会一定程度上需要在数据一致性上做出牺牲，由强一致性变为最终一致性。</p>\n<p>但是，如果数据一致性不是核心需要解决的问题，那么，此问题的优先级则可以先放一放，反过来如果核心问题变为数据的一致性，如交易系统，那么再怎么强调数据的一致性都不为过，由于分布式环境下为了应对高并发的写入以及海量数据的存储，通常需要对关系型数据库进行分库分表扩展，这也给数据一致性带来了很大的挑战，原本的单库事务的强一致性保障，在这个时候升级为跨库的分布式事务，而通过二阶段或者三阶段提交所保障的分布式事务，由于分布式事务管理器与资源管理器之间的多次网络通信成本，吞吐及效率上很难满足高并发场景下的要求，而这实际上对于交易系统来说，又是一个很难回避的问题。</p>\n<p>因此，大家又想出很多的招来解决这个问题，通过可靠消息系统来保障不失为一种方式，变同步为异步，但是，又引入新的问题，消息系统为保证不丢消息，则很难保证消息的顺序性以及是否重复投递，这样作为消息的接收方，则需要保障消息处理的幂等性，以及对消息去重。</p>\n<h1 id=\"先验证，后使用\"><a href=\"#先验证，后使用\" class=\"headerlink\" title=\"先验证，后使用\"></a>先验证，后使用</h1><p>对于未经验证的新技术、新理念的引入一定要慎重，一定要在全方位的验证过后，再大规模的使用。新技术、新理念的出现，自然有它的诱惑，慎重并不代表保守，技术总是在不断前进，拥抱变化本身没有问题，但是引入不成熟的技术看似能带来短期的收益，但是它的风险或者是后期的成本可能远远大于收益。</p>\n<h1 id=\"重视经验\"><a href=\"#重视经验\" class=\"headerlink\" title=\"重视经验\"></a>重视经验</h1><p>技术选型是个很需要经验的活，得有大量的信息积累和输入，再根据具体现实情况输出一个结果。我们在选型的时候最忌讳的是临时抱佛脚、用网上收集一些碎片知识来决策，这是非常危险的，我们得确保自己所有思考都是基于以前的事实，还要弄清楚这些事实背后的假设，这都需要让知识内化形成经验。</p>\n<p>经验的本质是什么，有什么方法能够确定自己的经验增长了，而不是不断在重复一些很熟悉的东西。我现在的结论是，经验等于知识索引的完备程度。</p>\n<p>我们一生中会积累很多的知识，如果把我们的大脑比作数据库的话，那我们一定有一部分脑存储贡献给了内容的索引，它能帮助我们将关联知识更快的取出来，并且辅助决策。经验增长等同于我们知识索引的增长，意味着我们能轻易的调动更多的关联知识来做更全面的决策。</p>\n<p>要想建立好这个知识索引，我们得保持技术敏感性和广度，也就是要做到持续的信息输入、内化，并发现信息之间的关联性，建立索引，记下来。说起来容易，做起来还是挺有难度的。</p>\n<p>首先难在信息输入量大，忘记了怎么办。我们的大脑不是磁盘，不常用的知识就会忘记，忘记了就跟没看过是一回事。我的经验是一定要对知识进行压缩，记住的是最关键的细节，并且反复的去回味这个细节。</p>\n<h1 id=\"我的实际案例\"><a href=\"#我的实际案例\" class=\"headerlink\" title=\"我的实际案例\"></a>我的实际案例</h1><p>去年我做了一次对于分布式数据库的选型工作。我们为什么要做这次选型？因为存在明确的需求，我们需要解决大规模高并发数据存储，单次数据不大，但是存储频率、读取频率都很高，并且要确保不丢失数据，这样的需求对于关系型数据库来说，出现了性能瓶颈。</p>\n<p>我对于技术选型有自己的一套方法论，我知道，我不可能什么技术都懂，所以我会按照自己的这套方法论来具体执行，避免出现选型误差。我的步骤是：“列出需求”-“细分需求”-“明确搜索方向”-“网络搜索”-“明确评判标准”-“分头执行”-“汇总材料”-“初步选择”-“进一步调研”-“会议评审”-“做出决定”。这些步骤太多，需求我已经介绍了，这里具体再讲讲我这一次是如何进入下一步选型的，也就是“初步选择”-“进一步调研”之间的过程。</p>\n<p>我通过网络搜索（进入 Google，搜索 Distributed Database、NoSQL Database 等关键词），我找到了如下这些国内外专家推荐的分布式数据库，他们的基本描述如下所示：</p>\n<p>HyperTable： 一个开源、高性能、可伸缩的数据库，它采用与 Google 的 BigTable 相似的模型。该数据库数据按主键在物理上排序，适用于数据分析领域，采用 C++ 编写，可以运行在 HDFS 上面。该数据库受到 GPLV3 协议约束，考虑到它和 HBase 从系统架构上来说很相似，但是协议约束较多，所以放弃调研，转而调研 HBase。</p>\n<p>HBase： 即 Hadoop Database，是一个高可靠性、高性能、面向列、可伸缩的分布式存储系统，采用主 / 从架构设计，利用 HBase 技术可在廉价 PC Server 上搭建起大规模结构化存储集群。它是 Google BigTable 的开源实现。</p>\n<p>VoltDB： 一个内存数据库，提供了 NoSQL 数据库的可伸缩性和传统关系型数据库系统的 ACID 一致性，支持单节点 53000TPS/s。该数据库受到 GPLV3 协议约束。VoltDB 有两个版本，一个开源社区版本和一个付费企业版本。付费企业版本除包含了所有开源社区版的功能，还有些其他特点，诸如计算机集群管理控制台、系统性能仪表盘、数据库宕机恢复、在线数据库 Schema 修改、在线数据库节点重新加入、JDBC 和 OLAP 导出支持、命令日志。</p>\n<p>由于该框架开源社区不活跃，主导者更加希望使用付费版本，所以决定放弃它，转而调研类似的 Redis。</p>\n<p>CloudData： 一个结构化数据库，没有中文资料，从系统架构、功能上分析，类似于 MongoDB。</p>\n<p>Gridool： 一种基于 MapReduce 原理设计的网格计算引擎，不支持数据存储，所以放弃。</p>\n<p>Ddb-query-optimizer： 找不到资料，放弃。</p>\n<p>Cages： 基于 ZooKeeper 实现数据协调 / 同步，不仅能性数据分布式存储，放弃。</p>\n<p>Redis： 一个开源的基于键值对和存储系统，具备高性能特征。支持主从复制（master-slave replication），并且具有非常快速的非阻塞首先同步（non-blockingfirst synchronization）、网络断开自动重连等功能。同时 Redis 还具有其他一些特征，其中包括简单的 check-and-set 机制、pub/sub 和配置设置等，以便使得 Redis 能够表现得更像缓存（Cace）。绝大部分主流编程语言都有官方推荐的客户端。</p>\n<p>MongoDB： 一个开源的 C++ 编写的面向集合且模式自由的文档性数据库，是 NoSQL 中功能最丰富、最像关系型数据库的产品。</p>\n<p>核心优势：灵活文档模型 + 高可用复制集 + 可扩展分片集群；</p>\n<p>功能特点：二级索引、地理位置索引、aggregate、map-reduce、OridFS 支持文件存储。</p>\n<p>不足之处：不支持事务，仅支持简单 left join。</p>\n<p>Spanner：Google 的可扩展的、多版本的、全球分布式的同步复制方式数据库。Spanner 是第一个支持全球规模的分布式数据、外部一致性分布式事务的分布式数据库。它是一个在遍布全球范围的数据中心内部通过多套 Paxos 状态机器共享数据的数据库。复制被用于全局可用性和地理位置；客户在副本之间自动切换。当数据量或者服务器数量发生变化时，Spanner 在机器之间自动共享数据，并且 Spanner 在机器之间自动迁移数据（甚至在数据中心之间），用以负载均衡和响应失败。Spanner 被设计为在几百万台机器之上横向扩展，这些扩展穿过了数百个数据中心和万亿行数据。功能很强大，可惜没有开源。</p>\n<p>ElasticSearch： 一个基于 Lucene 的搜索服务器。它提供了一个分布式多用户能力的全文搜索引擎，基于 Restful Web 接口。ElasticSearch 是用 Java 开发的，并作为 Apache 许可条款下的开放源码发布，是当前流行的企业级搜索引擎。</p>\n<p>最终通过这些技术之间的互相相似度对比，并且我们设定了一些规则，例如开源协议的约束，这一点其实逐渐开始真正起到约束了，看看 FaceBook 针对 Reactor 的专利约束给大家造成的麻烦，你就懂了。最终，我选择了 Cassandra、MongoDB、Reddis、MySQL、HBase 等几款进入下一步深入调研。</p>\n<h1 id=\"写在最后\"><a href=\"#写在最后\" class=\"headerlink\" title=\"写在最后\"></a>写在最后</h1><p>我们进行技术选型，有的团队会根据社交媒体上的讨论来决定选择哪种架构，有的团队会跟风走，哪个热门就选哪个，这些都不是正确的方式，我们应该按照方法论执行。此外，我们作为团队管理者，一边要督促自己不断学习新技术，自己能够上手使用，也要结合实际团队情况，规划新技术的预研、落地步骤，让团队成员既能享受到稳定技术的红利，也能不断地尝试新事物，让大家能够看到未来，不担心自己逐渐落后于行业的发展，更能提升对于公司的归属感。做到这些，真不容易，加油，诸位。</p>\n"}],"PostAsset":[],"PostCategory":[],"PostTag":[{"post_id":"ck2vg6gtu00004cobdqiv43ad","tag_id":"ck2vg6gu700044cobult34zu2","_id":"ck2vg6gul000a4cob43wmcfnl"},{"post_id":"ck2vg6guf00084cob9osud2t2","tag_id":"ck2vg6gu700044cobult34zu2","_id":"ck2vg6guo000c4cobga020cnc"},{"post_id":"ck2vg6gu100024cobldi5p54l","tag_id":"ck2vg6gu700044cobult34zu2","_id":"ck2vg6guu000f4cobksa7l4ge"},{"post_id":"ck2vg6gu900054cob5k0bd0vm","tag_id":"ck2vg6gus000e4cobzk8sfbcy","_id":"ck2vg6gv0000k4cobot7bed6x"},{"post_id":"ck2vg6guw000h4cobs3pon43t","tag_id":"ck2vg6gu700044cobult34zu2","_id":"ck2vg6gv2000m4cobxcl09hi8"},{"post_id":"ck2vg6guc00074coburm402bf","tag_id":"ck2vg6gus000e4cobzk8sfbcy","_id":"ck2vg6gv6000p4cobx8e1h2cs"},{"post_id":"ck2vg6gv1000l4cob8ct1tjvk","tag_id":"ck2vg6gu700044cobult34zu2","_id":"ck2vg6gv9000r4cobfhlzkhl2"},{"post_id":"ck2vg6gv5000o4cob2os8wdwb","tag_id":"ck2vg6gu700044cobult34zu2","_id":"ck2vg6gvc000u4cob0s7d8xlj"},{"post_id":"ck2vg6gum000b4cobwrj2wtpp","tag_id":"ck2vg6gv3000n4cobv89durci","_id":"ck2vg6gve000w4cob5kqyv7pb"},{"post_id":"ck2vg6gv8000q4cobs6bqf2ju","tag_id":"ck2vg6gu700044cobult34zu2","_id":"ck2vg6gvg000z4cobrdwghdq5"},{"post_id":"ck2vg6gvb000t4cobkr8vt50p","tag_id":"ck2vg6gu700044cobult34zu2","_id":"ck2vg6gvi00114cobpdiy6dhc"},{"post_id":"ck2vg6gup000d4cobjt97wnnw","tag_id":"ck2vg6gva000s4cob23dnb9yd","_id":"ck2vg6gvl00144cobzqyujsm8"},{"post_id":"ck2vg6guv000g4cobhx35a28r","tag_id":"ck2vg6gve000x4cobeaiveey6","_id":"ck2vg6gvm00164cobbb5kkgen"},{"post_id":"ck2vg6gvl00154cob5xylopk9","tag_id":"ck2vg6gu700044cobult34zu2","_id":"ck2vg6gvp00194coby8r90i3d"},{"post_id":"ck2vg6guy000j4cobzqyp0q7m","tag_id":"ck2vg6gvk00134cobb0lptbcd","_id":"ck2vg6gvv001e4cobs2iz4j94"},{"post_id":"ck2vg6guy000j4cobzqyp0q7m","tag_id":"ck2vg6gvp00184cobxf9bcsj8","_id":"ck2vg6gvx001g4cobh2dx99pq"},{"post_id":"ck2vg6gvt001d4cobi5113vlu","tag_id":"ck2vg6gu700044cobult34zu2","_id":"ck2vg6gw0001j4cobplcgcvt6"},{"post_id":"ck2vg6gvd000v4cobb0sd0zmp","tag_id":"ck2vg6gvt001c4cob0ra7qdut","_id":"ck2vg6gw2001l4cob94c4fmtf"},{"post_id":"ck2vg6gvw001f4cob9ns71mqf","tag_id":"ck2vg6gvt001c4cob0ra7qdut","_id":"ck2vg6gw4001o4cobtvsi88ql"},{"post_id":"ck2vg6gvy001i4cob1j318lyi","tag_id":"ck2vg6gvt001c4cob0ra7qdut","_id":"ck2vg6gw6001q4cobjwcawgs9"},{"post_id":"ck2vg6gvf000y4cobvrkfpjo3","tag_id":"ck2vg6gvt001c4cob0ra7qdut","_id":"ck2vg6gw9001t4cobxfszc62g"},{"post_id":"ck2vg6gw1001k4cobg3u8sypf","tag_id":"ck2vg6gvt001c4cob0ra7qdut","_id":"ck2vg6gwb001v4cob68ab47o4"},{"post_id":"ck2vg6gw3001n4cobkv7dyhr3","tag_id":"ck2vg6gvt001c4cob0ra7qdut","_id":"ck2vg6gwe001y4cobu6nelhm1"},{"post_id":"ck2vg6gvh00104cobl3teqf0a","tag_id":"ck2vg6gw2001m4cobwhzeo3cr","_id":"ck2vg6gwg00204cob5h9scsw7"},{"post_id":"ck2vg6gvj00124cobeqaqi4p2","tag_id":"ck2vg6gvt001c4cob0ra7qdut","_id":"ck2vg6gwj00234cobb5ls4gfu"},{"post_id":"ck2vg6gwc001w4cobzaqpxzq4","tag_id":"ck2vg6gva000s4cob23dnb9yd","_id":"ck2vg6gwl00254cobn9qpqr46"},{"post_id":"ck2vg6gvn00174cobgfc9bkj9","tag_id":"ck2vg6gvt001c4cob0ra7qdut","_id":"ck2vg6gwn00284cobz17wu69s"},{"post_id":"ck2vg6gwk00244cobzr6e1h9t","tag_id":"ck2vg6gu700044cobult34zu2","_id":"ck2vg6gwp002a4cob0fthveq8"},{"post_id":"ck2vg6gvq001a4cobhkzg6488","tag_id":"ck2vg6gvt001c4cob0ra7qdut","_id":"ck2vg6gwr002d4cobt9i3hbwq"},{"post_id":"ck2vg6gwo00294cobri7zi8va","tag_id":"ck2vg6gvk00134cobb0lptbcd","_id":"ck2vg6gwt002f4cobksq89734"},{"post_id":"ck2vg6gvr001b4cobrlzv15ea","tag_id":"ck2vg6gw2001m4cobwhzeo3cr","_id":"ck2vg6gww002i4cob4cednfru"},{"post_id":"ck2vg6gwq002b4cob5a006sfs","tag_id":"ck2vg6gu700044cobult34zu2","_id":"ck2vg6gwy002k4cob7fse1qa4"},{"post_id":"ck2vg6gws002e4cob65slnes1","tag_id":"ck2vg6gvk00134cobb0lptbcd","_id":"ck2vg6gx1002n4cob217smmx3"},{"post_id":"ck2vg6gws002e4cob65slnes1","tag_id":"ck2vg6gva000s4cob23dnb9yd","_id":"ck2vg6gx3002p4cobla1ch9tp"},{"post_id":"ck2vg6gw5001p4cobj8dmhkhj","tag_id":"ck2vg6gwr002c4cobewzqhxht","_id":"ck2vg6gx6002s4cob2v2k4yf3"},{"post_id":"ck2vg6gwu002g4cobyk7ln8m2","tag_id":"ck2vg6gu700044cobult34zu2","_id":"ck2vg6gx8002u4cob1kxo9ji2"},{"post_id":"ck2vg6gwx002j4cob82immsxf","tag_id":"ck2vg6gu700044cobult34zu2","_id":"ck2vg6gxa002x4cobx8h76wpk"},{"post_id":"ck2vg6gw7001r4cobw1fsbxjh","tag_id":"ck2vg6gwr002c4cobewzqhxht","_id":"ck2vg6gxc002z4cobd8as3kad"},{"post_id":"ck2vg6gwz002l4cob37vt9iro","tag_id":"ck2vg6gwr002c4cobewzqhxht","_id":"ck2vg6gxf00324cobyat93zpo"},{"post_id":"ck2vg6gwa001u4cobdu37xfc4","tag_id":"ck2vg6gwr002c4cobewzqhxht","_id":"ck2vg6gxg00344cobba1ujvvr"},{"post_id":"ck2vg6gx4002q4cobvje2ziao","tag_id":"ck2vg6gwr002c4cobewzqhxht","_id":"ck2vg6gxj00374cob9c485wyn"},{"post_id":"ck2vg6gwf001z4cobqis1xa07","tag_id":"ck2vg6gwr002c4cobewzqhxht","_id":"ck2vg6gxk00394cobnzy9igto"},{"post_id":"ck2vg6gx8002v4cobcnx9wrjn","tag_id":"ck2vg6gvt001c4cob0ra7qdut","_id":"ck2vg6gxm003b4cob0gqljuzo"},{"post_id":"ck2vg6gxb002y4cobb5lwl72z","tag_id":"ck2vg6gwr002c4cobewzqhxht","_id":"ck2vg6gxn003d4cobivp0q6gv"},{"post_id":"ck2vg6gwh00214cobqnpzr61c","tag_id":"ck2vg6gwr002c4cobewzqhxht","_id":"ck2vg6gxo003e4cobn22om9ls"},{"post_id":"ck2vg6gxd00304cobdesyp08r","tag_id":"ck2vg6gwr002c4cobewzqhxht","_id":"ck2vg6gxq003g4cob5xpsrw01"},{"post_id":"ck2vg6gxf00334cobtcr6ddls","tag_id":"ck2vg6gwr002c4cobewzqhxht","_id":"ck2vg6gxq003h4cobotmrr7i8"},{"post_id":"ck2vg6gwl00264cob8md7oawn","tag_id":"ck2vg6gwr002c4cobewzqhxht","_id":"ck2vg6gxr003i4coblprhdro5"},{"post_id":"ck2vg6gxh00354cob6nkwkndt","tag_id":"ck2vg6gwr002c4cobewzqhxht","_id":"ck2vg6gxs003j4cob349aojyi"},{"post_id":"ck2vg6gxj00384cobker3ttzi","tag_id":"ck2vg6gwr002c4cobewzqhxht","_id":"ck2vg6gxs003k4cobrsxwuzaw"},{"post_id":"ck2vg6gxl003a4cobzjuwajgm","tag_id":"ck2vg6gwr002c4cobewzqhxht","_id":"ck2vg6gxt003l4cob6ozyjhne"},{"post_id":"ck2vg6gx2002o4cobdfa6a142","tag_id":"ck2vg6gvk00134cobb0lptbcd","_id":"ck2vg6gxt003m4cobhab4sjh0"},{"post_id":"ck2vg6gx2002o4cobdfa6a142","tag_id":"ck2vg6gva000s4cob23dnb9yd","_id":"ck2vg6gxu003n4cob782at7gt"},{"post_id":"ck2vg6gx2002o4cobdfa6a142","tag_id":"ck2vg6gxi00364cob9rmnn1ps","_id":"ck2vg6gxu003o4cobsmevt11h"},{"post_id":"ck2vg6gx2002o4cobdfa6a142","tag_id":"ck2vg6gxm003c4cobf9hnazj0","_id":"ck2vg6gxv003p4cob9ifilnvt"},{"post_id":"ck2vg6gx6002t4cobu4d6azt3","tag_id":"ck2vg6gvk00134cobb0lptbcd","_id":"ck2vg6gxv003q4cobxt5z8e0f"},{"post_id":"ck2vg6gx6002t4cobu4d6azt3","tag_id":"ck2vg6gxp003f4cobgqvxl683","_id":"ck2vg6gxw003r4cobfk88bv1s"},{"post_id":"ck2vg6gy9003x4cobwpoygmks","tag_id":"ck2vg6gvt001c4cob0ra7qdut","_id":"ck2vg6gye00404cob6rddz7pe"},{"post_id":"ck2vg6gy4003s4cobw7k4wcon","tag_id":"ck2vg6gva000s4cob23dnb9yd","_id":"ck2vg6gyg00434cobz70ahfok"},{"post_id":"ck2vg6gy4003s4cobw7k4wcon","tag_id":"ck2vg6gy9003w4cobfnrkfbqb","_id":"ck2vg6gyh00444cob5bacdjts"},{"post_id":"ck2vg6gye00414cob19iji6em","tag_id":"ck2vg6gvk00134cobb0lptbcd","_id":"ck2vg6gyj00464cobqywj7pjh"},{"post_id":"ck2vg6gye00414cob19iji6em","tag_id":"ck2vg6gva000s4cob23dnb9yd","_id":"ck2vg6gyj00474cob4ohnabpy"},{"post_id":"ck2vg6gy7003u4cob27zxwo6q","tag_id":"ck2vg6gyf00424cob4iu7ih4l","_id":"ck2vg6gyk00484cobm73welyb"},{"post_id":"ck2vg6gyc003z4coblm27tzh5","tag_id":"ck2vg6gyi00454cob7cflc7uj","_id":"ck2vg6gyk00494cob17ekqb56"},{"post_id":"ck2vg6gyo004a4cob70ribg2s","tag_id":"ck2vg6gyf00424cob4iu7ih4l","_id":"ck2vg6gyp004b4cobuxooa74p"}],"Tag":[{"name":"ES6","_id":"ck2vg6gu700044cobult34zu2"},{"name":"计划","_id":"ck2vg6gus000e4cobzk8sfbcy"},{"name":"Git","_id":"ck2vg6gv3000n4cobv89durci"},{"name":"Javascript","_id":"ck2vg6gva000s4cob23dnb9yd"},{"name":"Mongo","_id":"ck2vg6gve000x4cobeaiveey6"},{"name":"分享","_id":"ck2vg6gvk00134cobb0lptbcd"},{"name":"Nodejs","_id":"ck2vg6gvp00184cobxf9bcsj8"},{"name":"计算机算法","_id":"ck2vg6gvt001c4cob0ra7qdut"},{"name":"Redux","_id":"ck2vg6gw2001m4cobwhzeo3cr"},{"name":"Javascript设计模式","_id":"ck2vg6gwr002c4cobewzqhxht"},{"name":"React","_id":"ck2vg6gxi00364cob9rmnn1ps"},{"name":"Electron","_id":"ck2vg6gxm003c4cobf9hnazj0"},{"name":"Python","_id":"ck2vg6gxp003f4cobgqvxl683"},{"name":"设计模式","_id":"ck2vg6gy9003w4cobfnrkfbqb"},{"name":"综合技能","_id":"ck2vg6gyf00424cob4iu7ih4l"},{"name":"Webpack","_id":"ck2vg6gyi00454cob7cflc7uj"}]}}