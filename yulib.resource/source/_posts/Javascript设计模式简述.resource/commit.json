{"compress":true,"commitItems":[["9d407e6d-e646-4bde-ae8a-e275b4000193",1548835929804,"---\ntitle: Javascript设计模式\ndate: 2017-04-25 21:25:12\ntags:\n    - Javascript\n    - 设计模式\n---\n\n## 简介\n\n全部代码：[点击这里](https://github.com/renhongl/front-end-demo/tree/master/demo-design-pattern)。\n\n设计模式的主题总是把不变的事物和变化的事物分离开来。\n\n\n## 鸭子类型\n\n如果它走起来像鸭子，叫起来也像鸭子，那么它就是鸭子。\n\n## 多态\n\n* 多态的思想是把“做什么”和“谁去做”分离开来。\n\n* 多态最根本的作用就是通过把过程化的条件分支语句转化为对象的多态性，从而消除这些条件分支语句。\n\n* 多态的最根本好处在于，你不必再像的对象询问“你是什么类型”而后根据得到的答案调用对象的某个行为，\n你只管调用该行为就是了，其他的一切多态机制都会为你安排妥当。\n\n## 封装\n* 封装的目的是将信息影藏。\n* 一般而言，封装是指封装数据和封装实现。\n* 更广义的封装，还包括封装类型和封装变化。\n\n## this\n* 作为对象的方法调用。\n    \n    ```\n    let obj = {\n        a: 1,\n        getA: function() {\n            console.log(this === obj);//true\n            console.log(this.a);//1\n        }\n    };\n    obj.getA();\n    ```\n\n* 作为普通函数调用。\n\n    ```\n    window.name = 'global';\n    let getName = function() {\n        return this.name;\n    }\n    console.log(getName());//global\n\n    //or\n\n    window.name = 'global';\n    let myObj = {\n        name: 'renhong',\n        getName: function() {\n            return this.name;\n        }\n    }\n    var getName = myObj.getName;//普通函数调用\n    console.log(getName());//global\n\n    console.log(myObj.getName());//renhong, 对象的方法调用\n    ```\n\n\n* 构造器调用。当用new运算符调用函数时，该函数总会返回一个对象，构造器里的this就指向这个对象。\n\n    ```\n    let MyClass = function() {\n        this.name = 'renhong';\n    }\n    let obj = new MyClass();\n    console.log(obj.name);//renhong\n\n    //如果构造器显示返回一个对象，那么new之后返回的是这个对象，而不是this。\n\n    let MyClass = function() {\n        this.name = 'renhong',\n        return {\n            name: 'mogu'\n        }\n    }\n    let obj = new MyClass();\n    console.log(obj.name);//mogu\n    ```\n\n* call和apply调用。用于动态的改变传入函数的this。\n\n    ```\n    let obj1 = {\n        name: 'renhong',\n        getName: function() {\n            return this.name;\n        }\n    }\n\n    let obj2 = {\n        name: 'mogu'\n    }\n\n    console.log(obj1.getName());//renhong\n    console.log(obj1.getName.call(obj2));//mogu\n    ```\n\n## call和apply\n* 作用一模一样，区别只在于传入参数的形式不同。\n* apply接受两个参数，第一个参数指定函数体内部的this指向。第二个参数是一个数组或者类数组，这些元素全部作为参数传递给被调用的函数。\n\n    ```\n    let func = function(a, b, c) {\n        console.log([a, b, c]);//[1, 2, 3]\n    }\n    func.apply(null, [1, 2, 3]);\n    ```\n\n* call 传入的参数是不固定的，第一个参数同样是代表函数体内的this指向，从第二个参数开始，每个参数一次被当做被调用的函数的参数传入。\n\n    ```\n    let func = function(a, b, c) {\n        console.log([a, b, c]);//[1, 2, 3]\n    }\n    func.call(null, 1, 2, 3);\n    ```\n\n* 为什么要使用call和apply？\n\n    ```\n    //改变this指向\n    //---------例子1\n    let obj1 = {\n        name: 'renhong'\n    }\n    let obj2 = {\n        name: 'mogu'\n    }\n    window.name = 'window';\n    let getName = function() {\n        this.name;\n    }\n    getName();//window\n    getName.call(obj1);//renhong\n    getName.call(obj2);//mogu\n\n    //---------例子2\n    let func = function() {\n        console.log(this.id);\n    }\n    document.getElementById('div1').onclick = function() {\n        console.log(this.id);//div1\n        func();//undefined，指向window\n        func.call(this);//div1，指向这个this\n    }\n\n    //---------例子3\n    class Controller{\n        constructor() {\n            let type = 'dialog';\n            this.name = 'controller';\n            renderControl();\n            handleEvents.call(this);\n            renderDialog.call(this, type);\n        }\n    }\n      \n    function renderControl() {\n        console.log(this.name);//undefined，this指向window\n    }\n\n    function handleEvents() {\n        console.log(this.name);//controller\n    }\n\n    function renderDialog(type) {\n        console.log(type);//dialog\n    }\n\n    //借用其他对象的方法\n    //类数组对象arguments，没有push的方法，不能将元素push进去。我们首先调用数组的push方法，再手动将push方法内部的this指向改为arguments，就帮助arguments实现了push功能。\n    (function() {\n        Array.prototype.push.call(arguments, 3);\n        console.log(arguments);//[1, 2, 3]\n    })(1, 2);\n  ````\n\n\n## 闭包\n\n闭包是一个非常强大的特性，但人们对其也有诸多误解。一种耸人听闻的说法是闭包会造成内存泄漏，所以要尽量减少闭包的使用。\n\n局部变量本来应该在函数退出的时候被解除饮用，但如果局部变量被封闭在闭包形成的环境中，那么这个局部变量就能一直生存下去。从这个意义上看，闭包的确会使一些数据无法被及时销毁。使用闭包的一部分原因是我们选择主动把一些变量封闭在闭包中，因为可能在以后还需要使用这些变量，把这些变量放在闭包中和放在全局作用域，对内存方面的影响是一致的。\n\n\n跟闭包和内存泄漏有关系的地方是，使用闭包的同时，比较容易形成循环引用，如果闭包的作用域链中保存着一些DOM节点，这时候有可能造成内存泄漏。但这并非闭包问题，也并非Javascript问题。\n\n**注：** 当代码中需要全局变量时，可以使用闭包，将这个变量封装在一个函数中，那这个函数就封装了一个独立的功能，不再依赖外部的变量。\n\n## 函数柯里化（function currying）\n\ncurrying又称部分求值。一个currying的函数首先会接受一些参数，接受了这些参数之后，该函数并不会立即求值，而是继续返回另外一个函数，刚传入的参数在函数形成的闭包中被保存起来。待到函数真正需要求值的时候，之前传入的所有参数都会被一次性用于求值。\n\n## uncurrying\n\n当我们调用对象的某个方法时，其实不用去关心该对象原本是否被设计为拥有这个方法，这是动态类型语言的特点，也是常说的鸭子类型思想。\n\n同理，一个对象也未必只有使用它自身的方法。通过call和apply方法可以让对象去借用一个原本不属于它的方法。\n\n\n## 降频\n\n在一些情况下，函数的触发不是由用户直接控制的，在这些情景下，函数可能被非常频繁的调用，而造成大的性能问题。\n\n例如在window的resize事件中，或者在div拖动事件中，会频繁的触发这些事件，并且DOM相关的操作非常消耗性能，这时浏览器可能会出现卡顿现象。\n\n以上现象我们可以使用setTimeout来实现每隔固定时间来触发事件，如果过于频繁，将忽略那次的事件。\n\n函数式例子：\n\n  ```\n  var resize = function(callback, interval) {\n      var timer,\n          firstTime = true;\n      return function() {\n          var args = arguments,\n              self = this;\n          if(firstTime) {\n              callback.apply(self, args);\n              return false;\n          }\n          if(timer) {\n              return false;\n          }\n          timer = setTimeout(function() {\n              clearTimeout(timer);\n              timer = null;\n              callback.apply(self, args);\n          }, interval || 500)\n      }\n  };\n\n  window.onresize = resize(function() {\n      console.log('resized', Date.now());\n  }, 1000);\n  ```\n\n\n\n\n面向对象例子：\n\n  ```\n\texport default class ReduceFrequency{\n\t    /**\n\t     * input 输入时，不要每次去检查更改，在结束输入后200毫秒去检查\n\t     * 这样可以减少监听频繁执行的事件带来的卡顿\n\t     * @param {DOM Object} target \n\t     */\n\t    inputControl(target) {\n\t        target.addEventListener('input', (e) => {\n\t            clearTimeout(this.timer);\n\t            this.timer = setTimeout(() => {\n\t                console.log(e.target.value);\n\t            }, 500); \n\t        });\n\t    }\n\t\n\t    /**\n\t     * 鼠标每次移动时，并不是每次都去打印它的位置，而是将最近这个事件存起来，使用定时器每隔500毫秒\n\t     * 打印一次最新的位置。\n\t     */\n\t    mouseMoveControl() {\n\t        this.inTimer = false;\n\t        document.addEventListener('mousemove', (e) => {\n\t            this.latestE = e;\n\t            if (!this.inTimer) {\n\t                this.inTimer = true;\n\t                this.timer2 = setTimeout(() => {\n\t                    let x = this.latestE.pageX;\n\t                    let y = this.latestE.pageY;\n\t                    console.log(Date.now(), x, y);\n\t                    this.inTimer = false;\n\t                }, 500);\n\t            }\n\t        });\n\t    }\n\t\n\t    /**\n\t     * 一次生成1000个节点，改成每1秒生成100个节点\n\t     */\n\t    renderDomControl() {\n\t        let total = 1000;\n\t        render();\n\t        function render() {\n\t            for (let i = 0; i < 100; i++) {\n\t                let dom = document.createElement('span');\n\t                dom.innerText = total;\n\t                document.body.appendChild(dom);\n\t                total -= 1;\n\t            }\n\t            if(total > 0) {\n\t                setTimeout(() => {\n\t                    render();\n\t                }, 1000);\n\t            }\n\t        }\n\t    }\n\t}\n  ```\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n",[[1548835875173,["P1211678@NCS-100918JJ01",[[-1,92,"#"]],[93,93],[92,92]]],[1548835882869,["P1211678@NCS-100918JJ01",[[-1,217,"#"]],[218,218],[217,217]]],[1548835885505,["P1211678@NCS-100918JJ01",[[-1,253,"#"]],[254,254],[253,253]]],[1548835893027,["P1211678@NCS-100918JJ01",[[-1,419,"#"]],[420,420],[419,419]]],[1548835896111,["P1211678@NCS-100918JJ01",[[-1,485,"#"]],[486,486],[485,485]]],[1548835899913,["P1211678@NCS-100918JJ01",[[1,516,"js"]],[516,516],[518,518]]],[1548835903995,["P1211678@NCS-100918JJ01",[[1,719,"js"]],[719,719],[721,721]]],[1548835919480,["P1211678@NCS-100918JJ01",[[1,1207,"js"]],[1207,1207],[1209,1209]]],[1548835923277,["P1211678@NCS-100918JJ01",[[1,1622,"js"]],[1622,1622],[1624,1624]]],[1548835928515,["P1211678@NCS-100918JJ01",[[-1,1889,"#"]],[1890,1890],[1889,1889]]],[1548835930624,["P1211678@NCS-100918JJ01",[[1,2005,"js"]],[2005,2005],[2007,2007]]],[1548835933906,["P1211678@NCS-100918JJ01",[[1,2213,"js"]],[2213,2213],[2215,2215]]],[1548835939008,["P1211678@NCS-100918JJ01",[[1,2367,"js"]],[2367,2367],[2369,2369]]],[1548835949215,["P1211678@NCS-100918JJ01",[[-1,3709,"#"]],[3710,3710],[3709,3709]]],[1548835954366,["P1211678@NCS-100918JJ01",[[-1,4106,"#"]],[4107,4107],[4106,4106]]],[1548835959518,["P1211678@NCS-100918JJ01",[[-1,4263,"#"]],[4264,4264],[4263,4263]]],[1548835965205,["P1211678@NCS-100918JJ01",[[-1,4400,"#"]],[4401,4401],[4400,4400]]],[1548835968944,["P1211678@NCS-100918JJ01",[[1,4603,"js"]],[4603,4603],[4605,4605]]],[1548835974863,["P1211678@NCS-100918JJ01",[[1,5261,"js"]],[5261,5261],[5263,5263]]]],null,"P1211678@NCS-100918JJ01"]]}