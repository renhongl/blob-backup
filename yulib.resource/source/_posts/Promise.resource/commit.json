{"compress":true,"commitItems":[["e7123756-16e5-4d8f-8603-54fc7568c32e",1548839231936,"\n---\ntitle: Promise\ndate: 2017-06-20 20:07:38\ntags: ES6\n---\n\n\n\n## Promise\n\nPromise是异步编程的一种解决方案，它是一个容器，里面保存着某个将来才会结束的事件。\n\n**通过异步操作的结果，决定它是哪种状态。**\n\n**pending ---> fulfilled   或者 pending ---> rejected**\n\n<!--more-->\n\n* 基本使用\n\n  ```\n  const getData = function(url) {\n    return new Promise((resolve, reject) => {\n      try{\n        setTimeout(() => {\n          console.log('data loaded');\n          resolve('get ' + url + ' data successfully');\n        }, 2000);\n      }catch(e){\n        reject(new Error('error'));\n      }\n    });\n  }\n\n  getData('test.json').then((data) => {\n    console.log(data);\n  });\n\n  ```\n\n* 异步加载图片\n\n  ```\n  const loadImage = function(url) {\n    return new Promise((resolve, reject) => {\n        const img = new Image();\n        img.onerror = reject;\n        img.onload = () => {\n          setTimeout(() => {\n            resolve('img loaded');\n          }, 2000);\n        };\n        img.src = url;\n    });\n  }\n\n  const imgURL = 'https://ss1.bdstatic.com/70cFvXSh_Q1YnxGkpoWK1HF6hhy/it/u=628594730,4098634647&fm=27&gp=0.jpg';\n  document.body.innerHTML = 'loading...';\n  loadImage(imgURL).then(data => {\n    const img = document.createElement('img');\n    img.style.width = '100px';\n    img.style.height = '100px';\n    img.src = imgURL;\n    document.body.innerHTML = '';\n    document.body.appendChild(img);\n  });\n  ```\n\n* Ajax请求\n\n  ```\n  const getData = function(url) {\n    return new Promise((resolve, reject) => {\n    \tconst handler = function() {\n        if (this.readyState !== 4) {\n          return;\n        }\n        if (this.status === 200) {\n          resolve(this.response);\n        } else {\n          reject(new Error(this.statusText));\n        }\n    \t};\n      const client = new XMLHttpRequest();\n      client.open('GET', url);\n      client.responseType = 'json';\n      client.onreadystatechange = handler;\n      client.setRequestHeader('Accept', 'application/json');\n      client.send();\n    });\n  }\n\n  getData('test.json').then(data => {\n    console.log(data);\n  });\n  ```\n\n* 应总是使用第一个then获取resolve状态的结果，使用catch获取错误的结果\n\n  ```\n  getData('test.json').then(data => {\n    console.log(data);\n  }).catch(e => {\n    console.log(e);\n  });\n  ```\n\n* Promise.all()用于将多个Promise实例，包装成一个新的Promise实例\n\n  ```\n  const p = Promise.all([p1, p2, p3]);\n  ```\n\n  1. p1, p2, p3的状态都变成fulfilled, p也会变成fulfilled，p1, p2, p3的返回值组成一个数组传递给p的回调函数。\n  2. p1, p2, p3中只要有一个被rejected，p的状态就变成rejected, 第一个被rejected的实例的返回值，会传递给p的回调函数。\n\n* Promise.race()也是将多个Promise实例包装成一个新的Promise实例\n\n  1. p1, p2, p3只要有一个先改变状态，p的状态就跟着改变。\n\n",[[1548839230838,["P1211678@NCS-100918JJ01",[[-1,0,"\n"]],[1,1],[0,0]]],[1548839294318,["P1211678@NCS-100918JJ01",[[-1,63,"#"]],[64,64],[63,63]]],[1548839300236,["P1211678@NCS-100918JJ01",[[-1,199,"<!--more-->"]],[199,210],[199,199]]],[1548839303273,["P1211678@NCS-100918JJ01",[[1,214,"js"]],[214,214],[216,216]]],[1548839308265,["P1211678@NCS-100918JJ01",[[1,613,"js"]],[613,613],[615,615]]],[1548839319458,["P1211678@NCS-100918JJ01",[[1,1342,"js"]],[1342,1342],[1344,1344]]],[1548839368014,["P1211678@NCS-100918JJ01",[[1,2212,"js"]],[2212,2212],[2214,2214]]],[1548839371611,["P1211678@NCS-100918JJ01",[[1,2046,"js"]],[2046,2046],[2048,2048]]]],null,"P1211678@NCS-100918JJ01"]]}