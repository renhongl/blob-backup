{"compress":true,"commitItems":[["e7ec38c2-bc45-4eb9-9c25-19fd2671b56d",1548835563126,"---\ntitle: Javascript标准参考教程重点\ndate: 2017-02-04 22:00:06\ntags:\n    - Javascript\n---\n\n## 简介\n\n记一些容易忘记的语法。\n\n\n## 标签(label)用法\n\n  ```\n  //判断数组二中是否有数组一中的元素\n  var itHas = false;\n  var index = -1;\n  var item = '';\n  var arr1 = ['zhagnsanfeng', 'sunwukong', 'zhubajie'];\n  var arr2 = ['liangrenhong', 'zhubajie', 'xiaofeng'];\n  verify:\n      for(var i = 0, len1 = arr1.length; i < len1; i++) {\n          for(var j = 0, len2 = arr2.length; j < len2; j++) {\n              if(arr1[i] === arr2[j]) {\n                  itHas = true;\n                  index = j;\n                  item = arr2[j];\n                  break verify;\n              }\n          }\n      }\n  console.log(itHas, index, item);\n  ```\n\n当查找到一个符合的之后，就退出循环，这样可以节省时间。\n如果在break之后不使用标签，只能跳出内层循环。\n\n## for...in遍历对象属性\n\n  ```\n  function Person() {\n      this.name = 'lrh';\n      this.age = '18'\n  }\n\n  Person.prototype.gender = 'boy';\n\n  var person = new Person();\n\n  for(var p in person) {\n      console.log(p);\n  }\n  //name\n  //age\n  //gender\n  ```\n\n使用for...in遍历会遍历出实例自身的属性以及继承的属性。\n如果非要用for...in那就在遍历时加上hasOwnProperty方法判断：\n\n  ```\n  function Person() {\n      this.name = 'lrh';\n      this.age = '18'\n  }\n\n  Person.prototype.gender = 'boy';\n\n  var person = new Person();\n\n  for(var p in person) {\n      if(person.hasOwnProperty(p)) {\n          console.log(p);\n      }\n  }\n  //name\n  //age\n  ```\n\n## in运算符\n\n用于检测对象是否包含某个属性\n\n  ```\n  var person = {\n      name: 'lrh'\n  };\n\n  'name' in person;//true\n  ```\n\n## 闭包\n\n- 定义在一个函数内部的函数。\n- 将函数内部与函数外部连接起来的一座桥梁。\n- 可以读取函数内部的变量。\n- 让函数内部变量一直保持在内存中。\n\n    ```\n    function count(number) {\n        return function () {\n            console.log(number++);\n        }\n    }\n\n    var add = count(5);\n    add();\n    add();\n    add();\n    ```\n\n- 封装对象的私有属性和私有方法。\n\n    ```\n    function Person(name) {\n        var _gender;\n\n        function setGender(gender) {\n            _gender = gender\n        }\n\n        function getGender() {\n            return _gender;\n        }\n\n        return {\n            name: name,\n            getGender: getGender,\n            setGender: setGender\n        }\n    }\n\n    var p1 = new Person('lrh');\n    p1.setGender('boy');\n    p1.getGender();//boy\n    ```\n\n## 数组\n\nmap方法对数组的所有成员一次调用一个函数，根据函数结果返回一个新数组。\nmap方法接受一个函数做为参数，调用时会将其传入三个参数，分辨是当前成员，当前位置，数组本身。\nmap方法还可以接受第二个参数，表示回调函数执行时this所指向的对象。\n\nforEach方法与map方法类似，但是一般不返回值。如果需要有返回值，一般使用map方法。\nforEach方法不能中断执行，总是会遍历完所有成员，这时可以使用for循环代替。\n\nfilter方法返回结构为true的成员。\n\nsome方法，只要有一个成员的返回值为true，那么整个some方法的返回值就是true。\n\nevery方法，每个数组成员的返回值是true，every方法才会返回true。\n\nreduce方法，依次处理数组的每个成员，最终累计成一个值。\n\n## 字符串\n\nsubstring方法用于从原字符串取出子字符串并返回，不改变原字符串。它与slice作用相同，但有一些奇怪的规则，因此不建议使用这个方法，优先使用slice。\n\n如果第二个参数大于第一个参数，substring方法会自动更换两个参数的位置。\n\n如果参数是负数，substring方法会自动将负数转为0。\n\n\n## 对象的拷贝-浅拷贝\n\n确保拷贝后的对象，与原对象具有同样的prototype原型对象。\n确保拷贝后的对象，与原对象具有同样的属性。\n\n  ```\n  function copyObject(orig) {\n      var copy = Object.create(Object.getPrototypeOf(orig));\n      copyOwnPropertiesFrom(copy, orig);\n      return copy;\n  }\n\n  function copyOwnPropertiesFrom(target, source) {\n      Object\n          .getOwnPropertyNames(source)\n          .forEach(function(propKey) {\n              var desc = Object.getOwnPropertyDescriptor(source, propKey);\n              Object.defineProperty(target, propKey, desc);\n          });\n          \n      return target;\n  }\n  ```\n\n\n\n",[[1548835562183,["P1211678@NCS-100918JJ01",[[-1,85,"#"]],[85,86],[85,85]]],[1548835565650,["P1211678@NCS-100918JJ01",[[-1,105,"#"]],[105,106],[105,105]]],[1548835567217,["P1211678@NCS-100918JJ01",[[1,124,"js"]],[124,124],[126,126]]],[1548835574054,["P1211678@NCS-100918JJ01",[[-1,746,"#"]],[747,747],[746,746]]],[1548835575463,["P1211678@NCS-100918JJ01",[[1,768,"js"]],[768,768],[770,770]]],[1548835591124,["P1211678@NCS-100918JJ01",[[1,1076,"js"]],[1076,1076],[1078,1078]]],[1548835594672,["P1211678@NCS-100918JJ01",[[-1,1344,"#"]],[1345,1345],[1344,1344]]],[1548835597593,["P1211678@NCS-100918JJ01",[[1,1373,"js"]],[1373,1373],[1375,1375]]],[1548835600780,["P1211678@NCS-100918JJ01",[[-1,1451,"#"]],[1452,1452],[1451,1451]]],[1548835603664,["P1211678@NCS-100918JJ01",[[1,1537,"js"]],[1537,1537],[1539,1539]]],[1548835607099,["P1211678@NCS-100918JJ01",[[1,1742,"js"]],[1742,1742],[1744,1744]]],[1548835613187,["P1211678@NCS-100918JJ01",[[-1,2159,"#"]],[2160,2160],[2159,2159]]],[1548835619446,["P1211678@NCS-100918JJ01",[[-1,2522,"#"]],[2523,2523],[2522,2522]]],[1548835623970,["P1211678@NCS-100918JJ01",[[-1,2684,"#"]],[2685,2685],[2684,2684]]],[1548835627210,["P1211678@NCS-100918JJ01",[[1,2757,"js"]],[2757,2757],[2759,2759]]]],null,"P1211678@NCS-100918JJ01"]]}