{"compress":true,"commitItems":[["3581a61c-37c9-41bc-bb6d-c6298224a773",1548833550056,"---\ntitle: Class\ndate: 2017-06-14 19:16:52\ntags: ES6\n---\n\n\n## Class\n\nJavascript没有类的概念，要生成一个实例对象，是通过构造函数。\n\n<!--more-->\n\n### 传统写法：\n\n```\nfunction Person(name, age) {\n  this.name = name;\n  this.age = age;\n}\n\nPerson.prototype.toString = function() {\n  return '(' + this.name + ', ' + this.age + ')';\n}\n\nPerson.prototype.getName = function() {\n  return this.name;\n}\n\nlet p = new Person('lrh', 18);\np.toString();//\"(lrh, 18)\"\np.getName();//\"lrh\"\n```\n\n### 使用ES6的Class语法:\n\n```\nclass Person{\n  constructor(name, age) {\n    this.name = name;\n    this.age = age;\n  }\n  \n  toString() {\n    return '(' + this.name + ', ' + this.age + ')';\n  }\n  \n  getName() {\n    return this.name;\n  }\n}\n\nlet p = new Person('lrh', 19);\np.toString();//\"(lrh, 18)\"\np.getName();//\"lrh\"\n```\n\n#### 私有方法:\n\n1. 使用**下划线\" _ \"**区别方法名，但是外部还是可以调用这个方法。\n  ```\n   class Person{\n    constructor(name, age) {\n      this.name = name;\n      this.age = age;\n    }\n\n    _getAge() {\n      return this.age;\n    }\n\n    getInfor() {\n      return this.name + ', ' + this._getAge();\n    }\n  }\n  let p = new Person('lrh', 18);\n  p.getInfor();//\"lrh, 18\"\n  ```\n\n2. 将私有方法移出类，因为在类中方法都是对外可见的。\n\n   ```\n   class Person{\n     constructor(name, age) {\n       this.name = name;\n       this.age = age;\n     }\n     \n     getInfor() {\n       return this.name + ', ' + getAge.call(this);\n     }\n   }\n\n   function getAge() {\n     return this.age;\n   }\n\n   let p = new Person('lrh', 19);\n   p.getInfor();\n   p.getAge();//TypeError: p.getAge is not a function\n   ```\n\n3. 利用Symbol的唯一性，设置私有变量。\n\n   ```\n   const getAge = Symbol();\n\n   class Person{\n     constructor(name, age) {\n       this.name = name;\n       this.age = age;\n     }\n     \n     [getAge]() {\n       return this.age;\n     }\n     \n     getInfor() {\n       return this.name + ', ' + this[getAge]();\n     }\n   }\n\n   let p = new Person('lrh', 18);\n   p.getInfor();\n   ```\n\n   ​\n\n#### 私有属性\n\n1. 使用#表示，但是还只是提案，babel都不支持。\n\n   ```\n   class Person{\n     #type = 'Student';\n     constructor(name, age) {\n       this.name = name;\n       this.age = age;\n     }\n     \n     getInfor() {\n       return this.name + ', ' + this.age + ', ' + this.#type; \n     }\n   }\n\n   let p = new Person('lrh', 18);\n   p.getInfor();\n   ```\n\n#### 取值函数（getter）和存值函数（setter）\n\n1. 拦截了该属性的存取行为。\n\n   ```;\n   //getter，setter对应的属性应该是一个_开头的私有属性，只有使用getter，setter的方式可以读取和修改\n   class Person{\n     constructor(name, age, gender) {\n       this.name = name;\n       this.age = age;\n       this._gender = gender;\n     }\n     \n     get gender() {\n       console.log('getter');\n       return this._gender;\n     }\n     \n     set gender(value) {\n       console.log('setter');\n       this._gender = value;\n     }\n   }\n\n   let p = new Person('lrh', 18, 'male');\n   p.gender;\n   p.gender = 'female';\n   p.gender;\n   ```\n\n   ​\n\n#### 静态方法\n\n1. 在方法前加上static关键字，this指向类而不是实例。只能通过类调用。\n\n   ```\n   class Person{\n     static getRandom() {\n     \treturn Math.random();\n     }\n   \t\n     constructor(name, age) {\n       this.name = name;\n       this.age = age;\n     }\n   }\n\n   Person.getRandom();//0.36116181991876695\n   ```\n\n#### 静态属性与实例属性\n\n1. 是ES7的提案，需要安装ES7的转码：`npm install --save-dev babel-preset-stage-2`\n\n   ```\n   //实例属性\n   class Person{\n     type = 'Student';\n     constructor() {\n       console.log(this.type);\n     }\n   }\n   new Person();//Student\n\n   //静态属性\n   class Person{\n     static type = 'Student';\n     constructor() {\n       console.log(Person.type);\n     }\n   }\n   new Person();//Student\n   ```\n\n   ​",[[1548833542759,["P1211678@NCS-100918JJ01",[[-1,106,"<!--more-->"]],[106,117],[106,106]]]],null,"P1211678@NCS-100918JJ01"],["efdc93f3-5fb5-4a22-b2a8-3efd53ea3014",1548833647225,"---\ntitle: Class\ndate: 2017-06-14 19:16:52\ntags: ES6\n---\n\n\n## Class\n\nJavascript没有类的概念，要生成一个实例对象，是通过构造函数。\n\n\n\n### 传统写法：\n\n```\nfunction Person(name, age) {\n  this.name = name;\n  this.age = age;\n}\n\nPerson.prototype.toString = function() {\n  return '(' + this.name + ', ' + this.age + ')';\n}\n\nPerson.prototype.getName = function() {\n  return this.name;\n}\n\nlet p = new Person('lrh', 18);\np.toString();//\"(lrh, 18)\"\np.getName();//\"lrh\"\n```\n\n### 使用ES6的Class语法:\n\n```\nclass Person{\n  constructor(name, age) {\n    this.name = name;\n    this.age = age;\n  }\n  \n  toString() {\n    return '(' + this.name + ', ' + this.age + ')';\n  }\n  \n  getName() {\n    return this.name;\n  }\n}\n\nlet p = new Person('lrh', 19);\np.toString();//\"(lrh, 18)\"\np.getName();//\"lrh\"\n```\n\n#### 私有方法:\n\n1. 使用**下划线\" _ \"**区别方法名，但是外部还是可以调用这个方法。\n  ```\n   class Person{\n    constructor(name, age) {\n      this.name = name;\n      this.age = age;\n    }\n\n    _getAge() {\n      return this.age;\n    }\n\n    getInfor() {\n      return this.name + ', ' + this._getAge();\n    }\n  }\n  let p = new Person('lrh', 18);\n  p.getInfor();//\"lrh, 18\"\n  ```\n\n2. 将私有方法移出类，因为在类中方法都是对外可见的。\n\n   ```\n   class Person{\n     constructor(name, age) {\n       this.name = name;\n       this.age = age;\n     }\n     \n     getInfor() {\n       return this.name + ', ' + getAge.call(this);\n     }\n   }\n\n   function getAge() {\n     return this.age;\n   }\n\n   let p = new Person('lrh', 19);\n   p.getInfor();\n   p.getAge();//TypeError: p.getAge is not a function\n   ```\n\n3. 利用Symbol的唯一性，设置私有变量。\n\n   ```\n   const getAge = Symbol();\n\n   class Person{\n     constructor(name, age) {\n       this.name = name;\n       this.age = age;\n     }\n     \n     [getAge]() {\n       return this.age;\n     }\n     \n     getInfor() {\n       return this.name + ', ' + this[getAge]();\n     }\n   }\n\n   let p = new Person('lrh', 18);\n   p.getInfor();\n   ```\n\n   ​\n\n#### 私有属性\n\n1. 使用#表示，但是还只是提案，babel都不支持。\n\n   ```\n   class Person{\n     #type = 'Student';\n     constructor(name, age) {\n       this.name = name;\n       this.age = age;\n     }\n     \n     getInfor() {\n       return this.name + ', ' + this.age + ', ' + this.#type; \n     }\n   }\n\n   let p = new Person('lrh', 18);\n   p.getInfor();\n   ```\n\n#### 取值函数（getter）和存值函数（setter）\n\n1. 拦截了该属性的存取行为。\n\n   ```;\n   //getter，setter对应的属性应该是一个_开头的私有属性，只有使用getter，setter的方式可以读取和修改\n   class Person{\n     constructor(name, age, gender) {\n       this.name = name;\n       this.age = age;\n       this._gender = gender;\n     }\n     \n     get gender() {\n       console.log('getter');\n       return this._gender;\n     }\n     \n     set gender(value) {\n       console.log('setter');\n       this._gender = value;\n     }\n   }\n\n   let p = new Person('lrh', 18, 'male');\n   p.gender;\n   p.gender = 'female';\n   p.gender;\n   ```\n\n   ​\n\n#### 静态方法\n\n1. 在方法前加上static关键字，this指向类而不是实例。只能通过类调用。\n\n   ```\n   class Person{\n     static getRandom() {\n     \treturn Math.random();\n     }\n   \t\n     constructor(name, age) {\n       this.name = name;\n       this.age = age;\n     }\n   }\n\n   Person.getRandom();//0.36116181991876695\n   ```\n\n#### 静态属性与实例属性\n\n1. 是ES7的提案，需要安装ES7的转码：`npm install --save-dev babel-preset-stage-2`\n\n   ```\n   //实例属性\n   class Person{\n     type = 'Student';\n     constructor() {\n       console.log(this.type);\n     }\n   }\n   new Person();//Student\n\n   //静态属性\n   class Person{\n     static type = 'Student';\n     constructor() {\n       console.log(Person.type);\n     }\n   }\n   new Person();//Student\n   ```\n\n   ​",[[1548833620162,["P1211678@NCS-100918JJ01",[[-1,60,"#"]],[60,60],[59,59]]],[1548833639837,["P1211678@NCS-100918JJ01",[[-1,108,"##"]],[108,110],[108,108]]],[1548833646276,["P1211678@NCS-100918JJ01",[[1,119,"js"]],[119,119],[121,121]]],[1548833648641,["P1211678@NCS-100918JJ01",[[-1,119,"js"]],[121,121],[119,119]]],[1548833649558,["P1211678@NCS-100918JJ01",[[1,119,"js"]],[119,119],[121,121]]],[1548833663753,["P1211678@NCS-100918JJ01",[[-1,433,"##"]],[433,435],[433,433]]],[1548833667094,["P1211678@NCS-100918JJ01",[[1,453,"js"]],[453,453],[455,455]]],[1548833683772,["P1211678@NCS-100918JJ01",[[-1,747,"###"]],[748,750],[747,747]]],[1548833703131,["P1211678@NCS-100918JJ01",[[-1,760,"**"],[-1,770,"**"]],[762,765],[760,768]]],[1548833711053,["P1211678@NCS-100918JJ01",[[1,760,"**"],[1,763,"**"]],[760,763],[760,767]]],[1548833720158,["P1211678@NCS-100918JJ01",[[1,799,"js"]],[799,799],[801,801]]],[1548833722503,["P1211678@NCS-100918JJ01",[[-1,799,"js"]],[801,801],[799,799]]],[1548833723773,["P1211678@NCS-100918JJ01",[[1,799,"js"]],[799,799],[801,801]]],[1548833728462,["P1211678@NCS-100918JJ01",[[1,794,"2. \n"]],[793,793],[797,797]]],[1548833731359,["P1211678@NCS-100918JJ01",[[-1,794,"2. "]],[797,797],[794,794]]],[1548833744147,["P1211678@NCS-100918JJ01",[[1,797,"  "],[1,803,"  "],[1,820," "],[1,824," "],[1,855,"  "],[1,873," "],[1,879," "],[1,899,"  "],[1,901,"  "],[1,906,"  "],[1,918,"  "],[1,945,"  "],[1,947,"  "],[1,948,"  "],[1,965,"  "],[1,1013," "],[1,1017," "],[1,1019,"  "],[1,1023,"  "],[1,1058,"  "],[1,1083,"  "]],[797,1088],[799,1124]]],[1548833750790,["P1211678@NCS-100918JJ01",[[-1,797,"  "],[-1,805,"  "],[-1,824,"  "],[-1,861,"  "],[-1,887,"  "],[-1,905,"  "]],[799,912],[797,900]]],[1548833752464,["P1211678@NCS-100918JJ01",[[1,797,"  "],[1,803,"  "],[1,820,"  "],[1,855,"  "],[1,879,"  "],[1,895,"  "]],[797,900],[799,912]]],[1548833776745,["P1211678@NCS-100918JJ01",[[1,1161,"js"]],[1161,1161],[1163,1163]]],[1548833779983,["P1211678@NCS-100918JJ01",[[1,1550,"js"]],[1550,1550],[1552,1552]]],[1548833786208,["P1211678@NCS-100918JJ01",[[-1,1891,"###"]],[1891,1894],[1891,1891]]],[1548833797969,["P1211678@NCS-100918JJ01",[[1,1933,"js"]],[1933,1933],[1935,1935]]],[1548833805426,["P1211678@NCS-100918JJ01",[[-1,2223,"###"]],[2223,2226],[2223,2223]]],[1548833815567,["P1211678@NCS-100918JJ01",[[-1,1933,"js"]],[1935,1935],[1933,1933]]],[1548833816252,["P1211678@NCS-100918JJ01",[[1,1933,"js"]],[1933,1933],[1935,1935]]],[1548833819343,["P1211678@NCS-100918JJ01",[[-1,2274,";"]],[2275,2275],[2274,2274]]],[1548833819962,["P1211678@NCS-100918JJ01",[[1,2274,"js"]],[2274,2274],[2276,2276]]],[1548833836075,["P1211678@NCS-100918JJ01",[[-1,2783,"###"]],[2783,2786],[2783,2783]]],[1548833839444,["P1211678@NCS-100918JJ01",[[1,2838,"js"]],[2838,2838],[2840,2840]]],[1548833844682,["P1211678@NCS-100918JJ01",[[-1,3068,"###"]],[3068,3071],[3068,3068]]],[1548833850071,["P1211678@NCS-100918JJ01",[[1,3155,"js"]],[3155,3155],[3157,3157]]]],null,"P1211678@NCS-100918JJ01"]]}