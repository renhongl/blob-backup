{"compress":true,"commitItems":[["b127663b-62e1-4d68-bf3c-a2c3605a2e55",1548839384408,"\n---\ntitle: Set 和 Map\ndate: 2017-07-13 21:16:52\ntags: ES6\n---\n\n\n\n## Set\n\n类似于数组的数据结构，成员的值都是**唯一**的。\n\n<!--more-->\n\n1. 基本写法\n\n   ```\t\n   const set =  new Set([1, 2, 3, 4]);\n\n   ```\n\n2. 数组去重\n\n   ```\n   let a = [1, 2, 2, 3, 5, 5];\n   a = [...new Set(a)];//[1, 2, 3, 5]\n\n   ```\n\n3. 实例的属性和方法\n\n   ```\n   let a = new Set();\n   a.add(1).add(3).add(10);\n   a.size;//3\n   a.has(10);//true\n   a.delete(10);\n   a.has(10);//false\n   a.clear();\n   a.size;//\n\n   ```\n\n4. 遍历操作\n\n   * keys(): 返回键名的遍历器\n   * values(): 返回键值得遍历器\n   * entries(): 返回键值对的遍历器\n   * forEach(): 使用回调函数遍历每个成员\n\n\n\n## Map\n\n解决Object只能使用字符串当做键的问题。\n\n如果需要键值对的数据结构，Map比Object更合适。\n\n1. 基本写法\n\n   ```\n   let items = [\n     ['name', 'lrh'],\n     ['age', 18]\n   ];\n   const map = new Map(items);\n\n   ```\n\n2. 实例的属性和方法\n\n   ```\n   map.size;//2\n   map.set('gender', 'male').set('experience', 3);\n   map.get('gender');//male\n   map.has('experience');//true\n   map.delete('age')//true\n   map.clear();\n   map.size;//0\n\n   ```\n\n3. 遍历操作\n\n   * keys()\n\n   * values()\n\n   * entries() 默认的遍历器接口\n\n   * forEach()\n\n     ​",[[1548839383753,["P1211678@NCS-100918JJ01",[[-1,0,"\n"]],[1,1],[0,0]]],[1548839390055,["P1211678@NCS-100918JJ01",[[-1,65,"#"]],[66,66],[65,65]]],[1548839392120,["P1211678@NCS-100918JJ01",[[-1,98,"<!--more-->"]],[98,109],[98,98]]],[1548839396883,["P1211678@NCS-100918JJ01",[[-1,115,"\t"]],[116,116],[115,115]]],[1548839397749,["P1211678@NCS-100918JJ01",[[1,115,"js"]],[115,115],[117,117]]],[1548839400839,["P1211678@NCS-100918JJ01",[[1,181,"js"]],[181,181],[183,183]]],[1548839404457,["P1211678@NCS-100918JJ01",[[1,281,"js"]],[281,281],[283,283]]],[1548839409929,["P1211678@NCS-100918JJ01",[[-1,556,"#"]],[557,557],[556,556]]],[1548839412687,["P1211678@NCS-100918JJ01",[[1,630,"js"]],[630,630],[632,632]]],[1548839415288,["P1211678@NCS-100918JJ01",[[1,754,"js"]],[754,754],[756,756]]]],null,"P1211678@NCS-100918JJ01"]]}