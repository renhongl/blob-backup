{"meta":{"version":1,"warehouse":"2.2.0"},"models":{"Asset":[{"_id":"source/mr/README.md","path":"mr/README.md","modified":0,"renderable":0},{"_id":"source/game/index.html","path":"game/index.html","modified":0,"renderable":0},{"_id":"source/mr/LICENSE","path":"mr/LICENSE","modified":0,"renderable":0},{"_id":"source/mr/index.css","path":"mr/index.css","modified":0,"renderable":0},{"_id":"source/mr/index.html","path":"mr/index.html","modified":0,"renderable":0},{"_id":"source/images/aiting2.png","path":"images/aiting2.png","modified":0,"renderable":0},{"_id":"source/images/aiting7.png","path":"images/aiting7.png","modified":0,"renderable":0},{"_id":"source/images/buyTicket.jpg","path":"images/buyTicket.jpg","modified":0,"renderable":0},{"_id":"source/images/chatRoom1.png","path":"images/chatRoom1.png","modified":0,"renderable":0},{"_id":"source/images/chatHome.png","path":"images/chatHome.png","modified":0,"renderable":0},{"_id":"source/images/chatSearchAndSettings.png","path":"images/chatSearchAndSettings.png","modified":0,"renderable":0},{"_id":"source/images/game1.png","path":"images/game1.png","modified":0,"renderable":0},{"_id":"source/images/game4.png","path":"images/game4.png","modified":0,"renderable":0},{"_id":"source/images/game3.png","path":"images/game3.png","modified":0,"renderable":0},{"_id":"source/images/musicPlayer1.png","path":"images/musicPlayer1.png","modified":0,"renderable":0},{"_id":"source/images/musicPlayer2.png","path":"images/musicPlayer2.png","modified":0,"renderable":0},{"_id":"source/images/panda.jpg","path":"images/panda.jpg","modified":0,"renderable":0},{"_id":"source/images/pay.jpg","path":"images/pay.jpg","modified":0,"renderable":0},{"_id":"source/images/pc1.png","path":"images/pc1.png","modified":0,"renderable":0},{"_id":"source/images/resetPwd.png","path":"images/resetPwd.png","modified":0,"renderable":0},{"_id":"source/images/signIn.png","path":"images/signIn.png","modified":0,"renderable":0},{"_id":"source/images/signUp.png","path":"images/signUp.png","modified":0,"renderable":0},{"_id":"source/thebest/a6137456ed160d7606981aa57c559898.png","path":"thebest/a6137456ed160d7606981aa57c559898.png","modified":0,"renderable":0},{"_id":"source/thebest/2273e3d8ad9264b7daa5bdbf8e6b47f8.png","path":"thebest/2273e3d8ad9264b7daa5bdbf8e6b47f8.png","modified":0,"renderable":0},{"_id":"source/thebest/4f0283c6ce28e888000e978e537a6a56.png","path":"thebest/4f0283c6ce28e888000e978e537a6a56.png","modified":0,"renderable":0},{"_id":"source/thebest/common.bundle.js","path":"thebest/common.bundle.js","modified":0,"renderable":0},{"_id":"source/thebest/common.bundle.js.map","path":"thebest/common.bundle.js.map","modified":0,"renderable":0},{"_id":"source/thebest/index.html","path":"thebest/index.html","modified":0,"renderable":0},{"_id":"source/images/addToGroup.png","path":"images/addToGroup.png","modified":0,"renderable":0},{"_id":"source/images/aiting4.png","path":"images/aiting4.png","modified":0,"renderable":0},{"_id":"source/images/chatRoom3.png","path":"images/chatRoom3.png","modified":0,"renderable":0},{"_id":"source/images/download.png","path":"images/download.png","modified":0,"renderable":0},{"_id":"source/images/docs.png","path":"images/docs.png","modified":0,"renderable":0},{"_id":"source/images/game2.png","path":"images/game2.png","modified":0,"renderable":0},{"_id":"source/images/pc2.png","path":"images/pc2.png","modified":0,"renderable":0},{"_id":"themes/cyanstyle2/source/fancybox/blank.gif","path":"fancybox/blank.gif","modified":0,"renderable":1},{"_id":"themes/cyanstyle2/source/fancybox/fancybox_loading.gif","path":"fancybox/fancybox_loading.gif","modified":0,"renderable":1},{"_id":"themes/cyanstyle2/source/fancybox/fancybox_loading@2x.gif","path":"fancybox/fancybox_loading@2x.gif","modified":0,"renderable":1},{"_id":"themes/cyanstyle2/source/fancybox/fancybox_sprite.png","path":"fancybox/fancybox_sprite.png","modified":0,"renderable":1},{"_id":"themes/cyanstyle2/source/fancybox/fancybox_overlay.png","path":"fancybox/fancybox_overlay.png","modified":0,"renderable":1},{"_id":"themes/cyanstyle2/source/fancybox/fancybox_sprite@2x.png","path":"fancybox/fancybox_sprite@2x.png","modified":0,"renderable":1},{"_id":"themes/cyanstyle2/source/css/style.css","path":"css/style.css","modified":1,"renderable":1},{"_id":"themes/cyanstyle2/source/js/navigation.js","path":"js/navigation.js","modified":0,"renderable":1},{"_id":"themes/cyanstyle2/source/fancybox/jquery.fancybox.css","path":"fancybox/jquery.fancybox.css","modified":0,"renderable":1},{"_id":"themes/cyanstyle2/source/fancybox/jquery.fancybox.js","path":"fancybox/jquery.fancybox.js","modified":0,"renderable":1},{"_id":"themes/cyanstyle2/source/fancybox/jquery.fancybox.pack.js","path":"fancybox/jquery.fancybox.pack.js","modified":0,"renderable":1},{"_id":"source/game/collect-star/index.html","path":"game/collect-star/index.html","modified":0,"renderable":0},{"_id":"themes/cyanstyle2/source/js/script.js","path":"js/script.js","modified":0,"renderable":1},{"_id":"source/game/chess/index.html","path":"game/chess/index.html","modified":0,"renderable":0},{"_id":"source/game/plane/index.html","path":"game/plane/index.html","modified":0,"renderable":0},{"_id":"source/game/collect-star/main.js","path":"game/collect-star/main.js","modified":0,"renderable":0},{"_id":"source/game/plane/main.js","path":"game/plane/main.js","modified":0,"renderable":0},{"_id":"source/game/player/index.html","path":"game/player/index.html","modified":0,"renderable":0},{"_id":"source/mr/example/button.html","path":"mr/example/button.html","modified":0,"renderable":0},{"_id":"source/game/snake/index.html","path":"game/snake/index.html","modified":0,"renderable":0},{"_id":"source/mr/image/mushroom.png","path":"mr/image/mushroom.png","modified":0,"renderable":0},{"_id":"source/mr/example/carousel.html","path":"mr/example/carousel.html","modified":0,"renderable":0},{"_id":"source/mr/example/global.css","path":"mr/example/global.css","modified":0,"renderable":0},{"_id":"source/mr/example/datepicker.html","path":"mr/example/datepicker.html","modified":0,"renderable":0},{"_id":"source/mr/example/index.html","path":"mr/example/index.html","modified":0,"renderable":0},{"_id":"source/mr/example/menu.html","path":"mr/example/menu.html","modified":0,"renderable":0},{"_id":"source/mr/example/loading.html","path":"mr/example/loading.html","modified":0,"renderable":0},{"_id":"source/mr/example/draggable.html","path":"mr/example/draggable.html","modified":0,"renderable":0},{"_id":"source/mr/example/message.html","path":"mr/example/message.html","modified":0,"renderable":0},{"_id":"source/mr/example/tab.html","path":"mr/example/tab.html","modified":0,"renderable":0},{"_id":"source/mr/example/template.html","path":"mr/example/template.html","modified":0,"renderable":0},{"_id":"source/images/aiting3.png","path":"images/aiting3.png","modified":0,"renderable":0},{"_id":"source/mr/src/mr.css","path":"mr/src/mr.css","modified":0,"renderable":0},{"_id":"source/images/aiting5.png","path":"images/aiting5.png","modified":0,"renderable":0},{"_id":"source/images/applicationPlatform.png","path":"images/applicationPlatform.png","modified":0,"renderable":0},{"_id":"source/images/chatRoom2.png","path":"images/chatRoom2.png","modified":0,"renderable":0},{"_id":"source/images/homeAndRoom.png","path":"images/homeAndRoom.png","modified":0,"renderable":0},{"_id":"source/mr/example/tool.js","path":"mr/example/tool.js","modified":0,"renderable":0},{"_id":"source/mr/src/mr.js","path":"mr/src/mr.js","modified":0,"renderable":0},{"_id":"themes/cyanstyle2/source/js/jquery-2.0.3.min.js","path":"js/jquery-2.0.3.min.js","modified":0,"renderable":1},{"_id":"source/mr/example/icon.html","path":"mr/example/icon.html","modified":0,"renderable":0},{"_id":"themes/cyanstyle2/source/css/images/favicon.ico","path":"css/images/favicon.ico","modified":0,"renderable":1},{"_id":"themes/cyanstyle2/source/fancybox/helpers/fancybox_buttons.png","path":"fancybox/helpers/fancybox_buttons.png","modified":0,"renderable":1},{"_id":"themes/cyanstyle2/source/css/images/qr_alipay.png","path":"css/images/qr_alipay.png","modified":0,"renderable":1},{"_id":"themes/cyanstyle2/source/fancybox/helpers/jquery.fancybox-thumbs.css","path":"fancybox/helpers/jquery.fancybox-thumbs.css","modified":0,"renderable":1},{"_id":"themes/cyanstyle2/source/fancybox/helpers/jquery.fancybox-buttons.css","path":"fancybox/helpers/jquery.fancybox-buttons.css","modified":0,"renderable":1},{"_id":"themes/cyanstyle2/source/fancybox/helpers/jquery.fancybox-buttons.js","path":"fancybox/helpers/jquery.fancybox-buttons.js","modified":0,"renderable":1},{"_id":"source/game/collect-star/assets/baddie.png","path":"game/collect-star/assets/baddie.png","modified":0,"renderable":0},{"_id":"themes/cyanstyle2/source/fancybox/helpers/jquery.fancybox-media.js","path":"fancybox/helpers/jquery.fancybox-media.js","modified":0,"renderable":1},{"_id":"source/game/collect-star/assets/diamond.png","path":"game/collect-star/assets/diamond.png","modified":0,"renderable":0},{"_id":"source/game/collect-star/assets/dude.png","path":"game/collect-star/assets/dude.png","modified":0,"renderable":0},{"_id":"source/game/collect-star/assets/firstaid.png","path":"game/collect-star/assets/firstaid.png","modified":0,"renderable":0},{"_id":"source/game/collect-star/assets/platform.png","path":"game/collect-star/assets/platform.png","modified":0,"renderable":0},{"_id":"themes/cyanstyle2/source/fancybox/helpers/jquery.fancybox-thumbs.js","path":"fancybox/helpers/jquery.fancybox-thumbs.js","modified":0,"renderable":1},{"_id":"source/game/collect-star/assets/star.png","path":"game/collect-star/assets/star.png","modified":0,"renderable":0},{"_id":"source/game/collect-star/assets/sky.png","path":"game/collect-star/assets/sky.png","modified":0,"renderable":0},{"_id":"source/game/plane/assets/award.png","path":"game/plane/assets/award.png","modified":0,"renderable":0},{"_id":"source/game/plane/assets/ao.mp3","path":"game/plane/assets/ao.mp3","modified":0,"renderable":0},{"_id":"source/game/plane/assets/bg.jpg","path":"game/plane/assets/bg.jpg","modified":0,"renderable":0},{"_id":"source/game/plane/assets/close.png","path":"game/plane/assets/close.png","modified":0,"renderable":0},{"_id":"source/game/plane/assets/bullet.png","path":"game/plane/assets/bullet.png","modified":0,"renderable":0},{"_id":"source/game/plane/assets/copyright.png","path":"game/plane/assets/copyright.png","modified":0,"renderable":0},{"_id":"source/game/plane/assets/crash2.mp3","path":"game/plane/assets/crash2.mp3","modified":0,"renderable":0},{"_id":"source/game/plane/assets/crash1.mp3","path":"game/plane/assets/crash1.mp3","modified":0,"renderable":0},{"_id":"source/game/plane/assets/enemy1.png","path":"game/plane/assets/enemy1.png","modified":0,"renderable":0},{"_id":"source/game/plane/assets/enemy2.png","path":"game/plane/assets/enemy2.png","modified":0,"renderable":0},{"_id":"source/game/plane/assets/crash3.mp3","path":"game/plane/assets/crash3.mp3","modified":0,"renderable":0},{"_id":"source/game/plane/assets/deng.mp3","path":"game/plane/assets/deng.mp3","modified":0,"renderable":0},{"_id":"source/game/plane/assets/explode2.png","path":"game/plane/assets/explode2.png","modified":0,"renderable":0},{"_id":"source/game/plane/assets/enemy3.png","path":"game/plane/assets/enemy3.png","modified":0,"renderable":0},{"_id":"source/game/plane/assets/explode3.png","path":"game/plane/assets/explode3.png","modified":0,"renderable":0},{"_id":"source/game/plane/assets/explode1.png","path":"game/plane/assets/explode1.png","modified":0,"renderable":0},{"_id":"source/game/plane/assets/mybullet.png","path":"game/plane/assets/mybullet.png","modified":0,"renderable":0},{"_id":"source/game/plane/assets/logo.jpg","path":"game/plane/assets/logo.jpg","modified":0,"renderable":0},{"_id":"source/game/plane/assets/fashe.mp3","path":"game/plane/assets/fashe.mp3","modified":0,"renderable":0},{"_id":"source/game/plane/assets/myexplode.png","path":"game/plane/assets/myexplode.png","modified":0,"renderable":0},{"_id":"source/game/plane/assets/preloader.gif","path":"game/plane/assets/preloader.gif","modified":0,"renderable":0},{"_id":"source/game/plane/assets/myplane.png","path":"game/plane/assets/myplane.png","modified":0,"renderable":0},{"_id":"source/game/plane/assets/pi.mp3","path":"game/plane/assets/pi.mp3","modified":0,"renderable":0},{"_id":"source/game/plane/assets/replaybutton.png","path":"game/plane/assets/replaybutton.png","modified":0,"renderable":0},{"_id":"source/game/plane/assets/sharebutton.png","path":"game/plane/assets/sharebutton.png","modified":0,"renderable":0},{"_id":"source/game/plane/assets/share.png","path":"game/plane/assets/share.png","modified":0,"renderable":0},{"_id":"source/game/plane/assets/startbutton.png","path":"game/plane/assets/startbutton.png","modified":0,"renderable":0},{"_id":"source/mr/example/config/carousel.json","path":"mr/example/config/carousel.json","modified":0,"renderable":0},{"_id":"source/mr/example/config/button.json","path":"mr/example/config/button.json","modified":0,"renderable":0},{"_id":"source/mr/example/config/draggable.json","path":"mr/example/config/draggable.json","modified":0,"renderable":0},{"_id":"source/mr/example/config/tab.json","path":"mr/example/config/tab.json","modified":0,"renderable":0},{"_id":"source/mr/example/config/loading.json","path":"mr/example/config/loading.json","modified":0,"renderable":0},{"_id":"source/mr/example/config/menu.json","path":"mr/example/config/menu.json","modified":0,"renderable":0},{"_id":"source/mr/example/config/message.json","path":"mr/example/config/message.json","modified":0,"renderable":0},{"_id":"source/images/aiting1.png","path":"images/aiting1.png","modified":0,"renderable":0},{"_id":"source/images/aiting6.png","path":"images/aiting6.png","modified":0,"renderable":0},{"_id":"source/images/faceAndEmoj.png","path":"images/faceAndEmoj.png","modified":0,"renderable":0},{"_id":"source/images/loveFish.png","path":"images/loveFish.png","modified":0,"renderable":0},{"_id":"source/thebest/assets/image/01.jpg","path":"thebest/assets/image/01.jpg","modified":0,"renderable":0},{"_id":"source/mr/src/component/tool.js","path":"mr/src/component/tool.js","modified":0,"renderable":0},{"_id":"source/thebest/assets/image/03.jpg","path":"thebest/assets/image/03.jpg","modified":0,"renderable":0},{"_id":"source/thebest/assets/image/1.jpg","path":"thebest/assets/image/1.jpg","modified":0,"renderable":0},{"_id":"source/thebest/assets/image/04.jpg","path":"thebest/assets/image/04.jpg","modified":0,"renderable":0},{"_id":"source/thebest/assets/image/06.jpg","path":"thebest/assets/image/06.jpg","modified":0,"renderable":0},{"_id":"source/thebest/assets/image/8.jpg","path":"thebest/assets/image/8.jpg","modified":0,"renderable":0},{"_id":"themes/cyanstyle2/source/css/images/body.jpg","path":"css/images/body.jpg","modified":0,"renderable":1},{"_id":"source/mr/src/component/draggable/style.css","path":"mr/src/component/draggable/style.css","modified":0,"renderable":0},{"_id":"source/thebest/assets/image/02.jpg","path":"thebest/assets/image/02.jpg","modified":0,"renderable":0},{"_id":"source/thebest/assets/image/05.jpg","path":"thebest/assets/image/05.jpg","modified":0,"renderable":0},{"_id":"source/thebest/assets/image/2.jpg","path":"thebest/assets/image/2.jpg","modified":0,"renderable":0},{"_id":"source/thebest/assets/image/5.jpg","path":"thebest/assets/image/5.jpg","modified":0,"renderable":0},{"_id":"themes/cyanstyle2/source/css/images/body1.jpg","path":"css/images/body1.jpg","modified":0,"renderable":1},{"_id":"source/mr/src/component/button/index.js","path":"mr/src/component/button/index.js","modified":0,"renderable":0},{"_id":"source/mr/src/component/button/style.css","path":"mr/src/component/button/style.css","modified":0,"renderable":0},{"_id":"source/mr/src/component/button/Button.js","path":"mr/src/component/button/Button.js","modified":0,"renderable":0},{"_id":"source/mr/src/component/draggable/index.js","path":"mr/src/component/draggable/index.js","modified":0,"renderable":0},{"_id":"source/mr/src/component/draggable/Draggable.js","path":"mr/src/component/draggable/Draggable.js","modified":0,"renderable":0},{"_id":"source/mr/src/component/datepicker/index.js","path":"mr/src/component/datepicker/index.js","modified":0,"renderable":0},{"_id":"source/mr/src/component/datepicker/style.css","path":"mr/src/component/datepicker/style.css","modified":0,"renderable":0},{"_id":"source/mr/src/component/carousel/Carousel.js","path":"mr/src/component/carousel/Carousel.js","modified":0,"renderable":0},{"_id":"source/mr/src/component/carousel/index.js","path":"mr/src/component/carousel/index.js","modified":0,"renderable":0},{"_id":"source/mr/src/component/datepicker/Datepicker.js","path":"mr/src/component/datepicker/Datepicker.js","modified":0,"renderable":0},{"_id":"source/mr/src/component/loading/index.js","path":"mr/src/component/loading/index.js","modified":0,"renderable":0},{"_id":"source/mr/src/component/carousel/style.css","path":"mr/src/component/carousel/style.css","modified":0,"renderable":0},{"_id":"source/mr/src/component/loading/Loading.js","path":"mr/src/component/loading/Loading.js","modified":0,"renderable":0},{"_id":"source/mr/src/component/loading/style.css","path":"mr/src/component/loading/style.css","modified":0,"renderable":0},{"_id":"source/mr/src/component/menu/index.js","path":"mr/src/component/menu/index.js","modified":0,"renderable":0},{"_id":"source/mr/src/component/menu/style.css","path":"mr/src/component/menu/style.css","modified":0,"renderable":0},{"_id":"source/mr/src/component/menu/Menu.js","path":"mr/src/component/menu/Menu.js","modified":0,"renderable":0},{"_id":"source/mr/src/component/message/Message.js","path":"mr/src/component/message/Message.js","modified":0,"renderable":0},{"_id":"source/mr/src/component/message/style.css","path":"mr/src/component/message/style.css","modified":0,"renderable":0},{"_id":"source/mr/src/component/message/index.js","path":"mr/src/component/message/index.js","modified":0,"renderable":0},{"_id":"source/mr/src/component/tab/index.js","path":"mr/src/component/tab/index.js","modified":0,"renderable":0},{"_id":"source/thebest/assets/image/3.jpg","path":"thebest/assets/image/3.jpg","modified":0,"renderable":0},{"_id":"source/thebest/assets/image/7.png","path":"thebest/assets/image/7.png","modified":0,"renderable":0},{"_id":"source/mr/src/component/tab/Tab.js","path":"mr/src/component/tab/Tab.js","modified":0,"renderable":0},{"_id":"themes/cyanstyle2/source/css/images/body2.jpg","path":"css/images/body2.jpg","modified":0,"renderable":1},{"_id":"source/mr/src/component/tab/style.css","path":"mr/src/component/tab/style.css","modified":0,"renderable":0},{"_id":"source/game/plane/assets/normalback.mp3","path":"game/plane/assets/normalback.mp3","modified":0,"renderable":0},{"_id":"source/game/plane/assets/playback.mp3","path":"game/plane/assets/playback.mp3","modified":0,"renderable":0},{"_id":"source/thebest/assets/image/4.jpg","path":"thebest/assets/image/4.jpg","modified":0,"renderable":0},{"_id":"source/thebest/assets/lib/web-fonts-with-css/css/fa-brands.css","path":"thebest/assets/lib/web-fonts-with-css/css/fa-brands.css","modified":0,"renderable":0},{"_id":"source/thebest/assets/lib/web-fonts-with-css/css/fa-brands.min.css","path":"thebest/assets/lib/web-fonts-with-css/css/fa-brands.min.css","modified":0,"renderable":0},{"_id":"source/thebest/assets/lib/web-fonts-with-css/css/fa-solid.css","path":"thebest/assets/lib/web-fonts-with-css/css/fa-solid.css","modified":0,"renderable":0},{"_id":"source/thebest/assets/lib/web-fonts-with-css/css/fa-regular.min.css","path":"thebest/assets/lib/web-fonts-with-css/css/fa-regular.min.css","modified":0,"renderable":0},{"_id":"source/thebest/assets/lib/web-fonts-with-css/css/fa-solid.min.css","path":"thebest/assets/lib/web-fonts-with-css/css/fa-solid.min.css","modified":0,"renderable":0},{"_id":"source/thebest/assets/lib/web-fonts-with-css/css/fa-regular.css","path":"thebest/assets/lib/web-fonts-with-css/css/fa-regular.css","modified":0,"renderable":0},{"_id":"source/thebest/assets/lib/web-fonts-with-css/css/fontawesome.css","path":"thebest/assets/lib/web-fonts-with-css/css/fontawesome.css","modified":0,"renderable":0},{"_id":"source/thebest/assets/lib/web-fonts-with-css/css/fontawesome.min.css","path":"thebest/assets/lib/web-fonts-with-css/css/fontawesome.min.css","modified":0,"renderable":0},{"_id":"source/thebest/assets/lib/web-fonts-with-css/css/fontawesome-all.min.css","path":"thebest/assets/lib/web-fonts-with-css/css/fontawesome-all.min.css","modified":0,"renderable":0},{"_id":"source/thebest/assets/lib/web-fonts-with-css/css/fontawesome-all.css","path":"thebest/assets/lib/web-fonts-with-css/css/fontawesome-all.css","modified":0,"renderable":0},{"_id":"source/thebest/assets/lib/web-fonts-with-css/less/fa-brands.less","path":"thebest/assets/lib/web-fonts-with-css/less/fa-brands.less","modified":0,"renderable":0},{"_id":"source/thebest/assets/lib/web-fonts-with-css/less/fa-regular.less","path":"thebest/assets/lib/web-fonts-with-css/less/fa-regular.less","modified":0,"renderable":0},{"_id":"source/thebest/assets/lib/web-fonts-with-css/less/fa-solid.less","path":"thebest/assets/lib/web-fonts-with-css/less/fa-solid.less","modified":0,"renderable":0},{"_id":"source/thebest/assets/lib/web-fonts-with-css/less/fontawesome.less","path":"thebest/assets/lib/web-fonts-with-css/less/fontawesome.less","modified":0,"renderable":0},{"_id":"source/thebest/assets/lib/web-fonts-with-css/scss/fa-brands.scss","path":"thebest/assets/lib/web-fonts-with-css/scss/fa-brands.scss","modified":0,"renderable":0},{"_id":"source/thebest/assets/lib/web-fonts-with-css/scss/fa-regular.scss","path":"thebest/assets/lib/web-fonts-with-css/scss/fa-regular.scss","modified":0,"renderable":0},{"_id":"source/thebest/assets/lib/web-fonts-with-css/scss/fontawesome.scss","path":"thebest/assets/lib/web-fonts-with-css/scss/fontawesome.scss","modified":0,"renderable":0},{"_id":"source/thebest/assets/lib/web-fonts-with-css/scss/fa-solid.scss","path":"thebest/assets/lib/web-fonts-with-css/scss/fa-solid.scss","modified":0,"renderable":0},{"_id":"source/thebest/assets/lib/web-fonts-with-css/webfonts/fa-brands-400.woff","path":"thebest/assets/lib/web-fonts-with-css/webfonts/fa-brands-400.woff","modified":0,"renderable":0},{"_id":"source/thebest/assets/lib/web-fonts-with-css/webfonts/fa-regular-400.eot","path":"thebest/assets/lib/web-fonts-with-css/webfonts/fa-regular-400.eot","modified":0,"renderable":0},{"_id":"source/thebest/assets/lib/web-fonts-with-css/webfonts/fa-brands-400.woff2","path":"thebest/assets/lib/web-fonts-with-css/webfonts/fa-brands-400.woff2","modified":0,"renderable":0},{"_id":"source/thebest/assets/lib/web-fonts-with-css/webfonts/fa-regular-400.ttf","path":"thebest/assets/lib/web-fonts-with-css/webfonts/fa-regular-400.ttf","modified":0,"renderable":0},{"_id":"source/thebest/assets/lib/web-fonts-with-css/webfonts/fa-regular-400.woff","path":"thebest/assets/lib/web-fonts-with-css/webfonts/fa-regular-400.woff","modified":0,"renderable":0},{"_id":"source/thebest/assets/lib/web-fonts-with-css/webfonts/fa-regular-400.woff2","path":"thebest/assets/lib/web-fonts-with-css/webfonts/fa-regular-400.woff2","modified":0,"renderable":0},{"_id":"source/thebest/assets/lib/web-fonts-with-css/webfonts/fa-solid-900.woff","path":"thebest/assets/lib/web-fonts-with-css/webfonts/fa-solid-900.woff","modified":0,"renderable":0},{"_id":"source/thebest/assets/lib/web-fonts-with-css/webfonts/fa-solid-900.woff2","path":"thebest/assets/lib/web-fonts-with-css/webfonts/fa-solid-900.woff2","modified":0,"renderable":0},{"_id":"source/thebest/assets/lib/web-fonts-with-css/webfonts/fa-brands-400.eot","path":"thebest/assets/lib/web-fonts-with-css/webfonts/fa-brands-400.eot","modified":0,"renderable":0},{"_id":"source/thebest/assets/lib/web-fonts-with-css/webfonts/fa-brands-400.ttf","path":"thebest/assets/lib/web-fonts-with-css/webfonts/fa-brands-400.ttf","modified":0,"renderable":0},{"_id":"source/thebest/assets/lib/web-fonts-with-css/webfonts/fa-solid-900.eot","path":"thebest/assets/lib/web-fonts-with-css/webfonts/fa-solid-900.eot","modified":0,"renderable":0},{"_id":"source/thebest/assets/lib/web-fonts-with-css/webfonts/fa-solid-900.ttf","path":"thebest/assets/lib/web-fonts-with-css/webfonts/fa-solid-900.ttf","modified":0,"renderable":0},{"_id":"source/thebest/assets/lib/web-fonts-with-css/webfonts/fa-regular-400.svg","path":"thebest/assets/lib/web-fonts-with-css/webfonts/fa-regular-400.svg","modified":0,"renderable":0},{"_id":"source/mr/src/component/icon/style.css","path":"mr/src/component/icon/style.css","modified":0,"renderable":0},{"_id":"source/thebest/assets/image/6.jpg","path":"thebest/assets/image/6.jpg","modified":0,"renderable":0},{"_id":"source/thebest/assets/image/10.jpg","path":"thebest/assets/image/10.jpg","modified":0,"renderable":0},{"_id":"source/game/plane/phaser.min.js","path":"game/plane/phaser.min.js","modified":0,"renderable":0},{"_id":"source/game/collect-star/phaser.min.js","path":"game/collect-star/phaser.min.js","modified":0,"renderable":0},{"_id":"source/thebest/assets/lib/three/three.js","path":"thebest/assets/lib/three/three.js","modified":0,"renderable":0},{"_id":"source/thebest/assets/lib/web-fonts-with-css/webfonts/fa-brands-400.svg","path":"thebest/assets/lib/web-fonts-with-css/webfonts/fa-brands-400.svg","modified":0,"renderable":0},{"_id":"source/thebest/assets/lib/web-fonts-with-css/webfonts/fa-solid-900.svg","path":"thebest/assets/lib/web-fonts-with-css/webfonts/fa-solid-900.svg","modified":0,"renderable":0},{"_id":"source/thebest/assets/image/9.jpg","path":"thebest/assets/image/9.jpg","modified":0,"renderable":0},{"_id":"source/thebest/assets/music/01.mp3","path":"thebest/assets/music/01.mp3","modified":0,"renderable":0},{"_id":"source/thebest/assets/music/04.mp3","path":"thebest/assets/music/04.mp3","modified":0,"renderable":0},{"_id":"source/thebest/assets/music/03.mp3","path":"thebest/assets/music/03.mp3","modified":0,"renderable":0},{"_id":"source/thebest/assets/music/06.mp3","path":"thebest/assets/music/06.mp3","modified":0,"renderable":0},{"_id":"source/thebest/assets/music/02.mp3","path":"thebest/assets/music/02.mp3","modified":0,"renderable":0},{"_id":"source/thebest/assets/music/05.mp3","path":"thebest/assets/music/05.mp3","modified":0,"renderable":0},{"_id":"source/game/player/bundle.js","path":"game/player/bundle.js","modified":0,"renderable":0},{"_id":"source/game/player/bundle.js.map","path":"game/player/bundle.js.map","modified":0,"renderable":0},{"_id":"source/thebest/app.bundle.js","path":"thebest/app.bundle.js","modified":0,"renderable":0},{"_id":"source/thebest/app.bundle.js.map","path":"thebest/app.bundle.js.map","modified":0,"renderable":0},{"_id":"themes/cyanstyle2/source/css/images/e9573f1eb700cf6bf23acd560f4edc9d.jpg","path":"css/images/e9573f1eb700cf6bf23acd560f4edc9d.jpg","modified":0,"renderable":1},{"_id":"themes/cyanstyle2/source/css/images/body3.jpg","path":"css/images/body3.jpg","modified":0,"renderable":1}],"Cache":[{"_id":"themes/cyanstyle2/_config.yml","hash":"67fc3ac7cceb5b0b547f1de79d08cbab3e3996ac","modified":1545369018915},{"_id":"themes/cyanstyle2/LICENSE","hash":"450b2b897f0a46934264ca6467ee4ee9145e6095","modified":1545368361862},{"_id":"themes/cyanstyle2/README.md","hash":"368360e0ed5eb943ad4caaf9e6aff8c88833992f","modified":1545368361862},{"_id":"themes/cyanstyle2/package.json","hash":"a41065cdd4aa66a70c058e99d250c8b50a9b0787","modified":1545368361971},{"_id":"themes/cyanstyle2/Gruntfile.js","hash":"412e30530784993c8997aa8b1319c669b83b91c2","modified":1545368361862},{"_id":"themes/cyanstyle2/layout/archive.ejs","hash":"2703b07cc8ac64ae46d1d263f4653013c7e1666b","modified":1545368361956},{"_id":"themes/cyanstyle2/layout/category.ejs","hash":"765426a9c8236828dc34759e604cc2c52292835a","modified":1545368361956},{"_id":"themes/cyanstyle2/layout/index.ejs","hash":"aa1b4456907bdb43e629be3931547e2d29ac58c8","modified":1545368361956},{"_id":"themes/cyanstyle2/layout/layout.ejs","hash":"23093cee8cbdb486327ae5b17f7747edae291ddf","modified":1545368361956},{"_id":"themes/cyanstyle2/layout/post.ejs","hash":"7d80e4e36b14d30a7cd2ac1f61376d9ebf264e8b","modified":1545368361956},{"_id":"themes/cyanstyle2/layout/page.ejs","hash":"7d80e4e36b14d30a7cd2ac1f61376d9ebf264e8b","modified":1545368361956},{"_id":"themes/cyanstyle2/layout/tag.ejs","hash":"eaa7b4ccb2ca7befb90142e4e68995fb1ea68b2e","modified":1545368361971},{"_id":"themes/cyanstyle2/scripts/fancybox.js","hash":"4c130fc242cf9b59b5df6ca5eae3b14302311e8c","modified":1545368362018},{"_id":"source/_posts/Git使用SSH提交代码.md","hash":"26ce1b6d0e57db15964eff9c5fdafe66cd5e8baa","modified":1545368359216},{"_id":"source/_posts/Iterator和for...of.md","hash":"cb16e8b9476adb0d68efe6f633b2ba9961de932f","modified":1545368359232},{"_id":"source/_posts/Class.md","hash":"43c024b72a0b22206d214c01f4c73c24d70a5925","modified":1545368359216},{"_id":"source/_posts/MongoDB安装.md","hash":"74ef0c3946adfd99651a1c60d1f7994d0d083882","modified":1545368359232},{"_id":"source/_posts/Javascript设计模式简述.md","hash":"ac125bc88a05f34dd0a984b9cd1e8a3c26d14f78","modified":1545368359232},{"_id":"source/_posts/Promise.md","hash":"7e7098d97d91113e09dda243b19285d237056a66","modified":1545368359232},{"_id":"source/_posts/Javascript标准参考教程重点.md","hash":"f961a983ff64d754b3b409afaa018d318879a463","modified":1545368359232},{"_id":"source/_posts/let和const.md","hash":"ed5d61018c6cfff144435c81378ca80fa196e718","modified":1545368359247},{"_id":"source/_posts/NodeJS刷票程序.md","hash":"d1e49ae140c9f86eeeb4a0a55e89f3856382fb3b","modified":1545368359232},{"_id":"source/_posts/实用工具推荐.md","hash":"44b3e77c3629f41d0963601d034a9c729ca0d85b","modified":1545368359435},{"_id":"source/_posts/rest参数和扩展运算符.md","hash":"1acc74e4f2ae3d4267eee0586cf785c9e0bea592","modified":1545368359435},{"_id":"source/_posts/webpack全面理解.md","hash":"c90e7b580a0f39a34ac875e2dad5d02fa907bbed","modified":1545368359435},{"_id":"source/_posts/爱听播放器.md","hash":"59fdd3487bdfeebb61ea690caeb1b1c66c7c581d","modified":1545368359450},{"_id":"source/_posts/应用平台桌面版.md","hash":"41391c5787b68c55230841cd4ae47de4dd294c44","modified":1545368359450},{"_id":"source/_posts/应用平台WEB.md","hash":"c7c7961e9cf9e4d8a4c92fb3bb66fef3e801740e","modified":1545368359435},{"_id":"source/_posts/对象的扩展.md","hash":"d7331fc4cf79d4c83e0a306cc30fbeebb05b0092","modified":1545368359435},{"_id":"source/_posts/电脑远程控制工具.md","hash":"ca2c9992fe20bfe65529d71437aafa0f7880e949","modified":1545368359450},{"_id":"source/mr/README.md","hash":"0cfb9e9d6a303e52544e3cf4819760853b39969e","modified":1545368359560},{"_id":"source/game/index.html","hash":"bd71ed00131045fd1f1e1f414186d71d7277ac7c","modified":1545368876908},{"_id":"source/mr/.gitignore","hash":"c03dd16a74e7294de750d762e83d77586a29876d","modified":1545368359544},{"_id":"source/mr/LICENSE","hash":"a8e501bfc74e1a58a4ca0b5dded4efc522efb599","modified":1545368359544},{"_id":"source/mr/index.css","hash":"5e5acc84a0772ad86c613573ff92c539ffe0f056","modified":1545368359685},{"_id":"source/mr/index.html","hash":"6422668a57255016166f514264d92b57fa58d637","modified":1545368359685},{"_id":"source/images/aiting2.png","hash":"b2e4f7458a38d9c3ac0454fb6eab945459e7fb9e","modified":1545368359450},{"_id":"source/images/aiting7.png","hash":"2e2518f2ebb89b72c6b00ae51453fc0c858e4535","modified":1545368359482},{"_id":"source/images/buyTicket.jpg","hash":"e9b1baac8dce5c3ed0a8e9c304f0ede1c704c85c","modified":1545368359482},{"_id":"source/images/chatRoom1.png","hash":"35a9b9ccf2b40bfbd1da9304f4430257f22553d9","modified":1545368359482},{"_id":"source/images/chatHome.png","hash":"25ec7a1e3e7789b33c66719c580e54a5bfc33929","modified":1545368359482},{"_id":"source/images/chatSearchAndSettings.png","hash":"8558c748e7a20b164f189dc289a97ff14fc8a06f","modified":1545368359497},{"_id":"source/images/game1.png","hash":"dd94b35d8d2f2e31a8bb904eb53e807a1156bfe1","modified":1545368359513},{"_id":"source/images/game4.png","hash":"1e775ebbfdca251c0d879532323e3411843dfa63","modified":1545368359513},{"_id":"source/images/game3.png","hash":"8bb2d20b1367eb19d51d3cd8a36b2cab4e7cd9db","modified":1545368359513},{"_id":"source/images/musicPlayer1.png","hash":"04992c45d838ec90848b9713225aad0f4a61369a","modified":1545368359529},{"_id":"source/images/musicPlayer2.png","hash":"827395aad188a4d1a0b0a669d07312f255558974","modified":1545368359529},{"_id":"source/images/panda.jpg","hash":"ae75af25063e1158f396bf9ce9c3e95a63ca7760","modified":1545368359529},{"_id":"source/images/pay.jpg","hash":"aca9013aeebf0aac0e9a43d60b5fc9c1f42fa19a","modified":1545368359529},{"_id":"source/images/pc1.png","hash":"2d84a6df8e500b89e30b35757a5a26e9d78ffbeb","modified":1545368359529},{"_id":"source/images/resetPwd.png","hash":"a6aabf10ea4c6026fd375f421346ef8df1547b09","modified":1545368359544},{"_id":"source/images/signIn.png","hash":"49db05fc60d85d17836cebb035695854230d0c55","modified":1545368359544},{"_id":"source/images/signUp.png","hash":"bdd3c6d16ca71f1f6c2190d6305b6a14be5f402d","modified":1545368359544},{"_id":"source/thebest/a6137456ed160d7606981aa57c559898.png","hash":"c9e7528e491a39232ba24a2706c6c739d6fb0f06","modified":1545368361159},{"_id":"source/thebest/2273e3d8ad9264b7daa5bdbf8e6b47f8.png","hash":"60a90bcbb2b42b7ddb4556db94eb7c1084b0e5da","modified":1545368361143},{"_id":"source/thebest/4f0283c6ce28e888000e978e537a6a56.png","hash":"152a162333e46d24f9d89f566312fc0c64011dee","modified":1545368361143},{"_id":"source/thebest/common.bundle.js","hash":"0b6333ac5cf4b25f13d2b3ab9d1923c4f9f218de","modified":1545368361800},{"_id":"source/thebest/common.bundle.js.map","hash":"3f2a29735176956b9aa1bfad73c315ae6351369e","modified":1545368361800},{"_id":"source/thebest/index.html","hash":"87b33c80ccb76f35f0f44c3837d2a5252e2362a2","modified":1545368361815},{"_id":"source/images/addToGroup.png","hash":"e78d011d76b0c5f97df9ea7f08449bc4063ae47f","modified":1545368359450},{"_id":"source/images/aiting4.png","hash":"8c57b66004d13c144dd6899fa8a4dbdbd4351534","modified":1545368359466},{"_id":"source/images/chatRoom3.png","hash":"d4008d148dd6833dbafc892d6fcee48b1bbe9db6","modified":1545368359497},{"_id":"source/images/download.png","hash":"0a874cfbd8152e01751e228c58403086eb95a225","modified":1545368359497},{"_id":"source/images/docs.png","hash":"a71ec28c7ce95d6feb0d885adc26e75ff87c3e65","modified":1545368359497},{"_id":"source/images/game2.png","hash":"b834540535870ce68df0cde024d0d7b21c559592","modified":1545368359513},{"_id":"source/images/pc2.png","hash":"d99f58466e06d20cea1906d1f0ff398c3f7be7d1","modified":1545368359544},{"_id":"themes/cyanstyle2/layout/_partial/archive-post.ejs","hash":"624907b4acdc7e805a7b63bd3defef2afce90be8","modified":1545368361878},{"_id":"themes/cyanstyle2/layout/_partial/archive.ejs","hash":"72dcd7808824e88f1156f190940e119fe87383fa","modified":1545368361878},{"_id":"themes/cyanstyle2/layout/_partial/after-footer.ejs","hash":"7928636da812cb355b921c30165a4b9d074a6f20","modified":1545368361878},{"_id":"themes/cyanstyle2/layout/_partial/footer.ejs","hash":"0feb0dfb0d78dc9e695565320e60eb714eba8894","modified":1545368361893},{"_id":"themes/cyanstyle2/layout/_partial/head.ejs","hash":"d28659a632bbc3f02721f7daad6b1c27cde3254c","modified":1545368361893},{"_id":"themes/cyanstyle2/layout/_partial/article.ejs","hash":"f2480dad683215d0962b8698188a021c0092248c","modified":1545368361878},{"_id":"themes/cyanstyle2/layout/_partial/comment.ejs","hash":"35e4edbaeb6108f33f94d55cf610861035facc26","modified":1545368361893},{"_id":"themes/cyanstyle2/layout/_partial/sidebar.ejs","hash":"93f64ba48f4e3c50b5aaf6025812a76dd849ccaf","modified":1545368361925},{"_id":"themes/cyanstyle2/layout/_partial/header.ejs","hash":"aa0a6e33587f8b9fe056c66e13965b897f37ae47","modified":1545368361909},{"_id":"themes/cyanstyle2/layout/_partial/google-analytics.ejs","hash":"1ccc627d7697e68fddc367c73ac09920457e5b35","modified":1545368361893},{"_id":"themes/cyanstyle2/layout/_widget/ad.ejs","hash":"d41b3e6f9e08852f7db906acc56ed808f07b063b","modified":1545368361925},{"_id":"themes/cyanstyle2/layout/_widget/about.ejs","hash":"cec0f3df204825c99d6509ed3fd90c544a9f46e5","modified":1545368361925},{"_id":"themes/cyanstyle2/layout/_partial/mobile-nav.ejs","hash":"347cf1befd2ea637c24bd5901929d8e36e359e75","modified":1545368361909},{"_id":"themes/cyanstyle2/layout/_widget/archive.ejs","hash":"a28ae3646d876a4ef2d7f3aa5e1e26d3219f6f82","modified":1545368361925},{"_id":"themes/cyanstyle2/layout/_widget/gate.ejs","hash":"5f905f06a8be5823868585bb2c3e97268b2a7f96","modified":1545368361940},{"_id":"themes/cyanstyle2/layout/_widget/category.ejs","hash":"75837a30bea06d0c525cae1e4002bb617e85b075","modified":1545368361940},{"_id":"themes/cyanstyle2/layout/_widget/account.ejs","hash":"8d94c33f5bb5b5575eaff2e53a9a29b0b2cc9fa2","modified":1545368361925},{"_id":"themes/cyanstyle2/layout/_widget/music.ejs","hash":"9b3026d581c3e7e9c057f69394cacb11386c5cf5","modified":1545368361940},{"_id":"themes/cyanstyle2/layout/_widget/link.ejs","hash":"76bc6e7b26392f7301da513fd0fafa6baa38fd5f","modified":1545368361940},{"_id":"themes/cyanstyle2/layout/_widget/search.ejs","hash":"f3c2d30e33ad18abe0f596e5d67cfc4c0632d505","modified":1545368361940},{"_id":"themes/cyanstyle2/layout/_widget/recent_posts.ejs","hash":"45c6f0afc6b78b4efe57f79cd7a7c95a5057a5f8","modified":1545368361940},{"_id":"themes/cyanstyle2/layout/_widget/support.ejs","hash":"20a54d80322cb386277ba8cf8bf2357132a0303e","modified":1545368361940},{"_id":"themes/cyanstyle2/layout/_widget/tag.ejs","hash":"0c4fe2e60c69daa65c8775abff3589eeadf05af6","modified":1545368361940},{"_id":"themes/cyanstyle2/layout/_widget/tagcloud.ejs","hash":"968507f2aa235ff224efe139c83c191e8057b1a5","modified":1545368361956},{"_id":"themes/cyanstyle2/source/fancybox/blank.gif","hash":"2daeaa8b5f19f0bc209d976c02bd6acb51b00b0a","modified":1545368362050},{"_id":"themes/cyanstyle2/source/fancybox/fancybox_loading.gif","hash":"1a755fb2599f3a313cc6cfdb14df043f8c14a99c","modified":1545368362050},{"_id":"themes/cyanstyle2/source/fancybox/fancybox_loading@2x.gif","hash":"273b123496a42ba45c3416adb027cd99745058b0","modified":1545368362050},{"_id":"themes/cyanstyle2/source/fancybox/fancybox_sprite.png","hash":"17df19f97628e77be09c352bf27425faea248251","modified":1545368362050},{"_id":"themes/cyanstyle2/source/fancybox/fancybox_overlay.png","hash":"b3a4ee645ba494f52840ef8412015ba0f465dbe0","modified":1545368362050},{"_id":"themes/cyanstyle2/source/fancybox/fancybox_sprite@2x.png","hash":"30c58913f327e28f466a00f4c1ac8001b560aed8","modified":1545368362050},{"_id":"themes/cyanstyle2/source/css/style.css","hash":"b26267c2f9ee812c8ecdb6238acda8db79494bf6","modified":1545374945722},{"_id":"themes/cyanstyle2/source/js/navigation.js","hash":"85dfd4e98d37de5d30589cd1336ff49967622d5c","modified":1545368362472},{"_id":"themes/cyanstyle2/source/fancybox/jquery.fancybox.css","hash":"2e54d51d21e68ebc4bb870f6e57d3bfb660d4f9c","modified":1545368362253},{"_id":"themes/cyanstyle2/source/fancybox/jquery.fancybox.js","hash":"58193c802f307ec9bc9e586c0e8a13ebef45d2f8","modified":1545368362300},{"_id":"themes/cyanstyle2/source/fancybox/jquery.fancybox.pack.js","hash":"2da892a02778236b64076e5e8802ef0566e1d9e8","modified":1545368362362},{"_id":"source/game/collect-star/index.html","hash":"69e77ab754076cc33a8e41a030adc28727f828c9","modified":1545368360721},{"_id":"themes/cyanstyle2/source/js/script.js","hash":"27d6d6a2375ad71369d1d22cc4e4cbf4cd23716b","modified":1545368362518},{"_id":"source/game/chess/index.html","hash":"0e4034bbf89d38bb28266f33a06c9066df22c7e6","modified":1545368360706},{"_id":"source/game/plane/index.html","hash":"250320bf83e8a08fc79c60381016e3d555faf8a7","modified":1545368360909},{"_id":"source/game/collect-star/main.js","hash":"9b0520d91dabfe10142ce83b98981188e9d0bd3d","modified":1545368360768},{"_id":"source/game/plane/main.js","hash":"e3718f676d0d26b1c9f32daedf3bfe672559394c","modified":1545368360971},{"_id":"source/game/player/index.html","hash":"53c147cc952d6668ccfb9895620db734c0012402","modified":1545368361143},{"_id":"source/mr/example/button.html","hash":"168c2a9710ced659e05b3c1a7b80bcdaabc5c712","modified":1545368359560},{"_id":"source/game/snake/index.html","hash":"8ef88157b5d48fdf93b48ab630e23fe2ad3e2aa3","modified":1545368361143},{"_id":"source/mr/image/mushroom.png","hash":"a754dcee48d1a97f9be29fb7630f3132bd4187f9","modified":1545368359685},{"_id":"source/mr/example/carousel.html","hash":"9a7321459e40b39d120aea763ee1a2d4c595ee46","modified":1545368359560},{"_id":"source/mr/example/global.css","hash":"5e04080a54bc5bc017f29d020f0dbfe930dfb060","modified":1545368359591},{"_id":"source/mr/example/datepicker.html","hash":"ef2729363a87269d5f437428cbddc4f7e97d50db","modified":1545368359591},{"_id":"source/mr/example/index.html","hash":"435ed8431e84bce0b399a296f4c08f7525fd683c","modified":1545368359607},{"_id":"source/mr/example/menu.html","hash":"bd0f4da5ff6912dd8d254dbadfa71268b37a92f4","modified":1545368359607},{"_id":"source/mr/example/loading.html","hash":"e021dacd1a6d654dc16525fb5ff43c141228608f","modified":1545368359607},{"_id":"source/mr/example/draggable.html","hash":"ab6986311a1b4127c3bf6bc1a35e1c1a17b0b5cb","modified":1545368359591},{"_id":"source/mr/example/message.html","hash":"01186059cb20c7e04bb8c84af35deb367fe384b2","modified":1545368359622},{"_id":"source/mr/example/tab.html","hash":"eddca3e18aae7a5b9563ac37b0f537eeb8d1880c","modified":1545368359622},{"_id":"source/mr/example/template.html","hash":"50b130fc2a109b512e7c92a4603f2caefd1f781a","modified":1545368359622},{"_id":"source/images/aiting3.png","hash":"69532e5153893b5b45ee97b35acad946f142bf3b","modified":1545368359466},{"_id":"source/mr/src/mr.css","hash":"f7ab0d21685e933e9bcc1e32ff24e1d135f49e61","modified":1545368360652},{"_id":"source/images/aiting5.png","hash":"269bd3260178829dd3bd9b2004ec3ef7e3d601ca","modified":1545368359466},{"_id":"source/images/applicationPlatform.png","hash":"3ac7bb753d76078c816c939ff8279cf6abfd9477","modified":1545368359482},{"_id":"source/images/chatRoom2.png","hash":"3778f3f4fa6bd736d4ea40b5d44f5fe28e5d4c9b","modified":1545368359482},{"_id":"source/images/homeAndRoom.png","hash":"2d27990fe68125c68d57f581af691589fc13a157","modified":1545368359513},{"_id":"source/mr/example/tool.js","hash":"839d10e2c3976d9a27a807c9d6e64d2a7f574019","modified":1545368359685},{"_id":"source/mr/src/mr.js","hash":"045526fad83a0d05e7fc63bc2fdc60ee2cc58c4b","modified":1545368360701},{"_id":"themes/cyanstyle2/source/js/jquery-2.0.3.min.js","hash":"bbc61d6a6dd66b913c6f237f29475a889fbe3015","modified":1545368362409},{"_id":"source/mr/example/icon.html","hash":"88738de9fcdf62d0eae85c476f30a46442d23e0f","modified":1545368359591},{"_id":"themes/cyanstyle2/layout/_partial/post/nav.ejs","hash":"9f7b89504a9c9e95556354d67997f89212c8d286","modified":1545368361909},{"_id":"themes/cyanstyle2/layout/_partial/post/date.ejs","hash":"7c9569019c487e19ce302b63f331b51a355aa712","modified":1545368361909},{"_id":"themes/cyanstyle2/layout/_partial/post/category.ejs","hash":"cc8b559bdd8998529007383dd43cbadd0d62da76","modified":1545368361909},{"_id":"themes/cyanstyle2/layout/_partial/post/tag.ejs","hash":"6903b6961ed82ecd4211bf39a6d846c0ae99559a","modified":1545368361925},{"_id":"themes/cyanstyle2/layout/_partial/post/gallery.ejs","hash":"b0bf3f5d923c261ca2b5fabab513f1ec2708c8ca","modified":1545368361909},{"_id":"themes/cyanstyle2/layout/_partial/post/title.ejs","hash":"8ab246a55a321deaf1158f198adb4117e80fe788","modified":1545368361925},{"_id":"themes/cyanstyle2/source/css/images/favicon.ico","hash":"8877b9eda116bca623cc87b3c76a48eef3afd258","modified":1545368362034},{"_id":"themes/cyanstyle2/source/fancybox/helpers/fancybox_buttons.png","hash":"e385b139516c6813dcd64b8fc431c364ceafe5f3","modified":1545368362050},{"_id":"themes/cyanstyle2/source/css/images/qr_alipay.png","hash":"aca9013aeebf0aac0e9a43d60b5fc9c1f42fa19a","modified":1545368362034},{"_id":"themes/cyanstyle2/source/fancybox/helpers/jquery.fancybox-thumbs.css","hash":"b88b589f5f1aa1b3d87cc7eef34c281ff749b1ae","modified":1545368362175},{"_id":"themes/cyanstyle2/source/fancybox/helpers/jquery.fancybox-buttons.css","hash":"6394c48092085788a8c0ef72670b0652006231a1","modified":1545368362065},{"_id":"themes/cyanstyle2/source/fancybox/helpers/jquery.fancybox-buttons.js","hash":"4c9c395d705d22af7da06870d18f434e2a2eeaf9","modified":1545368362112},{"_id":"source/game/collect-star/assets/baddie.png","hash":"6c66d5b5f4b3a5a8e5789915f557369bafcddf7f","modified":1545368360706},{"_id":"themes/cyanstyle2/source/fancybox/helpers/jquery.fancybox-media.js","hash":"e14c32cc6823b81b2f758512f13ed8eb9ef2b454","modified":1545368362159},{"_id":"source/game/collect-star/assets/diamond.png","hash":"5ec6d179c59de491476869b89bd65328a6d4f9b1","modified":1545368360706},{"_id":"source/game/collect-star/assets/dude.png","hash":"a5e49e1fb387940238476131533fbbd4dcdb4b69","modified":1545368360706},{"_id":"source/game/collect-star/assets/firstaid.png","hash":"d3e2ea91ce1dd7e5233edc468350809736b4b971","modified":1545368360706},{"_id":"source/game/collect-star/assets/platform.png","hash":"a5e554225aacbfe0fc73a64eb951fc30d21c0852","modified":1545368360721},{"_id":"themes/cyanstyle2/source/fancybox/helpers/jquery.fancybox-thumbs.js","hash":"83cdfea43632b613771691a11f56f99d85fb6dbd","modified":1545368362253},{"_id":"source/game/collect-star/assets/star.png","hash":"92bb9f3b52cf011d129bbc5a3797666c6c560422","modified":1545368360721},{"_id":"source/game/collect-star/assets/sky.png","hash":"cb2c00f93ff533a91e87b0b5faba30db853fa5df","modified":1545368360721},{"_id":"source/game/plane/assets/award.png","hash":"0925e77b2888de906ccf1a29d530b5f650ad965e","modified":1545368360846},{"_id":"source/game/plane/assets/ao.mp3","hash":"b352c565efc4f3f3fa2ba1d39766adbf344573e8","modified":1545368360846},{"_id":"source/game/plane/assets/bg.jpg","hash":"ffe9007a908b65354934a7f6caf86e408545f70e","modified":1545368360846},{"_id":"source/game/plane/assets/close.png","hash":"cd6d9791f22ea6852756735b8612d10ba36e2c3b","modified":1545368360862},{"_id":"source/game/plane/assets/bullet.png","hash":"367e66f42d46b47fe0dfcc01be7615588707875c","modified":1545368360862},{"_id":"source/game/plane/assets/copyright.png","hash":"4e87c381d17ba8d06b50d119a2a89e1f22623737","modified":1545368360862},{"_id":"source/game/plane/assets/crash2.mp3","hash":"fd675483974d1030d53f9998323523209ef3773c","modified":1545368360862},{"_id":"source/game/plane/assets/crash1.mp3","hash":"6f8764a4bbcfc15de87dcbdda3df30dacfc45dd5","modified":1545368360862},{"_id":"source/game/plane/assets/enemy1.png","hash":"44b74db50678b8a2f1fe324f1f137c3e6b5f0af7","modified":1545368360878},{"_id":"source/game/plane/assets/enemy2.png","hash":"8266b9c3efac157710b66fffaa2845e4f34abad8","modified":1545368360878},{"_id":"source/game/plane/assets/crash3.mp3","hash":"72949b9be0c3528edc8e124fd77c6cfe581eec65","modified":1545368360862},{"_id":"source/game/plane/assets/deng.mp3","hash":"92fd8def3a96d462996e40ec7cbbd74e636519d1","modified":1545368360862},{"_id":"source/game/plane/assets/explode2.png","hash":"6c06bd1e9914062a273049414086508ddf481e98","modified":1545368360878},{"_id":"source/game/plane/assets/enemy3.png","hash":"65b852c0da58e168e513f48d08272cec80470b37","modified":1545368360878},{"_id":"source/game/plane/assets/explode3.png","hash":"db9aeea2ec36ea89df86580228fa1d24fec24df2","modified":1545368360878},{"_id":"source/game/plane/assets/explode1.png","hash":"012f9daa8547619a61f547542bbb05db088a2d33","modified":1545368360878},{"_id":"source/game/plane/assets/mybullet.png","hash":"cf0fb7a49ae34d3fb391ec16700aaf14320a4604","modified":1545368360893},{"_id":"source/game/plane/assets/logo.jpg","hash":"88a2e96dfe1141f7945d21fb8cf4063c5ad925e6","modified":1545368360878},{"_id":"source/game/plane/assets/fashe.mp3","hash":"940c3135f565a2bb13e627d809b5eaa7ba640cac","modified":1545368360878},{"_id":"source/game/plane/assets/myexplode.png","hash":"a90d23e510ee40df57f30c9ec5cd8692170af233","modified":1545368360893},{"_id":"source/game/plane/assets/preloader.gif","hash":"2974f4bf37231205a256f2648189a461e74869c0","modified":1545368360909},{"_id":"source/game/plane/assets/myplane.png","hash":"f1c0d5668c316c29628fe1781d679bfb7eafc1e9","modified":1545368360893},{"_id":"source/game/plane/assets/pi.mp3","hash":"e31685e7a6537e77e66b06f5e45c2e1043cd87c7","modified":1545368360893},{"_id":"source/game/plane/assets/replaybutton.png","hash":"480c6ad9ed932d1b2d9da3a98c2c1ab84724ec11","modified":1545368360909},{"_id":"source/game/plane/assets/sharebutton.png","hash":"2c5f8bdbd5af461d1cf78b73ea65ca05840fcfad","modified":1545368360909},{"_id":"source/game/plane/assets/share.png","hash":"956757b9f16dc59eaf65e05133fd1880079ad863","modified":1545368360909},{"_id":"source/game/plane/assets/startbutton.png","hash":"48980340f52552e927bfdd1b7eff6688065c2fb3","modified":1545368360909},{"_id":"source/mr/example/config/carousel.json","hash":"a3f0dfa162443db589fe13c90b0232c9ac1f7230","modified":1545368359575},{"_id":"source/mr/example/config/button.json","hash":"3f7d049b5a800b23e5155ce4a225fa1914c8448a","modified":1545368359560},{"_id":"source/mr/example/config/draggable.json","hash":"699bdadf0420cc761f7bbcf838e3eebd7ec7a200","modified":1545368359575},{"_id":"source/mr/example/config/tab.json","hash":"a47ecc659de737c29e6ea39ebeb6e4b5d40d1993","modified":1545368359575},{"_id":"source/mr/example/config/loading.json","hash":"8fac380ff13e83bf2ce7b4c86125d9650da798d1","modified":1545368359575},{"_id":"source/mr/example/config/menu.json","hash":"3e00744f296b88f3268b0123bc76e6fe66c9adf4","modified":1545368359575},{"_id":"source/mr/example/config/message.json","hash":"c6c507dd97d8a6f6e4f798ff10484751ab9a46e0","modified":1545368359575},{"_id":"source/images/aiting1.png","hash":"df3bedace086cd5ef306c9e4ee33bb4536b54f5c","modified":1545368359450},{"_id":"source/images/aiting6.png","hash":"cf1234aa1abad78faa8506653ce6dced75325d73","modified":1545368359466},{"_id":"source/images/faceAndEmoj.png","hash":"7bf7c089338135e1ee590d4e8e311d11d83ad414","modified":1545368359497},{"_id":"source/images/loveFish.png","hash":"ec116844e1ee94f2204800ab7935bc42b90ca78c","modified":1545368359529},{"_id":"source/thebest/assets/image/01.jpg","hash":"825750fee71f4bd993fd9f6a090313ea116bffd7","modified":1545368361300},{"_id":"source/mr/src/component/tool.js","hash":"b5ab651cd1803732c30e384cd173f165bcbcd7e8","modified":1545368360637},{"_id":"source/thebest/assets/image/03.jpg","hash":"91291d2f65aec5e34078441c99b96bbaa79449d7","modified":1545368361300},{"_id":"source/thebest/assets/image/1.jpg","hash":"2ef419708299ce1bdba0478ec38d7d7ae8387249","modified":1545368361315},{"_id":"source/thebest/assets/image/04.jpg","hash":"825750fee71f4bd993fd9f6a090313ea116bffd7","modified":1545368361300},{"_id":"source/thebest/assets/image/06.jpg","hash":"91291d2f65aec5e34078441c99b96bbaa79449d7","modified":1545368361300},{"_id":"source/thebest/assets/image/8.jpg","hash":"8b5033831ebc1be02a3db6f9db0080708602d8d8","modified":1545368361331},{"_id":"themes/cyanstyle2/source/css/images/body.jpg","hash":"f3891caba7436c2ae895f3cb4ce09d878008d158","modified":1545373813635},{"_id":"source/mr/src/component/draggable/style.css","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1545368360122},{"_id":"source/thebest/assets/image/02.jpg","hash":"ad20a1a84670e44497382aa25e1a23bff8998f3b","modified":1545368361300},{"_id":"source/thebest/assets/image/05.jpg","hash":"ad20a1a84670e44497382aa25e1a23bff8998f3b","modified":1545368361300},{"_id":"source/thebest/assets/image/2.jpg","hash":"7fee177da5e800e6616baf3122ec1bd8160359e8","modified":1545368361315},{"_id":"source/thebest/assets/image/5.jpg","hash":"3b60c633e8058524fa22f8b12040e2f562cf1e38","modified":1545368361331},{"_id":"themes/cyanstyle2/source/css/images/body1.jpg","hash":"a2d70e4fe8330c4854cdefc94c853b50e98e8ef4","modified":1545368362034},{"_id":"source/mr/src/component/button/index.js","hash":"d7872dad8a22f2e52833156452d0b457fe205394","modified":1545368359794},{"_id":"source/mr/src/component/button/style.css","hash":"335a5e4dddda66a77537557af7b00080957d30f9","modified":1545368359794},{"_id":"source/mr/src/component/button/Button.js","hash":"aca67fbd637684e34ef951199eac27998c87afb0","modified":1545368359747},{"_id":"source/mr/src/component/draggable/index.js","hash":"2d7939749c05d312c04d2c83b203850fa9a75dde","modified":1545368360122},{"_id":"source/mr/src/component/draggable/Draggable.js","hash":"ec1a632d082ae076d52900727af74644c037298b","modified":1545368360060},{"_id":"source/mr/src/component/datepicker/index.js","hash":"9d4b3d4e8ec4a4786e9cb2cc2af34bb70b4368fa","modified":1545368360013},{"_id":"source/mr/src/component/datepicker/style.css","hash":"444e206b5e9bd6f67b36cc8a01edc16ca186a698","modified":1545368360013},{"_id":"source/mr/src/component/carousel/Carousel.js","hash":"3a2cf421705eae5ed9dede0d2fd2ed8191d3ee97","modified":1545368359841},{"_id":"source/mr/src/component/carousel/index.js","hash":"6cf83aa81ece7ce0dc2e385e6e894a28257b0b7d","modified":1545368359904},{"_id":"source/mr/src/component/datepicker/Datepicker.js","hash":"1c244e6b48aa395d404f0dd5858bb0f36f338b3b","modified":1545368359950},{"_id":"source/mr/src/component/loading/index.js","hash":"5215aea559124ca63572911f31166a489c5e92b1","modified":1545368360247},{"_id":"source/mr/src/component/carousel/style.css","hash":"e8c3f3d5689a63a813177fb197568128222a2fcd","modified":1545368359904},{"_id":"source/mr/src/component/loading/Loading.js","hash":"c8fb5750a69e4f7a7c08a69b138fc3179565db62","modified":1545368360185},{"_id":"source/mr/src/component/loading/style.css","hash":"72df6791eeaff7d26e511e8fcfea296b3826676d","modified":1545368360247},{"_id":"source/mr/src/component/menu/index.js","hash":"0d9a805d00850332e5477b3fd5b6cf19eb0e86b4","modified":1545368360373},{"_id":"source/mr/src/component/menu/style.css","hash":"14c7a9af21c846fa27cbc76246e79e8310c57fb8","modified":1545368360377},{"_id":"source/mr/src/component/menu/Menu.js","hash":"8ed621276839912c4f9954e2491f877fd75fa0c9","modified":1545368360310},{"_id":"source/mr/src/component/message/Message.js","hash":"ac089e0b333cb7ac3dd63fc62ebaf92fcccde177","modified":1545368360418},{"_id":"source/mr/src/component/message/style.css","hash":"c49f91b407aa063e03009d6ff46de5f8b5f2476d","modified":1545368360480},{"_id":"source/mr/src/component/message/index.js","hash":"252e9d38150f9ad6098184b651e327a219fb79dd","modified":1545368360480},{"_id":"source/mr/src/component/tab/index.js","hash":"71d832a2eace9052f57630b8586adffaf312c530","modified":1545368360590},{"_id":"source/thebest/assets/image/3.jpg","hash":"4acb9aea6c35db55d82f567f6243e734f6d438a2","modified":1545368361315},{"_id":"source/thebest/assets/image/7.png","hash":"7f4b48aa22c1e1392f0ce621d3f9d605f2cf43ca","modified":1545368361331},{"_id":"source/mr/src/component/tab/Tab.js","hash":"90add83d7e410b759c52001764db30391c670124","modified":1545368360527},{"_id":"themes/cyanstyle2/source/css/images/body2.jpg","hash":"1cea68ff7dbcd02e2ca2c2923596b8c505183e82","modified":1545368362034},{"_id":"source/mr/src/component/tab/style.css","hash":"dab90248ccf64d6b6e05bb7c8a1289e13f556911","modified":1545368360590},{"_id":"source/game/plane/assets/normalback.mp3","hash":"6f3c8366413d2c8a2731fecfd21850af718e61c9","modified":1545368360893},{"_id":"source/game/plane/assets/playback.mp3","hash":"5e9c6680f6da8fa3660457a3269f98d2ababec91","modified":1545368360893},{"_id":"source/thebest/assets/image/4.jpg","hash":"4ff1a5b58b1c5d3ca37134a37806b5b8159c1ded","modified":1545368361331},{"_id":"source/thebest/assets/lib/web-fonts-with-css/css/fa-brands.css","hash":"d49ed968e56ec7f864702760caaef64438ec4430","modified":1545368361425},{"_id":"source/thebest/assets/lib/web-fonts-with-css/css/fa-brands.min.css","hash":"5fceaba67cdabb6d165209495567bbe45c1a04af","modified":1545368361425},{"_id":"source/thebest/assets/lib/web-fonts-with-css/css/fa-solid.css","hash":"19d224f063337cacd2cd96a1129d9ab7f3dd09bc","modified":1545368361440},{"_id":"source/thebest/assets/lib/web-fonts-with-css/css/fa-regular.min.css","hash":"c2187e3c54b9948037e683f3b7f3ebd345b2c854","modified":1545368361440},{"_id":"source/thebest/assets/lib/web-fonts-with-css/css/fa-solid.min.css","hash":"bb60b2cd0726cd445056fbe737d657d8a02ace8c","modified":1545368361440},{"_id":"source/thebest/assets/lib/web-fonts-with-css/css/fa-regular.css","hash":"fb90c4554935713de0e4f995cb05bbb3fa7f9689","modified":1545368361425},{"_id":"source/thebest/assets/lib/web-fonts-with-css/css/fontawesome.css","hash":"c9937ce5a1109458b1d81f6b2bd141b626859f56","modified":1545368361471},{"_id":"source/thebest/assets/lib/web-fonts-with-css/css/fontawesome.min.css","hash":"0c50c48980ab8f0561f025493e5b7c1ca3af46aa","modified":1545368361471},{"_id":"source/thebest/assets/lib/web-fonts-with-css/css/fontawesome-all.min.css","hash":"6539d4d00e4cf9f47ef9dc847c6548afa9cdfcd7","modified":1545368361456},{"_id":"source/thebest/assets/lib/web-fonts-with-css/less/_animated.less","hash":"926cbff32e4af0ea332407df4d00244c1cae9275","modified":1545368361487},{"_id":"source/thebest/assets/lib/web-fonts-with-css/less/_bordered-pulled.less","hash":"2f4030d4493947b1fb80366639da701a75a4434d","modified":1545368361487},{"_id":"source/thebest/assets/lib/web-fonts-with-css/css/fontawesome-all.css","hash":"eda65a7a9c87dc0285b18c515fc9743a51cba129","modified":1545368361456},{"_id":"source/thebest/assets/lib/web-fonts-with-css/less/_fixed-width.less","hash":"f42c0fe05da25fc5ac44f90b2758dc59e6514c31","modified":1545368361503},{"_id":"source/thebest/assets/lib/web-fonts-with-css/less/_larger.less","hash":"c7e50084003b3254c3eb78d47531692f7a3a0677","modified":1545368361503},{"_id":"source/thebest/assets/lib/web-fonts-with-css/less/_core.less","hash":"e55a9acb081851366b223654064ab9e5f907f39d","modified":1545368361487},{"_id":"source/thebest/assets/lib/web-fonts-with-css/less/_list.less","hash":"b64c5651e4cfa89cfd154b5bfce768cb84a7bcba","modified":1545368361518},{"_id":"source/thebest/assets/lib/web-fonts-with-css/less/_mixins.less","hash":"9f6edd0e79780043cc8dc0186d6a33a94689cf45","modified":1545368361518},{"_id":"source/thebest/assets/lib/web-fonts-with-css/less/_screen-reader.less","hash":"3fa86249735534461a08afa86b5d7d774de7ef3f","modified":1545368361518},{"_id":"source/thebest/assets/lib/web-fonts-with-css/less/_rotated-flipped.less","hash":"302359b17fdfce5a8c0a0c98972d3ecfbe8ff7b1","modified":1545368361518},{"_id":"source/thebest/assets/lib/web-fonts-with-css/less/_stacked.less","hash":"6c98e607de3b6d73a3ef0aac7d2ba221d5c79ef6","modified":1545368361518},{"_id":"source/thebest/assets/lib/web-fonts-with-css/less/fa-brands.less","hash":"f323c2a5371d4183284611d0f2402abe8acc4a62","modified":1545368361534},{"_id":"source/thebest/assets/lib/web-fonts-with-css/less/fa-regular.less","hash":"a5bfed08d85af54ff235859c45b6ae8b5e703fab","modified":1545368361534},{"_id":"source/thebest/assets/lib/web-fonts-with-css/less/fa-solid.less","hash":"63764049ebbf3e8ee8382a449a0c3b0fddaa46d8","modified":1545368361534},{"_id":"source/thebest/assets/lib/web-fonts-with-css/scss/_animated.scss","hash":"c19b9775153a5fd567a281b271accd056d208dde","modified":1545368361550},{"_id":"source/thebest/assets/lib/web-fonts-with-css/less/fontawesome.less","hash":"744a039131e61abae0a05a31627112926cc33e7d","modified":1545368361534},{"_id":"source/thebest/assets/lib/web-fonts-with-css/less/_variables.less","hash":"d542532e0c2355e7cc5021209b0c32181074d871","modified":1545368361534},{"_id":"source/thebest/assets/lib/web-fonts-with-css/scss/_bordered-pulled.scss","hash":"9d7c879a9cdd8871ef3999bfdd2b87def620e900","modified":1545368361550},{"_id":"source/thebest/assets/lib/web-fonts-with-css/scss/_core.scss","hash":"413fa5365339b57f305c4b90ef363de4e4a77ec0","modified":1545368361550},{"_id":"source/thebest/assets/lib/web-fonts-with-css/less/_icons.less","hash":"104b4cb550b1370b82ee123601ac21e1011adc99","modified":1545368361503},{"_id":"source/thebest/assets/lib/web-fonts-with-css/scss/_larger.scss","hash":"0de9db22162305cd448dbf29414d80198d88ad2d","modified":1545368361565},{"_id":"source/thebest/assets/lib/web-fonts-with-css/scss/_list.scss","hash":"2d4f904157095663c6619e1f34be2ae3854d376a","modified":1545368361565},{"_id":"source/thebest/assets/lib/web-fonts-with-css/scss/_rotated-flipped.scss","hash":"d31909ab14dd3822c2c9e3bda68d7e9cd812a19e","modified":1545368361581},{"_id":"source/thebest/assets/lib/web-fonts-with-css/scss/_fixed-width.scss","hash":"63f2ef4e09a88ade66aefba22f0ab50b7dc3ef18","modified":1545368361550},{"_id":"source/thebest/assets/lib/web-fonts-with-css/scss/_screen-reader.scss","hash":"29a1b117a3fc34a16b98ac0083890fa8557b1eb9","modified":1545368361581},{"_id":"source/thebest/assets/lib/web-fonts-with-css/scss/fa-brands.scss","hash":"5e2570a5c953733a3264597f05ddf13263a561d3","modified":1545368361596},{"_id":"source/thebest/assets/lib/web-fonts-with-css/scss/_mixins.scss","hash":"602f4af1d3b5340bf377e2b932c4356a1ca8e6b2","modified":1545368361565},{"_id":"source/thebest/assets/lib/web-fonts-with-css/scss/_stacked.scss","hash":"3a18b7f268bafecc96cdfe70787c29ff90e48b5d","modified":1545368361581},{"_id":"source/thebest/assets/lib/web-fonts-with-css/scss/fa-regular.scss","hash":"fead7b46817987cf10b1a93dfee08426207c20da","modified":1545368361596},{"_id":"source/thebest/assets/lib/web-fonts-with-css/scss/fontawesome.scss","hash":"a2677f2cdd88922fb9f9435688063c549703dcba","modified":1545368361596},{"_id":"source/thebest/assets/lib/web-fonts-with-css/scss/fa-solid.scss","hash":"60862f71701b1ef31a32c7126ed63818da319fff","modified":1545368361596},{"_id":"source/thebest/assets/lib/web-fonts-with-css/scss/_variables.scss","hash":"20504e3c3d1cd01697c08696b3090939b679b907","modified":1545368361581},{"_id":"source/thebest/assets/lib/web-fonts-with-css/webfonts/fa-brands-400.woff","hash":"3c0670ba77c60d0d7b8d10ff98727287798ac365","modified":1545368361628},{"_id":"source/thebest/assets/lib/web-fonts-with-css/webfonts/fa-regular-400.eot","hash":"cba1dfb4d238322a31e6032db665690f2d7d1631","modified":1545368361628},{"_id":"source/thebest/assets/lib/web-fonts-with-css/webfonts/fa-brands-400.woff2","hash":"7dc2dfa135e86165c792f33b0f62bfc82996cab4","modified":1545368361628},{"_id":"source/thebest/assets/lib/web-fonts-with-css/webfonts/fa-regular-400.ttf","hash":"79ff3e43370ee9d485040c8ac0c8755fff0ddc6a","modified":1545368361643},{"_id":"source/thebest/assets/lib/web-fonts-with-css/webfonts/fa-regular-400.woff","hash":"6efcd906301f5890443561fdd7c24c547e679a4c","modified":1545368361643},{"_id":"source/thebest/assets/lib/web-fonts-with-css/webfonts/fa-regular-400.woff2","hash":"6a09640d1f75f0ad0ad3982a7124120b84a25dc4","modified":1545368361643},{"_id":"source/thebest/assets/lib/web-fonts-with-css/webfonts/fa-solid-900.woff","hash":"73fd648469c2a28f3b19c8c07057d3ca6b32d79a","modified":1545368361675},{"_id":"source/thebest/assets/lib/web-fonts-with-css/webfonts/fa-solid-900.woff2","hash":"fe366898f9b2cc0e43366289503d5a718f0fd06f","modified":1545368361675},{"_id":"source/thebest/assets/lib/web-fonts-with-css/webfonts/fa-brands-400.eot","hash":"f400984dad3c23614b3f736da0561b6f15bd044d","modified":1545368361596},{"_id":"source/thebest/assets/lib/web-fonts-with-css/webfonts/fa-brands-400.ttf","hash":"032dc74f737d6ea76f2af6af8758ae0d034bfaef","modified":1545368361612},{"_id":"source/thebest/assets/lib/web-fonts-with-css/scss/_icons.scss","hash":"d17ceba05a406f1d5f1ce534e69af404235cc4fc","modified":1545368361550},{"_id":"source/thebest/assets/lib/web-fonts-with-css/webfonts/fa-solid-900.eot","hash":"d4803ab92367752650a6a883f18f99f2b04a9f2a","modified":1545368361643},{"_id":"source/thebest/assets/lib/web-fonts-with-css/webfonts/fa-solid-900.ttf","hash":"30a79d6bdc0da59d6b4230e5d04b2da4d9610f3d","modified":1545368361675},{"_id":"source/thebest/assets/lib/web-fonts-with-css/webfonts/fa-regular-400.svg","hash":"f451915b66f50ae84565afafe12be4ec63fcc397","modified":1545368361628},{"_id":"source/mr/src/component/icon/style.css","hash":"e76ab8ac655d8055c303c9a7348cb7d57e2ce8f1","modified":1545368360122},{"_id":"source/thebest/assets/image/6.jpg","hash":"aad5ebbaa5c1fc1acde0f660c804324e3777d2be","modified":1545368361331},{"_id":"source/thebest/assets/image/10.jpg","hash":"339f8337fd3dbc4b66a555db49a7d5bf38d6b3be","modified":1545368361315},{"_id":"source/game/plane/phaser.min.js","hash":"226fd52d2fe3d445c56859b5f623f16ec254cf29","modified":1545368361018},{"_id":"source/game/collect-star/phaser.min.js","hash":"226fd52d2fe3d445c56859b5f623f16ec254cf29","modified":1545368360831},{"_id":"source/thebest/assets/lib/three/three.js","hash":"fd0c9b4b2067a939c2e31b5b056ff40510df5faa","modified":1545368361393},{"_id":"source/thebest/assets/lib/web-fonts-with-css/webfonts/fa-brands-400.svg","hash":"a830ca32cd13d38a56c9445a1cde3be69bf9933c","modified":1545368361612},{"_id":"source/thebest/assets/lib/web-fonts-with-css/webfonts/fa-solid-900.svg","hash":"45331272b54433e524ccc29b88988ffe565c3a02","modified":1545368361659},{"_id":"source/thebest/assets/image/9.jpg","hash":"6f37437fec5abc80760d46ce79def102dde73642","modified":1545368361346},{"_id":"source/thebest/assets/music/01.mp3","hash":"e0b984125537409ae44f4f6b49498f10bf530751","modified":1545368361690},{"_id":"source/thebest/assets/music/04.mp3","hash":"e0b984125537409ae44f4f6b49498f10bf530751","modified":1545368361721},{"_id":"source/thebest/assets/music/03.mp3","hash":"8f9d4642526dac7afeb5708c3bd478ab810990bc","modified":1545368361706},{"_id":"source/thebest/assets/music/06.mp3","hash":"8f9d4642526dac7afeb5708c3bd478ab810990bc","modified":1545368361753},{"_id":"source/thebest/assets/music/02.mp3","hash":"ce8df69cac8596a6dbe16b4abf2c5f28c328ebb3","modified":1545368361706},{"_id":"source/thebest/assets/music/05.mp3","hash":"ce8df69cac8596a6dbe16b4abf2c5f28c328ebb3","modified":1545368361737},{"_id":"source/game/player/bundle.js","hash":"be73884f03ab8cb926ec9876904a018a628aa218","modified":1545368361096},{"_id":"source/game/player/bundle.js.map","hash":"9d7db9c812ce3b70ec3b7d7c8fe4ac83e472cad0","modified":1545368361128},{"_id":"source/thebest/app.bundle.js","hash":"c5295d3ede9d41149bcd942d1e59031680ad0273","modified":1545368361221},{"_id":"source/thebest/app.bundle.js.map","hash":"cc6dedb4a73409b3f57fa4c16c34fa5cdd390d8a","modified":1545368361284},{"_id":"public/2017/06/18/let和const/index.html","hash":"f8d9e2dbd42ee3d690e0f42e41aab3f915f3a39d","modified":1545370000256},{"_id":"public/2017/06/16/Iterator和for...of/index.html","hash":"b38c84b9718c43961723ad81d87f4fd1d2a9e7fe","modified":1545370000256},{"_id":"public/2017/02/04/Javascript标准参考教程重点/index.html","hash":"60735d1e861e075817d1af7d3a47339fb0e0749c","modified":1545370000256},{"_id":"public/2017/01/21/爱听播放器/index.html","hash":"924df239e0672878841c2caecdd7e50741fcc10a","modified":1545370000256},{"_id":"public/2017/01/08/NodeJS刷票程序/index.html","hash":"749d423d5cadd7a904d362cb92ac66891987c455","modified":1545370000256},{"_id":"public/2017/01/05/MongoDB安装/index.html","hash":"330353169782cb59a1437d5e854c7211559cdc4a","modified":1545370000256},{"_id":"public/2016/12/14/Git使用SSH提交代码/index.html","hash":"074a5fad04f80c484168f6cb24a0598c3d925a46","modified":1545370000256},{"_id":"public/2016/12/07/实用工具推荐/index.html","hash":"03df1888e166950e33c38cddd8f0bf9636351f69","modified":1545370000256},{"_id":"public/2016/12/04/电脑远程控制工具/index.html","hash":"f3936cdbdd3623596e23be0dc8a32c9dd0a6478b","modified":1545370000256},{"_id":"public/2016/11/15/应用平台桌面版/index.html","hash":"19cc176aa9d83de2230b1afc959f8061e101c9f7","modified":1545370000256},{"_id":"public/archives/2016/index.html","hash":"8edee978b11e7cafe108252b2c585bb0d2735477","modified":1545370000256},{"_id":"public/archives/2016/11/index.html","hash":"9f10930c8d2af63702ed56fa652ef4ec97d0bd2c","modified":1545370000256},{"_id":"public/archives/2016/12/index.html","hash":"b14f404bd1063171d60efffd574c0f78029ed53d","modified":1545370000256},{"_id":"public/archives/2017/01/index.html","hash":"b638ef707df7d9f93564eaecf07320d16e923770","modified":1545370000256},{"_id":"public/archives/2017/02/index.html","hash":"bd4c4ad1519b5a202666718d744823ffa0525bc3","modified":1545370000256},{"_id":"public/archives/2017/04/index.html","hash":"aa9481b81e545ed227e8d1691ad9568de059cafc","modified":1545370000256},{"_id":"public/archives/2017/05/index.html","hash":"c023f6090847c86b29b0e7bad46b2586d8aa6648","modified":1545370000256},{"_id":"public/archives/2017/06/index.html","hash":"cb3f9f1e481b57184f60c24199d5aa72806d6374","modified":1545370000256},{"_id":"public/page/3/index.html","hash":"1f8131e5be6a469f630919095dc673611ad9a7e9","modified":1545370000256},{"_id":"public/tags/Git/index.html","hash":"a8a883e3f44211e97e544f3af860f8501e70f120","modified":1545370000256},{"_id":"public/tags/ES6/index.html","hash":"4ca495a56cfc6258615183a57f974ba1f7288508","modified":1545370000256},{"_id":"public/tags/Mongo/index.html","hash":"34252f6bd7e98fa50879d11f84f943f1c76f73bc","modified":1545370000256},{"_id":"public/tags/Javascript/index.html","hash":"04e276763fc3d80b4f4130dc0dd79dafffeb3211","modified":1545370000256},{"_id":"public/tags/分享/index.html","hash":"879a8ee3987f76086e0e4386d9f3a80885ee970d","modified":1545370000256},{"_id":"public/tags/Webpack/index.html","hash":"ee73de72b2d348d9e9479c4454f9543dd583ca25","modified":1545370000256},{"_id":"public/2017/06/22/对象的扩展/index.html","hash":"dc35b8cef5312e7237f09669a1c47c20f7cfc51d","modified":1545370000256},{"_id":"public/2017/06/20/Promise/index.html","hash":"a152fd98c4aaa6775e1007c3aff1e6c2f1d5bc29","modified":1545370000256},{"_id":"public/2017/06/14/Class/index.html","hash":"841521da88aac0cb945bed5cd76e6348a65a7ee1","modified":1545370000256},{"_id":"public/2017/06/12/rest参数和扩展运算符/index.html","hash":"3de1c047d74d74b9b7f1286e503d72fc59d02d5d","modified":1545370000256},{"_id":"public/2017/05/05/webpack全面理解/index.html","hash":"6bbe5aa1f24ceb95b8e91f3d82c1bf8fb4b57688","modified":1545370000256},{"_id":"public/2017/04/25/Javascript设计模式简述/index.html","hash":"eb55f9123cb6e51de77e7b07dde59a65015de845","modified":1545370000256},{"_id":"public/2016/11/24/应用平台WEB/index.html","hash":"59f1177702aa314988e4833aca76d7876ef4e24f","modified":1545370000256},{"_id":"public/archives/index.html","hash":"71bf0dd6b4613d8dd4a5bae41a062d0184d2e81f","modified":1545370000256},{"_id":"public/archives/2017/index.html","hash":"285fe7142e1e2b6e7de8f777ea26f21d97f8dc02","modified":1545370000256},{"_id":"public/index.html","hash":"f9497fd80ebcedc549e1333e338403d2e0a7a5a9","modified":1545370000256},{"_id":"public/page/2/index.html","hash":"3e27e87e467d9e218148421a4d26402bcbd910ee","modified":1545370000256},{"_id":"public/mr/src/component/draggable/style.css","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1545370000272},{"_id":"public/mr/README.md","hash":"0cfb9e9d6a303e52544e3cf4819760853b39969e","modified":1545370000288},{"_id":"public/mr/LICENSE","hash":"a8e501bfc74e1a58a4ca0b5dded4efc522efb599","modified":1545370000288},{"_id":"public/mr/index.css","hash":"5e5acc84a0772ad86c613573ff92c539ffe0f056","modified":1545370000288},{"_id":"public/mr/index.html","hash":"6422668a57255016166f514264d92b57fa58d637","modified":1545370000288},{"_id":"public/images/aiting2.png","hash":"b2e4f7458a38d9c3ac0454fb6eab945459e7fb9e","modified":1545370000288},{"_id":"public/images/aiting7.png","hash":"2e2518f2ebb89b72c6b00ae51453fc0c858e4535","modified":1545370000288},{"_id":"public/images/buyTicket.jpg","hash":"e9b1baac8dce5c3ed0a8e9c304f0ede1c704c85c","modified":1545370000288},{"_id":"public/images/chatRoom1.png","hash":"35a9b9ccf2b40bfbd1da9304f4430257f22553d9","modified":1545370000288},{"_id":"public/images/chatSearchAndSettings.png","hash":"8558c748e7a20b164f189dc289a97ff14fc8a06f","modified":1545370000288},{"_id":"public/images/chatHome.png","hash":"25ec7a1e3e7789b33c66719c580e54a5bfc33929","modified":1545370000288},{"_id":"public/images/game1.png","hash":"dd94b35d8d2f2e31a8bb904eb53e807a1156bfe1","modified":1545370000288},{"_id":"public/images/game4.png","hash":"1e775ebbfdca251c0d879532323e3411843dfa63","modified":1545370000288},{"_id":"public/images/game3.png","hash":"8bb2d20b1367eb19d51d3cd8a36b2cab4e7cd9db","modified":1545370000288},{"_id":"public/images/musicPlayer1.png","hash":"04992c45d838ec90848b9713225aad0f4a61369a","modified":1545370000288},{"_id":"public/images/musicPlayer2.png","hash":"827395aad188a4d1a0b0a669d07312f255558974","modified":1545370000288},{"_id":"public/images/panda.jpg","hash":"ae75af25063e1158f396bf9ce9c3e95a63ca7760","modified":1545370000288},{"_id":"public/images/pay.jpg","hash":"aca9013aeebf0aac0e9a43d60b5fc9c1f42fa19a","modified":1545370000288},{"_id":"public/images/pc1.png","hash":"2d84a6df8e500b89e30b35757a5a26e9d78ffbeb","modified":1545370000288},{"_id":"public/images/resetPwd.png","hash":"a6aabf10ea4c6026fd375f421346ef8df1547b09","modified":1545370000288},{"_id":"public/images/signIn.png","hash":"49db05fc60d85d17836cebb035695854230d0c55","modified":1545370000288},{"_id":"public/images/signUp.png","hash":"bdd3c6d16ca71f1f6c2190d6305b6a14be5f402d","modified":1545370000288},{"_id":"public/thebest/a6137456ed160d7606981aa57c559898.png","hash":"c9e7528e491a39232ba24a2706c6c739d6fb0f06","modified":1545370000288},{"_id":"public/thebest/2273e3d8ad9264b7daa5bdbf8e6b47f8.png","hash":"60a90bcbb2b42b7ddb4556db94eb7c1084b0e5da","modified":1545370000288},{"_id":"public/thebest/4f0283c6ce28e888000e978e537a6a56.png","hash":"152a162333e46d24f9d89f566312fc0c64011dee","modified":1545370000288},{"_id":"public/thebest/common.bundle.js","hash":"0b6333ac5cf4b25f13d2b3ab9d1923c4f9f218de","modified":1545370000288},{"_id":"public/thebest/common.bundle.js.map","hash":"3f2a29735176956b9aa1bfad73c315ae6351369e","modified":1545370000288},{"_id":"public/thebest/index.html","hash":"87b33c80ccb76f35f0f44c3837d2a5252e2362a2","modified":1545370000288},{"_id":"public/fancybox/blank.gif","hash":"2daeaa8b5f19f0bc209d976c02bd6acb51b00b0a","modified":1545370000288},{"_id":"public/fancybox/fancybox_loading.gif","hash":"1a755fb2599f3a313cc6cfdb14df043f8c14a99c","modified":1545370000288},{"_id":"public/fancybox/fancybox_loading@2x.gif","hash":"273b123496a42ba45c3416adb027cd99745058b0","modified":1545370000288},{"_id":"public/fancybox/fancybox_sprite.png","hash":"17df19f97628e77be09c352bf27425faea248251","modified":1545370000288},{"_id":"public/fancybox/fancybox_overlay.png","hash":"b3a4ee645ba494f52840ef8412015ba0f465dbe0","modified":1545370000288},{"_id":"public/fancybox/fancybox_sprite@2x.png","hash":"30c58913f327e28f466a00f4c1ac8001b560aed8","modified":1545370000288},{"_id":"public/mr/example/button.html","hash":"168c2a9710ced659e05b3c1a7b80bcdaabc5c712","modified":1545370000288},{"_id":"public/mr/image/mushroom.png","hash":"a754dcee48d1a97f9be29fb7630f3132bd4187f9","modified":1545370000288},{"_id":"public/mr/example/carousel.html","hash":"9a7321459e40b39d120aea763ee1a2d4c595ee46","modified":1545370000288},{"_id":"public/mr/example/global.css","hash":"5e04080a54bc5bc017f29d020f0dbfe930dfb060","modified":1545370000288},{"_id":"public/mr/example/datepicker.html","hash":"ef2729363a87269d5f437428cbddc4f7e97d50db","modified":1545370000288},{"_id":"public/mr/example/index.html","hash":"435ed8431e84bce0b399a296f4c08f7525fd683c","modified":1545370000288},{"_id":"public/mr/example/menu.html","hash":"bd0f4da5ff6912dd8d254dbadfa71268b37a92f4","modified":1545370000288},{"_id":"public/mr/example/loading.html","hash":"e021dacd1a6d654dc16525fb5ff43c141228608f","modified":1545370000288},{"_id":"public/mr/example/draggable.html","hash":"ab6986311a1b4127c3bf6bc1a35e1c1a17b0b5cb","modified":1545370000288},{"_id":"public/mr/example/message.html","hash":"01186059cb20c7e04bb8c84af35deb367fe384b2","modified":1545370000288},{"_id":"public/mr/example/tab.html","hash":"eddca3e18aae7a5b9563ac37b0f537eeb8d1880c","modified":1545370000288},{"_id":"public/mr/example/template.html","hash":"50b130fc2a109b512e7c92a4603f2caefd1f781a","modified":1545370000288},{"_id":"public/mr/src/mr.css","hash":"f7ab0d21685e933e9bcc1e32ff24e1d135f49e61","modified":1545370000288},{"_id":"public/mr/example/tool.js","hash":"839d10e2c3976d9a27a807c9d6e64d2a7f574019","modified":1545370000288},{"_id":"public/mr/src/mr.js","hash":"045526fad83a0d05e7fc63bc2fdc60ee2cc58c4b","modified":1545370000288},{"_id":"public/css/images/favicon.ico","hash":"8877b9eda116bca623cc87b3c76a48eef3afd258","modified":1545370000288},{"_id":"public/fancybox/helpers/fancybox_buttons.png","hash":"e385b139516c6813dcd64b8fc431c364ceafe5f3","modified":1545370000288},{"_id":"public/css/images/qr_alipay.png","hash":"aca9013aeebf0aac0e9a43d60b5fc9c1f42fa19a","modified":1545370000288},{"_id":"public/mr/example/config/carousel.json","hash":"a3f0dfa162443db589fe13c90b0232c9ac1f7230","modified":1545370000288},{"_id":"public/mr/example/config/button.json","hash":"3f7d049b5a800b23e5155ce4a225fa1914c8448a","modified":1545370000288},{"_id":"public/mr/example/config/draggable.json","hash":"699bdadf0420cc761f7bbcf838e3eebd7ec7a200","modified":1545370000288},{"_id":"public/mr/example/config/tab.json","hash":"a47ecc659de737c29e6ea39ebeb6e4b5d40d1993","modified":1545370000288},{"_id":"public/mr/example/config/loading.json","hash":"8fac380ff13e83bf2ce7b4c86125d9650da798d1","modified":1545370000288},{"_id":"public/mr/example/config/menu.json","hash":"3e00744f296b88f3268b0123bc76e6fe66c9adf4","modified":1545370000288},{"_id":"public/mr/example/config/message.json","hash":"c6c507dd97d8a6f6e4f798ff10484751ab9a46e0","modified":1545370000288},{"_id":"public/thebest/assets/image/01.jpg","hash":"825750fee71f4bd993fd9f6a090313ea116bffd7","modified":1545370000288},{"_id":"public/mr/src/component/tool.js","hash":"b5ab651cd1803732c30e384cd173f165bcbcd7e8","modified":1545370000288},{"_id":"public/thebest/assets/image/03.jpg","hash":"91291d2f65aec5e34078441c99b96bbaa79449d7","modified":1545370000288},{"_id":"public/thebest/assets/image/1.jpg","hash":"2ef419708299ce1bdba0478ec38d7d7ae8387249","modified":1545370000288},{"_id":"public/thebest/assets/image/04.jpg","hash":"825750fee71f4bd993fd9f6a090313ea116bffd7","modified":1545370000288},{"_id":"public/thebest/assets/image/06.jpg","hash":"91291d2f65aec5e34078441c99b96bbaa79449d7","modified":1545370000288},{"_id":"public/thebest/assets/image/8.jpg","hash":"8b5033831ebc1be02a3db6f9db0080708602d8d8","modified":1545370000288},{"_id":"public/mr/src/component/button/index.js","hash":"d7872dad8a22f2e52833156452d0b457fe205394","modified":1545370000288},{"_id":"public/mr/src/component/button/style.css","hash":"335a5e4dddda66a77537557af7b00080957d30f9","modified":1545370000288},{"_id":"public/mr/src/component/button/Button.js","hash":"aca67fbd637684e34ef951199eac27998c87afb0","modified":1545370000288},{"_id":"public/mr/src/component/draggable/index.js","hash":"2d7939749c05d312c04d2c83b203850fa9a75dde","modified":1545370000288},{"_id":"public/mr/src/component/draggable/Draggable.js","hash":"ec1a632d082ae076d52900727af74644c037298b","modified":1545370000288},{"_id":"public/mr/src/component/datepicker/index.js","hash":"9d4b3d4e8ec4a4786e9cb2cc2af34bb70b4368fa","modified":1545370000288},{"_id":"public/mr/src/component/datepicker/style.css","hash":"444e206b5e9bd6f67b36cc8a01edc16ca186a698","modified":1545370000288},{"_id":"public/mr/src/component/carousel/Carousel.js","hash":"3a2cf421705eae5ed9dede0d2fd2ed8191d3ee97","modified":1545370000288},{"_id":"public/mr/src/component/carousel/index.js","hash":"6cf83aa81ece7ce0dc2e385e6e894a28257b0b7d","modified":1545370000288},{"_id":"public/mr/src/component/datepicker/Datepicker.js","hash":"1c244e6b48aa395d404f0dd5858bb0f36f338b3b","modified":1545370000288},{"_id":"public/mr/src/component/loading/index.js","hash":"5215aea559124ca63572911f31166a489c5e92b1","modified":1545370000288},{"_id":"public/mr/src/component/carousel/style.css","hash":"e8c3f3d5689a63a813177fb197568128222a2fcd","modified":1545370000288},{"_id":"public/mr/src/component/loading/Loading.js","hash":"c8fb5750a69e4f7a7c08a69b138fc3179565db62","modified":1545370000288},{"_id":"public/mr/src/component/loading/style.css","hash":"72df6791eeaff7d26e511e8fcfea296b3826676d","modified":1545370000288},{"_id":"public/mr/src/component/menu/index.js","hash":"0d9a805d00850332e5477b3fd5b6cf19eb0e86b4","modified":1545370000288},{"_id":"public/mr/src/component/menu/style.css","hash":"14c7a9af21c846fa27cbc76246e79e8310c57fb8","modified":1545370000288},{"_id":"public/mr/src/component/menu/Menu.js","hash":"8ed621276839912c4f9954e2491f877fd75fa0c9","modified":1545370000288},{"_id":"public/mr/src/component/message/Message.js","hash":"ac089e0b333cb7ac3dd63fc62ebaf92fcccde177","modified":1545370000288},{"_id":"public/mr/src/component/message/style.css","hash":"c49f91b407aa063e03009d6ff46de5f8b5f2476d","modified":1545370000288},{"_id":"public/mr/src/component/message/index.js","hash":"252e9d38150f9ad6098184b651e327a219fb79dd","modified":1545370000288},{"_id":"public/mr/src/component/tab/index.js","hash":"71d832a2eace9052f57630b8586adffaf312c530","modified":1545370000288},{"_id":"public/mr/src/component/tab/Tab.js","hash":"90add83d7e410b759c52001764db30391c670124","modified":1545370000288},{"_id":"public/mr/src/component/tab/style.css","hash":"dab90248ccf64d6b6e05bb7c8a1289e13f556911","modified":1545370000288},{"_id":"public/thebest/assets/lib/web-fonts-with-css/css/fa-brands.css","hash":"d49ed968e56ec7f864702760caaef64438ec4430","modified":1545370000288},{"_id":"public/thebest/assets/lib/web-fonts-with-css/css/fa-brands.min.css","hash":"5fceaba67cdabb6d165209495567bbe45c1a04af","modified":1545370000288},{"_id":"public/thebest/assets/lib/web-fonts-with-css/css/fa-solid.css","hash":"19d224f063337cacd2cd96a1129d9ab7f3dd09bc","modified":1545370000288},{"_id":"public/thebest/assets/lib/web-fonts-with-css/css/fa-regular.min.css","hash":"c2187e3c54b9948037e683f3b7f3ebd345b2c854","modified":1545370000288},{"_id":"public/thebest/assets/lib/web-fonts-with-css/css/fa-solid.min.css","hash":"bb60b2cd0726cd445056fbe737d657d8a02ace8c","modified":1545370000288},{"_id":"public/thebest/assets/lib/web-fonts-with-css/css/fa-regular.css","hash":"fb90c4554935713de0e4f995cb05bbb3fa7f9689","modified":1545370000288},{"_id":"public/thebest/assets/lib/web-fonts-with-css/css/fontawesome.css","hash":"c9937ce5a1109458b1d81f6b2bd141b626859f56","modified":1545370000288},{"_id":"public/thebest/assets/lib/web-fonts-with-css/css/fontawesome.min.css","hash":"0c50c48980ab8f0561f025493e5b7c1ca3af46aa","modified":1545370000288},{"_id":"public/thebest/assets/lib/web-fonts-with-css/css/fontawesome-all.min.css","hash":"6539d4d00e4cf9f47ef9dc847c6548afa9cdfcd7","modified":1545370000288},{"_id":"public/thebest/assets/lib/web-fonts-with-css/less/fa-brands.less","hash":"f323c2a5371d4183284611d0f2402abe8acc4a62","modified":1545370000288},{"_id":"public/thebest/assets/lib/web-fonts-with-css/css/fontawesome-all.css","hash":"eda65a7a9c87dc0285b18c515fc9743a51cba129","modified":1545370000288},{"_id":"public/thebest/assets/lib/web-fonts-with-css/less/fa-regular.less","hash":"a5bfed08d85af54ff235859c45b6ae8b5e703fab","modified":1545370000288},{"_id":"public/thebest/assets/lib/web-fonts-with-css/less/fa-solid.less","hash":"63764049ebbf3e8ee8382a449a0c3b0fddaa46d8","modified":1545370000288},{"_id":"public/thebest/assets/lib/web-fonts-with-css/less/fontawesome.less","hash":"744a039131e61abae0a05a31627112926cc33e7d","modified":1545370000288},{"_id":"public/thebest/assets/lib/web-fonts-with-css/scss/fa-brands.scss","hash":"5e2570a5c953733a3264597f05ddf13263a561d3","modified":1545370000288},{"_id":"public/thebest/assets/lib/web-fonts-with-css/scss/fa-regular.scss","hash":"fead7b46817987cf10b1a93dfee08426207c20da","modified":1545370000288},{"_id":"public/thebest/assets/lib/web-fonts-with-css/scss/fontawesome.scss","hash":"a2677f2cdd88922fb9f9435688063c549703dcba","modified":1545370000288},{"_id":"public/thebest/assets/lib/web-fonts-with-css/scss/fa-solid.scss","hash":"60862f71701b1ef31a32c7126ed63818da319fff","modified":1545370000288},{"_id":"public/thebest/assets/lib/web-fonts-with-css/webfonts/fa-brands-400.woff","hash":"3c0670ba77c60d0d7b8d10ff98727287798ac365","modified":1545370000288},{"_id":"public/thebest/assets/lib/web-fonts-with-css/webfonts/fa-brands-400.woff2","hash":"7dc2dfa135e86165c792f33b0f62bfc82996cab4","modified":1545370000288},{"_id":"public/thebest/assets/lib/web-fonts-with-css/webfonts/fa-regular-400.eot","hash":"cba1dfb4d238322a31e6032db665690f2d7d1631","modified":1545370000288},{"_id":"public/thebest/assets/lib/web-fonts-with-css/webfonts/fa-regular-400.ttf","hash":"79ff3e43370ee9d485040c8ac0c8755fff0ddc6a","modified":1545370000288},{"_id":"public/thebest/assets/lib/web-fonts-with-css/webfonts/fa-regular-400.woff","hash":"6efcd906301f5890443561fdd7c24c547e679a4c","modified":1545370000288},{"_id":"public/thebest/assets/lib/web-fonts-with-css/webfonts/fa-regular-400.woff2","hash":"6a09640d1f75f0ad0ad3982a7124120b84a25dc4","modified":1545370000288},{"_id":"public/thebest/assets/lib/web-fonts-with-css/webfonts/fa-solid-900.woff","hash":"73fd648469c2a28f3b19c8c07057d3ca6b32d79a","modified":1545370000288},{"_id":"public/thebest/assets/lib/web-fonts-with-css/webfonts/fa-solid-900.woff2","hash":"fe366898f9b2cc0e43366289503d5a718f0fd06f","modified":1545370000288},{"_id":"public/game/plane/index.html","hash":"250320bf83e8a08fc79c60381016e3d555faf8a7","modified":1545370000288},{"_id":"public/game/chess/index.html","hash":"0e4034bbf89d38bb28266f33a06c9066df22c7e6","modified":1545370000288},{"_id":"public/game/index.html","hash":"bd71ed00131045fd1f1e1f414186d71d7277ac7c","modified":1545370000288},{"_id":"public/game/collect-star/index.html","hash":"69e77ab754076cc33a8e41a030adc28727f828c9","modified":1545370000288},{"_id":"public/game/player/index.html","hash":"53c147cc952d6668ccfb9895620db734c0012402","modified":1545370000288},{"_id":"public/game/plane/main.js","hash":"e3718f676d0d26b1c9f32daedf3bfe672559394c","modified":1545370000288},{"_id":"public/game/snake/index.html","hash":"8ef88157b5d48fdf93b48ab630e23fe2ad3e2aa3","modified":1545370000288},{"_id":"public/game/collect-star/main.js","hash":"9b0520d91dabfe10142ce83b98981188e9d0bd3d","modified":1545370000288},{"_id":"public/game/collect-star/assets/baddie.png","hash":"6c66d5b5f4b3a5a8e5789915f557369bafcddf7f","modified":1545370000288},{"_id":"public/game/collect-star/assets/dude.png","hash":"a5e49e1fb387940238476131533fbbd4dcdb4b69","modified":1545370000288},{"_id":"public/game/collect-star/assets/firstaid.png","hash":"d3e2ea91ce1dd7e5233edc468350809736b4b971","modified":1545370000288},{"_id":"public/game/collect-star/assets/diamond.png","hash":"5ec6d179c59de491476869b89bd65328a6d4f9b1","modified":1545370000288},{"_id":"public/game/collect-star/assets/platform.png","hash":"a5e554225aacbfe0fc73a64eb951fc30d21c0852","modified":1545370000288},{"_id":"public/game/collect-star/assets/sky.png","hash":"cb2c00f93ff533a91e87b0b5faba30db853fa5df","modified":1545370000288},{"_id":"public/game/collect-star/assets/star.png","hash":"92bb9f3b52cf011d129bbc5a3797666c6c560422","modified":1545370000288},{"_id":"public/game/plane/assets/award.png","hash":"0925e77b2888de906ccf1a29d530b5f650ad965e","modified":1545370000288},{"_id":"public/game/plane/assets/ao.mp3","hash":"b352c565efc4f3f3fa2ba1d39766adbf344573e8","modified":1545370000288},{"_id":"public/game/plane/assets/bg.jpg","hash":"ffe9007a908b65354934a7f6caf86e408545f70e","modified":1545370000288},{"_id":"public/game/plane/assets/close.png","hash":"cd6d9791f22ea6852756735b8612d10ba36e2c3b","modified":1545370000288},{"_id":"public/game/plane/assets/bullet.png","hash":"367e66f42d46b47fe0dfcc01be7615588707875c","modified":1545370000288},{"_id":"public/game/plane/assets/copyright.png","hash":"4e87c381d17ba8d06b50d119a2a89e1f22623737","modified":1545370000288},{"_id":"public/game/plane/assets/crash2.mp3","hash":"fd675483974d1030d53f9998323523209ef3773c","modified":1545370000288},{"_id":"public/game/plane/assets/crash1.mp3","hash":"6f8764a4bbcfc15de87dcbdda3df30dacfc45dd5","modified":1545370000288},{"_id":"public/game/plane/assets/enemy1.png","hash":"44b74db50678b8a2f1fe324f1f137c3e6b5f0af7","modified":1545370000288},{"_id":"public/game/plane/assets/enemy2.png","hash":"8266b9c3efac157710b66fffaa2845e4f34abad8","modified":1545370000288},{"_id":"public/game/plane/assets/crash3.mp3","hash":"72949b9be0c3528edc8e124fd77c6cfe581eec65","modified":1545370000288},{"_id":"public/game/plane/assets/deng.mp3","hash":"92fd8def3a96d462996e40ec7cbbd74e636519d1","modified":1545370000288},{"_id":"public/game/plane/assets/explode2.png","hash":"6c06bd1e9914062a273049414086508ddf481e98","modified":1545370000288},{"_id":"public/game/plane/assets/enemy3.png","hash":"65b852c0da58e168e513f48d08272cec80470b37","modified":1545370000288},{"_id":"public/game/plane/assets/explode3.png","hash":"db9aeea2ec36ea89df86580228fa1d24fec24df2","modified":1545370000288},{"_id":"public/game/plane/assets/explode1.png","hash":"012f9daa8547619a61f547542bbb05db088a2d33","modified":1545370000288},{"_id":"public/game/plane/assets/mybullet.png","hash":"cf0fb7a49ae34d3fb391ec16700aaf14320a4604","modified":1545370000288},{"_id":"public/game/plane/assets/logo.jpg","hash":"88a2e96dfe1141f7945d21fb8cf4063c5ad925e6","modified":1545370000288},{"_id":"public/game/plane/assets/fashe.mp3","hash":"940c3135f565a2bb13e627d809b5eaa7ba640cac","modified":1545370000288},{"_id":"public/game/plane/assets/myexplode.png","hash":"a90d23e510ee40df57f30c9ec5cd8692170af233","modified":1545370000288},{"_id":"public/game/plane/assets/preloader.gif","hash":"2974f4bf37231205a256f2648189a461e74869c0","modified":1545370000288},{"_id":"public/game/plane/assets/myplane.png","hash":"f1c0d5668c316c29628fe1781d679bfb7eafc1e9","modified":1545370000288},{"_id":"public/game/plane/assets/pi.mp3","hash":"e31685e7a6537e77e66b06f5e45c2e1043cd87c7","modified":1545370000288},{"_id":"public/game/plane/assets/replaybutton.png","hash":"480c6ad9ed932d1b2d9da3a98c2c1ab84724ec11","modified":1545370000288},{"_id":"public/game/plane/assets/sharebutton.png","hash":"2c5f8bdbd5af461d1cf78b73ea65ca05840fcfad","modified":1545370000288},{"_id":"public/game/plane/assets/share.png","hash":"956757b9f16dc59eaf65e05133fd1880079ad863","modified":1545370000288},{"_id":"public/game/plane/assets/startbutton.png","hash":"48980340f52552e927bfdd1b7eff6688065c2fb3","modified":1545370000288},{"_id":"public/images/addToGroup.png","hash":"e78d011d76b0c5f97df9ea7f08449bc4063ae47f","modified":1545370000303},{"_id":"public/images/aiting4.png","hash":"8c57b66004d13c144dd6899fa8a4dbdbd4351534","modified":1545370000303},{"_id":"public/images/chatRoom3.png","hash":"d4008d148dd6833dbafc892d6fcee48b1bbe9db6","modified":1545370000303},{"_id":"public/images/docs.png","hash":"a71ec28c7ce95d6feb0d885adc26e75ff87c3e65","modified":1545370000303},{"_id":"public/images/download.png","hash":"0a874cfbd8152e01751e228c58403086eb95a225","modified":1545370000303},{"_id":"public/images/game2.png","hash":"b834540535870ce68df0cde024d0d7b21c559592","modified":1545370000303},{"_id":"public/images/pc2.png","hash":"d99f58466e06d20cea1906d1f0ff398c3f7be7d1","modified":1545370000303},{"_id":"public/mr/example/icon.html","hash":"88738de9fcdf62d0eae85c476f30a46442d23e0f","modified":1545370000303},{"_id":"public/css/images/body.jpg","hash":"f3891caba7436c2ae895f3cb4ce09d878008d158","modified":1545373924908},{"_id":"public/thebest/assets/image/02.jpg","hash":"ad20a1a84670e44497382aa25e1a23bff8998f3b","modified":1545370000303},{"_id":"public/thebest/assets/image/05.jpg","hash":"ad20a1a84670e44497382aa25e1a23bff8998f3b","modified":1545370000303},{"_id":"public/thebest/assets/image/2.jpg","hash":"7fee177da5e800e6616baf3122ec1bd8160359e8","modified":1545370000303},{"_id":"public/thebest/assets/image/5.jpg","hash":"3b60c633e8058524fa22f8b12040e2f562cf1e38","modified":1545370000303},{"_id":"public/thebest/assets/lib/web-fonts-with-css/webfonts/fa-brands-400.eot","hash":"f400984dad3c23614b3f736da0561b6f15bd044d","modified":1545370000303},{"_id":"public/thebest/assets/lib/web-fonts-with-css/webfonts/fa-brands-400.ttf","hash":"032dc74f737d6ea76f2af6af8758ae0d034bfaef","modified":1545370000303},{"_id":"public/thebest/assets/lib/web-fonts-with-css/webfonts/fa-solid-900.eot","hash":"d4803ab92367752650a6a883f18f99f2b04a9f2a","modified":1545370000303},{"_id":"public/thebest/assets/lib/web-fonts-with-css/webfonts/fa-solid-900.ttf","hash":"30a79d6bdc0da59d6b4230e5d04b2da4d9610f3d","modified":1545370000303},{"_id":"public/thebest/assets/lib/web-fonts-with-css/webfonts/fa-regular-400.svg","hash":"f451915b66f50ae84565afafe12be4ec63fcc397","modified":1545370000303},{"_id":"public/fancybox/jquery.fancybox.css","hash":"aaa582fb9eb4b7092dc69fcb2d5b1c20cca58ab6","modified":1545370000303},{"_id":"public/js/navigation.js","hash":"1149f4a86285fb1cbf08f3748659368410be6892","modified":1545370000303},{"_id":"public/js/script.js","hash":"dc57599cf47b6a068f6bbc899aad6fda4576b6ae","modified":1545370000303},{"_id":"public/fancybox/helpers/jquery.fancybox-thumbs.css","hash":"4ac329c16a5277592fc12a37cca3d72ca4ec292f","modified":1545370000319},{"_id":"public/fancybox/helpers/jquery.fancybox-buttons.css","hash":"1a9d8e5c22b371fcc69d4dbbb823d9c39f04c0c8","modified":1545370000319},{"_id":"public/fancybox/helpers/jquery.fancybox-buttons.js","hash":"dc3645529a4bf72983a39fa34c1eb9146e082019","modified":1545370000319},{"_id":"public/fancybox/helpers/jquery.fancybox-media.js","hash":"294420f9ff20f4e3584d212b0c262a00a96ecdb3","modified":1545370000319},{"_id":"public/fancybox/helpers/jquery.fancybox-thumbs.js","hash":"47da1ae5401c24b5c17cc18e2730780f5c1a7a0c","modified":1545370000319},{"_id":"public/css/style.css","hash":"0ac1e15954737055f8120b50a6580a1eae5dedc6","modified":1545374976760},{"_id":"public/fancybox/jquery.fancybox.pack.js","hash":"9e0d51ca1dbe66f6c0c7aefd552dc8122e694a6e","modified":1545370000319},{"_id":"public/fancybox/jquery.fancybox.js","hash":"d08b03a42d5c4ba456ef8ba33116fdbb7a9cabed","modified":1545370000319},{"_id":"public/js/jquery-2.0.3.min.js","hash":"fbf9c77d0c4e3c34a485980c1e5316b6212160c8","modified":1545370000319},{"_id":"public/images/aiting3.png","hash":"69532e5153893b5b45ee97b35acad946f142bf3b","modified":1545370000319},{"_id":"public/images/applicationPlatform.png","hash":"3ac7bb753d76078c816c939ff8279cf6abfd9477","modified":1545370000319},{"_id":"public/images/aiting5.png","hash":"269bd3260178829dd3bd9b2004ec3ef7e3d601ca","modified":1545370000319},{"_id":"public/images/chatRoom2.png","hash":"3778f3f4fa6bd736d4ea40b5d44f5fe28e5d4c9b","modified":1545370000319},{"_id":"public/images/homeAndRoom.png","hash":"2d27990fe68125c68d57f581af691589fc13a157","modified":1545370000319},{"_id":"public/css/images/body1.jpg","hash":"a2d70e4fe8330c4854cdefc94c853b50e98e8ef4","modified":1545370000319},{"_id":"public/thebest/assets/image/3.jpg","hash":"4acb9aea6c35db55d82f567f6243e734f6d438a2","modified":1545370000319},{"_id":"public/thebest/assets/image/7.png","hash":"7f4b48aa22c1e1392f0ce621d3f9d605f2cf43ca","modified":1545370000319},{"_id":"public/css/images/body2.jpg","hash":"1cea68ff7dbcd02e2ca2c2923596b8c505183e82","modified":1545370000479},{"_id":"public/mr/src/component/icon/style.css","hash":"e76ab8ac655d8055c303c9a7348cb7d57e2ce8f1","modified":1545370000479},{"_id":"public/game/plane/assets/normalback.mp3","hash":"6f3c8366413d2c8a2731fecfd21850af718e61c9","modified":1545370000495},{"_id":"public/game/plane/assets/playback.mp3","hash":"5e9c6680f6da8fa3660457a3269f98d2ababec91","modified":1545370000495},{"_id":"public/images/aiting1.png","hash":"df3bedace086cd5ef306c9e4ee33bb4536b54f5c","modified":1545370000495},{"_id":"public/images/aiting6.png","hash":"cf1234aa1abad78faa8506653ce6dced75325d73","modified":1545370000495},{"_id":"public/images/faceAndEmoj.png","hash":"7bf7c089338135e1ee590d4e8e311d11d83ad414","modified":1545370000495},{"_id":"public/images/loveFish.png","hash":"ec116844e1ee94f2204800ab7935bc42b90ca78c","modified":1545370000495},{"_id":"public/thebest/assets/image/4.jpg","hash":"4ff1a5b58b1c5d3ca37134a37806b5b8159c1ded","modified":1545370000495},{"_id":"public/thebest/assets/image/6.jpg","hash":"aad5ebbaa5c1fc1acde0f660c804324e3777d2be","modified":1545370000698},{"_id":"public/thebest/assets/lib/web-fonts-with-css/webfonts/fa-solid-900.svg","hash":"45331272b54433e524ccc29b88988ffe565c3a02","modified":1545370000698},{"_id":"public/thebest/assets/image/10.jpg","hash":"339f8337fd3dbc4b66a555db49a7d5bf38d6b3be","modified":1545370000760},{"_id":"public/thebest/assets/lib/web-fonts-with-css/webfonts/fa-brands-400.svg","hash":"a830ca32cd13d38a56c9445a1cde3be69bf9933c","modified":1545370000760},{"_id":"public/thebest/assets/lib/three/three.js","hash":"fd0c9b4b2067a939c2e31b5b056ff40510df5faa","modified":1545370000776},{"_id":"public/game/collect-star/phaser.min.js","hash":"226fd52d2fe3d445c56859b5f623f16ec254cf29","modified":1545370000839},{"_id":"public/game/plane/phaser.min.js","hash":"226fd52d2fe3d445c56859b5f623f16ec254cf29","modified":1545370000839},{"_id":"public/thebest/assets/image/9.jpg","hash":"6f37437fec5abc80760d46ce79def102dde73642","modified":1545370000854},{"_id":"public/thebest/assets/music/01.mp3","hash":"e0b984125537409ae44f4f6b49498f10bf530751","modified":1545370000854},{"_id":"public/thebest/assets/music/04.mp3","hash":"e0b984125537409ae44f4f6b49498f10bf530751","modified":1545370000854},{"_id":"public/thebest/assets/music/03.mp3","hash":"8f9d4642526dac7afeb5708c3bd478ab810990bc","modified":1545370000885},{"_id":"public/thebest/assets/music/06.mp3","hash":"8f9d4642526dac7afeb5708c3bd478ab810990bc","modified":1545370000885},{"_id":"public/thebest/assets/music/02.mp3","hash":"ce8df69cac8596a6dbe16b4abf2c5f28c328ebb3","modified":1545370000885},{"_id":"public/thebest/assets/music/05.mp3","hash":"ce8df69cac8596a6dbe16b4abf2c5f28c328ebb3","modified":1545370000885},{"_id":"public/game/player/bundle.js","hash":"be73884f03ab8cb926ec9876904a018a628aa218","modified":1545370000901},{"_id":"public/game/player/bundle.js.map","hash":"9d7db9c812ce3b70ec3b7d7c8fe4ac83e472cad0","modified":1545370000901},{"_id":"public/thebest/app.bundle.js","hash":"c5295d3ede9d41149bcd942d1e59031680ad0273","modified":1545370000917},{"_id":"public/thebest/app.bundle.js.map","hash":"cc6dedb4a73409b3f57fa4c16c34fa5cdd390d8a","modified":1545370000932},{"_id":"themes/cyanstyle2/source/css/images/e9573f1eb700cf6bf23acd560f4edc9d.jpg","hash":"f5333ae1da53609c712e14dbdc37e7c81b8de969","modified":1545372896211},{"_id":"themes/cyanstyle2/source/css/images/body3.jpg","hash":"92743ba769bb7a7de8e93a418ed36c89e60bc639","modified":1545368362018},{"_id":"public/css/images/body3.jpg","hash":"92743ba769bb7a7de8e93a418ed36c89e60bc639","modified":1545373924906},{"_id":"public/css/images/e9573f1eb700cf6bf23acd560f4edc9d.jpg","hash":"f5333ae1da53609c712e14dbdc37e7c81b8de969","modified":1545373924906}],"Category":[],"Data":[],"Page":[],"Post":[{"title":"Git使用SSH提交代码","date":"2016-12-14T13:28:09.000Z","_content":"\n\n### 使用SSH连接GitHub\n\n如果经常提交代码，每次都要输入密码就很麻烦，使用SSH连接后，就不用输入密码了。\n<!--more-->\n\n- 配置全局用户名和邮箱：\n\t- `git config --global user.name \"renhongl\"`\n\t- `git config --global user.email \"1075220132@qq.com\"`\n- 先检查本地有没有ssh key设置，查看~/这个文件夹下有没有.ssh文件夹，有的话就删除掉。\n- 在~路径下生成新的ssh key:\n\t- `ssh-keygen -t rsa -C \"1075220132@qq.com\"`\n- 三次回车后就生成了ssh key，在~/.ssh/文件夹下面，复制id_rsa.pub这个文件里所有的内容，粘贴到GitHub网站settings/keys里面，保存。\n- 测试ssh key是否配置成功：\n\t- `$ ssh -T git@github.com`\n- 然后输入yes,如果出现 \"Hi xxx! You've successfully authenticated, but GitHub does not provide shell access.\"就表示配置好了。\n- 配置完成后，在Github上克隆项目时，使用SSH方式，远程地址就设置成SSH方式了，push的时候就不用输入密码了。","source":"_posts/Git使用SSH提交代码.md","raw":"---\ntitle: Git使用SSH提交代码\ndate: 2016-12-14 21:28:09\ntags:\n    - Git\n---\n\n\n### 使用SSH连接GitHub\n\n如果经常提交代码，每次都要输入密码就很麻烦，使用SSH连接后，就不用输入密码了。\n<!--more-->\n\n- 配置全局用户名和邮箱：\n\t- `git config --global user.name \"renhongl\"`\n\t- `git config --global user.email \"1075220132@qq.com\"`\n- 先检查本地有没有ssh key设置，查看~/这个文件夹下有没有.ssh文件夹，有的话就删除掉。\n- 在~路径下生成新的ssh key:\n\t- `ssh-keygen -t rsa -C \"1075220132@qq.com\"`\n- 三次回车后就生成了ssh key，在~/.ssh/文件夹下面，复制id_rsa.pub这个文件里所有的内容，粘贴到GitHub网站settings/keys里面，保存。\n- 测试ssh key是否配置成功：\n\t- `$ ssh -T git@github.com`\n- 然后输入yes,如果出现 \"Hi xxx! You've successfully authenticated, but GitHub does not provide shell access.\"就表示配置好了。\n- 配置完成后，在Github上克隆项目时，使用SSH方式，远程地址就设置成SSH方式了，push的时候就不用输入密码了。","slug":"Git使用SSH提交代码","published":1,"updated":"2018-12-21T04:59:19.216Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjpxle9k20000h8ob24bimxaw","content":"<h3 id=\"使用SSH连接GitHub\"><a href=\"#使用SSH连接GitHub\" class=\"headerlink\" title=\"使用SSH连接GitHub\"></a>使用SSH连接GitHub</h3><p>如果经常提交代码，每次都要输入密码就很麻烦，使用SSH连接后，就不用输入密码了。<br><a id=\"more\"></a></p>\n<ul>\n<li>配置全局用户名和邮箱：<ul>\n<li><code>git config --global user.name &quot;renhongl&quot;</code></li>\n<li><code>git config --global user.email &quot;1075220132@qq.com&quot;</code></li>\n</ul>\n</li>\n<li>先检查本地有没有ssh key设置，查看~/这个文件夹下有没有.ssh文件夹，有的话就删除掉。</li>\n<li>在~路径下生成新的ssh key:<ul>\n<li><code>ssh-keygen -t rsa -C &quot;1075220132@qq.com&quot;</code></li>\n</ul>\n</li>\n<li>三次回车后就生成了ssh key，在~/.ssh/文件夹下面，复制id_rsa.pub这个文件里所有的内容，粘贴到GitHub网站settings/keys里面，保存。</li>\n<li>测试ssh key是否配置成功：<ul>\n<li><code>$ ssh -T git@github.com</code></li>\n</ul>\n</li>\n<li>然后输入yes,如果出现 “Hi xxx! You’ve successfully authenticated, but GitHub does not provide shell access.”就表示配置好了。</li>\n<li>配置完成后，在Github上克隆项目时，使用SSH方式，远程地址就设置成SSH方式了，push的时候就不用输入密码了。</li>\n</ul>\n","site":{"data":{}},"excerpt":"<h3 id=\"使用SSH连接GitHub\"><a href=\"#使用SSH连接GitHub\" class=\"headerlink\" title=\"使用SSH连接GitHub\"></a>使用SSH连接GitHub</h3><p>如果经常提交代码，每次都要输入密码就很麻烦，使用SSH连接后，就不用输入密码了。<br>","more":"</p>\n<ul>\n<li>配置全局用户名和邮箱：<ul>\n<li><code>git config --global user.name &quot;renhongl&quot;</code></li>\n<li><code>git config --global user.email &quot;1075220132@qq.com&quot;</code></li>\n</ul>\n</li>\n<li>先检查本地有没有ssh key设置，查看~/这个文件夹下有没有.ssh文件夹，有的话就删除掉。</li>\n<li>在~路径下生成新的ssh key:<ul>\n<li><code>ssh-keygen -t rsa -C &quot;1075220132@qq.com&quot;</code></li>\n</ul>\n</li>\n<li>三次回车后就生成了ssh key，在~/.ssh/文件夹下面，复制id_rsa.pub这个文件里所有的内容，粘贴到GitHub网站settings/keys里面，保存。</li>\n<li>测试ssh key是否配置成功：<ul>\n<li><code>$ ssh -T git@github.com</code></li>\n</ul>\n</li>\n<li>然后输入yes,如果出现 “Hi xxx! You’ve successfully authenticated, but GitHub does not provide shell access.”就表示配置好了。</li>\n<li>配置完成后，在Github上克隆项目时，使用SSH方式，远程地址就设置成SSH方式了，push的时候就不用输入密码了。</li>\n</ul>"},{"title":"Iterator和for...of","date":"2017-06-16T12:29:38.000Z","_content":"\n\n\n## Iterator 和 for...of循环\n\n### Iterator（遍历器）\n\n为各种不同的数据结构提供统一的访问机制。\n\n任何数据结构只要部署了Iterator接口，就可以完成遍历操作。\n\n遍历操作：依次处理该数据结构的所有成员。\n\n<!--more-->\n\n\n### 遍历过程\n\n1. 创建一个指针对象，指向当前数据结构的起始位置。\n\n2. 第一次调用指针对象的next方法，可以将指针指向数据结构的第一个成员。\n\n3. 第二次调用指针对象的next方法，可以将指针指向数据结构的第二个成员。\n\n4. 不断调用指针对象的next方法，直到它指向数据结构的结束位置。\n\n   ​\n\n### for...of循环\n\n使用for...of循环遍历某种数据结构时，该循环会自动寻找这种数据结构默认的遍历器接口。\n\n默认的遍历器接口部署在数据结构的Symbol.iterator属性上。\n\n即只要一个数据结构具有Symbol.iterator属性，就认为是可遍历的(iterable)。\n\nSymbol.iterator属性是一个函数，执行这个函数会返回一个遍历器。\n\n\n\n### 原生具备Iterator接口的数据结构\n\n* Array\n* Map\n* Set\n* String\n* TypedArray\n* arguments\n* NodeList\n\n\n\n### 除了for...of，其他会调用默认遍历器接口的情况\n\n1. 结构赋值\n2. 扩展运算符\n3. yield*\n4. Array.from()\n5. Map(), Set(), WeakMap(), WeakSet()\n6. Promise.all()\n7. Promise.race()\n\n\n\n### Iterator接口最简单实现\n\n为Symbol.iterator创建一个Generator函数。","source":"_posts/Iterator和for...of.md","raw":"\n---\ntitle: Iterator和for...of\ndate: 2017-06-16 20:29:38\ntags: ES6\n---\n\n\n\n## Iterator 和 for...of循环\n\n### Iterator（遍历器）\n\n为各种不同的数据结构提供统一的访问机制。\n\n任何数据结构只要部署了Iterator接口，就可以完成遍历操作。\n\n遍历操作：依次处理该数据结构的所有成员。\n\n<!--more-->\n\n\n### 遍历过程\n\n1. 创建一个指针对象，指向当前数据结构的起始位置。\n\n2. 第一次调用指针对象的next方法，可以将指针指向数据结构的第一个成员。\n\n3. 第二次调用指针对象的next方法，可以将指针指向数据结构的第二个成员。\n\n4. 不断调用指针对象的next方法，直到它指向数据结构的结束位置。\n\n   ​\n\n### for...of循环\n\n使用for...of循环遍历某种数据结构时，该循环会自动寻找这种数据结构默认的遍历器接口。\n\n默认的遍历器接口部署在数据结构的Symbol.iterator属性上。\n\n即只要一个数据结构具有Symbol.iterator属性，就认为是可遍历的(iterable)。\n\nSymbol.iterator属性是一个函数，执行这个函数会返回一个遍历器。\n\n\n\n### 原生具备Iterator接口的数据结构\n\n* Array\n* Map\n* Set\n* String\n* TypedArray\n* arguments\n* NodeList\n\n\n\n### 除了for...of，其他会调用默认遍历器接口的情况\n\n1. 结构赋值\n2. 扩展运算符\n3. yield*\n4. Array.from()\n5. Map(), Set(), WeakMap(), WeakSet()\n6. Promise.all()\n7. Promise.race()\n\n\n\n### Iterator接口最简单实现\n\n为Symbol.iterator创建一个Generator函数。","slug":"Iterator和for...of","published":1,"updated":"2018-12-21T04:59:19.232Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjpxle9k20001h8obur9nd58h","content":"<h2 id=\"Iterator-和-for…of循环\"><a href=\"#Iterator-和-for…of循环\" class=\"headerlink\" title=\"Iterator 和 for…of循环\"></a>Iterator 和 for…of循环</h2><h3 id=\"Iterator（遍历器）\"><a href=\"#Iterator（遍历器）\" class=\"headerlink\" title=\"Iterator（遍历器）\"></a>Iterator（遍历器）</h3><p>为各种不同的数据结构提供统一的访问机制。</p>\n<p>任何数据结构只要部署了Iterator接口，就可以完成遍历操作。</p>\n<p>遍历操作：依次处理该数据结构的所有成员。</p>\n<a id=\"more\"></a>\n<h3 id=\"遍历过程\"><a href=\"#遍历过程\" class=\"headerlink\" title=\"遍历过程\"></a>遍历过程</h3><ol>\n<li><p>创建一个指针对象，指向当前数据结构的起始位置。</p>\n</li>\n<li><p>第一次调用指针对象的next方法，可以将指针指向数据结构的第一个成员。</p>\n</li>\n<li><p>第二次调用指针对象的next方法，可以将指针指向数据结构的第二个成员。</p>\n</li>\n<li><p>不断调用指针对象的next方法，直到它指向数据结构的结束位置。</p>\n<p>​</p>\n</li>\n</ol>\n<h3 id=\"for…of循环\"><a href=\"#for…of循环\" class=\"headerlink\" title=\"for…of循环\"></a>for…of循环</h3><p>使用for…of循环遍历某种数据结构时，该循环会自动寻找这种数据结构默认的遍历器接口。</p>\n<p>默认的遍历器接口部署在数据结构的Symbol.iterator属性上。</p>\n<p>即只要一个数据结构具有Symbol.iterator属性，就认为是可遍历的(iterable)。</p>\n<p>Symbol.iterator属性是一个函数，执行这个函数会返回一个遍历器。</p>\n<h3 id=\"原生具备Iterator接口的数据结构\"><a href=\"#原生具备Iterator接口的数据结构\" class=\"headerlink\" title=\"原生具备Iterator接口的数据结构\"></a>原生具备Iterator接口的数据结构</h3><ul>\n<li>Array</li>\n<li>Map</li>\n<li>Set</li>\n<li>String</li>\n<li>TypedArray</li>\n<li>arguments</li>\n<li>NodeList</li>\n</ul>\n<h3 id=\"除了for…of，其他会调用默认遍历器接口的情况\"><a href=\"#除了for…of，其他会调用默认遍历器接口的情况\" class=\"headerlink\" title=\"除了for…of，其他会调用默认遍历器接口的情况\"></a>除了for…of，其他会调用默认遍历器接口的情况</h3><ol>\n<li>结构赋值</li>\n<li>扩展运算符</li>\n<li>yield*</li>\n<li>Array.from()</li>\n<li>Map(), Set(), WeakMap(), WeakSet()</li>\n<li>Promise.all()</li>\n<li>Promise.race()</li>\n</ol>\n<h3 id=\"Iterator接口最简单实现\"><a href=\"#Iterator接口最简单实现\" class=\"headerlink\" title=\"Iterator接口最简单实现\"></a>Iterator接口最简单实现</h3><p>为Symbol.iterator创建一个Generator函数。</p>\n","site":{"data":{}},"excerpt":"<h2 id=\"Iterator-和-for…of循环\"><a href=\"#Iterator-和-for…of循环\" class=\"headerlink\" title=\"Iterator 和 for…of循环\"></a>Iterator 和 for…of循环</h2><h3 id=\"Iterator（遍历器）\"><a href=\"#Iterator（遍历器）\" class=\"headerlink\" title=\"Iterator（遍历器）\"></a>Iterator（遍历器）</h3><p>为各种不同的数据结构提供统一的访问机制。</p>\n<p>任何数据结构只要部署了Iterator接口，就可以完成遍历操作。</p>\n<p>遍历操作：依次处理该数据结构的所有成员。</p>","more":"<h3 id=\"遍历过程\"><a href=\"#遍历过程\" class=\"headerlink\" title=\"遍历过程\"></a>遍历过程</h3><ol>\n<li><p>创建一个指针对象，指向当前数据结构的起始位置。</p>\n</li>\n<li><p>第一次调用指针对象的next方法，可以将指针指向数据结构的第一个成员。</p>\n</li>\n<li><p>第二次调用指针对象的next方法，可以将指针指向数据结构的第二个成员。</p>\n</li>\n<li><p>不断调用指针对象的next方法，直到它指向数据结构的结束位置。</p>\n<p>​</p>\n</li>\n</ol>\n<h3 id=\"for…of循环\"><a href=\"#for…of循环\" class=\"headerlink\" title=\"for…of循环\"></a>for…of循环</h3><p>使用for…of循环遍历某种数据结构时，该循环会自动寻找这种数据结构默认的遍历器接口。</p>\n<p>默认的遍历器接口部署在数据结构的Symbol.iterator属性上。</p>\n<p>即只要一个数据结构具有Symbol.iterator属性，就认为是可遍历的(iterable)。</p>\n<p>Symbol.iterator属性是一个函数，执行这个函数会返回一个遍历器。</p>\n<h3 id=\"原生具备Iterator接口的数据结构\"><a href=\"#原生具备Iterator接口的数据结构\" class=\"headerlink\" title=\"原生具备Iterator接口的数据结构\"></a>原生具备Iterator接口的数据结构</h3><ul>\n<li>Array</li>\n<li>Map</li>\n<li>Set</li>\n<li>String</li>\n<li>TypedArray</li>\n<li>arguments</li>\n<li>NodeList</li>\n</ul>\n<h3 id=\"除了for…of，其他会调用默认遍历器接口的情况\"><a href=\"#除了for…of，其他会调用默认遍历器接口的情况\" class=\"headerlink\" title=\"除了for…of，其他会调用默认遍历器接口的情况\"></a>除了for…of，其他会调用默认遍历器接口的情况</h3><ol>\n<li>结构赋值</li>\n<li>扩展运算符</li>\n<li>yield*</li>\n<li>Array.from()</li>\n<li>Map(), Set(), WeakMap(), WeakSet()</li>\n<li>Promise.all()</li>\n<li>Promise.race()</li>\n</ol>\n<h3 id=\"Iterator接口最简单实现\"><a href=\"#Iterator接口最简单实现\" class=\"headerlink\" title=\"Iterator接口最简单实现\"></a>Iterator接口最简单实现</h3><p>为Symbol.iterator创建一个Generator函数。</p>"},{"title":"Class","date":"2017-06-14T11:16:52.000Z","_content":"\n\n## Class\n\nJavascript没有类的概念，要生成一个实例对象，是通过构造函数。\n\n<!--more-->\n\n### 传统写法：\n\n```\nfunction Person(name, age) {\n  this.name = name;\n  this.age = age;\n}\n\nPerson.prototype.toString = function() {\n  return '(' + this.name + ', ' + this.age + ')';\n}\n\nPerson.prototype.getName = function() {\n  return this.name;\n}\n\nlet p = new Person('lrh', 18);\np.toString();//\"(lrh, 18)\"\np.getName();//\"lrh\"\n```\n\n### 使用ES6的Class语法:\n\n```\nclass Person{\n  constructor(name, age) {\n    this.name = name;\n    this.age = age;\n  }\n  \n  toString() {\n    return '(' + this.name + ', ' + this.age + ')';\n  }\n  \n  getName() {\n    return this.name;\n  }\n}\n\nlet p = new Person('lrh', 19);\np.toString();//\"(lrh, 18)\"\np.getName();//\"lrh\"\n```\n\n#### 私有方法:\n\n1. 使用**下划线\" _ \"**区别方法名，但是外部还是可以调用这个方法。\n  ```\n   class Person{\n    constructor(name, age) {\n      this.name = name;\n      this.age = age;\n    }\n\n    _getAge() {\n      return this.age;\n    }\n\n    getInfor() {\n      return this.name + ', ' + this._getAge();\n    }\n  }\n  let p = new Person('lrh', 18);\n  p.getInfor();//\"lrh, 18\"\n  ```\n\n2. 将私有方法移出类，因为在类中方法都是对外可见的。\n\n   ```\n   class Person{\n     constructor(name, age) {\n       this.name = name;\n       this.age = age;\n     }\n     \n     getInfor() {\n       return this.name + ', ' + getAge.call(this);\n     }\n   }\n\n   function getAge() {\n     return this.age;\n   }\n\n   let p = new Person('lrh', 19);\n   p.getInfor();\n   p.getAge();//TypeError: p.getAge is not a function\n   ```\n\n3. 利用Symbol的唯一性，设置私有变量。\n\n   ```\n   const getAge = Symbol();\n\n   class Person{\n     constructor(name, age) {\n       this.name = name;\n       this.age = age;\n     }\n     \n     [getAge]() {\n       return this.age;\n     }\n     \n     getInfor() {\n       return this.name + ', ' + this[getAge]();\n     }\n   }\n\n   let p = new Person('lrh', 18);\n   p.getInfor();\n   ```\n\n   ​\n\n#### 私有属性\n\n1. 使用#表示，但是还只是提案，babel都不支持。\n\n   ```\n   class Person{\n     #type = 'Student';\n     constructor(name, age) {\n       this.name = name;\n       this.age = age;\n     }\n     \n     getInfor() {\n       return this.name + ', ' + this.age + ', ' + this.#type; \n     }\n   }\n\n   let p = new Person('lrh', 18);\n   p.getInfor();\n   ```\n\n#### 取值函数（getter）和存值函数（setter）\n\n1. 拦截了该属性的存取行为。\n\n   ```;\n   //getter，setter对应的属性应该是一个_开头的私有属性，只有使用getter，setter的方式可以读取和修改\n   class Person{\n     constructor(name, age, gender) {\n       this.name = name;\n       this.age = age;\n       this._gender = gender;\n     }\n     \n     get gender() {\n       console.log('getter');\n       return this._gender;\n     }\n     \n     set gender(value) {\n       console.log('setter');\n       this._gender = value;\n     }\n   }\n\n   let p = new Person('lrh', 18, 'male');\n   p.gender;\n   p.gender = 'female';\n   p.gender;\n   ```\n\n   ​\n\n#### 静态方法\n\n1. 在方法前加上static关键字，this指向类而不是实例。只能通过类调用。\n\n   ```\n   class Person{\n     static getRandom() {\n     \treturn Math.random();\n     }\n   \t\n     constructor(name, age) {\n       this.name = name;\n       this.age = age;\n     }\n   }\n\n   Person.getRandom();//0.36116181991876695\n   ```\n\n#### 静态属性与实例属性\n\n1. 是ES7的提案，需要安装ES7的转码：`npm install --save-dev babel-preset-stage-2`\n\n   ```\n   //实例属性\n   class Person{\n     type = 'Student';\n     constructor() {\n       console.log(this.type);\n     }\n   }\n   new Person();//Student\n\n   //静态属性\n   class Person{\n     static type = 'Student';\n     constructor() {\n       console.log(Person.type);\n     }\n   }\n   new Person();//Student\n   ```\n\n   ​","source":"_posts/Class.md","raw":"---\ntitle: Class\ndate: 2017-06-14 19:16:52\ntags: ES6\n---\n\n\n## Class\n\nJavascript没有类的概念，要生成一个实例对象，是通过构造函数。\n\n<!--more-->\n\n### 传统写法：\n\n```\nfunction Person(name, age) {\n  this.name = name;\n  this.age = age;\n}\n\nPerson.prototype.toString = function() {\n  return '(' + this.name + ', ' + this.age + ')';\n}\n\nPerson.prototype.getName = function() {\n  return this.name;\n}\n\nlet p = new Person('lrh', 18);\np.toString();//\"(lrh, 18)\"\np.getName();//\"lrh\"\n```\n\n### 使用ES6的Class语法:\n\n```\nclass Person{\n  constructor(name, age) {\n    this.name = name;\n    this.age = age;\n  }\n  \n  toString() {\n    return '(' + this.name + ', ' + this.age + ')';\n  }\n  \n  getName() {\n    return this.name;\n  }\n}\n\nlet p = new Person('lrh', 19);\np.toString();//\"(lrh, 18)\"\np.getName();//\"lrh\"\n```\n\n#### 私有方法:\n\n1. 使用**下划线\" _ \"**区别方法名，但是外部还是可以调用这个方法。\n  ```\n   class Person{\n    constructor(name, age) {\n      this.name = name;\n      this.age = age;\n    }\n\n    _getAge() {\n      return this.age;\n    }\n\n    getInfor() {\n      return this.name + ', ' + this._getAge();\n    }\n  }\n  let p = new Person('lrh', 18);\n  p.getInfor();//\"lrh, 18\"\n  ```\n\n2. 将私有方法移出类，因为在类中方法都是对外可见的。\n\n   ```\n   class Person{\n     constructor(name, age) {\n       this.name = name;\n       this.age = age;\n     }\n     \n     getInfor() {\n       return this.name + ', ' + getAge.call(this);\n     }\n   }\n\n   function getAge() {\n     return this.age;\n   }\n\n   let p = new Person('lrh', 19);\n   p.getInfor();\n   p.getAge();//TypeError: p.getAge is not a function\n   ```\n\n3. 利用Symbol的唯一性，设置私有变量。\n\n   ```\n   const getAge = Symbol();\n\n   class Person{\n     constructor(name, age) {\n       this.name = name;\n       this.age = age;\n     }\n     \n     [getAge]() {\n       return this.age;\n     }\n     \n     getInfor() {\n       return this.name + ', ' + this[getAge]();\n     }\n   }\n\n   let p = new Person('lrh', 18);\n   p.getInfor();\n   ```\n\n   ​\n\n#### 私有属性\n\n1. 使用#表示，但是还只是提案，babel都不支持。\n\n   ```\n   class Person{\n     #type = 'Student';\n     constructor(name, age) {\n       this.name = name;\n       this.age = age;\n     }\n     \n     getInfor() {\n       return this.name + ', ' + this.age + ', ' + this.#type; \n     }\n   }\n\n   let p = new Person('lrh', 18);\n   p.getInfor();\n   ```\n\n#### 取值函数（getter）和存值函数（setter）\n\n1. 拦截了该属性的存取行为。\n\n   ```;\n   //getter，setter对应的属性应该是一个_开头的私有属性，只有使用getter，setter的方式可以读取和修改\n   class Person{\n     constructor(name, age, gender) {\n       this.name = name;\n       this.age = age;\n       this._gender = gender;\n     }\n     \n     get gender() {\n       console.log('getter');\n       return this._gender;\n     }\n     \n     set gender(value) {\n       console.log('setter');\n       this._gender = value;\n     }\n   }\n\n   let p = new Person('lrh', 18, 'male');\n   p.gender;\n   p.gender = 'female';\n   p.gender;\n   ```\n\n   ​\n\n#### 静态方法\n\n1. 在方法前加上static关键字，this指向类而不是实例。只能通过类调用。\n\n   ```\n   class Person{\n     static getRandom() {\n     \treturn Math.random();\n     }\n   \t\n     constructor(name, age) {\n       this.name = name;\n       this.age = age;\n     }\n   }\n\n   Person.getRandom();//0.36116181991876695\n   ```\n\n#### 静态属性与实例属性\n\n1. 是ES7的提案，需要安装ES7的转码：`npm install --save-dev babel-preset-stage-2`\n\n   ```\n   //实例属性\n   class Person{\n     type = 'Student';\n     constructor() {\n       console.log(this.type);\n     }\n   }\n   new Person();//Student\n\n   //静态属性\n   class Person{\n     static type = 'Student';\n     constructor() {\n       console.log(Person.type);\n     }\n   }\n   new Person();//Student\n   ```\n\n   ​","slug":"Class","published":1,"updated":"2018-12-21T04:59:19.216Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjpxle9k20003h8ob853l45hx","content":"<h2 id=\"Class\"><a href=\"#Class\" class=\"headerlink\" title=\"Class\"></a>Class</h2><p>Javascript没有类的概念，要生成一个实例对象，是通过构造函数。</p>\n<a id=\"more\"></a>\n<h3 id=\"传统写法：\"><a href=\"#传统写法：\" class=\"headerlink\" title=\"传统写法：\"></a>传统写法：</h3><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">Person</span>(<span class=\"params\">name, age</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">this</span>.name = name;</span><br><span class=\"line\">  <span class=\"keyword\">this</span>.age = age;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">Person.prototype.toString = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> <span class=\"string\">'('</span> + <span class=\"keyword\">this</span>.name + <span class=\"string\">', '</span> + <span class=\"keyword\">this</span>.age + <span class=\"string\">')'</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">Person.prototype.getName = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> <span class=\"keyword\">this</span>.name;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">let</span> p = <span class=\"keyword\">new</span> Person(<span class=\"string\">'lrh'</span>, <span class=\"number\">18</span>);</span><br><span class=\"line\">p.toString();<span class=\"comment\">//\"(lrh, 18)\"</span></span><br><span class=\"line\">p.getName();<span class=\"comment\">//\"lrh\"</span></span><br></pre></td></tr></table></figure>\n<h3 id=\"使用ES6的Class语法\"><a href=\"#使用ES6的Class语法\" class=\"headerlink\" title=\"使用ES6的Class语法:\"></a>使用ES6的Class语法:</h3><figure class=\"highlight kotlin\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Person</span></span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">constructor</span>(name, age) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">this</span>.name = name;</span><br><span class=\"line\">    <span class=\"keyword\">this</span>.age = age;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  </span><br><span class=\"line\">  toString() &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"string\">'('</span> + <span class=\"keyword\">this</span>.name + <span class=\"string\">', '</span> + <span class=\"keyword\">this</span>.age + <span class=\"string\">')'</span>;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  </span><br><span class=\"line\">  getName() &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"keyword\">this</span>.name;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">let p = new Person(<span class=\"string\">'lrh'</span>, <span class=\"number\">19</span>);</span><br><span class=\"line\">p.toString();<span class=\"comment\">//\"(lrh, 18)\"</span></span><br><span class=\"line\">p.getName();<span class=\"comment\">//\"lrh\"</span></span><br></pre></td></tr></table></figure>\n<h4 id=\"私有方法\"><a href=\"#私有方法\" class=\"headerlink\" title=\"私有方法:\"></a>私有方法:</h4><ol>\n<li><p>使用<strong>下划线” _ “</strong>区别方法名，但是外部还是可以调用这个方法。</p>\n<figure class=\"highlight kotlin\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Person</span></span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">constructor</span>(name, age) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">this</span>.name = name;</span><br><span class=\"line\">    <span class=\"keyword\">this</span>.age = age;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  _getAge() &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"keyword\">this</span>.age;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  getInfor() &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"keyword\">this</span>.name + <span class=\"string\">', '</span> + <span class=\"keyword\">this</span>._getAge();</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">let p = new Person(<span class=\"string\">'lrh'</span>, <span class=\"number\">18</span>);</span><br><span class=\"line\">p.getInfor();<span class=\"comment\">//\"lrh, 18\"</span></span><br></pre></td></tr></table></figure>\n</li>\n<li><p>将私有方法移出类，因为在类中方法都是对外可见的。</p>\n<figure class=\"highlight kotlin\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Person</span></span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">constructor</span>(name, age) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">this</span>.name = name;</span><br><span class=\"line\">    <span class=\"keyword\">this</span>.age = age;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  </span><br><span class=\"line\">  getInfor() &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"keyword\">this</span>.name + <span class=\"string\">', '</span> + getAge.call(<span class=\"keyword\">this</span>);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">function getAge() &#123;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> <span class=\"keyword\">this</span>.age;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">let p = new Person(<span class=\"string\">'lrh'</span>, <span class=\"number\">19</span>);</span><br><span class=\"line\">p.getInfor();</span><br><span class=\"line\">p.getAge();<span class=\"comment\">//TypeError: p.getAge is not a function</span></span><br></pre></td></tr></table></figure>\n</li>\n<li><p>利用Symbol的唯一性，设置私有变量。</p>\n<figure class=\"highlight kotlin\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> getAge = Symbol();</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Person</span></span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">constructor</span>(name, age) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">this</span>.name = name;</span><br><span class=\"line\">    <span class=\"keyword\">this</span>.age = age;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  </span><br><span class=\"line\">  [getAge]() &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"keyword\">this</span>.age;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  </span><br><span class=\"line\">  getInfor() &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"keyword\">this</span>.name + <span class=\"string\">', '</span> + <span class=\"keyword\">this</span>[getAge]();</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">let p = new Person(<span class=\"string\">'lrh'</span>, <span class=\"number\">18</span>);</span><br><span class=\"line\">p.getInfor();</span><br></pre></td></tr></table></figure>\n<p>​</p>\n</li>\n</ol>\n<h4 id=\"私有属性\"><a href=\"#私有属性\" class=\"headerlink\" title=\"私有属性\"></a>私有属性</h4><ol>\n<li><p>使用#表示，但是还只是提案，babel都不支持。</p>\n<figure class=\"highlight kotlin\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Person</span></span>&#123;</span><br><span class=\"line\">  #type = <span class=\"string\">'Student'</span>;</span><br><span class=\"line\">  <span class=\"keyword\">constructor</span>(name, age) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">this</span>.name = name;</span><br><span class=\"line\">    <span class=\"keyword\">this</span>.age = age;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  </span><br><span class=\"line\">  getInfor() &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"keyword\">this</span>.name + <span class=\"string\">', '</span> + <span class=\"keyword\">this</span>.age + <span class=\"string\">', '</span> + <span class=\"keyword\">this</span>.#type; </span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">let p = new Person(<span class=\"string\">'lrh'</span>, <span class=\"number\">18</span>);</span><br><span class=\"line\">p.getInfor();</span><br></pre></td></tr></table></figure>\n</li>\n</ol>\n<h4 id=\"取值函数（getter）和存值函数（setter）\"><a href=\"#取值函数（getter）和存值函数（setter）\" class=\"headerlink\" title=\"取值函数（getter）和存值函数（setter）\"></a>取值函数（getter）和存值函数（setter）</h4><ol>\n<li><p>拦截了该属性的存取行为。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">//getter，setter对应的属性应该是一个_开头的私有属性，只有使用getter，setter的方式可以读取和修改</span><br><span class=\"line\">class Person&#123;</span><br><span class=\"line\">  constructor(name, age, gender) &#123;</span><br><span class=\"line\">    this.name = name;</span><br><span class=\"line\">    this.age = age;</span><br><span class=\"line\">    this._gender = gender;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  </span><br><span class=\"line\">  get gender() &#123;</span><br><span class=\"line\">    console.log(&apos;getter&apos;);</span><br><span class=\"line\">    return this._gender;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  </span><br><span class=\"line\">  set gender(value) &#123;</span><br><span class=\"line\">    console.log(&apos;setter&apos;);</span><br><span class=\"line\">    this._gender = value;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">let p = new Person(&apos;lrh&apos;, 18, &apos;male&apos;);</span><br><span class=\"line\">p.gender;</span><br><span class=\"line\">p.gender = &apos;female&apos;;</span><br><span class=\"line\">p.gender;</span><br></pre></td></tr></table></figure>\n<p>​</p>\n</li>\n</ol>\n<h4 id=\"静态方法\"><a href=\"#静态方法\" class=\"headerlink\" title=\"静态方法\"></a>静态方法</h4><ol>\n<li><p>在方法前加上static关键字，this指向类而不是实例。只能通过类调用。</p>\n<figure class=\"highlight delphi\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">class</span> Person<span class=\"comment\">&#123;</span></span><br><span class=\"line\"><span class=\"comment\">  static getRandom() &#123;</span></span><br><span class=\"line\"><span class=\"comment\">  \treturn Math.random();</span></span><br><span class=\"line\"><span class=\"comment\">  &#125;</span></span><br><span class=\"line\">\t</span><br><span class=\"line\">  <span class=\"function\"><span class=\"keyword\">constructor</span><span class=\"params\">(<span class=\"keyword\">name</span>, age)</span> <span class=\"comment\">&#123;</span></span></span><br><span class=\"line\"><span class=\"function\"><span class=\"comment\">    this.name = name;</span></span></span><br><span class=\"line\"><span class=\"function\"><span class=\"comment\">    this.age = age;</span></span></span><br><span class=\"line\"><span class=\"function\"><span class=\"comment\">  &#125;</span></span></span><br><span class=\"line\"><span class=\"function\">&#125;</span></span><br><span class=\"line\"><span class=\"function\"></span></span><br><span class=\"line\"><span class=\"function\"><span class=\"title\">Person</span>.<span class=\"title\">getRandom</span><span class=\"params\">()</span>;</span><span class=\"comment\">//0.36116181991876695</span></span><br></pre></td></tr></table></figure>\n</li>\n</ol>\n<h4 id=\"静态属性与实例属性\"><a href=\"#静态属性与实例属性\" class=\"headerlink\" title=\"静态属性与实例属性\"></a>静态属性与实例属性</h4><ol>\n<li><p>是ES7的提案，需要安装ES7的转码：<code>npm install --save-dev babel-preset-stage-2</code></p>\n<figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//实例属性</span></span><br><span class=\"line\"><span class=\"keyword\">class</span> Person&#123;</span><br><span class=\"line\">  <span class=\"keyword\">type</span> = <span class=\"string\">'Student'</span>;</span><br><span class=\"line\">  <span class=\"keyword\">constructor</span>(<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"keyword\">this</span>.type);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">new</span> Person();<span class=\"comment\">//Student</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//静态属性</span></span><br><span class=\"line\"><span class=\"keyword\">class</span> Person&#123;</span><br><span class=\"line\">  <span class=\"keyword\">static</span> <span class=\"keyword\">type</span> = <span class=\"string\">'Student'</span>;</span><br><span class=\"line\">  <span class=\"keyword\">constructor</span>(<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(Person.type);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">new</span> Person();<span class=\"comment\">//Student</span></span><br></pre></td></tr></table></figure>\n<p>​</p>\n</li>\n</ol>\n","site":{"data":{}},"excerpt":"<h2 id=\"Class\"><a href=\"#Class\" class=\"headerlink\" title=\"Class\"></a>Class</h2><p>Javascript没有类的概念，要生成一个实例对象，是通过构造函数。</p>","more":"<h3 id=\"传统写法：\"><a href=\"#传统写法：\" class=\"headerlink\" title=\"传统写法：\"></a>传统写法：</h3><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">Person</span>(<span class=\"params\">name, age</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">this</span>.name = name;</span><br><span class=\"line\">  <span class=\"keyword\">this</span>.age = age;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">Person.prototype.toString = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> <span class=\"string\">'('</span> + <span class=\"keyword\">this</span>.name + <span class=\"string\">', '</span> + <span class=\"keyword\">this</span>.age + <span class=\"string\">')'</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">Person.prototype.getName = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> <span class=\"keyword\">this</span>.name;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">let</span> p = <span class=\"keyword\">new</span> Person(<span class=\"string\">'lrh'</span>, <span class=\"number\">18</span>);</span><br><span class=\"line\">p.toString();<span class=\"comment\">//\"(lrh, 18)\"</span></span><br><span class=\"line\">p.getName();<span class=\"comment\">//\"lrh\"</span></span><br></pre></td></tr></table></figure>\n<h3 id=\"使用ES6的Class语法\"><a href=\"#使用ES6的Class语法\" class=\"headerlink\" title=\"使用ES6的Class语法:\"></a>使用ES6的Class语法:</h3><figure class=\"highlight kotlin\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Person</span></span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">constructor</span>(name, age) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">this</span>.name = name;</span><br><span class=\"line\">    <span class=\"keyword\">this</span>.age = age;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  </span><br><span class=\"line\">  toString() &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"string\">'('</span> + <span class=\"keyword\">this</span>.name + <span class=\"string\">', '</span> + <span class=\"keyword\">this</span>.age + <span class=\"string\">')'</span>;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  </span><br><span class=\"line\">  getName() &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"keyword\">this</span>.name;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">let p = new Person(<span class=\"string\">'lrh'</span>, <span class=\"number\">19</span>);</span><br><span class=\"line\">p.toString();<span class=\"comment\">//\"(lrh, 18)\"</span></span><br><span class=\"line\">p.getName();<span class=\"comment\">//\"lrh\"</span></span><br></pre></td></tr></table></figure>\n<h4 id=\"私有方法\"><a href=\"#私有方法\" class=\"headerlink\" title=\"私有方法:\"></a>私有方法:</h4><ol>\n<li><p>使用<strong>下划线” _ “</strong>区别方法名，但是外部还是可以调用这个方法。</p>\n<figure class=\"highlight kotlin\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Person</span></span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">constructor</span>(name, age) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">this</span>.name = name;</span><br><span class=\"line\">    <span class=\"keyword\">this</span>.age = age;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  _getAge() &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"keyword\">this</span>.age;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  getInfor() &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"keyword\">this</span>.name + <span class=\"string\">', '</span> + <span class=\"keyword\">this</span>._getAge();</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">let p = new Person(<span class=\"string\">'lrh'</span>, <span class=\"number\">18</span>);</span><br><span class=\"line\">p.getInfor();<span class=\"comment\">//\"lrh, 18\"</span></span><br></pre></td></tr></table></figure>\n</li>\n<li><p>将私有方法移出类，因为在类中方法都是对外可见的。</p>\n<figure class=\"highlight kotlin\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Person</span></span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">constructor</span>(name, age) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">this</span>.name = name;</span><br><span class=\"line\">    <span class=\"keyword\">this</span>.age = age;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  </span><br><span class=\"line\">  getInfor() &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"keyword\">this</span>.name + <span class=\"string\">', '</span> + getAge.call(<span class=\"keyword\">this</span>);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">function getAge() &#123;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> <span class=\"keyword\">this</span>.age;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">let p = new Person(<span class=\"string\">'lrh'</span>, <span class=\"number\">19</span>);</span><br><span class=\"line\">p.getInfor();</span><br><span class=\"line\">p.getAge();<span class=\"comment\">//TypeError: p.getAge is not a function</span></span><br></pre></td></tr></table></figure>\n</li>\n<li><p>利用Symbol的唯一性，设置私有变量。</p>\n<figure class=\"highlight kotlin\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> getAge = Symbol();</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Person</span></span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">constructor</span>(name, age) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">this</span>.name = name;</span><br><span class=\"line\">    <span class=\"keyword\">this</span>.age = age;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  </span><br><span class=\"line\">  [getAge]() &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"keyword\">this</span>.age;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  </span><br><span class=\"line\">  getInfor() &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"keyword\">this</span>.name + <span class=\"string\">', '</span> + <span class=\"keyword\">this</span>[getAge]();</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">let p = new Person(<span class=\"string\">'lrh'</span>, <span class=\"number\">18</span>);</span><br><span class=\"line\">p.getInfor();</span><br></pre></td></tr></table></figure>\n<p>​</p>\n</li>\n</ol>\n<h4 id=\"私有属性\"><a href=\"#私有属性\" class=\"headerlink\" title=\"私有属性\"></a>私有属性</h4><ol>\n<li><p>使用#表示，但是还只是提案，babel都不支持。</p>\n<figure class=\"highlight kotlin\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Person</span></span>&#123;</span><br><span class=\"line\">  #type = <span class=\"string\">'Student'</span>;</span><br><span class=\"line\">  <span class=\"keyword\">constructor</span>(name, age) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">this</span>.name = name;</span><br><span class=\"line\">    <span class=\"keyword\">this</span>.age = age;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  </span><br><span class=\"line\">  getInfor() &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"keyword\">this</span>.name + <span class=\"string\">', '</span> + <span class=\"keyword\">this</span>.age + <span class=\"string\">', '</span> + <span class=\"keyword\">this</span>.#type; </span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">let p = new Person(<span class=\"string\">'lrh'</span>, <span class=\"number\">18</span>);</span><br><span class=\"line\">p.getInfor();</span><br></pre></td></tr></table></figure>\n</li>\n</ol>\n<h4 id=\"取值函数（getter）和存值函数（setter）\"><a href=\"#取值函数（getter）和存值函数（setter）\" class=\"headerlink\" title=\"取值函数（getter）和存值函数（setter）\"></a>取值函数（getter）和存值函数（setter）</h4><ol>\n<li><p>拦截了该属性的存取行为。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">//getter，setter对应的属性应该是一个_开头的私有属性，只有使用getter，setter的方式可以读取和修改</span><br><span class=\"line\">class Person&#123;</span><br><span class=\"line\">  constructor(name, age, gender) &#123;</span><br><span class=\"line\">    this.name = name;</span><br><span class=\"line\">    this.age = age;</span><br><span class=\"line\">    this._gender = gender;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  </span><br><span class=\"line\">  get gender() &#123;</span><br><span class=\"line\">    console.log(&apos;getter&apos;);</span><br><span class=\"line\">    return this._gender;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  </span><br><span class=\"line\">  set gender(value) &#123;</span><br><span class=\"line\">    console.log(&apos;setter&apos;);</span><br><span class=\"line\">    this._gender = value;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">let p = new Person(&apos;lrh&apos;, 18, &apos;male&apos;);</span><br><span class=\"line\">p.gender;</span><br><span class=\"line\">p.gender = &apos;female&apos;;</span><br><span class=\"line\">p.gender;</span><br></pre></td></tr></table></figure>\n<p>​</p>\n</li>\n</ol>\n<h4 id=\"静态方法\"><a href=\"#静态方法\" class=\"headerlink\" title=\"静态方法\"></a>静态方法</h4><ol>\n<li><p>在方法前加上static关键字，this指向类而不是实例。只能通过类调用。</p>\n<figure class=\"highlight delphi\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">class</span> Person<span class=\"comment\">&#123;</span></span><br><span class=\"line\"><span class=\"comment\">  static getRandom() &#123;</span></span><br><span class=\"line\"><span class=\"comment\">  \treturn Math.random();</span></span><br><span class=\"line\"><span class=\"comment\">  &#125;</span></span><br><span class=\"line\">\t</span><br><span class=\"line\">  <span class=\"function\"><span class=\"keyword\">constructor</span><span class=\"params\">(<span class=\"keyword\">name</span>, age)</span> <span class=\"comment\">&#123;</span></span></span><br><span class=\"line\"><span class=\"function\"><span class=\"comment\">    this.name = name;</span></span></span><br><span class=\"line\"><span class=\"function\"><span class=\"comment\">    this.age = age;</span></span></span><br><span class=\"line\"><span class=\"function\"><span class=\"comment\">  &#125;</span></span></span><br><span class=\"line\"><span class=\"function\">&#125;</span></span><br><span class=\"line\"><span class=\"function\"></span></span><br><span class=\"line\"><span class=\"function\"><span class=\"title\">Person</span>.<span class=\"title\">getRandom</span><span class=\"params\">()</span>;</span><span class=\"comment\">//0.36116181991876695</span></span><br></pre></td></tr></table></figure>\n</li>\n</ol>\n<h4 id=\"静态属性与实例属性\"><a href=\"#静态属性与实例属性\" class=\"headerlink\" title=\"静态属性与实例属性\"></a>静态属性与实例属性</h4><ol>\n<li><p>是ES7的提案，需要安装ES7的转码：<code>npm install --save-dev babel-preset-stage-2</code></p>\n<figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//实例属性</span></span><br><span class=\"line\"><span class=\"keyword\">class</span> Person&#123;</span><br><span class=\"line\">  <span class=\"keyword\">type</span> = <span class=\"string\">'Student'</span>;</span><br><span class=\"line\">  <span class=\"keyword\">constructor</span>(<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"keyword\">this</span>.type);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">new</span> Person();<span class=\"comment\">//Student</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//静态属性</span></span><br><span class=\"line\"><span class=\"keyword\">class</span> Person&#123;</span><br><span class=\"line\">  <span class=\"keyword\">static</span> <span class=\"keyword\">type</span> = <span class=\"string\">'Student'</span>;</span><br><span class=\"line\">  <span class=\"keyword\">constructor</span>(<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(Person.type);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">new</span> Person();<span class=\"comment\">//Student</span></span><br></pre></td></tr></table></figure>\n<p>​</p>\n</li>\n</ol>"},{"title":"MongoDB安装","date":"2017-01-05T14:11:56.000Z","_content":"记录一些和Mongo DB有关的笔记（部分修改自runoob）。\n<!--more-->\n\n### 安装Mongo后的基本配置\nMongoDB将数据目录存储在 db 目录下。但是这个数据目录不会主动创建，在安装完成后需要创建它。请注意，数据目录应该放在根目录下（(如： C:\\ 或者 D:\\ 等 )。\n在本教程中，已经在C：盘 安装了 mongodb，现在创建一个data的目录然后在data目录里创建db目录。\n\n    c:\\>cd c:\\\n\n    c:\\>mkdir data\n\n    c:\\>cd data\n\n    c:\\data>mkdir db\n\n    c:\\data>cd db\n\n    c:\\data\\db>\n\n也可以通过window的资源管理器中创建这些目录，而不一定通过命令行。\n\n为了从命令提示符下运行MongoDB服务器，必须从MongoDB目录的bin目录中执行mongod.exe文件。为了方便，可以将mongod.exe添加到环境变量中。\n\n    mongod.exe --dbpath c:\\data\\db\n\n如果执行成功，会输出如下信息：\n\n    2015-09-25T15:54:09.212+0800 I CONTROL  Hotfix KB2731284 or later update is not\n    installed, will zero-out data files\n    2015-09-25T15:54:09.229+0800 I JOURNAL  [initandlisten] journal dir=c:\\data\\db\\j\n    ournal\n    2015-09-25T15:54:09.237+0800 I JOURNAL  [initandlisten] recover : no journal fil\n    es present, no recovery needed\n    2015-09-25T15:54:09.290+0800 I JOURNAL  [durability] Durability thread started\n    2015-09-25T15:54:09.294+0800 I CONTROL  [initandlisten] MongoDB starting : pid=2\n    488 port=27017 dbpath=c:\\data\\db 64-bit host=WIN-1VONBJOCE88\n    2015-09-25T15:54:09.296+0800 I CONTROL  [initandlisten] targetMinOS: Windows 7/W\n    indows Server 2008 R2\n    2015-09-25T15:54:09.298+0800 I CONTROL  [initandlisten] db version v3.0.6\n    ……\n\n### 将MongoDB作为服务启动\n\n请注意，必须有**管理权限**才能运行下面的命令。执行以下命令将MongoDB服务器作为Windows服务运行：\n\n    mongod.exe --bind_ip 127.0.0.1 --logpath C:\\data\\dbConf\\mongodb.log --logappend --dbpath \n    C:\\data\\db --port 27017 --serviceName mongo --serviceDisplayName mongo --install\n\n参数说明：\n\n    --bind_ip 绑定服务IP，若绑定127.0.0.1，则只能本机访问，不指定默认本地所有IP\n    --logpath\t定MongoDB日志文件，注意是指定文件不是目录\n    --logappend\t使用追加的方式写日志\n    --dbpath\t指定数据库路径\n    --port\t指定服务端口号，默认端口27017\n    --serviceName\t指定服务名称\n    --serviceDisplayName\t指定服务名称，有多个mongodb服务时执行。\n    --install\t指定作为一个Windows服务安装。\n\n再次强调，必须使用通过管理员方式打开的控制台，才能成功。如果不知道怎么通过管理员身份打开控制台，请进入c:/Windows/System32/找到cmd.exe，右键点击使用管理员身份运行。\n\n安装完之后，继续运行：\n\n    net start mongo (mongo是刚才的服务名称)\n\n如果出现类似**启动服务成功**的提示，那么就完成了；如果出现**没有此服务**的提示，那就是没有安装成功，需要检查以上步骤。\n\n### MongoDB后台管理 Shell\n安装完成后，想要测试数据库是否可以连接，可以使用MongoDB自带的js shell，打开一个cmd，输入`mongo`即可连接。\n\n","source":"_posts/MongoDB安装.md","raw":"---\ntitle: MongoDB安装\ndate: 2017-01-05 22:11:56\ntags:\n    - Mongo\n---\n记录一些和Mongo DB有关的笔记（部分修改自runoob）。\n<!--more-->\n\n### 安装Mongo后的基本配置\nMongoDB将数据目录存储在 db 目录下。但是这个数据目录不会主动创建，在安装完成后需要创建它。请注意，数据目录应该放在根目录下（(如： C:\\ 或者 D:\\ 等 )。\n在本教程中，已经在C：盘 安装了 mongodb，现在创建一个data的目录然后在data目录里创建db目录。\n\n    c:\\>cd c:\\\n\n    c:\\>mkdir data\n\n    c:\\>cd data\n\n    c:\\data>mkdir db\n\n    c:\\data>cd db\n\n    c:\\data\\db>\n\n也可以通过window的资源管理器中创建这些目录，而不一定通过命令行。\n\n为了从命令提示符下运行MongoDB服务器，必须从MongoDB目录的bin目录中执行mongod.exe文件。为了方便，可以将mongod.exe添加到环境变量中。\n\n    mongod.exe --dbpath c:\\data\\db\n\n如果执行成功，会输出如下信息：\n\n    2015-09-25T15:54:09.212+0800 I CONTROL  Hotfix KB2731284 or later update is not\n    installed, will zero-out data files\n    2015-09-25T15:54:09.229+0800 I JOURNAL  [initandlisten] journal dir=c:\\data\\db\\j\n    ournal\n    2015-09-25T15:54:09.237+0800 I JOURNAL  [initandlisten] recover : no journal fil\n    es present, no recovery needed\n    2015-09-25T15:54:09.290+0800 I JOURNAL  [durability] Durability thread started\n    2015-09-25T15:54:09.294+0800 I CONTROL  [initandlisten] MongoDB starting : pid=2\n    488 port=27017 dbpath=c:\\data\\db 64-bit host=WIN-1VONBJOCE88\n    2015-09-25T15:54:09.296+0800 I CONTROL  [initandlisten] targetMinOS: Windows 7/W\n    indows Server 2008 R2\n    2015-09-25T15:54:09.298+0800 I CONTROL  [initandlisten] db version v3.0.6\n    ……\n\n### 将MongoDB作为服务启动\n\n请注意，必须有**管理权限**才能运行下面的命令。执行以下命令将MongoDB服务器作为Windows服务运行：\n\n    mongod.exe --bind_ip 127.0.0.1 --logpath C:\\data\\dbConf\\mongodb.log --logappend --dbpath \n    C:\\data\\db --port 27017 --serviceName mongo --serviceDisplayName mongo --install\n\n参数说明：\n\n    --bind_ip 绑定服务IP，若绑定127.0.0.1，则只能本机访问，不指定默认本地所有IP\n    --logpath\t定MongoDB日志文件，注意是指定文件不是目录\n    --logappend\t使用追加的方式写日志\n    --dbpath\t指定数据库路径\n    --port\t指定服务端口号，默认端口27017\n    --serviceName\t指定服务名称\n    --serviceDisplayName\t指定服务名称，有多个mongodb服务时执行。\n    --install\t指定作为一个Windows服务安装。\n\n再次强调，必须使用通过管理员方式打开的控制台，才能成功。如果不知道怎么通过管理员身份打开控制台，请进入c:/Windows/System32/找到cmd.exe，右键点击使用管理员身份运行。\n\n安装完之后，继续运行：\n\n    net start mongo (mongo是刚才的服务名称)\n\n如果出现类似**启动服务成功**的提示，那么就完成了；如果出现**没有此服务**的提示，那就是没有安装成功，需要检查以上步骤。\n\n### MongoDB后台管理 Shell\n安装完成后，想要测试数据库是否可以连接，可以使用MongoDB自带的js shell，打开一个cmd，输入`mongo`即可连接。\n\n","slug":"MongoDB安装","published":1,"updated":"2018-12-21T04:59:19.232Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjpxle9k20004h8obt9jwm1i0","content":"<p>记录一些和Mongo DB有关的笔记（部分修改自runoob）。<br><a id=\"more\"></a></p>\n<h3 id=\"安装Mongo后的基本配置\"><a href=\"#安装Mongo后的基本配置\" class=\"headerlink\" title=\"安装Mongo后的基本配置\"></a>安装Mongo后的基本配置</h3><p>MongoDB将数据目录存储在 db 目录下。但是这个数据目录不会主动创建，在安装完成后需要创建它。请注意，数据目录应该放在根目录下（(如： C:\\ 或者 D:\\ 等 )。<br>在本教程中，已经在C：盘 安装了 mongodb，现在创建一个data的目录然后在data目录里创建db目录。</p>\n<pre><code>c:\\&gt;cd c:\\\n\nc:\\&gt;mkdir data\n\nc:\\&gt;cd data\n\nc:\\data&gt;mkdir db\n\nc:\\data&gt;cd db\n\nc:\\data\\db&gt;\n</code></pre><p>也可以通过window的资源管理器中创建这些目录，而不一定通过命令行。</p>\n<p>为了从命令提示符下运行MongoDB服务器，必须从MongoDB目录的bin目录中执行mongod.exe文件。为了方便，可以将mongod.exe添加到环境变量中。</p>\n<pre><code>mongod.exe --dbpath c:\\data\\db\n</code></pre><p>如果执行成功，会输出如下信息：</p>\n<pre><code>2015-09-25T15:54:09.212+0800 I CONTROL  Hotfix KB2731284 or later update is not\ninstalled, will zero-out data files\n2015-09-25T15:54:09.229+0800 I JOURNAL  [initandlisten] journal dir=c:\\data\\db\\j\nournal\n2015-09-25T15:54:09.237+0800 I JOURNAL  [initandlisten] recover : no journal fil\nes present, no recovery needed\n2015-09-25T15:54:09.290+0800 I JOURNAL  [durability] Durability thread started\n2015-09-25T15:54:09.294+0800 I CONTROL  [initandlisten] MongoDB starting : pid=2\n488 port=27017 dbpath=c:\\data\\db 64-bit host=WIN-1VONBJOCE88\n2015-09-25T15:54:09.296+0800 I CONTROL  [initandlisten] targetMinOS: Windows 7/W\nindows Server 2008 R2\n2015-09-25T15:54:09.298+0800 I CONTROL  [initandlisten] db version v3.0.6\n……\n</code></pre><h3 id=\"将MongoDB作为服务启动\"><a href=\"#将MongoDB作为服务启动\" class=\"headerlink\" title=\"将MongoDB作为服务启动\"></a>将MongoDB作为服务启动</h3><p>请注意，必须有<strong>管理权限</strong>才能运行下面的命令。执行以下命令将MongoDB服务器作为Windows服务运行：</p>\n<pre><code>mongod.exe --bind_ip 127.0.0.1 --logpath C:\\data\\dbConf\\mongodb.log --logappend --dbpath \nC:\\data\\db --port 27017 --serviceName mongo --serviceDisplayName mongo --install\n</code></pre><p>参数说明：</p>\n<pre><code>--bind_ip 绑定服务IP，若绑定127.0.0.1，则只能本机访问，不指定默认本地所有IP\n--logpath    定MongoDB日志文件，注意是指定文件不是目录\n--logappend    使用追加的方式写日志\n--dbpath    指定数据库路径\n--port    指定服务端口号，默认端口27017\n--serviceName    指定服务名称\n--serviceDisplayName    指定服务名称，有多个mongodb服务时执行。\n--install    指定作为一个Windows服务安装。\n</code></pre><p>再次强调，必须使用通过管理员方式打开的控制台，才能成功。如果不知道怎么通过管理员身份打开控制台，请进入c:/Windows/System32/找到cmd.exe，右键点击使用管理员身份运行。</p>\n<p>安装完之后，继续运行：</p>\n<pre><code>net start mongo (mongo是刚才的服务名称)\n</code></pre><p>如果出现类似<strong>启动服务成功</strong>的提示，那么就完成了；如果出现<strong>没有此服务</strong>的提示，那就是没有安装成功，需要检查以上步骤。</p>\n<h3 id=\"MongoDB后台管理-Shell\"><a href=\"#MongoDB后台管理-Shell\" class=\"headerlink\" title=\"MongoDB后台管理 Shell\"></a>MongoDB后台管理 Shell</h3><p>安装完成后，想要测试数据库是否可以连接，可以使用MongoDB自带的js shell，打开一个cmd，输入<code>mongo</code>即可连接。</p>\n","site":{"data":{}},"excerpt":"<p>记录一些和Mongo DB有关的笔记（部分修改自runoob）。<br>","more":"</p>\n<h3 id=\"安装Mongo后的基本配置\"><a href=\"#安装Mongo后的基本配置\" class=\"headerlink\" title=\"安装Mongo后的基本配置\"></a>安装Mongo后的基本配置</h3><p>MongoDB将数据目录存储在 db 目录下。但是这个数据目录不会主动创建，在安装完成后需要创建它。请注意，数据目录应该放在根目录下（(如： C:\\ 或者 D:\\ 等 )。<br>在本教程中，已经在C：盘 安装了 mongodb，现在创建一个data的目录然后在data目录里创建db目录。</p>\n<pre><code>c:\\&gt;cd c:\\\n\nc:\\&gt;mkdir data\n\nc:\\&gt;cd data\n\nc:\\data&gt;mkdir db\n\nc:\\data&gt;cd db\n\nc:\\data\\db&gt;\n</code></pre><p>也可以通过window的资源管理器中创建这些目录，而不一定通过命令行。</p>\n<p>为了从命令提示符下运行MongoDB服务器，必须从MongoDB目录的bin目录中执行mongod.exe文件。为了方便，可以将mongod.exe添加到环境变量中。</p>\n<pre><code>mongod.exe --dbpath c:\\data\\db\n</code></pre><p>如果执行成功，会输出如下信息：</p>\n<pre><code>2015-09-25T15:54:09.212+0800 I CONTROL  Hotfix KB2731284 or later update is not\ninstalled, will zero-out data files\n2015-09-25T15:54:09.229+0800 I JOURNAL  [initandlisten] journal dir=c:\\data\\db\\j\nournal\n2015-09-25T15:54:09.237+0800 I JOURNAL  [initandlisten] recover : no journal fil\nes present, no recovery needed\n2015-09-25T15:54:09.290+0800 I JOURNAL  [durability] Durability thread started\n2015-09-25T15:54:09.294+0800 I CONTROL  [initandlisten] MongoDB starting : pid=2\n488 port=27017 dbpath=c:\\data\\db 64-bit host=WIN-1VONBJOCE88\n2015-09-25T15:54:09.296+0800 I CONTROL  [initandlisten] targetMinOS: Windows 7/W\nindows Server 2008 R2\n2015-09-25T15:54:09.298+0800 I CONTROL  [initandlisten] db version v3.0.6\n……\n</code></pre><h3 id=\"将MongoDB作为服务启动\"><a href=\"#将MongoDB作为服务启动\" class=\"headerlink\" title=\"将MongoDB作为服务启动\"></a>将MongoDB作为服务启动</h3><p>请注意，必须有<strong>管理权限</strong>才能运行下面的命令。执行以下命令将MongoDB服务器作为Windows服务运行：</p>\n<pre><code>mongod.exe --bind_ip 127.0.0.1 --logpath C:\\data\\dbConf\\mongodb.log --logappend --dbpath \nC:\\data\\db --port 27017 --serviceName mongo --serviceDisplayName mongo --install\n</code></pre><p>参数说明：</p>\n<pre><code>--bind_ip 绑定服务IP，若绑定127.0.0.1，则只能本机访问，不指定默认本地所有IP\n--logpath    定MongoDB日志文件，注意是指定文件不是目录\n--logappend    使用追加的方式写日志\n--dbpath    指定数据库路径\n--port    指定服务端口号，默认端口27017\n--serviceName    指定服务名称\n--serviceDisplayName    指定服务名称，有多个mongodb服务时执行。\n--install    指定作为一个Windows服务安装。\n</code></pre><p>再次强调，必须使用通过管理员方式打开的控制台，才能成功。如果不知道怎么通过管理员身份打开控制台，请进入c:/Windows/System32/找到cmd.exe，右键点击使用管理员身份运行。</p>\n<p>安装完之后，继续运行：</p>\n<pre><code>net start mongo (mongo是刚才的服务名称)\n</code></pre><p>如果出现类似<strong>启动服务成功</strong>的提示，那么就完成了；如果出现<strong>没有此服务</strong>的提示，那就是没有安装成功，需要检查以上步骤。</p>\n<h3 id=\"MongoDB后台管理-Shell\"><a href=\"#MongoDB后台管理-Shell\" class=\"headerlink\" title=\"MongoDB后台管理 Shell\"></a>MongoDB后台管理 Shell</h3><p>安装完成后，想要测试数据库是否可以连接，可以使用MongoDB自带的js shell，打开一个cmd，输入<code>mongo</code>即可连接。</p>"},{"title":"Javascript标准参考教程重点","date":"2017-02-04T14:00:06.000Z","_content":"\n记一些容易忘记的语法。\n<!--more-->\n\n### 标签(label)用法\n\n    //判断数组二中是否有数组一中的元素\n    var itHas = false;\n    var index = -1;\n    var item = '';\n    var arr1 = ['zhagnsanfeng', 'sunwukong', 'zhubajie'];\n    var arr2 = ['liangrenhong', 'zhubajie', 'xiaofeng'];\n    verify:\n        for(var i = 0, len1 = arr1.length; i < len1; i++) {\n            for(var j = 0, len2 = arr2.length; j < len2; j++) {\n                if(arr1[i] === arr2[j]) {\n                    itHas = true;\n                    index = j;\n                    item = arr2[j];\n                    break verify;\n                }\n            }\n        }\n    console.log(itHas, index, item);\n\n当查找到一个符合的之后，就退出循环，这样可以节省时间。\n如果在break之后不使用标签，只能跳出内层循环。\n\n### for...in遍历对象属性\n\n    function Person() {\n        this.name = 'lrh';\n        this.age = '18'\n    }\n\n    Person.prototype.gender = 'boy';\n\n    var person = new Person();\n\n    for(var p in person) {\n        console.log(p);\n    }\n    //name\n    //age\n    //gender\n\n使用for...in遍历会遍历出实例自身的属性以及继承的属性。\n如果非要用for...in那就在遍历时加上hasOwnProperty方法判断：\n\n    function Person() {\n        this.name = 'lrh';\n        this.age = '18'\n    }\n\n    Person.prototype.gender = 'boy';\n\n    var person = new Person();\n\n    for(var p in person) {\n        if(person.hasOwnProperty(p)) {\n            console.log(p);\n        }\n    }\n    //name\n    //age\n\n### in运算符\n\n用于检测对象是否包含某个属性\n\n    var person = {\n        name: 'lrh'\n    };\n\n    'name' in person;//true\n\n### 闭包\n\n- 定义在一个函数内部的函数。\n- 将函数内部与函数外部连接起来的一座桥梁。\n- 可以读取函数内部的变量。\n- 让函数内部变量一直保持在内存中。\n\n        function count(number) {\n            return function () {\n                console.log(number++);\n            }\n        }\n\n        var add = count(5);\n        add();\n        add();\n        add();\n\n- 封装对象的私有属性和私有方法。\n\n        function Person(name) {\n            var _gender;\n\n            function setGender(gender) {\n                _gender = gender\n            }\n\n            function getGender() {\n                return _gender;\n            }\n\n            return {\n                name: name,\n                getGender: getGender,\n                setGender: setGender\n            }\n        }\n\n        var p1 = new Person('lrh');\n        p1.setGender('boy');\n        p1.getGender();//boy\n\n### 数组\n\nmap方法对数组的所有成员一次调用一个函数，根据函数结果返回一个新数组。\nmap方法接受一个函数做为参数，调用时会将其传入三个参数，分辨是当前成员，当前位置，数组本身。\nmap方法还可以接受第二个参数，表示回调函数执行时this所指向的对象。\n\nforEach方法与map方法类似，但是一般不返回值。如果需要有返回值，一般使用map方法。\nforEach方法不能中断执行，总是会遍历完所有成员，这时可以使用for循环代替。\n\nfilter方法返回结构为true的成员。\n\nsome方法，只要有一个成员的返回值为true，那么整个some方法的返回值就是true。\n\nevery方法，每个数组成员的返回值是true，every方法才会返回true。\n\nreduce方法，依次处理数组的每个成员，最终累计成一个值。\n\n### 字符串\n\nsubstring方法用于从原字符串取出子字符串并返回，不改变原字符串。它与slice作用相同，但有一些奇怪的规则，因此不建议使用这个方法，优先使用slice。\n\n如果第二个参数大于第一个参数，substring方法会自动更换两个参数的位置。\n\n如果参数是负数，substring方法会自动将负数转为0。\n\n\n### 对象的拷贝-浅拷贝\n\n确保拷贝后的对象，与原对象具有同样的prototype原型对象。\n确保拷贝后的对象，与原对象具有同样的属性。\n\n    function copyObject(orig) {\n        var copy = Object.create(Object.getPrototypeOf(orig));\n        copyOwnPropertiesFrom(copy, orig);\n        return copy;\n    }\n\n    function copyOwnPropertiesFrom(target, source) {\n        Object\n            .getOwnPropertyNames(source)\n            .forEach(function(propKey) {\n                var desc = Object.getOwnPropertyDescriptor(source, propKey);\n                Object.defineProperty(target, propKey, desc);\n            });\n            \n        return target;\n    }\n\n\n\n\n","source":"_posts/Javascript标准参考教程重点.md","raw":"---\ntitle: Javascript标准参考教程重点\ndate: 2017-02-04 22:00:06\ntags:\n    - Javascript\n---\n\n记一些容易忘记的语法。\n<!--more-->\n\n### 标签(label)用法\n\n    //判断数组二中是否有数组一中的元素\n    var itHas = false;\n    var index = -1;\n    var item = '';\n    var arr1 = ['zhagnsanfeng', 'sunwukong', 'zhubajie'];\n    var arr2 = ['liangrenhong', 'zhubajie', 'xiaofeng'];\n    verify:\n        for(var i = 0, len1 = arr1.length; i < len1; i++) {\n            for(var j = 0, len2 = arr2.length; j < len2; j++) {\n                if(arr1[i] === arr2[j]) {\n                    itHas = true;\n                    index = j;\n                    item = arr2[j];\n                    break verify;\n                }\n            }\n        }\n    console.log(itHas, index, item);\n\n当查找到一个符合的之后，就退出循环，这样可以节省时间。\n如果在break之后不使用标签，只能跳出内层循环。\n\n### for...in遍历对象属性\n\n    function Person() {\n        this.name = 'lrh';\n        this.age = '18'\n    }\n\n    Person.prototype.gender = 'boy';\n\n    var person = new Person();\n\n    for(var p in person) {\n        console.log(p);\n    }\n    //name\n    //age\n    //gender\n\n使用for...in遍历会遍历出实例自身的属性以及继承的属性。\n如果非要用for...in那就在遍历时加上hasOwnProperty方法判断：\n\n    function Person() {\n        this.name = 'lrh';\n        this.age = '18'\n    }\n\n    Person.prototype.gender = 'boy';\n\n    var person = new Person();\n\n    for(var p in person) {\n        if(person.hasOwnProperty(p)) {\n            console.log(p);\n        }\n    }\n    //name\n    //age\n\n### in运算符\n\n用于检测对象是否包含某个属性\n\n    var person = {\n        name: 'lrh'\n    };\n\n    'name' in person;//true\n\n### 闭包\n\n- 定义在一个函数内部的函数。\n- 将函数内部与函数外部连接起来的一座桥梁。\n- 可以读取函数内部的变量。\n- 让函数内部变量一直保持在内存中。\n\n        function count(number) {\n            return function () {\n                console.log(number++);\n            }\n        }\n\n        var add = count(5);\n        add();\n        add();\n        add();\n\n- 封装对象的私有属性和私有方法。\n\n        function Person(name) {\n            var _gender;\n\n            function setGender(gender) {\n                _gender = gender\n            }\n\n            function getGender() {\n                return _gender;\n            }\n\n            return {\n                name: name,\n                getGender: getGender,\n                setGender: setGender\n            }\n        }\n\n        var p1 = new Person('lrh');\n        p1.setGender('boy');\n        p1.getGender();//boy\n\n### 数组\n\nmap方法对数组的所有成员一次调用一个函数，根据函数结果返回一个新数组。\nmap方法接受一个函数做为参数，调用时会将其传入三个参数，分辨是当前成员，当前位置，数组本身。\nmap方法还可以接受第二个参数，表示回调函数执行时this所指向的对象。\n\nforEach方法与map方法类似，但是一般不返回值。如果需要有返回值，一般使用map方法。\nforEach方法不能中断执行，总是会遍历完所有成员，这时可以使用for循环代替。\n\nfilter方法返回结构为true的成员。\n\nsome方法，只要有一个成员的返回值为true，那么整个some方法的返回值就是true。\n\nevery方法，每个数组成员的返回值是true，every方法才会返回true。\n\nreduce方法，依次处理数组的每个成员，最终累计成一个值。\n\n### 字符串\n\nsubstring方法用于从原字符串取出子字符串并返回，不改变原字符串。它与slice作用相同，但有一些奇怪的规则，因此不建议使用这个方法，优先使用slice。\n\n如果第二个参数大于第一个参数，substring方法会自动更换两个参数的位置。\n\n如果参数是负数，substring方法会自动将负数转为0。\n\n\n### 对象的拷贝-浅拷贝\n\n确保拷贝后的对象，与原对象具有同样的prototype原型对象。\n确保拷贝后的对象，与原对象具有同样的属性。\n\n    function copyObject(orig) {\n        var copy = Object.create(Object.getPrototypeOf(orig));\n        copyOwnPropertiesFrom(copy, orig);\n        return copy;\n    }\n\n    function copyOwnPropertiesFrom(target, source) {\n        Object\n            .getOwnPropertyNames(source)\n            .forEach(function(propKey) {\n                var desc = Object.getOwnPropertyDescriptor(source, propKey);\n                Object.defineProperty(target, propKey, desc);\n            });\n            \n        return target;\n    }\n\n\n\n\n","slug":"Javascript标准参考教程重点","published":1,"updated":"2018-12-21T04:59:19.232Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjpxle9k20005h8obc1a5z7wu","content":"<p>记一些容易忘记的语法。<br><a id=\"more\"></a></p>\n<h3 id=\"标签-label-用法\"><a href=\"#标签-label-用法\" class=\"headerlink\" title=\"标签(label)用法\"></a>标签(label)用法</h3><pre><code>//判断数组二中是否有数组一中的元素\nvar itHas = false;\nvar index = -1;\nvar item = &apos;&apos;;\nvar arr1 = [&apos;zhagnsanfeng&apos;, &apos;sunwukong&apos;, &apos;zhubajie&apos;];\nvar arr2 = [&apos;liangrenhong&apos;, &apos;zhubajie&apos;, &apos;xiaofeng&apos;];\nverify:\n    for(var i = 0, len1 = arr1.length; i &lt; len1; i++) {\n        for(var j = 0, len2 = arr2.length; j &lt; len2; j++) {\n            if(arr1[i] === arr2[j]) {\n                itHas = true;\n                index = j;\n                item = arr2[j];\n                break verify;\n            }\n        }\n    }\nconsole.log(itHas, index, item);\n</code></pre><p>当查找到一个符合的之后，就退出循环，这样可以节省时间。<br>如果在break之后不使用标签，只能跳出内层循环。</p>\n<h3 id=\"for…in遍历对象属性\"><a href=\"#for…in遍历对象属性\" class=\"headerlink\" title=\"for…in遍历对象属性\"></a>for…in遍历对象属性</h3><pre><code>function Person() {\n    this.name = &apos;lrh&apos;;\n    this.age = &apos;18&apos;\n}\n\nPerson.prototype.gender = &apos;boy&apos;;\n\nvar person = new Person();\n\nfor(var p in person) {\n    console.log(p);\n}\n//name\n//age\n//gender\n</code></pre><p>使用for…in遍历会遍历出实例自身的属性以及继承的属性。<br>如果非要用for…in那就在遍历时加上hasOwnProperty方法判断：</p>\n<pre><code>function Person() {\n    this.name = &apos;lrh&apos;;\n    this.age = &apos;18&apos;\n}\n\nPerson.prototype.gender = &apos;boy&apos;;\n\nvar person = new Person();\n\nfor(var p in person) {\n    if(person.hasOwnProperty(p)) {\n        console.log(p);\n    }\n}\n//name\n//age\n</code></pre><h3 id=\"in运算符\"><a href=\"#in运算符\" class=\"headerlink\" title=\"in运算符\"></a>in运算符</h3><p>用于检测对象是否包含某个属性</p>\n<pre><code>var person = {\n    name: &apos;lrh&apos;\n};\n\n&apos;name&apos; in person;//true\n</code></pre><h3 id=\"闭包\"><a href=\"#闭包\" class=\"headerlink\" title=\"闭包\"></a>闭包</h3><ul>\n<li>定义在一个函数内部的函数。</li>\n<li>将函数内部与函数外部连接起来的一座桥梁。</li>\n<li>可以读取函数内部的变量。</li>\n<li><p>让函数内部变量一直保持在内存中。</p>\n<pre><code>function count(number) {\n    return function () {\n        console.log(number++);\n    }\n}\n\nvar add = count(5);\nadd();\nadd();\nadd();\n</code></pre></li>\n<li><p>封装对象的私有属性和私有方法。</p>\n<pre><code>function Person(name) {\n    var _gender;\n\n    function setGender(gender) {\n        _gender = gender\n    }\n\n    function getGender() {\n        return _gender;\n    }\n\n    return {\n        name: name,\n        getGender: getGender,\n        setGender: setGender\n    }\n}\n\nvar p1 = new Person(&apos;lrh&apos;);\np1.setGender(&apos;boy&apos;);\np1.getGender();//boy\n</code></pre></li>\n</ul>\n<h3 id=\"数组\"><a href=\"#数组\" class=\"headerlink\" title=\"数组\"></a>数组</h3><p>map方法对数组的所有成员一次调用一个函数，根据函数结果返回一个新数组。<br>map方法接受一个函数做为参数，调用时会将其传入三个参数，分辨是当前成员，当前位置，数组本身。<br>map方法还可以接受第二个参数，表示回调函数执行时this所指向的对象。</p>\n<p>forEach方法与map方法类似，但是一般不返回值。如果需要有返回值，一般使用map方法。<br>forEach方法不能中断执行，总是会遍历完所有成员，这时可以使用for循环代替。</p>\n<p>filter方法返回结构为true的成员。</p>\n<p>some方法，只要有一个成员的返回值为true，那么整个some方法的返回值就是true。</p>\n<p>every方法，每个数组成员的返回值是true，every方法才会返回true。</p>\n<p>reduce方法，依次处理数组的每个成员，最终累计成一个值。</p>\n<h3 id=\"字符串\"><a href=\"#字符串\" class=\"headerlink\" title=\"字符串\"></a>字符串</h3><p>substring方法用于从原字符串取出子字符串并返回，不改变原字符串。它与slice作用相同，但有一些奇怪的规则，因此不建议使用这个方法，优先使用slice。</p>\n<p>如果第二个参数大于第一个参数，substring方法会自动更换两个参数的位置。</p>\n<p>如果参数是负数，substring方法会自动将负数转为0。</p>\n<h3 id=\"对象的拷贝-浅拷贝\"><a href=\"#对象的拷贝-浅拷贝\" class=\"headerlink\" title=\"对象的拷贝-浅拷贝\"></a>对象的拷贝-浅拷贝</h3><p>确保拷贝后的对象，与原对象具有同样的prototype原型对象。<br>确保拷贝后的对象，与原对象具有同样的属性。</p>\n<pre><code>function copyObject(orig) {\n    var copy = Object.create(Object.getPrototypeOf(orig));\n    copyOwnPropertiesFrom(copy, orig);\n    return copy;\n}\n\nfunction copyOwnPropertiesFrom(target, source) {\n    Object\n        .getOwnPropertyNames(source)\n        .forEach(function(propKey) {\n            var desc = Object.getOwnPropertyDescriptor(source, propKey);\n            Object.defineProperty(target, propKey, desc);\n        });\n\n    return target;\n}\n</code></pre>","site":{"data":{}},"excerpt":"<p>记一些容易忘记的语法。<br>","more":"</p>\n<h3 id=\"标签-label-用法\"><a href=\"#标签-label-用法\" class=\"headerlink\" title=\"标签(label)用法\"></a>标签(label)用法</h3><pre><code>//判断数组二中是否有数组一中的元素\nvar itHas = false;\nvar index = -1;\nvar item = &apos;&apos;;\nvar arr1 = [&apos;zhagnsanfeng&apos;, &apos;sunwukong&apos;, &apos;zhubajie&apos;];\nvar arr2 = [&apos;liangrenhong&apos;, &apos;zhubajie&apos;, &apos;xiaofeng&apos;];\nverify:\n    for(var i = 0, len1 = arr1.length; i &lt; len1; i++) {\n        for(var j = 0, len2 = arr2.length; j &lt; len2; j++) {\n            if(arr1[i] === arr2[j]) {\n                itHas = true;\n                index = j;\n                item = arr2[j];\n                break verify;\n            }\n        }\n    }\nconsole.log(itHas, index, item);\n</code></pre><p>当查找到一个符合的之后，就退出循环，这样可以节省时间。<br>如果在break之后不使用标签，只能跳出内层循环。</p>\n<h3 id=\"for…in遍历对象属性\"><a href=\"#for…in遍历对象属性\" class=\"headerlink\" title=\"for…in遍历对象属性\"></a>for…in遍历对象属性</h3><pre><code>function Person() {\n    this.name = &apos;lrh&apos;;\n    this.age = &apos;18&apos;\n}\n\nPerson.prototype.gender = &apos;boy&apos;;\n\nvar person = new Person();\n\nfor(var p in person) {\n    console.log(p);\n}\n//name\n//age\n//gender\n</code></pre><p>使用for…in遍历会遍历出实例自身的属性以及继承的属性。<br>如果非要用for…in那就在遍历时加上hasOwnProperty方法判断：</p>\n<pre><code>function Person() {\n    this.name = &apos;lrh&apos;;\n    this.age = &apos;18&apos;\n}\n\nPerson.prototype.gender = &apos;boy&apos;;\n\nvar person = new Person();\n\nfor(var p in person) {\n    if(person.hasOwnProperty(p)) {\n        console.log(p);\n    }\n}\n//name\n//age\n</code></pre><h3 id=\"in运算符\"><a href=\"#in运算符\" class=\"headerlink\" title=\"in运算符\"></a>in运算符</h3><p>用于检测对象是否包含某个属性</p>\n<pre><code>var person = {\n    name: &apos;lrh&apos;\n};\n\n&apos;name&apos; in person;//true\n</code></pre><h3 id=\"闭包\"><a href=\"#闭包\" class=\"headerlink\" title=\"闭包\"></a>闭包</h3><ul>\n<li>定义在一个函数内部的函数。</li>\n<li>将函数内部与函数外部连接起来的一座桥梁。</li>\n<li>可以读取函数内部的变量。</li>\n<li><p>让函数内部变量一直保持在内存中。</p>\n<pre><code>function count(number) {\n    return function () {\n        console.log(number++);\n    }\n}\n\nvar add = count(5);\nadd();\nadd();\nadd();\n</code></pre></li>\n<li><p>封装对象的私有属性和私有方法。</p>\n<pre><code>function Person(name) {\n    var _gender;\n\n    function setGender(gender) {\n        _gender = gender\n    }\n\n    function getGender() {\n        return _gender;\n    }\n\n    return {\n        name: name,\n        getGender: getGender,\n        setGender: setGender\n    }\n}\n\nvar p1 = new Person(&apos;lrh&apos;);\np1.setGender(&apos;boy&apos;);\np1.getGender();//boy\n</code></pre></li>\n</ul>\n<h3 id=\"数组\"><a href=\"#数组\" class=\"headerlink\" title=\"数组\"></a>数组</h3><p>map方法对数组的所有成员一次调用一个函数，根据函数结果返回一个新数组。<br>map方法接受一个函数做为参数，调用时会将其传入三个参数，分辨是当前成员，当前位置，数组本身。<br>map方法还可以接受第二个参数，表示回调函数执行时this所指向的对象。</p>\n<p>forEach方法与map方法类似，但是一般不返回值。如果需要有返回值，一般使用map方法。<br>forEach方法不能中断执行，总是会遍历完所有成员，这时可以使用for循环代替。</p>\n<p>filter方法返回结构为true的成员。</p>\n<p>some方法，只要有一个成员的返回值为true，那么整个some方法的返回值就是true。</p>\n<p>every方法，每个数组成员的返回值是true，every方法才会返回true。</p>\n<p>reduce方法，依次处理数组的每个成员，最终累计成一个值。</p>\n<h3 id=\"字符串\"><a href=\"#字符串\" class=\"headerlink\" title=\"字符串\"></a>字符串</h3><p>substring方法用于从原字符串取出子字符串并返回，不改变原字符串。它与slice作用相同，但有一些奇怪的规则，因此不建议使用这个方法，优先使用slice。</p>\n<p>如果第二个参数大于第一个参数，substring方法会自动更换两个参数的位置。</p>\n<p>如果参数是负数，substring方法会自动将负数转为0。</p>\n<h3 id=\"对象的拷贝-浅拷贝\"><a href=\"#对象的拷贝-浅拷贝\" class=\"headerlink\" title=\"对象的拷贝-浅拷贝\"></a>对象的拷贝-浅拷贝</h3><p>确保拷贝后的对象，与原对象具有同样的prototype原型对象。<br>确保拷贝后的对象，与原对象具有同样的属性。</p>\n<pre><code>function copyObject(orig) {\n    var copy = Object.create(Object.getPrototypeOf(orig));\n    copyOwnPropertiesFrom(copy, orig);\n    return copy;\n}\n\nfunction copyOwnPropertiesFrom(target, source) {\n    Object\n        .getOwnPropertyNames(source)\n        .forEach(function(propKey) {\n            var desc = Object.getOwnPropertyDescriptor(source, propKey);\n            Object.defineProperty(target, propKey, desc);\n        });\n\n    return target;\n}\n</code></pre>"},{"title":"Promise","date":"2017-06-20T12:07:38.000Z","_content":"\n\n\n## Promise\n\nPromise是异步编程的一种解决方案，它是一个容器，里面保存着某个将来才会结束的事件。\n\n**通过异步操作的结果，决定它是哪种状态。**\n\n**pending ---> fulfilled   或者 pending ---> rejected**\n\n<!--more-->\n\n* 基本使用\n\n  ```\n  const getData = function(url) {\n    return new Promise((resolve, reject) => {\n      try{\n        setTimeout(() => {\n          console.log('data loaded');\n          resolve('get ' + url + ' data successfully');\n        }, 2000);\n      }catch(e){\n        reject(new Error('error'));\n      }\n    });\n  }\n\n  getData('test.json').then((data) => {\n    console.log(data);\n  });\n\n  ```\n\n* 异步加载图片\n\n  ```\n  const loadImage = function(url) {\n    return new Promise((resolve, reject) => {\n        const img = new Image();\n        img.onerror = reject;\n        img.onload = () => {\n          setTimeout(() => {\n            resolve('img loaded');\n          }, 2000);\n        };\n        img.src = url;\n    });\n  }\n\n  const imgURL = 'https://ss1.bdstatic.com/70cFvXSh_Q1YnxGkpoWK1HF6hhy/it/u=628594730,4098634647&fm=27&gp=0.jpg';\n  document.body.innerHTML = 'loading...';\n  loadImage(imgURL).then(data => {\n    const img = document.createElement('img');\n    img.style.width = '100px';\n    img.style.height = '100px';\n    img.src = imgURL;\n    document.body.innerHTML = '';\n    document.body.appendChild(img);\n  });\n  ```\n\n* Ajax请求\n\n  ```\n  const getData = function(url) {\n    return new Promise((resolve, reject) => {\n    \tconst handler = function() {\n        if (this.readyState !== 4) {\n          return;\n        }\n        if (this.status === 200) {\n          resolve(this.response);\n        } else {\n          reject(new Error(this.statusText));\n        }\n    \t};\n      const client = new XMLHttpRequest();\n      client.open('GET', url);\n      client.responseType = 'json';\n      client.onreadystatechange = handler;\n      client.setRequestHeader('Accept', 'application/json');\n      client.send();\n    });\n  }\n\n  getData('test.json').then(data => {\n    console.log(data);\n  });\n  ```\n\n* 应总是使用第一个then获取resolve状态的结果，使用catch获取错误的结果\n\n  ```\n  getData('test.json').then(data => {\n    console.log(data);\n  }).catch(e => {\n    console.log(e);\n  });\n  ```\n\n* Promise.all()用于将多个Promise实例，包装成一个新的Promise实例\n\n  ```\n  const p = Promise.all([p1, p2, p3]);\n  ```\n\n  1. p1, p2, p3的状态都变成fulfilled, p也会变成fulfilled，p1, p2, p3的返回值组成一个数组传递给p的回调函数。\n  2. p1, p2, p3中只要有一个被rejected，p的状态就变成rejected, 第一个被rejected的实例的返回值，会传递给p的回调函数。\n\n* Promise.race()也是将多个Promise实例包装成一个新的Promise实例\n\n  1. p1, p2, p3只要有一个先改变状态，p的状态就跟着改变。\n\n","source":"_posts/Promise.md","raw":"\n---\ntitle: Promise\ndate: 2017-06-20 20:07:38\ntags: ES6\n---\n\n\n\n## Promise\n\nPromise是异步编程的一种解决方案，它是一个容器，里面保存着某个将来才会结束的事件。\n\n**通过异步操作的结果，决定它是哪种状态。**\n\n**pending ---> fulfilled   或者 pending ---> rejected**\n\n<!--more-->\n\n* 基本使用\n\n  ```\n  const getData = function(url) {\n    return new Promise((resolve, reject) => {\n      try{\n        setTimeout(() => {\n          console.log('data loaded');\n          resolve('get ' + url + ' data successfully');\n        }, 2000);\n      }catch(e){\n        reject(new Error('error'));\n      }\n    });\n  }\n\n  getData('test.json').then((data) => {\n    console.log(data);\n  });\n\n  ```\n\n* 异步加载图片\n\n  ```\n  const loadImage = function(url) {\n    return new Promise((resolve, reject) => {\n        const img = new Image();\n        img.onerror = reject;\n        img.onload = () => {\n          setTimeout(() => {\n            resolve('img loaded');\n          }, 2000);\n        };\n        img.src = url;\n    });\n  }\n\n  const imgURL = 'https://ss1.bdstatic.com/70cFvXSh_Q1YnxGkpoWK1HF6hhy/it/u=628594730,4098634647&fm=27&gp=0.jpg';\n  document.body.innerHTML = 'loading...';\n  loadImage(imgURL).then(data => {\n    const img = document.createElement('img');\n    img.style.width = '100px';\n    img.style.height = '100px';\n    img.src = imgURL;\n    document.body.innerHTML = '';\n    document.body.appendChild(img);\n  });\n  ```\n\n* Ajax请求\n\n  ```\n  const getData = function(url) {\n    return new Promise((resolve, reject) => {\n    \tconst handler = function() {\n        if (this.readyState !== 4) {\n          return;\n        }\n        if (this.status === 200) {\n          resolve(this.response);\n        } else {\n          reject(new Error(this.statusText));\n        }\n    \t};\n      const client = new XMLHttpRequest();\n      client.open('GET', url);\n      client.responseType = 'json';\n      client.onreadystatechange = handler;\n      client.setRequestHeader('Accept', 'application/json');\n      client.send();\n    });\n  }\n\n  getData('test.json').then(data => {\n    console.log(data);\n  });\n  ```\n\n* 应总是使用第一个then获取resolve状态的结果，使用catch获取错误的结果\n\n  ```\n  getData('test.json').then(data => {\n    console.log(data);\n  }).catch(e => {\n    console.log(e);\n  });\n  ```\n\n* Promise.all()用于将多个Promise实例，包装成一个新的Promise实例\n\n  ```\n  const p = Promise.all([p1, p2, p3]);\n  ```\n\n  1. p1, p2, p3的状态都变成fulfilled, p也会变成fulfilled，p1, p2, p3的返回值组成一个数组传递给p的回调函数。\n  2. p1, p2, p3中只要有一个被rejected，p的状态就变成rejected, 第一个被rejected的实例的返回值，会传递给p的回调函数。\n\n* Promise.race()也是将多个Promise实例包装成一个新的Promise实例\n\n  1. p1, p2, p3只要有一个先改变状态，p的状态就跟着改变。\n\n","slug":"Promise","published":1,"updated":"2018-12-21T04:59:19.232Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjpxle9kh0008h8obj0a2czh8","content":"<h2 id=\"Promise\"><a href=\"#Promise\" class=\"headerlink\" title=\"Promise\"></a>Promise</h2><p>Promise是异步编程的一种解决方案，它是一个容器，里面保存着某个将来才会结束的事件。</p>\n<p><strong>通过异步操作的结果，决定它是哪种状态。</strong></p>\n<p><strong>pending —&gt; fulfilled   或者 pending —&gt; rejected</strong></p>\n<a id=\"more\"></a>\n<ul>\n<li><p>基本使用</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> getData = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">url</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> <span class=\"built_in\">Promise</span>(<span class=\"function\">(<span class=\"params\">resolve, reject</span>) =&gt;</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">try</span>&#123;</span><br><span class=\"line\">      setTimeout(<span class=\"function\"><span class=\"params\">()</span> =&gt;</span> &#123;</span><br><span class=\"line\">        <span class=\"built_in\">console</span>.log(<span class=\"string\">'data loaded'</span>);</span><br><span class=\"line\">        resolve(<span class=\"string\">'get '</span> + url + <span class=\"string\">' data successfully'</span>);</span><br><span class=\"line\">      &#125;, <span class=\"number\">2000</span>);</span><br><span class=\"line\">    &#125;<span class=\"keyword\">catch</span>(e)&#123;</span><br><span class=\"line\">      reject(<span class=\"keyword\">new</span> <span class=\"built_in\">Error</span>(<span class=\"string\">'error'</span>));</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">getData(<span class=\"string\">'test.json'</span>).then(<span class=\"function\">(<span class=\"params\">data</span>) =&gt;</span> &#123;</span><br><span class=\"line\">  <span class=\"built_in\">console</span>.log(data);</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>异步加载图片</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> loadImage = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">url</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> <span class=\"built_in\">Promise</span>(<span class=\"function\">(<span class=\"params\">resolve, reject</span>) =&gt;</span> &#123;</span><br><span class=\"line\">      <span class=\"keyword\">const</span> img = <span class=\"keyword\">new</span> Image();</span><br><span class=\"line\">      img.onerror = reject;</span><br><span class=\"line\">      img.onload = <span class=\"function\"><span class=\"params\">()</span> =&gt;</span> &#123;</span><br><span class=\"line\">        setTimeout(<span class=\"function\"><span class=\"params\">()</span> =&gt;</span> &#123;</span><br><span class=\"line\">          resolve(<span class=\"string\">'img loaded'</span>);</span><br><span class=\"line\">        &#125;, <span class=\"number\">2000</span>);</span><br><span class=\"line\">      &#125;;</span><br><span class=\"line\">      img.src = url;</span><br><span class=\"line\">  &#125;);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> imgURL = <span class=\"string\">'https://ss1.bdstatic.com/70cFvXSh_Q1YnxGkpoWK1HF6hhy/it/u=628594730,4098634647&amp;fm=27&amp;gp=0.jpg'</span>;</span><br><span class=\"line\"><span class=\"built_in\">document</span>.body.innerHTML = <span class=\"string\">'loading...'</span>;</span><br><span class=\"line\">loadImage(imgURL).then(<span class=\"function\"><span class=\"params\">data</span> =&gt;</span> &#123;</span><br><span class=\"line\">  <span class=\"keyword\">const</span> img = <span class=\"built_in\">document</span>.createElement(<span class=\"string\">'img'</span>);</span><br><span class=\"line\">  img.style.width = <span class=\"string\">'100px'</span>;</span><br><span class=\"line\">  img.style.height = <span class=\"string\">'100px'</span>;</span><br><span class=\"line\">  img.src = imgURL;</span><br><span class=\"line\">  <span class=\"built_in\">document</span>.body.innerHTML = <span class=\"string\">''</span>;</span><br><span class=\"line\">  <span class=\"built_in\">document</span>.body.appendChild(img);</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>Ajax请求</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> getData = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">url</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> <span class=\"built_in\">Promise</span>(<span class=\"function\">(<span class=\"params\">resolve, reject</span>) =&gt;</span> &#123;</span><br><span class=\"line\">  \t<span class=\"keyword\">const</span> handler = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">      <span class=\"keyword\">if</span> (<span class=\"keyword\">this</span>.readyState !== <span class=\"number\">4</span>) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span>;</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">      <span class=\"keyword\">if</span> (<span class=\"keyword\">this</span>.status === <span class=\"number\">200</span>) &#123;</span><br><span class=\"line\">        resolve(<span class=\"keyword\">this</span>.response);</span><br><span class=\"line\">      &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">        reject(<span class=\"keyword\">new</span> <span class=\"built_in\">Error</span>(<span class=\"keyword\">this</span>.statusText));</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">  \t&#125;;</span><br><span class=\"line\">    <span class=\"keyword\">const</span> client = <span class=\"keyword\">new</span> XMLHttpRequest();</span><br><span class=\"line\">    client.open(<span class=\"string\">'GET'</span>, url);</span><br><span class=\"line\">    client.responseType = <span class=\"string\">'json'</span>;</span><br><span class=\"line\">    client.onreadystatechange = handler;</span><br><span class=\"line\">    client.setRequestHeader(<span class=\"string\">'Accept'</span>, <span class=\"string\">'application/json'</span>);</span><br><span class=\"line\">    client.send();</span><br><span class=\"line\">  &#125;);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">getData(<span class=\"string\">'test.json'</span>).then(<span class=\"function\"><span class=\"params\">data</span> =&gt;</span> &#123;</span><br><span class=\"line\">  <span class=\"built_in\">console</span>.log(data);</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>应总是使用第一个then获取resolve状态的结果，使用catch获取错误的结果</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">getData(<span class=\"string\">'test.json'</span>).then(<span class=\"function\"><span class=\"params\">data</span> =&gt;</span> &#123;</span><br><span class=\"line\">  <span class=\"built_in\">console</span>.log(data);</span><br><span class=\"line\">&#125;).catch(<span class=\"function\"><span class=\"params\">e</span> =&gt;</span> &#123;</span><br><span class=\"line\">  <span class=\"built_in\">console</span>.log(e);</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>Promise.all()用于将多个Promise实例，包装成一个新的Promise实例</p>\n<figure class=\"highlight armasm\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"symbol\">const</span> p = Promise.all([<span class=\"built_in\">p1</span>, <span class=\"built_in\">p2</span>, <span class=\"built_in\">p3</span>])<span class=\"comment\">;</span></span><br></pre></td></tr></table></figure>\n<ol>\n<li>p1, p2, p3的状态都变成fulfilled, p也会变成fulfilled，p1, p2, p3的返回值组成一个数组传递给p的回调函数。</li>\n<li>p1, p2, p3中只要有一个被rejected，p的状态就变成rejected, 第一个被rejected的实例的返回值，会传递给p的回调函数。</li>\n</ol>\n</li>\n<li><p>Promise.race()也是将多个Promise实例包装成一个新的Promise实例</p>\n<ol>\n<li>p1, p2, p3只要有一个先改变状态，p的状态就跟着改变。</li>\n</ol>\n</li>\n</ul>\n","site":{"data":{}},"excerpt":"<h2 id=\"Promise\"><a href=\"#Promise\" class=\"headerlink\" title=\"Promise\"></a>Promise</h2><p>Promise是异步编程的一种解决方案，它是一个容器，里面保存着某个将来才会结束的事件。</p>\n<p><strong>通过异步操作的结果，决定它是哪种状态。</strong></p>\n<p><strong>pending —&gt; fulfilled   或者 pending —&gt; rejected</strong></p>","more":"<ul>\n<li><p>基本使用</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> getData = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">url</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> <span class=\"built_in\">Promise</span>(<span class=\"function\">(<span class=\"params\">resolve, reject</span>) =&gt;</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">try</span>&#123;</span><br><span class=\"line\">      setTimeout(<span class=\"function\"><span class=\"params\">()</span> =&gt;</span> &#123;</span><br><span class=\"line\">        <span class=\"built_in\">console</span>.log(<span class=\"string\">'data loaded'</span>);</span><br><span class=\"line\">        resolve(<span class=\"string\">'get '</span> + url + <span class=\"string\">' data successfully'</span>);</span><br><span class=\"line\">      &#125;, <span class=\"number\">2000</span>);</span><br><span class=\"line\">    &#125;<span class=\"keyword\">catch</span>(e)&#123;</span><br><span class=\"line\">      reject(<span class=\"keyword\">new</span> <span class=\"built_in\">Error</span>(<span class=\"string\">'error'</span>));</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">getData(<span class=\"string\">'test.json'</span>).then(<span class=\"function\">(<span class=\"params\">data</span>) =&gt;</span> &#123;</span><br><span class=\"line\">  <span class=\"built_in\">console</span>.log(data);</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>异步加载图片</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> loadImage = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">url</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> <span class=\"built_in\">Promise</span>(<span class=\"function\">(<span class=\"params\">resolve, reject</span>) =&gt;</span> &#123;</span><br><span class=\"line\">      <span class=\"keyword\">const</span> img = <span class=\"keyword\">new</span> Image();</span><br><span class=\"line\">      img.onerror = reject;</span><br><span class=\"line\">      img.onload = <span class=\"function\"><span class=\"params\">()</span> =&gt;</span> &#123;</span><br><span class=\"line\">        setTimeout(<span class=\"function\"><span class=\"params\">()</span> =&gt;</span> &#123;</span><br><span class=\"line\">          resolve(<span class=\"string\">'img loaded'</span>);</span><br><span class=\"line\">        &#125;, <span class=\"number\">2000</span>);</span><br><span class=\"line\">      &#125;;</span><br><span class=\"line\">      img.src = url;</span><br><span class=\"line\">  &#125;);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> imgURL = <span class=\"string\">'https://ss1.bdstatic.com/70cFvXSh_Q1YnxGkpoWK1HF6hhy/it/u=628594730,4098634647&amp;fm=27&amp;gp=0.jpg'</span>;</span><br><span class=\"line\"><span class=\"built_in\">document</span>.body.innerHTML = <span class=\"string\">'loading...'</span>;</span><br><span class=\"line\">loadImage(imgURL).then(<span class=\"function\"><span class=\"params\">data</span> =&gt;</span> &#123;</span><br><span class=\"line\">  <span class=\"keyword\">const</span> img = <span class=\"built_in\">document</span>.createElement(<span class=\"string\">'img'</span>);</span><br><span class=\"line\">  img.style.width = <span class=\"string\">'100px'</span>;</span><br><span class=\"line\">  img.style.height = <span class=\"string\">'100px'</span>;</span><br><span class=\"line\">  img.src = imgURL;</span><br><span class=\"line\">  <span class=\"built_in\">document</span>.body.innerHTML = <span class=\"string\">''</span>;</span><br><span class=\"line\">  <span class=\"built_in\">document</span>.body.appendChild(img);</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>Ajax请求</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> getData = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">url</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> <span class=\"built_in\">Promise</span>(<span class=\"function\">(<span class=\"params\">resolve, reject</span>) =&gt;</span> &#123;</span><br><span class=\"line\">  \t<span class=\"keyword\">const</span> handler = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">      <span class=\"keyword\">if</span> (<span class=\"keyword\">this</span>.readyState !== <span class=\"number\">4</span>) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span>;</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">      <span class=\"keyword\">if</span> (<span class=\"keyword\">this</span>.status === <span class=\"number\">200</span>) &#123;</span><br><span class=\"line\">        resolve(<span class=\"keyword\">this</span>.response);</span><br><span class=\"line\">      &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">        reject(<span class=\"keyword\">new</span> <span class=\"built_in\">Error</span>(<span class=\"keyword\">this</span>.statusText));</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">  \t&#125;;</span><br><span class=\"line\">    <span class=\"keyword\">const</span> client = <span class=\"keyword\">new</span> XMLHttpRequest();</span><br><span class=\"line\">    client.open(<span class=\"string\">'GET'</span>, url);</span><br><span class=\"line\">    client.responseType = <span class=\"string\">'json'</span>;</span><br><span class=\"line\">    client.onreadystatechange = handler;</span><br><span class=\"line\">    client.setRequestHeader(<span class=\"string\">'Accept'</span>, <span class=\"string\">'application/json'</span>);</span><br><span class=\"line\">    client.send();</span><br><span class=\"line\">  &#125;);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">getData(<span class=\"string\">'test.json'</span>).then(<span class=\"function\"><span class=\"params\">data</span> =&gt;</span> &#123;</span><br><span class=\"line\">  <span class=\"built_in\">console</span>.log(data);</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>应总是使用第一个then获取resolve状态的结果，使用catch获取错误的结果</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">getData(<span class=\"string\">'test.json'</span>).then(<span class=\"function\"><span class=\"params\">data</span> =&gt;</span> &#123;</span><br><span class=\"line\">  <span class=\"built_in\">console</span>.log(data);</span><br><span class=\"line\">&#125;).catch(<span class=\"function\"><span class=\"params\">e</span> =&gt;</span> &#123;</span><br><span class=\"line\">  <span class=\"built_in\">console</span>.log(e);</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>Promise.all()用于将多个Promise实例，包装成一个新的Promise实例</p>\n<figure class=\"highlight armasm\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"symbol\">const</span> p = Promise.all([<span class=\"built_in\">p1</span>, <span class=\"built_in\">p2</span>, <span class=\"built_in\">p3</span>])<span class=\"comment\">;</span></span><br></pre></td></tr></table></figure>\n<ol>\n<li>p1, p2, p3的状态都变成fulfilled, p也会变成fulfilled，p1, p2, p3的返回值组成一个数组传递给p的回调函数。</li>\n<li>p1, p2, p3中只要有一个被rejected，p的状态就变成rejected, 第一个被rejected的实例的返回值，会传递给p的回调函数。</li>\n</ol>\n</li>\n<li><p>Promise.race()也是将多个Promise实例包装成一个新的Promise实例</p>\n<ol>\n<li>p1, p2, p3只要有一个先改变状态，p的状态就跟着改变。</li>\n</ol>\n</li>\n</ul>"},{"title":"Javascript设计模式简述","date":"2017-04-25T13:25:12.000Z","_content":"\n示例代码：[点击这里](https://github.com/renhongl/Summary/tree/master/demo/mode-demo)。\n\n设计模式的主题总是把不变的事物和变化的事物分离开来。\n<!--more-->\n\n### 鸭子类型\n\n如果它走起来像鸭子，叫起来也像鸭子，那么它就是鸭子。\n\n### 多态\n\n* 多态的思想是把“做什么”和“谁去做”分离开来。\n\n* 多态最根本的作用就是通过把过程化的条件分支语句转化为对象的多态性，从而消除这些条件分支语句。\n\n* 多态的最根本好处在于，你不必再像的对象询问“你是什么类型”而后根据得到的答案调用对象的某个行为，\n你只管调用该行为就是了，其他的一切多态机制都会为你安排妥当。\n\n### 封装\n* 封装的目的是将信息影藏。\n* 一般而言，封装是指封装数据和封装实现。\n* 更广义的封装，还包括封装类型和封装变化。\n\n#### this\n* 作为对象的方法调用。\n        \n        let obj = {\n            a: 1,\n            getA: function() {\n                console.log(this === obj);//true\n                console.log(this.a);//1\n            }\n        };\n        obj.getA();\n\n* 作为普通函数调用。\n\n        window.name = 'global';\n        let getName = function() {\n            return this.name;\n        }\n        console.log(getName());//global\n\n        //or\n\n        window.name = 'global';\n        let myObj = {\n            name: 'renhong',\n            getName: function() {\n                return this.name;\n            }\n        }\n        var getName = myObj.getName;//普通函数调用\n        console.log(getName());//global\n\n        console.log(myObj.getName());//renhong, 对象的方法调用\n\n* 构造器调用。当用new运算符调用函数时，该函数总会返回一个对象，构造器里的this就指向这个对象。\n\n        let MyClass = function() {\n            this.name = 'renhong';\n        }\n        let obj = new MyClass();\n        console.log(obj.name);//renhong\n\n        //如果构造器显示返回一个对象，那么new之后返回的是这个对象，而不是this。\n\n        let MyClass = function() {\n            this.name = 'renhong',\n            return {\n                name: 'mogu'\n            }\n        }\n        let obj = new MyClass();\n        console.log(obj.name);//mogu\n\n* call和apply调用。用于动态的改变传入函数的this。\n\n        let obj1 = {\n            name: 'renhong',\n            getName: function() {\n                return this.name;\n            }\n        }\n\n        let obj2 = {\n            name: 'mogu'\n        }\n\n        console.log(obj1.getName());//renhong\n        console.log(obj1.getName.call(obj2));//mogu\n\n#### call和apply\n* 作用一模一样，区别只在于传入参数的形式不同。\n* apply接受两个参数，第一个参数指定函数体内部的this指向。第二个参数是一个数组或者类数组，这些元素全部作为参数传递给被调用的函数。\n\n        let func = function(a, b, c) {\n            console.log([a, b, c]);//[1, 2, 3]\n        }\n        func.apply(null, [1, 2, 3]);\n\n* call 传入的参数是不固定的，第一个参数同样是代表函数体内的this指向，从第二个参数开始，每个参数一次被当做被调用的函数的参数传入。\n\n        let func = function(a, b, c) {\n            console.log([a, b, c]);//[1, 2, 3]\n        }\n        func.call(null, 1, 2, 3);\n\n* 为什么要使用call和apply？\n\n        //改变this指向\n        //---------例子1\n        let obj1 = {\n            name: 'renhong'\n        }\n        let obj2 = {\n            name: 'mogu'\n        }\n        window.name = 'window';\n        let getName = function() {\n            this.name;\n        }\n        getName();//window\n        getName.call(obj1);//renhong\n        getName.call(obj2);//mogu\n\n        //---------例子2\n        let func = function() {\n            console.log(this.id);\n        }\n        document.getElementById('div1').onclick = function() {\n            console.log(this.id);//div1\n            func();//undefined，指向window\n            func.call(this);//div1，指向这个this\n        }\n\n        //---------例子3\n        class Controller{\n            constructor() {\n                let type = 'dialog';\n                this.name = 'controller';\n                renderControl();\n                handleEvents.call(this);\n                renderDialog.call(this, type);\n            }\n        }\n         \n        function renderControl() {\n            console.log(this.name);//undefined，this指向window\n        }\n\n        function handleEvents() {\n            console.log(this.name);//controller\n        }\n\n        function renderDialog(type) {\n            console.log(type);//dialog\n        }\n\n        //借用其他对象的方法\n        //类数组对象arguments，没有push的方法，不能将元素push进去。我们首先调用数组的push方法，再手动将push方法内部的this指向改为arguments，就帮助arguments实现了push功能。\n        (function() {\n            Array.prototype.push.call(arguments, 3);\n            console.log(arguments);//[1, 2, 3]\n        })(1, 2);\n\n\n\n### 闭包\n\n闭包是一个非常强大的特性，但人们对其也有诸多误解。一种耸人听闻的说法是闭包会造成内存泄漏，所以要尽量减少闭包的使用。\n\n局部变量本来应该在函数退出的时候被解除饮用，但如果局部变量被封闭在闭包形成的环境中，那么这个局部变量就能一直生存下去。从这个意义上看，闭包的确会使一些数据无法被及时销毁。使用闭包的一部分原因是我们选择主动把一些变量封闭在闭包中，因为可能在以后还需要使用这些变量，把这些变量放在闭包中和放在全局作用域，对内存方面的影响是一致的。\n\n\n跟闭包和内存泄漏有关系的地方是，使用闭包的同时，比较容易形成循环引用，如果闭包的作用域链中保存着一些DOM节点，这时候有可能造成内存泄漏。但这并非闭包问题，也并非Javascript问题。\n\n**注：** 当代码中需要全局变量时，可以使用闭包，将这个变量封装在一个函数中，那这个函数就封装了一个独立的功能，不再依赖外部的变量。\n\n### 函数柯里化（function currying）\n\ncurrying又称部分求值。一个currying的函数首先会接受一些参数，接受了这些参数之后，该函数并不会立即求值，而是继续返回另外一个函数，刚传入的参数在函数形成的闭包中被保存起来。待到函数真正需要求值的时候，之前传入的所有参数都会被一次性用于求值。\n\n### uncurrying\n\n当我们调用对象的某个方法时，其实不用去关心该对象原本是否被设计为拥有这个方法，这是动态类型语言的特点，也是常说的鸭子类型思想。\n\n同理，一个对象也未必只有使用它自身的方法。通过call和apply方法可以让对象去借用一个原本不属于它的方法。\n\n\n### 降频\n\n在一些情况下，函数的触发不是由用户直接控制的，在这些情景下，函数可能被非常频繁的调用，而造成大的性能问题。\n\n例如在window的resize事件中，或者在div拖动事件中，会频繁的触发这些事件，并且DOM相关的操作非常消耗性能，这时浏览器可能会出现卡顿现象。\n\n以上现象我们可以使用setTimeout来实现每隔固定时间来触发事件，如果过于频繁，将忽略那次的事件。\n\n代码流程：\n\n    var resize = function(callback, interval) {\n        var timer,\n            firstTime = true;\n        return function() {\n            var args = arguments,\n                self = this;\n            if(firstTime) {\n                callback.apply(self, args);\n                return false;\n            }\n            if(timer) {\n                return false;\n            }\n            timer = setTimeout(function() {\n                clearTimeout(timer);\n                timer = null;\n                callback.apply(self, args);\n            }, interval || 500)\n        }\n    };\n\n    window.onresize = resize(function() {\n        console.log('resized', Date.now());\n    }, 1000);\n\n\n\n\n\n### 原型模式\n\n类并不是必须的，对象未必需要从类中创建而来，一个对象是通过克隆另外一个对象所得到的。\n\n原型模式不但是一种设计模式，也被称为一种编程泛型。\n\nECMAScript5提供了Object.create方法，可以用来克隆对象。\n\n但是create方法性能不如 var obj = {} 或者 var obj = new Object();\n\n以上两种替代方式，内部都是克隆原型而得到对象。\n\n**注：** Javascript中的根对象是Object，所有的对象都从根对象克隆而来。\n\n### 单例模式\n\n保证一个类仅有一个实例，并提供一个访问它的全局访问点。\n\n推荐使用惰性单例的方式创建，即在需要时才创建单例对象。并且需要把不变的部分隔离出来，把管理单例的逻辑和创建对象的逻辑分开，这两个方法可以独立变化而不互相影响。当它们连接在一起时，就完成了创建唯一实例对象的功能。\n\n        \n\n    //以下是基本实现方法，但是并没有实现：\n    //\"并且需要把不变的部分隔离出来，把管理单例的逻辑和创建对象的逻辑分开，\n    //这两个方法可以独立变化而不互相影响。当它们连接在一起时，就完成了创建唯一实例对象的功能。\"\n    //的功能。因为再加一个单例元素时，需要修改管理单利的类。SingletonDOM只是为CreateDOM而生的管理类。\n\n    export class SingletonDOM{\n        constructor() {\n            this.createDOM = new CreateDOM;\n        }\n\n        create() {\n            if (!this.instance) {\n                return this.instance = this.createDOM.create();\n            }\n            return this.instance;\n        }\n    }\n\n    export class CreateDOM{\n        create(type) {\n            return document.createElement(type || 'div');\n        }\n    }\n\n    export class CreateButton{\n        create() {\n            return document.createElement('button');\n        }\n    }\n\n    //通用管理单例的类。\n\n    export class GetSingleton{\n        constructor(ClassName) {\n            this.obj = new ClassName();\n        }\n\n        create() {\n            if (!this.instance) {\n                return this.instance = this.obj.create();\n            }\n            return this.instance;\n        }\n    }\n\n### 策略模式\n\n定义一系列的算法，把它们一个个封装起来，并且使它们可以互相替换。\n\n一个基于策略模式的程序至少由两部分组成。第一个部分是一组策略类，策略类封装了具体的算法，并负责具体的计算过程。第二个部分是环境类context，context接受客户的请求，随后把请求委托给某一个策略类。\n\n策略模式可以消除程序中大片的条件分支语句。\n\n        \n\n    class LevelA{\n        calculate(salary) {\n            return salary * 2;\n        }\n    }\n\n    class LevelB{\n        calculate(salary) {\n            return salary * 3;\n        }\n    }\n\n    class LevelC{\n        calculate(salary) {\n            return salary * 4;\n        }\n    }\n\n    export class GetBonus{\n        constructor() {\n            this.calculateMapping = {\n                A: new LevelA(),\n                B: new LevelB(),\n                C: new LevelC()\n            }\n        }\n\n        calculate(type, salary) {\n            return this.calculateMapping[type].calculate(salary);\n        }\n    }\n\n### 代理模式\n\n代理模式是为一个对象提供一个代用品或占位符，以便控制对它的访问。\n\n代理和本体接口保持一致，那么用户可以放心的请求代理，他只关心是否得到想要的结果；在任何使用本体的地方都可以替换成使用代理。\n\n虚拟代理：例如实现图片预加载、合并http请求。\n\n缓存代理：例如缓存ajax异步请求的数据，下次再打开同一页的时候，便可以直接使用之前的数据。\n\n        \n\n\n\n\n    export class LoadImage{\n        setUrl(url, target) {\n            target.src = url;\n        }\n    }\n\n    export class LoadImageProxy{\n        constructor() {\n            this.loadImage = new LoadImage();\n        }\n\n        setUrl(url, target) {\n            this.loadImage.setUrl('./image/p2.gif', target);\n            let img = new Image();\n            img.onload = () => {\n                setTimeout(() => {\n                    this.loadImage.setUrl(url, target);\n                }, 2000);\n            }\n            img.src = url;\n        }\n    }\n\n    export class LoadData{\n        constructor() {\n            this.data = {\n                renhong: {\n                    name: 'renhongl',\n                    age: 18\n                },\n                mogu: {\n                    name: 'mogu',\n                    age: 19\n                }\n            };\n        }\n\n        load(name, callback) {\n            setTimeout(() => {\n                callback(this.data[name]);\n            }, 2000);\n        }\n    }\n\n    export class LoadDataProxy{\n        constructor() {\n            this.loadData = new LoadData();\n            this.cache = {};\n        }\n\n        load(name, callback) {\n            if (!this.cache[name]) {\n                this.loadData.load(name, (data) => {\n                    this.cache[name] = data;\n                    callback(data);\n                });\n            } else {\n                callback(this.cache[name]);\n            }\n        }\n    }\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n### 迭代器模式\n\n迭代器模式是指提供一种方法顺序访问一个聚合对象中的各个元素，而又不需要暴露该对象的内部表示。\n\n内部迭代器在调用的时候非常方便，外界不用关心迭代器内部的实现，跟迭代器的交互也仅仅是一次初始调用，但这也刚好是内部迭代器的缺点。\n\n外部迭代器增加了一些调用的复杂度，但相对也增强了迭代器的灵活性，我们可以手工控制迭代的过程或者顺序。\n\n中止迭代器可以像普通for循环中的break一样，提供一种跳出循环的方法。\n\n### 发布-订阅模式\n\n又叫观察者模式，它定义对象间的一种一对多的依赖关系，当一个对象的状态发生改变时，所有依赖于它的对象都将得到通知。\n\n推荐使用全局的发布-订阅对象，并且增加可以先发布再订阅的方法，以及实现命名空间的功能。\n\n* 具体写法：使用Map将话题和要执行的回调方法一一对应的存下来，即订阅。在发布这个话题时，使用发布的参数，执行这个话题的回调方法。\n* 订阅前发布：在发布某个话题时，如果这个话题尚未被订阅，那么将这个话题存储起来，等订阅之后，立即发布。那么，在写代码时，就不会发生发布在订阅之前，导致功能不能被触发的问题。\n* 命名空间：如果整个项目都使用了此模式，很容易在没有命名空间的情况下混淆话题。\n* 基本写法：\n\n        class Observer{\n            constructor() {\n                this.topicMapping = {};\n                this.publishStore = {};\n            }\n\n            subscribe(...args) {\n                let topic = args.shift();\n                let callback = args.shift();\n                if (!this.topicMapping[topic]) {\n                    this.topicMapping[topic] = [];\n                }\n                this.topicMapping[topic].push(callback);\n                console.log(`subscribed topic ${topic}`);\n                //check if had subscribed\n                if (this.publishStore[topic]) {\n                    console.log(`trigger topic ${topic} immediately`);\n                    this.publish(topic, this.publishStore[topic]);\n                    delete this.publishStore[topic];\n                }\n            }\n\n            publish(...args) {\n                let topic = args.shift();\n                if (this.topicMapping[topic]) {\n                    this.topicMapping[topic].forEach((v, k) => {\n                        v.apply(null, args);\n                    });\n                } else {\n                    console.log(`no topic: ${topic} has been subscribed, this publish will store here, after subscribe, will trigger`);\n                    this.publishStore[topic] = args;\n                }\n            }\n\n            unsubscribe(...args) {\n                let topic = args.shift();\n                let callback = args.shift();\n                if (this.topicMapping[topic]) {\n                    delete this.topicMapping[topic];\n                    if (callback instanceof Function) {\n                        callback(args);\n                    }\n                } else {\n                    console.log(`no topic ${topic} has been subscribe, so no need unsubscribe.`);\n                }\n            }\n        }\n\n        export default Observer;\n\n\n\n### 命令模式\n\n命令模式最常见的应用场景是：有时候需要向某些对象发送请求，但是并不知道请求的接收者是谁，也不知道被请求的操作是什么。此时希望用一种松耦合的方式来设计程序，使得请求发送者和请求接收者能够消除彼此之间的耦合关系。\n\n### 组合模式\n\n组合模式将对象组合成树形结构，以表示“部分-整体”的层次结构。除了用来表示树形结构之外，组合模式的另一个好处是通过对象的多态性表现，使得用户对单个对象和组合对象的使用具有一致性。\n\n### 模板方法模式\n\n假如我们有一些平行的子类，各个子类之间有一些相同的行为，也有一些不同的行为。如果相同和不同的行为都混合在各个子类的实现中，说明这些相同的行为会在各个子类中重复出现。但实际上，相同的行为可以被搬到另外一个单一的地方，模板方法就是为解决这个问题而生的。\n\n在模板方法中，可以使用钩子方法来隔离变化。我们在父类种容易变化的地方放置钩子，钩子可以有一个默认的实现，究竟要不要挂钩，这由子类自行决定。\n\n模板方法模式是一种典型的通过封装变化提高系统扩展性的设计模式。子类的方法种类和执行顺序都是不变的，所以我们把这部分逻辑抽象到父类的模板方法中，而子类的方法具体怎么实现则是可变的，把这部分变化的逻辑封装到子类中。\n\n### 享元模式\n\n享元模式是一种用于性能优化的模式。享元模式的核心是运用共享技术来有效支持大量细粒度的对象。\n\n使用享元模式的关键是如何区别内部状态和外部状态，可以被对象共享的属性通常被划分为内部状态。\n\n### 职责链模式\n\n### 中介者模式\n\n### 装饰者模式\n\n### 状态模式\n\n### 适配器模式","source":"_posts/Javascript设计模式简述.md","raw":"---\ntitle: Javascript设计模式简述\ndate: 2017-04-25 21:25:12\ntags:\n\t- Javascript\n---\n\n示例代码：[点击这里](https://github.com/renhongl/Summary/tree/master/demo/mode-demo)。\n\n设计模式的主题总是把不变的事物和变化的事物分离开来。\n<!--more-->\n\n### 鸭子类型\n\n如果它走起来像鸭子，叫起来也像鸭子，那么它就是鸭子。\n\n### 多态\n\n* 多态的思想是把“做什么”和“谁去做”分离开来。\n\n* 多态最根本的作用就是通过把过程化的条件分支语句转化为对象的多态性，从而消除这些条件分支语句。\n\n* 多态的最根本好处在于，你不必再像的对象询问“你是什么类型”而后根据得到的答案调用对象的某个行为，\n你只管调用该行为就是了，其他的一切多态机制都会为你安排妥当。\n\n### 封装\n* 封装的目的是将信息影藏。\n* 一般而言，封装是指封装数据和封装实现。\n* 更广义的封装，还包括封装类型和封装变化。\n\n#### this\n* 作为对象的方法调用。\n        \n        let obj = {\n            a: 1,\n            getA: function() {\n                console.log(this === obj);//true\n                console.log(this.a);//1\n            }\n        };\n        obj.getA();\n\n* 作为普通函数调用。\n\n        window.name = 'global';\n        let getName = function() {\n            return this.name;\n        }\n        console.log(getName());//global\n\n        //or\n\n        window.name = 'global';\n        let myObj = {\n            name: 'renhong',\n            getName: function() {\n                return this.name;\n            }\n        }\n        var getName = myObj.getName;//普通函数调用\n        console.log(getName());//global\n\n        console.log(myObj.getName());//renhong, 对象的方法调用\n\n* 构造器调用。当用new运算符调用函数时，该函数总会返回一个对象，构造器里的this就指向这个对象。\n\n        let MyClass = function() {\n            this.name = 'renhong';\n        }\n        let obj = new MyClass();\n        console.log(obj.name);//renhong\n\n        //如果构造器显示返回一个对象，那么new之后返回的是这个对象，而不是this。\n\n        let MyClass = function() {\n            this.name = 'renhong',\n            return {\n                name: 'mogu'\n            }\n        }\n        let obj = new MyClass();\n        console.log(obj.name);//mogu\n\n* call和apply调用。用于动态的改变传入函数的this。\n\n        let obj1 = {\n            name: 'renhong',\n            getName: function() {\n                return this.name;\n            }\n        }\n\n        let obj2 = {\n            name: 'mogu'\n        }\n\n        console.log(obj1.getName());//renhong\n        console.log(obj1.getName.call(obj2));//mogu\n\n#### call和apply\n* 作用一模一样，区别只在于传入参数的形式不同。\n* apply接受两个参数，第一个参数指定函数体内部的this指向。第二个参数是一个数组或者类数组，这些元素全部作为参数传递给被调用的函数。\n\n        let func = function(a, b, c) {\n            console.log([a, b, c]);//[1, 2, 3]\n        }\n        func.apply(null, [1, 2, 3]);\n\n* call 传入的参数是不固定的，第一个参数同样是代表函数体内的this指向，从第二个参数开始，每个参数一次被当做被调用的函数的参数传入。\n\n        let func = function(a, b, c) {\n            console.log([a, b, c]);//[1, 2, 3]\n        }\n        func.call(null, 1, 2, 3);\n\n* 为什么要使用call和apply？\n\n        //改变this指向\n        //---------例子1\n        let obj1 = {\n            name: 'renhong'\n        }\n        let obj2 = {\n            name: 'mogu'\n        }\n        window.name = 'window';\n        let getName = function() {\n            this.name;\n        }\n        getName();//window\n        getName.call(obj1);//renhong\n        getName.call(obj2);//mogu\n\n        //---------例子2\n        let func = function() {\n            console.log(this.id);\n        }\n        document.getElementById('div1').onclick = function() {\n            console.log(this.id);//div1\n            func();//undefined，指向window\n            func.call(this);//div1，指向这个this\n        }\n\n        //---------例子3\n        class Controller{\n            constructor() {\n                let type = 'dialog';\n                this.name = 'controller';\n                renderControl();\n                handleEvents.call(this);\n                renderDialog.call(this, type);\n            }\n        }\n         \n        function renderControl() {\n            console.log(this.name);//undefined，this指向window\n        }\n\n        function handleEvents() {\n            console.log(this.name);//controller\n        }\n\n        function renderDialog(type) {\n            console.log(type);//dialog\n        }\n\n        //借用其他对象的方法\n        //类数组对象arguments，没有push的方法，不能将元素push进去。我们首先调用数组的push方法，再手动将push方法内部的this指向改为arguments，就帮助arguments实现了push功能。\n        (function() {\n            Array.prototype.push.call(arguments, 3);\n            console.log(arguments);//[1, 2, 3]\n        })(1, 2);\n\n\n\n### 闭包\n\n闭包是一个非常强大的特性，但人们对其也有诸多误解。一种耸人听闻的说法是闭包会造成内存泄漏，所以要尽量减少闭包的使用。\n\n局部变量本来应该在函数退出的时候被解除饮用，但如果局部变量被封闭在闭包形成的环境中，那么这个局部变量就能一直生存下去。从这个意义上看，闭包的确会使一些数据无法被及时销毁。使用闭包的一部分原因是我们选择主动把一些变量封闭在闭包中，因为可能在以后还需要使用这些变量，把这些变量放在闭包中和放在全局作用域，对内存方面的影响是一致的。\n\n\n跟闭包和内存泄漏有关系的地方是，使用闭包的同时，比较容易形成循环引用，如果闭包的作用域链中保存着一些DOM节点，这时候有可能造成内存泄漏。但这并非闭包问题，也并非Javascript问题。\n\n**注：** 当代码中需要全局变量时，可以使用闭包，将这个变量封装在一个函数中，那这个函数就封装了一个独立的功能，不再依赖外部的变量。\n\n### 函数柯里化（function currying）\n\ncurrying又称部分求值。一个currying的函数首先会接受一些参数，接受了这些参数之后，该函数并不会立即求值，而是继续返回另外一个函数，刚传入的参数在函数形成的闭包中被保存起来。待到函数真正需要求值的时候，之前传入的所有参数都会被一次性用于求值。\n\n### uncurrying\n\n当我们调用对象的某个方法时，其实不用去关心该对象原本是否被设计为拥有这个方法，这是动态类型语言的特点，也是常说的鸭子类型思想。\n\n同理，一个对象也未必只有使用它自身的方法。通过call和apply方法可以让对象去借用一个原本不属于它的方法。\n\n\n### 降频\n\n在一些情况下，函数的触发不是由用户直接控制的，在这些情景下，函数可能被非常频繁的调用，而造成大的性能问题。\n\n例如在window的resize事件中，或者在div拖动事件中，会频繁的触发这些事件，并且DOM相关的操作非常消耗性能，这时浏览器可能会出现卡顿现象。\n\n以上现象我们可以使用setTimeout来实现每隔固定时间来触发事件，如果过于频繁，将忽略那次的事件。\n\n代码流程：\n\n    var resize = function(callback, interval) {\n        var timer,\n            firstTime = true;\n        return function() {\n            var args = arguments,\n                self = this;\n            if(firstTime) {\n                callback.apply(self, args);\n                return false;\n            }\n            if(timer) {\n                return false;\n            }\n            timer = setTimeout(function() {\n                clearTimeout(timer);\n                timer = null;\n                callback.apply(self, args);\n            }, interval || 500)\n        }\n    };\n\n    window.onresize = resize(function() {\n        console.log('resized', Date.now());\n    }, 1000);\n\n\n\n\n\n### 原型模式\n\n类并不是必须的，对象未必需要从类中创建而来，一个对象是通过克隆另外一个对象所得到的。\n\n原型模式不但是一种设计模式，也被称为一种编程泛型。\n\nECMAScript5提供了Object.create方法，可以用来克隆对象。\n\n但是create方法性能不如 var obj = {} 或者 var obj = new Object();\n\n以上两种替代方式，内部都是克隆原型而得到对象。\n\n**注：** Javascript中的根对象是Object，所有的对象都从根对象克隆而来。\n\n### 单例模式\n\n保证一个类仅有一个实例，并提供一个访问它的全局访问点。\n\n推荐使用惰性单例的方式创建，即在需要时才创建单例对象。并且需要把不变的部分隔离出来，把管理单例的逻辑和创建对象的逻辑分开，这两个方法可以独立变化而不互相影响。当它们连接在一起时，就完成了创建唯一实例对象的功能。\n\n        \n\n    //以下是基本实现方法，但是并没有实现：\n    //\"并且需要把不变的部分隔离出来，把管理单例的逻辑和创建对象的逻辑分开，\n    //这两个方法可以独立变化而不互相影响。当它们连接在一起时，就完成了创建唯一实例对象的功能。\"\n    //的功能。因为再加一个单例元素时，需要修改管理单利的类。SingletonDOM只是为CreateDOM而生的管理类。\n\n    export class SingletonDOM{\n        constructor() {\n            this.createDOM = new CreateDOM;\n        }\n\n        create() {\n            if (!this.instance) {\n                return this.instance = this.createDOM.create();\n            }\n            return this.instance;\n        }\n    }\n\n    export class CreateDOM{\n        create(type) {\n            return document.createElement(type || 'div');\n        }\n    }\n\n    export class CreateButton{\n        create() {\n            return document.createElement('button');\n        }\n    }\n\n    //通用管理单例的类。\n\n    export class GetSingleton{\n        constructor(ClassName) {\n            this.obj = new ClassName();\n        }\n\n        create() {\n            if (!this.instance) {\n                return this.instance = this.obj.create();\n            }\n            return this.instance;\n        }\n    }\n\n### 策略模式\n\n定义一系列的算法，把它们一个个封装起来，并且使它们可以互相替换。\n\n一个基于策略模式的程序至少由两部分组成。第一个部分是一组策略类，策略类封装了具体的算法，并负责具体的计算过程。第二个部分是环境类context，context接受客户的请求，随后把请求委托给某一个策略类。\n\n策略模式可以消除程序中大片的条件分支语句。\n\n        \n\n    class LevelA{\n        calculate(salary) {\n            return salary * 2;\n        }\n    }\n\n    class LevelB{\n        calculate(salary) {\n            return salary * 3;\n        }\n    }\n\n    class LevelC{\n        calculate(salary) {\n            return salary * 4;\n        }\n    }\n\n    export class GetBonus{\n        constructor() {\n            this.calculateMapping = {\n                A: new LevelA(),\n                B: new LevelB(),\n                C: new LevelC()\n            }\n        }\n\n        calculate(type, salary) {\n            return this.calculateMapping[type].calculate(salary);\n        }\n    }\n\n### 代理模式\n\n代理模式是为一个对象提供一个代用品或占位符，以便控制对它的访问。\n\n代理和本体接口保持一致，那么用户可以放心的请求代理，他只关心是否得到想要的结果；在任何使用本体的地方都可以替换成使用代理。\n\n虚拟代理：例如实现图片预加载、合并http请求。\n\n缓存代理：例如缓存ajax异步请求的数据，下次再打开同一页的时候，便可以直接使用之前的数据。\n\n        \n\n\n\n\n    export class LoadImage{\n        setUrl(url, target) {\n            target.src = url;\n        }\n    }\n\n    export class LoadImageProxy{\n        constructor() {\n            this.loadImage = new LoadImage();\n        }\n\n        setUrl(url, target) {\n            this.loadImage.setUrl('./image/p2.gif', target);\n            let img = new Image();\n            img.onload = () => {\n                setTimeout(() => {\n                    this.loadImage.setUrl(url, target);\n                }, 2000);\n            }\n            img.src = url;\n        }\n    }\n\n    export class LoadData{\n        constructor() {\n            this.data = {\n                renhong: {\n                    name: 'renhongl',\n                    age: 18\n                },\n                mogu: {\n                    name: 'mogu',\n                    age: 19\n                }\n            };\n        }\n\n        load(name, callback) {\n            setTimeout(() => {\n                callback(this.data[name]);\n            }, 2000);\n        }\n    }\n\n    export class LoadDataProxy{\n        constructor() {\n            this.loadData = new LoadData();\n            this.cache = {};\n        }\n\n        load(name, callback) {\n            if (!this.cache[name]) {\n                this.loadData.load(name, (data) => {\n                    this.cache[name] = data;\n                    callback(data);\n                });\n            } else {\n                callback(this.cache[name]);\n            }\n        }\n    }\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n### 迭代器模式\n\n迭代器模式是指提供一种方法顺序访问一个聚合对象中的各个元素，而又不需要暴露该对象的内部表示。\n\n内部迭代器在调用的时候非常方便，外界不用关心迭代器内部的实现，跟迭代器的交互也仅仅是一次初始调用，但这也刚好是内部迭代器的缺点。\n\n外部迭代器增加了一些调用的复杂度，但相对也增强了迭代器的灵活性，我们可以手工控制迭代的过程或者顺序。\n\n中止迭代器可以像普通for循环中的break一样，提供一种跳出循环的方法。\n\n### 发布-订阅模式\n\n又叫观察者模式，它定义对象间的一种一对多的依赖关系，当一个对象的状态发生改变时，所有依赖于它的对象都将得到通知。\n\n推荐使用全局的发布-订阅对象，并且增加可以先发布再订阅的方法，以及实现命名空间的功能。\n\n* 具体写法：使用Map将话题和要执行的回调方法一一对应的存下来，即订阅。在发布这个话题时，使用发布的参数，执行这个话题的回调方法。\n* 订阅前发布：在发布某个话题时，如果这个话题尚未被订阅，那么将这个话题存储起来，等订阅之后，立即发布。那么，在写代码时，就不会发生发布在订阅之前，导致功能不能被触发的问题。\n* 命名空间：如果整个项目都使用了此模式，很容易在没有命名空间的情况下混淆话题。\n* 基本写法：\n\n        class Observer{\n            constructor() {\n                this.topicMapping = {};\n                this.publishStore = {};\n            }\n\n            subscribe(...args) {\n                let topic = args.shift();\n                let callback = args.shift();\n                if (!this.topicMapping[topic]) {\n                    this.topicMapping[topic] = [];\n                }\n                this.topicMapping[topic].push(callback);\n                console.log(`subscribed topic ${topic}`);\n                //check if had subscribed\n                if (this.publishStore[topic]) {\n                    console.log(`trigger topic ${topic} immediately`);\n                    this.publish(topic, this.publishStore[topic]);\n                    delete this.publishStore[topic];\n                }\n            }\n\n            publish(...args) {\n                let topic = args.shift();\n                if (this.topicMapping[topic]) {\n                    this.topicMapping[topic].forEach((v, k) => {\n                        v.apply(null, args);\n                    });\n                } else {\n                    console.log(`no topic: ${topic} has been subscribed, this publish will store here, after subscribe, will trigger`);\n                    this.publishStore[topic] = args;\n                }\n            }\n\n            unsubscribe(...args) {\n                let topic = args.shift();\n                let callback = args.shift();\n                if (this.topicMapping[topic]) {\n                    delete this.topicMapping[topic];\n                    if (callback instanceof Function) {\n                        callback(args);\n                    }\n                } else {\n                    console.log(`no topic ${topic} has been subscribe, so no need unsubscribe.`);\n                }\n            }\n        }\n\n        export default Observer;\n\n\n\n### 命令模式\n\n命令模式最常见的应用场景是：有时候需要向某些对象发送请求，但是并不知道请求的接收者是谁，也不知道被请求的操作是什么。此时希望用一种松耦合的方式来设计程序，使得请求发送者和请求接收者能够消除彼此之间的耦合关系。\n\n### 组合模式\n\n组合模式将对象组合成树形结构，以表示“部分-整体”的层次结构。除了用来表示树形结构之外，组合模式的另一个好处是通过对象的多态性表现，使得用户对单个对象和组合对象的使用具有一致性。\n\n### 模板方法模式\n\n假如我们有一些平行的子类，各个子类之间有一些相同的行为，也有一些不同的行为。如果相同和不同的行为都混合在各个子类的实现中，说明这些相同的行为会在各个子类中重复出现。但实际上，相同的行为可以被搬到另外一个单一的地方，模板方法就是为解决这个问题而生的。\n\n在模板方法中，可以使用钩子方法来隔离变化。我们在父类种容易变化的地方放置钩子，钩子可以有一个默认的实现，究竟要不要挂钩，这由子类自行决定。\n\n模板方法模式是一种典型的通过封装变化提高系统扩展性的设计模式。子类的方法种类和执行顺序都是不变的，所以我们把这部分逻辑抽象到父类的模板方法中，而子类的方法具体怎么实现则是可变的，把这部分变化的逻辑封装到子类中。\n\n### 享元模式\n\n享元模式是一种用于性能优化的模式。享元模式的核心是运用共享技术来有效支持大量细粒度的对象。\n\n使用享元模式的关键是如何区别内部状态和外部状态，可以被对象共享的属性通常被划分为内部状态。\n\n### 职责链模式\n\n### 中介者模式\n\n### 装饰者模式\n\n### 状态模式\n\n### 适配器模式","slug":"Javascript设计模式简述","published":1,"updated":"2018-12-21T04:59:19.232Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjpxle9kh0009h8obfzq8fft7","content":"<p>示例代码：<a href=\"https://github.com/renhongl/Summary/tree/master/demo/mode-demo\">点击这里</a>。</p>\n<p>设计模式的主题总是把不变的事物和变化的事物分离开来。<br><a id=\"more\"></a></p>\n<h3 id=\"鸭子类型\"><a href=\"#鸭子类型\" class=\"headerlink\" title=\"鸭子类型\"></a>鸭子类型</h3><p>如果它走起来像鸭子，叫起来也像鸭子，那么它就是鸭子。</p>\n<h3 id=\"多态\"><a href=\"#多态\" class=\"headerlink\" title=\"多态\"></a>多态</h3><ul>\n<li><p>多态的思想是把“做什么”和“谁去做”分离开来。</p>\n</li>\n<li><p>多态最根本的作用就是通过把过程化的条件分支语句转化为对象的多态性，从而消除这些条件分支语句。</p>\n</li>\n<li><p>多态的最根本好处在于，你不必再像的对象询问“你是什么类型”而后根据得到的答案调用对象的某个行为，<br>你只管调用该行为就是了，其他的一切多态机制都会为你安排妥当。</p>\n</li>\n</ul>\n<h3 id=\"封装\"><a href=\"#封装\" class=\"headerlink\" title=\"封装\"></a>封装</h3><ul>\n<li>封装的目的是将信息影藏。</li>\n<li>一般而言，封装是指封装数据和封装实现。</li>\n<li>更广义的封装，还包括封装类型和封装变化。</li>\n</ul>\n<h4 id=\"this\"><a href=\"#this\" class=\"headerlink\" title=\"this\"></a>this</h4><ul>\n<li><p>作为对象的方法调用。</p>\n<pre><code>let obj = {\n    a: 1,\n    getA: function() {\n        console.log(this === obj);//true\n        console.log(this.a);//1\n    }\n};\nobj.getA();\n</code></pre></li>\n<li><p>作为普通函数调用。</p>\n<pre><code>window.name = &apos;global&apos;;\nlet getName = function() {\n    return this.name;\n}\nconsole.log(getName());//global\n\n//or\n\nwindow.name = &apos;global&apos;;\nlet myObj = {\n    name: &apos;renhong&apos;,\n    getName: function() {\n        return this.name;\n    }\n}\nvar getName = myObj.getName;//普通函数调用\nconsole.log(getName());//global\n\nconsole.log(myObj.getName());//renhong, 对象的方法调用\n</code></pre></li>\n<li><p>构造器调用。当用new运算符调用函数时，该函数总会返回一个对象，构造器里的this就指向这个对象。</p>\n<pre><code>let MyClass = function() {\n    this.name = &apos;renhong&apos;;\n}\nlet obj = new MyClass();\nconsole.log(obj.name);//renhong\n\n//如果构造器显示返回一个对象，那么new之后返回的是这个对象，而不是this。\n\nlet MyClass = function() {\n    this.name = &apos;renhong&apos;,\n    return {\n        name: &apos;mogu&apos;\n    }\n}\nlet obj = new MyClass();\nconsole.log(obj.name);//mogu\n</code></pre></li>\n<li><p>call和apply调用。用于动态的改变传入函数的this。</p>\n<pre><code>let obj1 = {\n    name: &apos;renhong&apos;,\n    getName: function() {\n        return this.name;\n    }\n}\n\nlet obj2 = {\n    name: &apos;mogu&apos;\n}\n\nconsole.log(obj1.getName());//renhong\nconsole.log(obj1.getName.call(obj2));//mogu\n</code></pre></li>\n</ul>\n<h4 id=\"call和apply\"><a href=\"#call和apply\" class=\"headerlink\" title=\"call和apply\"></a>call和apply</h4><ul>\n<li>作用一模一样，区别只在于传入参数的形式不同。</li>\n<li><p>apply接受两个参数，第一个参数指定函数体内部的this指向。第二个参数是一个数组或者类数组，这些元素全部作为参数传递给被调用的函数。</p>\n<pre><code>let func = function(a, b, c) {\n    console.log([a, b, c]);//[1, 2, 3]\n}\nfunc.apply(null, [1, 2, 3]);\n</code></pre></li>\n<li><p>call 传入的参数是不固定的，第一个参数同样是代表函数体内的this指向，从第二个参数开始，每个参数一次被当做被调用的函数的参数传入。</p>\n<pre><code>let func = function(a, b, c) {\n    console.log([a, b, c]);//[1, 2, 3]\n}\nfunc.call(null, 1, 2, 3);\n</code></pre></li>\n<li><p>为什么要使用call和apply？</p>\n<pre><code>//改变this指向\n//---------例子1\nlet obj1 = {\n    name: &apos;renhong&apos;\n}\nlet obj2 = {\n    name: &apos;mogu&apos;\n}\nwindow.name = &apos;window&apos;;\nlet getName = function() {\n    this.name;\n}\ngetName();//window\ngetName.call(obj1);//renhong\ngetName.call(obj2);//mogu\n\n//---------例子2\nlet func = function() {\n    console.log(this.id);\n}\ndocument.getElementById(&apos;div1&apos;).onclick = function() {\n    console.log(this.id);//div1\n    func();//undefined，指向window\n    func.call(this);//div1，指向这个this\n}\n\n//---------例子3\nclass Controller{\n    constructor() {\n        let type = &apos;dialog&apos;;\n        this.name = &apos;controller&apos;;\n        renderControl();\n        handleEvents.call(this);\n        renderDialog.call(this, type);\n    }\n}\n\nfunction renderControl() {\n    console.log(this.name);//undefined，this指向window\n}\n\nfunction handleEvents() {\n    console.log(this.name);//controller\n}\n\nfunction renderDialog(type) {\n    console.log(type);//dialog\n}\n\n//借用其他对象的方法\n//类数组对象arguments，没有push的方法，不能将元素push进去。我们首先调用数组的push方法，再手动将push方法内部的this指向改为arguments，就帮助arguments实现了push功能。\n(function() {\n    Array.prototype.push.call(arguments, 3);\n    console.log(arguments);//[1, 2, 3]\n})(1, 2);\n</code></pre></li>\n</ul>\n<h3 id=\"闭包\"><a href=\"#闭包\" class=\"headerlink\" title=\"闭包\"></a>闭包</h3><p>闭包是一个非常强大的特性，但人们对其也有诸多误解。一种耸人听闻的说法是闭包会造成内存泄漏，所以要尽量减少闭包的使用。</p>\n<p>局部变量本来应该在函数退出的时候被解除饮用，但如果局部变量被封闭在闭包形成的环境中，那么这个局部变量就能一直生存下去。从这个意义上看，闭包的确会使一些数据无法被及时销毁。使用闭包的一部分原因是我们选择主动把一些变量封闭在闭包中，因为可能在以后还需要使用这些变量，把这些变量放在闭包中和放在全局作用域，对内存方面的影响是一致的。</p>\n<p>跟闭包和内存泄漏有关系的地方是，使用闭包的同时，比较容易形成循环引用，如果闭包的作用域链中保存着一些DOM节点，这时候有可能造成内存泄漏。但这并非闭包问题，也并非Javascript问题。</p>\n<p><strong>注：</strong> 当代码中需要全局变量时，可以使用闭包，将这个变量封装在一个函数中，那这个函数就封装了一个独立的功能，不再依赖外部的变量。</p>\n<h3 id=\"函数柯里化（function-currying）\"><a href=\"#函数柯里化（function-currying）\" class=\"headerlink\" title=\"函数柯里化（function currying）\"></a>函数柯里化（function currying）</h3><p>currying又称部分求值。一个currying的函数首先会接受一些参数，接受了这些参数之后，该函数并不会立即求值，而是继续返回另外一个函数，刚传入的参数在函数形成的闭包中被保存起来。待到函数真正需要求值的时候，之前传入的所有参数都会被一次性用于求值。</p>\n<h3 id=\"uncurrying\"><a href=\"#uncurrying\" class=\"headerlink\" title=\"uncurrying\"></a>uncurrying</h3><p>当我们调用对象的某个方法时，其实不用去关心该对象原本是否被设计为拥有这个方法，这是动态类型语言的特点，也是常说的鸭子类型思想。</p>\n<p>同理，一个对象也未必只有使用它自身的方法。通过call和apply方法可以让对象去借用一个原本不属于它的方法。</p>\n<h3 id=\"降频\"><a href=\"#降频\" class=\"headerlink\" title=\"降频\"></a>降频</h3><p>在一些情况下，函数的触发不是由用户直接控制的，在这些情景下，函数可能被非常频繁的调用，而造成大的性能问题。</p>\n<p>例如在window的resize事件中，或者在div拖动事件中，会频繁的触发这些事件，并且DOM相关的操作非常消耗性能，这时浏览器可能会出现卡顿现象。</p>\n<p>以上现象我们可以使用setTimeout来实现每隔固定时间来触发事件，如果过于频繁，将忽略那次的事件。</p>\n<p>代码流程：</p>\n<pre><code>var resize = function(callback, interval) {\n    var timer,\n        firstTime = true;\n    return function() {\n        var args = arguments,\n            self = this;\n        if(firstTime) {\n            callback.apply(self, args);\n            return false;\n        }\n        if(timer) {\n            return false;\n        }\n        timer = setTimeout(function() {\n            clearTimeout(timer);\n            timer = null;\n            callback.apply(self, args);\n        }, interval || 500)\n    }\n};\n\nwindow.onresize = resize(function() {\n    console.log(&apos;resized&apos;, Date.now());\n}, 1000);\n</code></pre><h3 id=\"原型模式\"><a href=\"#原型模式\" class=\"headerlink\" title=\"原型模式\"></a>原型模式</h3><p>类并不是必须的，对象未必需要从类中创建而来，一个对象是通过克隆另外一个对象所得到的。</p>\n<p>原型模式不但是一种设计模式，也被称为一种编程泛型。</p>\n<p>ECMAScript5提供了Object.create方法，可以用来克隆对象。</p>\n<p>但是create方法性能不如 var obj = {} 或者 var obj = new Object();</p>\n<p>以上两种替代方式，内部都是克隆原型而得到对象。</p>\n<p><strong>注：</strong> Javascript中的根对象是Object，所有的对象都从根对象克隆而来。</p>\n<h3 id=\"单例模式\"><a href=\"#单例模式\" class=\"headerlink\" title=\"单例模式\"></a>单例模式</h3><p>保证一个类仅有一个实例，并提供一个访问它的全局访问点。</p>\n<p>推荐使用惰性单例的方式创建，即在需要时才创建单例对象。并且需要把不变的部分隔离出来，把管理单例的逻辑和创建对象的逻辑分开，这两个方法可以独立变化而不互相影响。当它们连接在一起时，就完成了创建唯一实例对象的功能。</p>\n<pre><code>//以下是基本实现方法，但是并没有实现：\n//&quot;并且需要把不变的部分隔离出来，把管理单例的逻辑和创建对象的逻辑分开，\n//这两个方法可以独立变化而不互相影响。当它们连接在一起时，就完成了创建唯一实例对象的功能。&quot;\n//的功能。因为再加一个单例元素时，需要修改管理单利的类。SingletonDOM只是为CreateDOM而生的管理类。\n\nexport class SingletonDOM{\n    constructor() {\n        this.createDOM = new CreateDOM;\n    }\n\n    create() {\n        if (!this.instance) {\n            return this.instance = this.createDOM.create();\n        }\n        return this.instance;\n    }\n}\n\nexport class CreateDOM{\n    create(type) {\n        return document.createElement(type || &apos;div&apos;);\n    }\n}\n\nexport class CreateButton{\n    create() {\n        return document.createElement(&apos;button&apos;);\n    }\n}\n\n//通用管理单例的类。\n\nexport class GetSingleton{\n    constructor(ClassName) {\n        this.obj = new ClassName();\n    }\n\n    create() {\n        if (!this.instance) {\n            return this.instance = this.obj.create();\n        }\n        return this.instance;\n    }\n}\n</code></pre><h3 id=\"策略模式\"><a href=\"#策略模式\" class=\"headerlink\" title=\"策略模式\"></a>策略模式</h3><p>定义一系列的算法，把它们一个个封装起来，并且使它们可以互相替换。</p>\n<p>一个基于策略模式的程序至少由两部分组成。第一个部分是一组策略类，策略类封装了具体的算法，并负责具体的计算过程。第二个部分是环境类context，context接受客户的请求，随后把请求委托给某一个策略类。</p>\n<p>策略模式可以消除程序中大片的条件分支语句。</p>\n<pre><code>class LevelA{\n    calculate(salary) {\n        return salary * 2;\n    }\n}\n\nclass LevelB{\n    calculate(salary) {\n        return salary * 3;\n    }\n}\n\nclass LevelC{\n    calculate(salary) {\n        return salary * 4;\n    }\n}\n\nexport class GetBonus{\n    constructor() {\n        this.calculateMapping = {\n            A: new LevelA(),\n            B: new LevelB(),\n            C: new LevelC()\n        }\n    }\n\n    calculate(type, salary) {\n        return this.calculateMapping[type].calculate(salary);\n    }\n}\n</code></pre><h3 id=\"代理模式\"><a href=\"#代理模式\" class=\"headerlink\" title=\"代理模式\"></a>代理模式</h3><p>代理模式是为一个对象提供一个代用品或占位符，以便控制对它的访问。</p>\n<p>代理和本体接口保持一致，那么用户可以放心的请求代理，他只关心是否得到想要的结果；在任何使用本体的地方都可以替换成使用代理。</p>\n<p>虚拟代理：例如实现图片预加载、合并http请求。</p>\n<p>缓存代理：例如缓存ajax异步请求的数据，下次再打开同一页的时候，便可以直接使用之前的数据。</p>\n<pre><code>export class LoadImage{\n    setUrl(url, target) {\n        target.src = url;\n    }\n}\n\nexport class LoadImageProxy{\n    constructor() {\n        this.loadImage = new LoadImage();\n    }\n\n    setUrl(url, target) {\n        this.loadImage.setUrl(&apos;./image/p2.gif&apos;, target);\n        let img = new Image();\n        img.onload = () =&gt; {\n            setTimeout(() =&gt; {\n                this.loadImage.setUrl(url, target);\n            }, 2000);\n        }\n        img.src = url;\n    }\n}\n\nexport class LoadData{\n    constructor() {\n        this.data = {\n            renhong: {\n                name: &apos;renhongl&apos;,\n                age: 18\n            },\n            mogu: {\n                name: &apos;mogu&apos;,\n                age: 19\n            }\n        };\n    }\n\n    load(name, callback) {\n        setTimeout(() =&gt; {\n            callback(this.data[name]);\n        }, 2000);\n    }\n}\n\nexport class LoadDataProxy{\n    constructor() {\n        this.loadData = new LoadData();\n        this.cache = {};\n    }\n\n    load(name, callback) {\n        if (!this.cache[name]) {\n            this.loadData.load(name, (data) =&gt; {\n                this.cache[name] = data;\n                callback(data);\n            });\n        } else {\n            callback(this.cache[name]);\n        }\n    }\n}\n</code></pre><h3 id=\"迭代器模式\"><a href=\"#迭代器模式\" class=\"headerlink\" title=\"迭代器模式\"></a>迭代器模式</h3><p>迭代器模式是指提供一种方法顺序访问一个聚合对象中的各个元素，而又不需要暴露该对象的内部表示。</p>\n<p>内部迭代器在调用的时候非常方便，外界不用关心迭代器内部的实现，跟迭代器的交互也仅仅是一次初始调用，但这也刚好是内部迭代器的缺点。</p>\n<p>外部迭代器增加了一些调用的复杂度，但相对也增强了迭代器的灵活性，我们可以手工控制迭代的过程或者顺序。</p>\n<p>中止迭代器可以像普通for循环中的break一样，提供一种跳出循环的方法。</p>\n<h3 id=\"发布-订阅模式\"><a href=\"#发布-订阅模式\" class=\"headerlink\" title=\"发布-订阅模式\"></a>发布-订阅模式</h3><p>又叫观察者模式，它定义对象间的一种一对多的依赖关系，当一个对象的状态发生改变时，所有依赖于它的对象都将得到通知。</p>\n<p>推荐使用全局的发布-订阅对象，并且增加可以先发布再订阅的方法，以及实现命名空间的功能。</p>\n<ul>\n<li>具体写法：使用Map将话题和要执行的回调方法一一对应的存下来，即订阅。在发布这个话题时，使用发布的参数，执行这个话题的回调方法。</li>\n<li>订阅前发布：在发布某个话题时，如果这个话题尚未被订阅，那么将这个话题存储起来，等订阅之后，立即发布。那么，在写代码时，就不会发生发布在订阅之前，导致功能不能被触发的问题。</li>\n<li>命名空间：如果整个项目都使用了此模式，很容易在没有命名空间的情况下混淆话题。</li>\n<li><p>基本写法：</p>\n<pre><code>class Observer{\n    constructor() {\n        this.topicMapping = {};\n        this.publishStore = {};\n    }\n\n    subscribe(...args) {\n        let topic = args.shift();\n        let callback = args.shift();\n        if (!this.topicMapping[topic]) {\n            this.topicMapping[topic] = [];\n        }\n        this.topicMapping[topic].push(callback);\n        console.log(`subscribed topic ${topic}`);\n        //check if had subscribed\n        if (this.publishStore[topic]) {\n            console.log(`trigger topic ${topic} immediately`);\n            this.publish(topic, this.publishStore[topic]);\n            delete this.publishStore[topic];\n        }\n    }\n\n    publish(...args) {\n        let topic = args.shift();\n        if (this.topicMapping[topic]) {\n            this.topicMapping[topic].forEach((v, k) =&gt; {\n                v.apply(null, args);\n            });\n        } else {\n            console.log(`no topic: ${topic} has been subscribed, this publish will store here, after subscribe, will trigger`);\n            this.publishStore[topic] = args;\n        }\n    }\n\n    unsubscribe(...args) {\n        let topic = args.shift();\n        let callback = args.shift();\n        if (this.topicMapping[topic]) {\n            delete this.topicMapping[topic];\n            if (callback instanceof Function) {\n                callback(args);\n            }\n        } else {\n            console.log(`no topic ${topic} has been subscribe, so no need unsubscribe.`);\n        }\n    }\n}\n\nexport default Observer;\n</code></pre></li>\n</ul>\n<h3 id=\"命令模式\"><a href=\"#命令模式\" class=\"headerlink\" title=\"命令模式\"></a>命令模式</h3><p>命令模式最常见的应用场景是：有时候需要向某些对象发送请求，但是并不知道请求的接收者是谁，也不知道被请求的操作是什么。此时希望用一种松耦合的方式来设计程序，使得请求发送者和请求接收者能够消除彼此之间的耦合关系。</p>\n<h3 id=\"组合模式\"><a href=\"#组合模式\" class=\"headerlink\" title=\"组合模式\"></a>组合模式</h3><p>组合模式将对象组合成树形结构，以表示“部分-整体”的层次结构。除了用来表示树形结构之外，组合模式的另一个好处是通过对象的多态性表现，使得用户对单个对象和组合对象的使用具有一致性。</p>\n<h3 id=\"模板方法模式\"><a href=\"#模板方法模式\" class=\"headerlink\" title=\"模板方法模式\"></a>模板方法模式</h3><p>假如我们有一些平行的子类，各个子类之间有一些相同的行为，也有一些不同的行为。如果相同和不同的行为都混合在各个子类的实现中，说明这些相同的行为会在各个子类中重复出现。但实际上，相同的行为可以被搬到另外一个单一的地方，模板方法就是为解决这个问题而生的。</p>\n<p>在模板方法中，可以使用钩子方法来隔离变化。我们在父类种容易变化的地方放置钩子，钩子可以有一个默认的实现，究竟要不要挂钩，这由子类自行决定。</p>\n<p>模板方法模式是一种典型的通过封装变化提高系统扩展性的设计模式。子类的方法种类和执行顺序都是不变的，所以我们把这部分逻辑抽象到父类的模板方法中，而子类的方法具体怎么实现则是可变的，把这部分变化的逻辑封装到子类中。</p>\n<h3 id=\"享元模式\"><a href=\"#享元模式\" class=\"headerlink\" title=\"享元模式\"></a>享元模式</h3><p>享元模式是一种用于性能优化的模式。享元模式的核心是运用共享技术来有效支持大量细粒度的对象。</p>\n<p>使用享元模式的关键是如何区别内部状态和外部状态，可以被对象共享的属性通常被划分为内部状态。</p>\n<h3 id=\"职责链模式\"><a href=\"#职责链模式\" class=\"headerlink\" title=\"职责链模式\"></a>职责链模式</h3><h3 id=\"中介者模式\"><a href=\"#中介者模式\" class=\"headerlink\" title=\"中介者模式\"></a>中介者模式</h3><h3 id=\"装饰者模式\"><a href=\"#装饰者模式\" class=\"headerlink\" title=\"装饰者模式\"></a>装饰者模式</h3><h3 id=\"状态模式\"><a href=\"#状态模式\" class=\"headerlink\" title=\"状态模式\"></a>状态模式</h3><h3 id=\"适配器模式\"><a href=\"#适配器模式\" class=\"headerlink\" title=\"适配器模式\"></a>适配器模式</h3>","site":{"data":{}},"excerpt":"<p>示例代码：<a href=\"https://github.com/renhongl/Summary/tree/master/demo/mode-demo\">点击这里</a>。</p>\n<p>设计模式的主题总是把不变的事物和变化的事物分离开来。<br>","more":"</p>\n<h3 id=\"鸭子类型\"><a href=\"#鸭子类型\" class=\"headerlink\" title=\"鸭子类型\"></a>鸭子类型</h3><p>如果它走起来像鸭子，叫起来也像鸭子，那么它就是鸭子。</p>\n<h3 id=\"多态\"><a href=\"#多态\" class=\"headerlink\" title=\"多态\"></a>多态</h3><ul>\n<li><p>多态的思想是把“做什么”和“谁去做”分离开来。</p>\n</li>\n<li><p>多态最根本的作用就是通过把过程化的条件分支语句转化为对象的多态性，从而消除这些条件分支语句。</p>\n</li>\n<li><p>多态的最根本好处在于，你不必再像的对象询问“你是什么类型”而后根据得到的答案调用对象的某个行为，<br>你只管调用该行为就是了，其他的一切多态机制都会为你安排妥当。</p>\n</li>\n</ul>\n<h3 id=\"封装\"><a href=\"#封装\" class=\"headerlink\" title=\"封装\"></a>封装</h3><ul>\n<li>封装的目的是将信息影藏。</li>\n<li>一般而言，封装是指封装数据和封装实现。</li>\n<li>更广义的封装，还包括封装类型和封装变化。</li>\n</ul>\n<h4 id=\"this\"><a href=\"#this\" class=\"headerlink\" title=\"this\"></a>this</h4><ul>\n<li><p>作为对象的方法调用。</p>\n<pre><code>let obj = {\n    a: 1,\n    getA: function() {\n        console.log(this === obj);//true\n        console.log(this.a);//1\n    }\n};\nobj.getA();\n</code></pre></li>\n<li><p>作为普通函数调用。</p>\n<pre><code>window.name = &apos;global&apos;;\nlet getName = function() {\n    return this.name;\n}\nconsole.log(getName());//global\n\n//or\n\nwindow.name = &apos;global&apos;;\nlet myObj = {\n    name: &apos;renhong&apos;,\n    getName: function() {\n        return this.name;\n    }\n}\nvar getName = myObj.getName;//普通函数调用\nconsole.log(getName());//global\n\nconsole.log(myObj.getName());//renhong, 对象的方法调用\n</code></pre></li>\n<li><p>构造器调用。当用new运算符调用函数时，该函数总会返回一个对象，构造器里的this就指向这个对象。</p>\n<pre><code>let MyClass = function() {\n    this.name = &apos;renhong&apos;;\n}\nlet obj = new MyClass();\nconsole.log(obj.name);//renhong\n\n//如果构造器显示返回一个对象，那么new之后返回的是这个对象，而不是this。\n\nlet MyClass = function() {\n    this.name = &apos;renhong&apos;,\n    return {\n        name: &apos;mogu&apos;\n    }\n}\nlet obj = new MyClass();\nconsole.log(obj.name);//mogu\n</code></pre></li>\n<li><p>call和apply调用。用于动态的改变传入函数的this。</p>\n<pre><code>let obj1 = {\n    name: &apos;renhong&apos;,\n    getName: function() {\n        return this.name;\n    }\n}\n\nlet obj2 = {\n    name: &apos;mogu&apos;\n}\n\nconsole.log(obj1.getName());//renhong\nconsole.log(obj1.getName.call(obj2));//mogu\n</code></pre></li>\n</ul>\n<h4 id=\"call和apply\"><a href=\"#call和apply\" class=\"headerlink\" title=\"call和apply\"></a>call和apply</h4><ul>\n<li>作用一模一样，区别只在于传入参数的形式不同。</li>\n<li><p>apply接受两个参数，第一个参数指定函数体内部的this指向。第二个参数是一个数组或者类数组，这些元素全部作为参数传递给被调用的函数。</p>\n<pre><code>let func = function(a, b, c) {\n    console.log([a, b, c]);//[1, 2, 3]\n}\nfunc.apply(null, [1, 2, 3]);\n</code></pre></li>\n<li><p>call 传入的参数是不固定的，第一个参数同样是代表函数体内的this指向，从第二个参数开始，每个参数一次被当做被调用的函数的参数传入。</p>\n<pre><code>let func = function(a, b, c) {\n    console.log([a, b, c]);//[1, 2, 3]\n}\nfunc.call(null, 1, 2, 3);\n</code></pre></li>\n<li><p>为什么要使用call和apply？</p>\n<pre><code>//改变this指向\n//---------例子1\nlet obj1 = {\n    name: &apos;renhong&apos;\n}\nlet obj2 = {\n    name: &apos;mogu&apos;\n}\nwindow.name = &apos;window&apos;;\nlet getName = function() {\n    this.name;\n}\ngetName();//window\ngetName.call(obj1);//renhong\ngetName.call(obj2);//mogu\n\n//---------例子2\nlet func = function() {\n    console.log(this.id);\n}\ndocument.getElementById(&apos;div1&apos;).onclick = function() {\n    console.log(this.id);//div1\n    func();//undefined，指向window\n    func.call(this);//div1，指向这个this\n}\n\n//---------例子3\nclass Controller{\n    constructor() {\n        let type = &apos;dialog&apos;;\n        this.name = &apos;controller&apos;;\n        renderControl();\n        handleEvents.call(this);\n        renderDialog.call(this, type);\n    }\n}\n\nfunction renderControl() {\n    console.log(this.name);//undefined，this指向window\n}\n\nfunction handleEvents() {\n    console.log(this.name);//controller\n}\n\nfunction renderDialog(type) {\n    console.log(type);//dialog\n}\n\n//借用其他对象的方法\n//类数组对象arguments，没有push的方法，不能将元素push进去。我们首先调用数组的push方法，再手动将push方法内部的this指向改为arguments，就帮助arguments实现了push功能。\n(function() {\n    Array.prototype.push.call(arguments, 3);\n    console.log(arguments);//[1, 2, 3]\n})(1, 2);\n</code></pre></li>\n</ul>\n<h3 id=\"闭包\"><a href=\"#闭包\" class=\"headerlink\" title=\"闭包\"></a>闭包</h3><p>闭包是一个非常强大的特性，但人们对其也有诸多误解。一种耸人听闻的说法是闭包会造成内存泄漏，所以要尽量减少闭包的使用。</p>\n<p>局部变量本来应该在函数退出的时候被解除饮用，但如果局部变量被封闭在闭包形成的环境中，那么这个局部变量就能一直生存下去。从这个意义上看，闭包的确会使一些数据无法被及时销毁。使用闭包的一部分原因是我们选择主动把一些变量封闭在闭包中，因为可能在以后还需要使用这些变量，把这些变量放在闭包中和放在全局作用域，对内存方面的影响是一致的。</p>\n<p>跟闭包和内存泄漏有关系的地方是，使用闭包的同时，比较容易形成循环引用，如果闭包的作用域链中保存着一些DOM节点，这时候有可能造成内存泄漏。但这并非闭包问题，也并非Javascript问题。</p>\n<p><strong>注：</strong> 当代码中需要全局变量时，可以使用闭包，将这个变量封装在一个函数中，那这个函数就封装了一个独立的功能，不再依赖外部的变量。</p>\n<h3 id=\"函数柯里化（function-currying）\"><a href=\"#函数柯里化（function-currying）\" class=\"headerlink\" title=\"函数柯里化（function currying）\"></a>函数柯里化（function currying）</h3><p>currying又称部分求值。一个currying的函数首先会接受一些参数，接受了这些参数之后，该函数并不会立即求值，而是继续返回另外一个函数，刚传入的参数在函数形成的闭包中被保存起来。待到函数真正需要求值的时候，之前传入的所有参数都会被一次性用于求值。</p>\n<h3 id=\"uncurrying\"><a href=\"#uncurrying\" class=\"headerlink\" title=\"uncurrying\"></a>uncurrying</h3><p>当我们调用对象的某个方法时，其实不用去关心该对象原本是否被设计为拥有这个方法，这是动态类型语言的特点，也是常说的鸭子类型思想。</p>\n<p>同理，一个对象也未必只有使用它自身的方法。通过call和apply方法可以让对象去借用一个原本不属于它的方法。</p>\n<h3 id=\"降频\"><a href=\"#降频\" class=\"headerlink\" title=\"降频\"></a>降频</h3><p>在一些情况下，函数的触发不是由用户直接控制的，在这些情景下，函数可能被非常频繁的调用，而造成大的性能问题。</p>\n<p>例如在window的resize事件中，或者在div拖动事件中，会频繁的触发这些事件，并且DOM相关的操作非常消耗性能，这时浏览器可能会出现卡顿现象。</p>\n<p>以上现象我们可以使用setTimeout来实现每隔固定时间来触发事件，如果过于频繁，将忽略那次的事件。</p>\n<p>代码流程：</p>\n<pre><code>var resize = function(callback, interval) {\n    var timer,\n        firstTime = true;\n    return function() {\n        var args = arguments,\n            self = this;\n        if(firstTime) {\n            callback.apply(self, args);\n            return false;\n        }\n        if(timer) {\n            return false;\n        }\n        timer = setTimeout(function() {\n            clearTimeout(timer);\n            timer = null;\n            callback.apply(self, args);\n        }, interval || 500)\n    }\n};\n\nwindow.onresize = resize(function() {\n    console.log(&apos;resized&apos;, Date.now());\n}, 1000);\n</code></pre><h3 id=\"原型模式\"><a href=\"#原型模式\" class=\"headerlink\" title=\"原型模式\"></a>原型模式</h3><p>类并不是必须的，对象未必需要从类中创建而来，一个对象是通过克隆另外一个对象所得到的。</p>\n<p>原型模式不但是一种设计模式，也被称为一种编程泛型。</p>\n<p>ECMAScript5提供了Object.create方法，可以用来克隆对象。</p>\n<p>但是create方法性能不如 var obj = {} 或者 var obj = new Object();</p>\n<p>以上两种替代方式，内部都是克隆原型而得到对象。</p>\n<p><strong>注：</strong> Javascript中的根对象是Object，所有的对象都从根对象克隆而来。</p>\n<h3 id=\"单例模式\"><a href=\"#单例模式\" class=\"headerlink\" title=\"单例模式\"></a>单例模式</h3><p>保证一个类仅有一个实例，并提供一个访问它的全局访问点。</p>\n<p>推荐使用惰性单例的方式创建，即在需要时才创建单例对象。并且需要把不变的部分隔离出来，把管理单例的逻辑和创建对象的逻辑分开，这两个方法可以独立变化而不互相影响。当它们连接在一起时，就完成了创建唯一实例对象的功能。</p>\n<pre><code>//以下是基本实现方法，但是并没有实现：\n//&quot;并且需要把不变的部分隔离出来，把管理单例的逻辑和创建对象的逻辑分开，\n//这两个方法可以独立变化而不互相影响。当它们连接在一起时，就完成了创建唯一实例对象的功能。&quot;\n//的功能。因为再加一个单例元素时，需要修改管理单利的类。SingletonDOM只是为CreateDOM而生的管理类。\n\nexport class SingletonDOM{\n    constructor() {\n        this.createDOM = new CreateDOM;\n    }\n\n    create() {\n        if (!this.instance) {\n            return this.instance = this.createDOM.create();\n        }\n        return this.instance;\n    }\n}\n\nexport class CreateDOM{\n    create(type) {\n        return document.createElement(type || &apos;div&apos;);\n    }\n}\n\nexport class CreateButton{\n    create() {\n        return document.createElement(&apos;button&apos;);\n    }\n}\n\n//通用管理单例的类。\n\nexport class GetSingleton{\n    constructor(ClassName) {\n        this.obj = new ClassName();\n    }\n\n    create() {\n        if (!this.instance) {\n            return this.instance = this.obj.create();\n        }\n        return this.instance;\n    }\n}\n</code></pre><h3 id=\"策略模式\"><a href=\"#策略模式\" class=\"headerlink\" title=\"策略模式\"></a>策略模式</h3><p>定义一系列的算法，把它们一个个封装起来，并且使它们可以互相替换。</p>\n<p>一个基于策略模式的程序至少由两部分组成。第一个部分是一组策略类，策略类封装了具体的算法，并负责具体的计算过程。第二个部分是环境类context，context接受客户的请求，随后把请求委托给某一个策略类。</p>\n<p>策略模式可以消除程序中大片的条件分支语句。</p>\n<pre><code>class LevelA{\n    calculate(salary) {\n        return salary * 2;\n    }\n}\n\nclass LevelB{\n    calculate(salary) {\n        return salary * 3;\n    }\n}\n\nclass LevelC{\n    calculate(salary) {\n        return salary * 4;\n    }\n}\n\nexport class GetBonus{\n    constructor() {\n        this.calculateMapping = {\n            A: new LevelA(),\n            B: new LevelB(),\n            C: new LevelC()\n        }\n    }\n\n    calculate(type, salary) {\n        return this.calculateMapping[type].calculate(salary);\n    }\n}\n</code></pre><h3 id=\"代理模式\"><a href=\"#代理模式\" class=\"headerlink\" title=\"代理模式\"></a>代理模式</h3><p>代理模式是为一个对象提供一个代用品或占位符，以便控制对它的访问。</p>\n<p>代理和本体接口保持一致，那么用户可以放心的请求代理，他只关心是否得到想要的结果；在任何使用本体的地方都可以替换成使用代理。</p>\n<p>虚拟代理：例如实现图片预加载、合并http请求。</p>\n<p>缓存代理：例如缓存ajax异步请求的数据，下次再打开同一页的时候，便可以直接使用之前的数据。</p>\n<pre><code>export class LoadImage{\n    setUrl(url, target) {\n        target.src = url;\n    }\n}\n\nexport class LoadImageProxy{\n    constructor() {\n        this.loadImage = new LoadImage();\n    }\n\n    setUrl(url, target) {\n        this.loadImage.setUrl(&apos;./image/p2.gif&apos;, target);\n        let img = new Image();\n        img.onload = () =&gt; {\n            setTimeout(() =&gt; {\n                this.loadImage.setUrl(url, target);\n            }, 2000);\n        }\n        img.src = url;\n    }\n}\n\nexport class LoadData{\n    constructor() {\n        this.data = {\n            renhong: {\n                name: &apos;renhongl&apos;,\n                age: 18\n            },\n            mogu: {\n                name: &apos;mogu&apos;,\n                age: 19\n            }\n        };\n    }\n\n    load(name, callback) {\n        setTimeout(() =&gt; {\n            callback(this.data[name]);\n        }, 2000);\n    }\n}\n\nexport class LoadDataProxy{\n    constructor() {\n        this.loadData = new LoadData();\n        this.cache = {};\n    }\n\n    load(name, callback) {\n        if (!this.cache[name]) {\n            this.loadData.load(name, (data) =&gt; {\n                this.cache[name] = data;\n                callback(data);\n            });\n        } else {\n            callback(this.cache[name]);\n        }\n    }\n}\n</code></pre><h3 id=\"迭代器模式\"><a href=\"#迭代器模式\" class=\"headerlink\" title=\"迭代器模式\"></a>迭代器模式</h3><p>迭代器模式是指提供一种方法顺序访问一个聚合对象中的各个元素，而又不需要暴露该对象的内部表示。</p>\n<p>内部迭代器在调用的时候非常方便，外界不用关心迭代器内部的实现，跟迭代器的交互也仅仅是一次初始调用，但这也刚好是内部迭代器的缺点。</p>\n<p>外部迭代器增加了一些调用的复杂度，但相对也增强了迭代器的灵活性，我们可以手工控制迭代的过程或者顺序。</p>\n<p>中止迭代器可以像普通for循环中的break一样，提供一种跳出循环的方法。</p>\n<h3 id=\"发布-订阅模式\"><a href=\"#发布-订阅模式\" class=\"headerlink\" title=\"发布-订阅模式\"></a>发布-订阅模式</h3><p>又叫观察者模式，它定义对象间的一种一对多的依赖关系，当一个对象的状态发生改变时，所有依赖于它的对象都将得到通知。</p>\n<p>推荐使用全局的发布-订阅对象，并且增加可以先发布再订阅的方法，以及实现命名空间的功能。</p>\n<ul>\n<li>具体写法：使用Map将话题和要执行的回调方法一一对应的存下来，即订阅。在发布这个话题时，使用发布的参数，执行这个话题的回调方法。</li>\n<li>订阅前发布：在发布某个话题时，如果这个话题尚未被订阅，那么将这个话题存储起来，等订阅之后，立即发布。那么，在写代码时，就不会发生发布在订阅之前，导致功能不能被触发的问题。</li>\n<li>命名空间：如果整个项目都使用了此模式，很容易在没有命名空间的情况下混淆话题。</li>\n<li><p>基本写法：</p>\n<pre><code>class Observer{\n    constructor() {\n        this.topicMapping = {};\n        this.publishStore = {};\n    }\n\n    subscribe(...args) {\n        let topic = args.shift();\n        let callback = args.shift();\n        if (!this.topicMapping[topic]) {\n            this.topicMapping[topic] = [];\n        }\n        this.topicMapping[topic].push(callback);\n        console.log(`subscribed topic ${topic}`);\n        //check if had subscribed\n        if (this.publishStore[topic]) {\n            console.log(`trigger topic ${topic} immediately`);\n            this.publish(topic, this.publishStore[topic]);\n            delete this.publishStore[topic];\n        }\n    }\n\n    publish(...args) {\n        let topic = args.shift();\n        if (this.topicMapping[topic]) {\n            this.topicMapping[topic].forEach((v, k) =&gt; {\n                v.apply(null, args);\n            });\n        } else {\n            console.log(`no topic: ${topic} has been subscribed, this publish will store here, after subscribe, will trigger`);\n            this.publishStore[topic] = args;\n        }\n    }\n\n    unsubscribe(...args) {\n        let topic = args.shift();\n        let callback = args.shift();\n        if (this.topicMapping[topic]) {\n            delete this.topicMapping[topic];\n            if (callback instanceof Function) {\n                callback(args);\n            }\n        } else {\n            console.log(`no topic ${topic} has been subscribe, so no need unsubscribe.`);\n        }\n    }\n}\n\nexport default Observer;\n</code></pre></li>\n</ul>\n<h3 id=\"命令模式\"><a href=\"#命令模式\" class=\"headerlink\" title=\"命令模式\"></a>命令模式</h3><p>命令模式最常见的应用场景是：有时候需要向某些对象发送请求，但是并不知道请求的接收者是谁，也不知道被请求的操作是什么。此时希望用一种松耦合的方式来设计程序，使得请求发送者和请求接收者能够消除彼此之间的耦合关系。</p>\n<h3 id=\"组合模式\"><a href=\"#组合模式\" class=\"headerlink\" title=\"组合模式\"></a>组合模式</h3><p>组合模式将对象组合成树形结构，以表示“部分-整体”的层次结构。除了用来表示树形结构之外，组合模式的另一个好处是通过对象的多态性表现，使得用户对单个对象和组合对象的使用具有一致性。</p>\n<h3 id=\"模板方法模式\"><a href=\"#模板方法模式\" class=\"headerlink\" title=\"模板方法模式\"></a>模板方法模式</h3><p>假如我们有一些平行的子类，各个子类之间有一些相同的行为，也有一些不同的行为。如果相同和不同的行为都混合在各个子类的实现中，说明这些相同的行为会在各个子类中重复出现。但实际上，相同的行为可以被搬到另外一个单一的地方，模板方法就是为解决这个问题而生的。</p>\n<p>在模板方法中，可以使用钩子方法来隔离变化。我们在父类种容易变化的地方放置钩子，钩子可以有一个默认的实现，究竟要不要挂钩，这由子类自行决定。</p>\n<p>模板方法模式是一种典型的通过封装变化提高系统扩展性的设计模式。子类的方法种类和执行顺序都是不变的，所以我们把这部分逻辑抽象到父类的模板方法中，而子类的方法具体怎么实现则是可变的，把这部分变化的逻辑封装到子类中。</p>\n<h3 id=\"享元模式\"><a href=\"#享元模式\" class=\"headerlink\" title=\"享元模式\"></a>享元模式</h3><p>享元模式是一种用于性能优化的模式。享元模式的核心是运用共享技术来有效支持大量细粒度的对象。</p>\n<p>使用享元模式的关键是如何区别内部状态和外部状态，可以被对象共享的属性通常被划分为内部状态。</p>\n<h3 id=\"职责链模式\"><a href=\"#职责链模式\" class=\"headerlink\" title=\"职责链模式\"></a>职责链模式</h3><h3 id=\"中介者模式\"><a href=\"#中介者模式\" class=\"headerlink\" title=\"中介者模式\"></a>中介者模式</h3><h3 id=\"装饰者模式\"><a href=\"#装饰者模式\" class=\"headerlink\" title=\"装饰者模式\"></a>装饰者模式</h3><h3 id=\"状态模式\"><a href=\"#状态模式\" class=\"headerlink\" title=\"状态模式\"></a>状态模式</h3><h3 id=\"适配器模式\"><a href=\"#适配器模式\" class=\"headerlink\" title=\"适配器模式\"></a>适配器模式</h3>"},{"title":"let和const","date":"2017-06-18T12:15:38.000Z","_content":"\n\n## 不存在变量提升\nvar命令会发生”变量提升“现象，即变量可以在声明之前使用，值为undefined。这种现象多多少少是有些奇怪的，按照一般的逻辑，变量应该在声明语句之后才可以使用。\n\n为了纠正这种现象，let命令改变了语法行为，它所声明的变量一定要在声明后使用，否则报错。\n\n<!--more-->\n\n## 暂时性死区\n只要块级作用域内存在let命令，它所声明的变量就“绑定”（binding）这个区域，不再受外部的影响。\n在代码块内，使用let命令声明变量之前，该变量都是不可用的。\n\n## 不允许重复声明\n不允许在相同作用域内，重复声明同一个变量。\n\n## ES6 的块级作用域\nES5 只有全局作用域和函数作用域，没有块级作用域，这带来很多不合理的场景。ES5 规定，函数只能在顶层作用域和函数作用域之中声明，不能在块级作用域声明。\n\n * 第一种场景，内层变量可能会覆盖外层变量。\n * 第二种场景，用来计数的循环变量泄露为全局变量。\n\n ## const\n const声明一个只读的常量。一旦声明，常量的值就不能改变。\n\n const实际上保证的，并不是变量的值不得改动，而是变量指向的那个内存地址不得改动。对于简单类型的数据（数值、字符串、布尔值），值就保存在变量指向的那个内存地址，因此等同于常量。但对于复合类型的数据（主要是对象和数组），变量指向的内存地址，保存的只是一个指针，const只能保证这个指针是固定的，至于它指向的数据结构是不是可变的，就完全不能控制了。因此，将一个对象声明为常量必须非常小心。\n\n 如果真的想将对象冻结，应该使用Object.freeze方法。\n\n 对象及其属性冻结：\n\n    var constantize = (obj) => {\n        Object.freeze(obj);\n        Object.keys(obj).forEach( (key, i) => {\n            if ( typeof obj[key] === 'object' ) {\n            constantize( obj[key] );\n            }\n        });\n    };\n\n\n## 顶层对象\n\n1. 浏览器里面，顶层对象是window，但 Node 和 Web Worker 没有window。\n2. 浏览器和 Web Worker 里面，self也指向顶层对象，但是 Node 没有self。\n3. Node 里面，顶层对象是global，但其他环境都不支持。\n\n        // 方法一\n        (typeof window !== 'undefined'\n            ? window\n            : (typeof process === 'object' &&\n                typeof require === 'function' &&\n                typeof global === 'object')\n                ? global\n                : this);\n       \n            // 方法二\n            var getGlobal = function () {\n            if (typeof self !== 'undefined') { return self; }\n            if (typeof window !== 'undefined') { return window; }\n            if (typeof global !== 'undefined') { return global; }\n            throw new Error('unable to locate global object');\n        };","source":"_posts/let和const.md","raw":"\n---\ntitle: let和const\ndate: 2017-06-18 20:15:38\ntags: ES6\n---\n\n\n## 不存在变量提升\nvar命令会发生”变量提升“现象，即变量可以在声明之前使用，值为undefined。这种现象多多少少是有些奇怪的，按照一般的逻辑，变量应该在声明语句之后才可以使用。\n\n为了纠正这种现象，let命令改变了语法行为，它所声明的变量一定要在声明后使用，否则报错。\n\n<!--more-->\n\n## 暂时性死区\n只要块级作用域内存在let命令，它所声明的变量就“绑定”（binding）这个区域，不再受外部的影响。\n在代码块内，使用let命令声明变量之前，该变量都是不可用的。\n\n## 不允许重复声明\n不允许在相同作用域内，重复声明同一个变量。\n\n## ES6 的块级作用域\nES5 只有全局作用域和函数作用域，没有块级作用域，这带来很多不合理的场景。ES5 规定，函数只能在顶层作用域和函数作用域之中声明，不能在块级作用域声明。\n\n * 第一种场景，内层变量可能会覆盖外层变量。\n * 第二种场景，用来计数的循环变量泄露为全局变量。\n\n ## const\n const声明一个只读的常量。一旦声明，常量的值就不能改变。\n\n const实际上保证的，并不是变量的值不得改动，而是变量指向的那个内存地址不得改动。对于简单类型的数据（数值、字符串、布尔值），值就保存在变量指向的那个内存地址，因此等同于常量。但对于复合类型的数据（主要是对象和数组），变量指向的内存地址，保存的只是一个指针，const只能保证这个指针是固定的，至于它指向的数据结构是不是可变的，就完全不能控制了。因此，将一个对象声明为常量必须非常小心。\n\n 如果真的想将对象冻结，应该使用Object.freeze方法。\n\n 对象及其属性冻结：\n\n    var constantize = (obj) => {\n        Object.freeze(obj);\n        Object.keys(obj).forEach( (key, i) => {\n            if ( typeof obj[key] === 'object' ) {\n            constantize( obj[key] );\n            }\n        });\n    };\n\n\n## 顶层对象\n\n1. 浏览器里面，顶层对象是window，但 Node 和 Web Worker 没有window。\n2. 浏览器和 Web Worker 里面，self也指向顶层对象，但是 Node 没有self。\n3. Node 里面，顶层对象是global，但其他环境都不支持。\n\n        // 方法一\n        (typeof window !== 'undefined'\n            ? window\n            : (typeof process === 'object' &&\n                typeof require === 'function' &&\n                typeof global === 'object')\n                ? global\n                : this);\n       \n            // 方法二\n            var getGlobal = function () {\n            if (typeof self !== 'undefined') { return self; }\n            if (typeof window !== 'undefined') { return window; }\n            if (typeof global !== 'undefined') { return global; }\n            throw new Error('unable to locate global object');\n        };","slug":"let和const","published":1,"updated":"2018-12-21T04:59:19.247Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjpxle9kh000ch8ob443absnu","content":"<h2 id=\"不存在变量提升\"><a href=\"#不存在变量提升\" class=\"headerlink\" title=\"不存在变量提升\"></a>不存在变量提升</h2><p>var命令会发生”变量提升“现象，即变量可以在声明之前使用，值为undefined。这种现象多多少少是有些奇怪的，按照一般的逻辑，变量应该在声明语句之后才可以使用。</p>\n<p>为了纠正这种现象，let命令改变了语法行为，它所声明的变量一定要在声明后使用，否则报错。</p>\n<a id=\"more\"></a>\n<h2 id=\"暂时性死区\"><a href=\"#暂时性死区\" class=\"headerlink\" title=\"暂时性死区\"></a>暂时性死区</h2><p>只要块级作用域内存在let命令，它所声明的变量就“绑定”（binding）这个区域，不再受外部的影响。<br>在代码块内，使用let命令声明变量之前，该变量都是不可用的。</p>\n<h2 id=\"不允许重复声明\"><a href=\"#不允许重复声明\" class=\"headerlink\" title=\"不允许重复声明\"></a>不允许重复声明</h2><p>不允许在相同作用域内，重复声明同一个变量。</p>\n<h2 id=\"ES6-的块级作用域\"><a href=\"#ES6-的块级作用域\" class=\"headerlink\" title=\"ES6 的块级作用域\"></a>ES6 的块级作用域</h2><p>ES5 只有全局作用域和函数作用域，没有块级作用域，这带来很多不合理的场景。ES5 规定，函数只能在顶层作用域和函数作用域之中声明，不能在块级作用域声明。</p>\n<ul>\n<li>第一种场景，内层变量可能会覆盖外层变量。</li>\n<li><p>第二种场景，用来计数的循环变量泄露为全局变量。</p>\n<h2 id=\"const\"><a href=\"#const\" class=\"headerlink\" title=\"const\"></a>const</h2><p>const声明一个只读的常量。一旦声明，常量的值就不能改变。</p>\n<p>const实际上保证的，并不是变量的值不得改动，而是变量指向的那个内存地址不得改动。对于简单类型的数据（数值、字符串、布尔值），值就保存在变量指向的那个内存地址，因此等同于常量。但对于复合类型的数据（主要是对象和数组），变量指向的内存地址，保存的只是一个指针，const只能保证这个指针是固定的，至于它指向的数据结构是不是可变的，就完全不能控制了。因此，将一个对象声明为常量必须非常小心。</p>\n<p>如果真的想将对象冻结，应该使用Object.freeze方法。</p>\n<p>对象及其属性冻结：</p>\n<p> var constantize = (obj) =&gt; {</p>\n<pre><code>Object.freeze(obj);\nObject.keys(obj).forEach( (key, i) =&gt; {\n    if ( typeof obj[key] === &apos;object&apos; ) {\n    constantize( obj[key] );\n    }\n});\n</code></pre><p> };</p>\n</li>\n</ul>\n<h2 id=\"顶层对象\"><a href=\"#顶层对象\" class=\"headerlink\" title=\"顶层对象\"></a>顶层对象</h2><ol>\n<li>浏览器里面，顶层对象是window，但 Node 和 Web Worker 没有window。</li>\n<li>浏览器和 Web Worker 里面，self也指向顶层对象，但是 Node 没有self。</li>\n<li><p>Node 里面，顶层对象是global，但其他环境都不支持。</p>\n<pre><code>// 方法一\n(typeof window !== &apos;undefined&apos;\n    ? window\n    : (typeof process === &apos;object&apos; &amp;&amp;\n        typeof require === &apos;function&apos; &amp;&amp;\n        typeof global === &apos;object&apos;)\n        ? global\n        : this);\n\n    // 方法二\n    var getGlobal = function () {\n    if (typeof self !== &apos;undefined&apos;) { return self; }\n    if (typeof window !== &apos;undefined&apos;) { return window; }\n    if (typeof global !== &apos;undefined&apos;) { return global; }\n    throw new Error(&apos;unable to locate global object&apos;);\n};\n</code></pre></li>\n</ol>\n","site":{"data":{}},"excerpt":"<h2 id=\"不存在变量提升\"><a href=\"#不存在变量提升\" class=\"headerlink\" title=\"不存在变量提升\"></a>不存在变量提升</h2><p>var命令会发生”变量提升“现象，即变量可以在声明之前使用，值为undefined。这种现象多多少少是有些奇怪的，按照一般的逻辑，变量应该在声明语句之后才可以使用。</p>\n<p>为了纠正这种现象，let命令改变了语法行为，它所声明的变量一定要在声明后使用，否则报错。</p>","more":"<h2 id=\"暂时性死区\"><a href=\"#暂时性死区\" class=\"headerlink\" title=\"暂时性死区\"></a>暂时性死区</h2><p>只要块级作用域内存在let命令，它所声明的变量就“绑定”（binding）这个区域，不再受外部的影响。<br>在代码块内，使用let命令声明变量之前，该变量都是不可用的。</p>\n<h2 id=\"不允许重复声明\"><a href=\"#不允许重复声明\" class=\"headerlink\" title=\"不允许重复声明\"></a>不允许重复声明</h2><p>不允许在相同作用域内，重复声明同一个变量。</p>\n<h2 id=\"ES6-的块级作用域\"><a href=\"#ES6-的块级作用域\" class=\"headerlink\" title=\"ES6 的块级作用域\"></a>ES6 的块级作用域</h2><p>ES5 只有全局作用域和函数作用域，没有块级作用域，这带来很多不合理的场景。ES5 规定，函数只能在顶层作用域和函数作用域之中声明，不能在块级作用域声明。</p>\n<ul>\n<li>第一种场景，内层变量可能会覆盖外层变量。</li>\n<li><p>第二种场景，用来计数的循环变量泄露为全局变量。</p>\n<h2 id=\"const\"><a href=\"#const\" class=\"headerlink\" title=\"const\"></a>const</h2><p>const声明一个只读的常量。一旦声明，常量的值就不能改变。</p>\n<p>const实际上保证的，并不是变量的值不得改动，而是变量指向的那个内存地址不得改动。对于简单类型的数据（数值、字符串、布尔值），值就保存在变量指向的那个内存地址，因此等同于常量。但对于复合类型的数据（主要是对象和数组），变量指向的内存地址，保存的只是一个指针，const只能保证这个指针是固定的，至于它指向的数据结构是不是可变的，就完全不能控制了。因此，将一个对象声明为常量必须非常小心。</p>\n<p>如果真的想将对象冻结，应该使用Object.freeze方法。</p>\n<p>对象及其属性冻结：</p>\n<p> var constantize = (obj) =&gt; {</p>\n<pre><code>Object.freeze(obj);\nObject.keys(obj).forEach( (key, i) =&gt; {\n    if ( typeof obj[key] === &apos;object&apos; ) {\n    constantize( obj[key] );\n    }\n});\n</code></pre><p> };</p>\n</li>\n</ul>\n<h2 id=\"顶层对象\"><a href=\"#顶层对象\" class=\"headerlink\" title=\"顶层对象\"></a>顶层对象</h2><ol>\n<li>浏览器里面，顶层对象是window，但 Node 和 Web Worker 没有window。</li>\n<li>浏览器和 Web Worker 里面，self也指向顶层对象，但是 Node 没有self。</li>\n<li><p>Node 里面，顶层对象是global，但其他环境都不支持。</p>\n<pre><code>// 方法一\n(typeof window !== &apos;undefined&apos;\n    ? window\n    : (typeof process === &apos;object&apos; &amp;&amp;\n        typeof require === &apos;function&apos; &amp;&amp;\n        typeof global === &apos;object&apos;)\n        ? global\n        : this);\n\n    // 方法二\n    var getGlobal = function () {\n    if (typeof self !== &apos;undefined&apos;) { return self; }\n    if (typeof window !== &apos;undefined&apos;) { return window; }\n    if (typeof global !== &apos;undefined&apos;) { return global; }\n    throw new Error(&apos;unable to locate global object&apos;);\n};\n</code></pre></li>\n</ol>"},{"title":"rest参数和扩展运算符","date":"2017-06-12T11:42:01.000Z","_content":"\n\n## rest参数\n\n用于获取函数的多余参数，这样就不用使用arguments对象了，该变量将多余的参数放入数组中。\n\n语法：`...args`\n\n<!--more-->\n\n* 利用rest参数，可以向函数传入任意数量的参数\n\n  ```\n  function add(...args) {\n    let total = 0;\n    for (let key of args) {\n      total += key;\n    }\n    return total;\n  }\n\n  add(3, 5, 8);//16\n  add(3, 1);//4\n\n  ```\n\n* 使用rest参数代替arguments\n\n  ```\n  function sortNumbers() {\n    Array.prototype.slice.call(arguments).sort();\n  }\n\n  function sortNumbers(...args) {\n    args.sort();\n  }\n  ```\n\n* rest参数之后不能再有参数，即rest参数只能是最后一个参数\n\n\n\n\n\n## 扩展运算符\n\n* 好比rest参数的逆运算，将一个数组转换为用逗号分隔的序列。语法：`...[arr]`\n\n  **在圆括号中成为参数序列：（...[1, 2, 3, 4]）=> (1, 2, 3, 4) **\n\n  **在方括号中成为新数组：[1, 2, ...[3, 4, 5]] => [1, 2, 3, 4, 5]**\n\n* 可以用来替代函数的apply方法:\n\n  ```\n  //ES5写法-----apply方法第一个参数是上下文，第二个参数是方法的参数列表，但是是装在同一个数组里面。\n  function f(x, y, z) {\n    //...\n  }\n  var args = [0, 1, 2];\n  f.apply(null, args);\n   \n  //ES6写法\n  function f(x, y, z) {\n    //...\n  }\n  let args = [1, 2, 3];\n  f(...args);\n  ```\n\n* 求数组最大值:\n\n  ```\n  //ES5写法\n  Math.max.apply(null, [23, 12, 54]);\n\n  //ES6写法\n  Math.max((...[23, 12, 54]));\n  //等同于求max方法的参数的最大值\n  Math.max(23, 12, 54)\n  ```\n\n* 将一个数组的所有元素一次添加到另一个数组\n\n  ```\n  //ES5写法\n  var arr1 = [1, 2, 3];\n  var arr2 = [4, 5, 6];\n  Array.prototype.push.apply(arr1, ar2);\n\n  //ES6的写法----因为push可以接受若干参数一次添加进数组，如果传入的是一个数组，那么这个数组就被当做整体添加就一个元素了。\n  arr1.push(...arr2);\n  ```\n\n* 复制数组\n\n  ```\n  //ES5写法----concat用于连接两个数组，然后返回一个新数组，那么这两个数组就不是指向同一个地址了。\n  const a1 = [1, 3];\n  const a2 = a1.concat();\n\n  //ES6写法\n  const a1 = [1, 2];\n  const a2 = [...a1];//创建了新数组，填入了a1的所有项\n  ```\n\n* 合并数组\n\n  ```\n  //ES5写法\n  [1, 2].concat(more);\n  var arr1 = [1, 2];\n  var arr2 = [3, 4];\n  var arr3 = [5, 6];\n  arr1.concat(arr2, arr3);\n\n  //ES6写法\n  [1, 2, ...more];\n  [...arr1, ...arr2, ...arr3];\n\n  ```\n\n* 将实现了Iterator接口的对象，转化为数组\n\n\n  ```\n  //类数组对象\n  let nodeList = document.querySelectorAll('div');\n  let arr1 = [...nodeList];\n\n  let arrayLike = {\n    '0': 'a',\n    '1': 'b',\n    '2': 'c',\n    'length': 3\n  };\n  let arr2 = [...arrayLike];// TypeError: Cannot spread non-iterable object.\n  //arrayLike没有部署Iterator接口，所以不能使用扩展运算符，可以使用Array.from将其装换为数组\n\n  ```\n\n* Map和Set也实现了Iterator接口\n\n  ```\n  let map = new Map([\n    [0, 'a'],\n    [1, 'b'],\n    [2, 'c']\n  ]);\n  let arr1 = [...map.keys()];//[1, 2, 3]\n  let arr2 = [...map.values()];//[a, b, c]\n  let arr3 = [...map.entries()];//[[1, 'a'], [2, 'b'], [3, 'c']]\n  ```\n\n* Generator函数运行后，返回一个遍历器对象，因此也可以用扩展运算符\n\n  ```\n  const go = function* () {\n    yield 1;\n    yield 2;\n    yield 3;\n  };\n\n  [...go()]//[1, 2, 3]\n  ```\n\n  ​","source":"_posts/rest参数和扩展运算符.md","raw":"---\ntitle: rest参数和扩展运算符\ndate: 2017-06-12 19:42:01\ntags: ES6\n---\n\n\n## rest参数\n\n用于获取函数的多余参数，这样就不用使用arguments对象了，该变量将多余的参数放入数组中。\n\n语法：`...args`\n\n<!--more-->\n\n* 利用rest参数，可以向函数传入任意数量的参数\n\n  ```\n  function add(...args) {\n    let total = 0;\n    for (let key of args) {\n      total += key;\n    }\n    return total;\n  }\n\n  add(3, 5, 8);//16\n  add(3, 1);//4\n\n  ```\n\n* 使用rest参数代替arguments\n\n  ```\n  function sortNumbers() {\n    Array.prototype.slice.call(arguments).sort();\n  }\n\n  function sortNumbers(...args) {\n    args.sort();\n  }\n  ```\n\n* rest参数之后不能再有参数，即rest参数只能是最后一个参数\n\n\n\n\n\n## 扩展运算符\n\n* 好比rest参数的逆运算，将一个数组转换为用逗号分隔的序列。语法：`...[arr]`\n\n  **在圆括号中成为参数序列：（...[1, 2, 3, 4]）=> (1, 2, 3, 4) **\n\n  **在方括号中成为新数组：[1, 2, ...[3, 4, 5]] => [1, 2, 3, 4, 5]**\n\n* 可以用来替代函数的apply方法:\n\n  ```\n  //ES5写法-----apply方法第一个参数是上下文，第二个参数是方法的参数列表，但是是装在同一个数组里面。\n  function f(x, y, z) {\n    //...\n  }\n  var args = [0, 1, 2];\n  f.apply(null, args);\n   \n  //ES6写法\n  function f(x, y, z) {\n    //...\n  }\n  let args = [1, 2, 3];\n  f(...args);\n  ```\n\n* 求数组最大值:\n\n  ```\n  //ES5写法\n  Math.max.apply(null, [23, 12, 54]);\n\n  //ES6写法\n  Math.max((...[23, 12, 54]));\n  //等同于求max方法的参数的最大值\n  Math.max(23, 12, 54)\n  ```\n\n* 将一个数组的所有元素一次添加到另一个数组\n\n  ```\n  //ES5写法\n  var arr1 = [1, 2, 3];\n  var arr2 = [4, 5, 6];\n  Array.prototype.push.apply(arr1, ar2);\n\n  //ES6的写法----因为push可以接受若干参数一次添加进数组，如果传入的是一个数组，那么这个数组就被当做整体添加就一个元素了。\n  arr1.push(...arr2);\n  ```\n\n* 复制数组\n\n  ```\n  //ES5写法----concat用于连接两个数组，然后返回一个新数组，那么这两个数组就不是指向同一个地址了。\n  const a1 = [1, 3];\n  const a2 = a1.concat();\n\n  //ES6写法\n  const a1 = [1, 2];\n  const a2 = [...a1];//创建了新数组，填入了a1的所有项\n  ```\n\n* 合并数组\n\n  ```\n  //ES5写法\n  [1, 2].concat(more);\n  var arr1 = [1, 2];\n  var arr2 = [3, 4];\n  var arr3 = [5, 6];\n  arr1.concat(arr2, arr3);\n\n  //ES6写法\n  [1, 2, ...more];\n  [...arr1, ...arr2, ...arr3];\n\n  ```\n\n* 将实现了Iterator接口的对象，转化为数组\n\n\n  ```\n  //类数组对象\n  let nodeList = document.querySelectorAll('div');\n  let arr1 = [...nodeList];\n\n  let arrayLike = {\n    '0': 'a',\n    '1': 'b',\n    '2': 'c',\n    'length': 3\n  };\n  let arr2 = [...arrayLike];// TypeError: Cannot spread non-iterable object.\n  //arrayLike没有部署Iterator接口，所以不能使用扩展运算符，可以使用Array.from将其装换为数组\n\n  ```\n\n* Map和Set也实现了Iterator接口\n\n  ```\n  let map = new Map([\n    [0, 'a'],\n    [1, 'b'],\n    [2, 'c']\n  ]);\n  let arr1 = [...map.keys()];//[1, 2, 3]\n  let arr2 = [...map.values()];//[a, b, c]\n  let arr3 = [...map.entries()];//[[1, 'a'], [2, 'b'], [3, 'c']]\n  ```\n\n* Generator函数运行后，返回一个遍历器对象，因此也可以用扩展运算符\n\n  ```\n  const go = function* () {\n    yield 1;\n    yield 2;\n    yield 3;\n  };\n\n  [...go()]//[1, 2, 3]\n  ```\n\n  ​","slug":"rest参数和扩展运算符","published":1,"updated":"2018-12-21T04:59:19.435Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjpxle9kh000eh8obwz9ogvjb","content":"<h2 id=\"rest参数\"><a href=\"#rest参数\" class=\"headerlink\" title=\"rest参数\"></a>rest参数</h2><p>用于获取函数的多余参数，这样就不用使用arguments对象了，该变量将多余的参数放入数组中。</p>\n<p>语法：<code>...args</code></p>\n<a id=\"more\"></a>\n<ul>\n<li><p>利用rest参数，可以向函数传入任意数量的参数</p>\n<figure class=\"highlight actionscript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">add</span><span class=\"params\">(<span class=\"rest_arg\">...args</span>)</span> </span>&#123;</span><br><span class=\"line\">  let total = <span class=\"number\">0</span>;</span><br><span class=\"line\">  <span class=\"keyword\">for</span> (let key of args) &#123;</span><br><span class=\"line\">    total += key;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> total;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">add(<span class=\"number\">3</span>, <span class=\"number\">5</span>, <span class=\"number\">8</span>);<span class=\"comment\">//16</span></span><br><span class=\"line\">add(<span class=\"number\">3</span>, <span class=\"number\">1</span>);<span class=\"comment\">//4</span></span><br></pre></td></tr></table></figure>\n</li>\n<li><p>使用rest参数代替arguments</p>\n<figure class=\"highlight actionscript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">sortNumbers</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">  Array.prototype.slice.call(arguments).sort();</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">sortNumbers</span><span class=\"params\">(<span class=\"rest_arg\">...args</span>)</span> </span>&#123;</span><br><span class=\"line\">  args.sort();</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>rest参数之后不能再有参数，即rest参数只能是最后一个参数</p>\n</li>\n</ul>\n<h2 id=\"扩展运算符\"><a href=\"#扩展运算符\" class=\"headerlink\" title=\"扩展运算符\"></a>扩展运算符</h2><ul>\n<li><p>好比rest参数的逆运算，将一个数组转换为用逗号分隔的序列。语法：<code>...[arr]</code></p>\n<p><strong>在圆括号中成为参数序列：（…[1, 2, 3, 4]）=&gt; (1, 2, 3, 4) </strong></p>\n<p><strong>在方括号中成为新数组：[1, 2, …[3, 4, 5]] =&gt; [1, 2, 3, 4, 5]</strong></p>\n</li>\n<li><p>可以用来替代函数的apply方法:</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//ES5写法-----apply方法第一个参数是上下文，第二个参数是方法的参数列表，但是是装在同一个数组里面。</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">f</span>(<span class=\"params\">x, y, z</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"comment\">//...</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">var</span> args = [<span class=\"number\">0</span>, <span class=\"number\">1</span>, <span class=\"number\">2</span>];</span><br><span class=\"line\">f.apply(<span class=\"literal\">null</span>, args);</span><br><span class=\"line\"> </span><br><span class=\"line\"><span class=\"comment\">//ES6写法</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">f</span>(<span class=\"params\">x, y, z</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"comment\">//...</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">let</span> args = [<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>];</span><br><span class=\"line\">f(...args);</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>求数组最大值:</p>\n<figure class=\"highlight lsl\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//ES5写法</span></span><br><span class=\"line\">Math.max.apply(null, [<span class=\"number\">23</span>, <span class=\"number\">12</span>, <span class=\"number\">54</span>]);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//ES6写法</span></span><br><span class=\"line\">Math.max((...[<span class=\"number\">23</span>, <span class=\"number\">12</span>, <span class=\"number\">54</span>]));</span><br><span class=\"line\"><span class=\"comment\">//等同于求max方法的参数的最大值</span></span><br><span class=\"line\">Math.max(<span class=\"number\">23</span>, <span class=\"number\">12</span>, <span class=\"number\">54</span>)</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>将一个数组的所有元素一次添加到另一个数组</p>\n<figure class=\"highlight lsl\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//ES5写法</span></span><br><span class=\"line\">var arr1 = [<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>];</span><br><span class=\"line\">var arr2 = [<span class=\"number\">4</span>, <span class=\"number\">5</span>, <span class=\"number\">6</span>];</span><br><span class=\"line\">Array.prototype.push.apply(arr1, ar2);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//ES6的写法----因为push可以接受若干参数一次添加进数组，如果传入的是一个数组，那么这个数组就被当做整体添加就一个元素了。</span></span><br><span class=\"line\">arr1.push(...arr2);</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>复制数组</p>\n<figure class=\"highlight processing\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//ES5写法----concat用于连接两个数组，然后返回一个新数组，那么这两个数组就不是指向同一个地址了。</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> a1 = [<span class=\"number\">1</span>, <span class=\"number\">3</span>];</span><br><span class=\"line\"><span class=\"keyword\">const</span> a2 = a1.<span class=\"built_in\">concat</span>();</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//ES6写法</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> a1 = [<span class=\"number\">1</span>, <span class=\"number\">2</span>];</span><br><span class=\"line\"><span class=\"keyword\">const</span> a2 = [...a1];<span class=\"comment\">//创建了新数组，填入了a1的所有项</span></span><br></pre></td></tr></table></figure>\n</li>\n<li><p>合并数组</p>\n<figure class=\"highlight lsl\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//ES5写法</span></span><br><span class=\"line\">[<span class=\"number\">1</span>, <span class=\"number\">2</span>].concat(more);</span><br><span class=\"line\">var arr1 = [<span class=\"number\">1</span>, <span class=\"number\">2</span>];</span><br><span class=\"line\">var arr2 = [<span class=\"number\">3</span>, <span class=\"number\">4</span>];</span><br><span class=\"line\">var arr3 = [<span class=\"number\">5</span>, <span class=\"number\">6</span>];</span><br><span class=\"line\">arr1.concat(arr2, arr3);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//ES6写法</span></span><br><span class=\"line\">[<span class=\"number\">1</span>, <span class=\"number\">2</span>, ...more];</span><br><span class=\"line\">[...arr1, ...arr2, ...arr3];</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>将实现了Iterator接口的对象，转化为数组</p>\n</li>\n</ul>\n  <figure class=\"highlight clean\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//类数组对象</span></span><br><span class=\"line\"><span class=\"keyword\">let</span> nodeList = document.querySelectorAll(<span class=\"string\">'div'</span>);</span><br><span class=\"line\"><span class=\"keyword\">let</span> arr1 = [...nodeList];</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">let</span> arrayLike = &#123;</span><br><span class=\"line\">  <span class=\"string\">'0'</span>: <span class=\"string\">'a'</span>,</span><br><span class=\"line\">  <span class=\"string\">'1'</span>: <span class=\"string\">'b'</span>,</span><br><span class=\"line\">  <span class=\"string\">'2'</span>: <span class=\"string\">'c'</span>,</span><br><span class=\"line\">  <span class=\"string\">'length'</span>: <span class=\"number\">3</span></span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"><span class=\"keyword\">let</span> arr2 = [...arrayLike];<span class=\"comment\">// TypeError: Cannot spread non-iterable object.</span></span><br><span class=\"line\"><span class=\"comment\">//arrayLike没有部署Iterator接口，所以不能使用扩展运算符，可以使用Array.from将其装换为数组</span></span><br></pre></td></tr></table></figure>\n<ul>\n<li><p>Map和Set也实现了Iterator接口</p>\n<figure class=\"highlight prolog\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">let map = new <span class=\"symbol\">Map</span>([</span><br><span class=\"line\">  [<span class=\"number\">0</span>, <span class=\"string\">'a'</span>],</span><br><span class=\"line\">  [<span class=\"number\">1</span>, <span class=\"string\">'b'</span>],</span><br><span class=\"line\">  [<span class=\"number\">2</span>, <span class=\"string\">'c'</span>]</span><br><span class=\"line\">]);</span><br><span class=\"line\">let arr1 = [...map.keys()];//[<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>]</span><br><span class=\"line\">let arr2 = [...map.values()];//[a, b, c]</span><br><span class=\"line\">let arr3 = [...map.entries()];//[[<span class=\"number\">1</span>, <span class=\"string\">'a'</span>], [<span class=\"number\">2</span>, <span class=\"string\">'b'</span>], [<span class=\"number\">3</span>, <span class=\"string\">'c'</span>]]</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>Generator函数运行后，返回一个遍历器对象，因此也可以用扩展运算符</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> go = <span class=\"function\"><span class=\"keyword\">function</span>* (<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">yield</span> <span class=\"number\">1</span>;</span><br><span class=\"line\">  <span class=\"keyword\">yield</span> <span class=\"number\">2</span>;</span><br><span class=\"line\">  <span class=\"keyword\">yield</span> <span class=\"number\">3</span>;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\">[...go()]<span class=\"comment\">//[1, 2, 3]</span></span><br></pre></td></tr></table></figure>\n<p>​</p>\n</li>\n</ul>\n","site":{"data":{}},"excerpt":"<h2 id=\"rest参数\"><a href=\"#rest参数\" class=\"headerlink\" title=\"rest参数\"></a>rest参数</h2><p>用于获取函数的多余参数，这样就不用使用arguments对象了，该变量将多余的参数放入数组中。</p>\n<p>语法：<code>...args</code></p>","more":"<ul>\n<li><p>利用rest参数，可以向函数传入任意数量的参数</p>\n<figure class=\"highlight actionscript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">add</span><span class=\"params\">(<span class=\"rest_arg\">...args</span>)</span> </span>&#123;</span><br><span class=\"line\">  let total = <span class=\"number\">0</span>;</span><br><span class=\"line\">  <span class=\"keyword\">for</span> (let key of args) &#123;</span><br><span class=\"line\">    total += key;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> total;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">add(<span class=\"number\">3</span>, <span class=\"number\">5</span>, <span class=\"number\">8</span>);<span class=\"comment\">//16</span></span><br><span class=\"line\">add(<span class=\"number\">3</span>, <span class=\"number\">1</span>);<span class=\"comment\">//4</span></span><br></pre></td></tr></table></figure>\n</li>\n<li><p>使用rest参数代替arguments</p>\n<figure class=\"highlight actionscript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">sortNumbers</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">  Array.prototype.slice.call(arguments).sort();</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">sortNumbers</span><span class=\"params\">(<span class=\"rest_arg\">...args</span>)</span> </span>&#123;</span><br><span class=\"line\">  args.sort();</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>rest参数之后不能再有参数，即rest参数只能是最后一个参数</p>\n</li>\n</ul>\n<h2 id=\"扩展运算符\"><a href=\"#扩展运算符\" class=\"headerlink\" title=\"扩展运算符\"></a>扩展运算符</h2><ul>\n<li><p>好比rest参数的逆运算，将一个数组转换为用逗号分隔的序列。语法：<code>...[arr]</code></p>\n<p><strong>在圆括号中成为参数序列：（…[1, 2, 3, 4]）=&gt; (1, 2, 3, 4) </strong></p>\n<p><strong>在方括号中成为新数组：[1, 2, …[3, 4, 5]] =&gt; [1, 2, 3, 4, 5]</strong></p>\n</li>\n<li><p>可以用来替代函数的apply方法:</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//ES5写法-----apply方法第一个参数是上下文，第二个参数是方法的参数列表，但是是装在同一个数组里面。</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">f</span>(<span class=\"params\">x, y, z</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"comment\">//...</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">var</span> args = [<span class=\"number\">0</span>, <span class=\"number\">1</span>, <span class=\"number\">2</span>];</span><br><span class=\"line\">f.apply(<span class=\"literal\">null</span>, args);</span><br><span class=\"line\"> </span><br><span class=\"line\"><span class=\"comment\">//ES6写法</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">f</span>(<span class=\"params\">x, y, z</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"comment\">//...</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">let</span> args = [<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>];</span><br><span class=\"line\">f(...args);</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>求数组最大值:</p>\n<figure class=\"highlight lsl\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//ES5写法</span></span><br><span class=\"line\">Math.max.apply(null, [<span class=\"number\">23</span>, <span class=\"number\">12</span>, <span class=\"number\">54</span>]);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//ES6写法</span></span><br><span class=\"line\">Math.max((...[<span class=\"number\">23</span>, <span class=\"number\">12</span>, <span class=\"number\">54</span>]));</span><br><span class=\"line\"><span class=\"comment\">//等同于求max方法的参数的最大值</span></span><br><span class=\"line\">Math.max(<span class=\"number\">23</span>, <span class=\"number\">12</span>, <span class=\"number\">54</span>)</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>将一个数组的所有元素一次添加到另一个数组</p>\n<figure class=\"highlight lsl\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//ES5写法</span></span><br><span class=\"line\">var arr1 = [<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>];</span><br><span class=\"line\">var arr2 = [<span class=\"number\">4</span>, <span class=\"number\">5</span>, <span class=\"number\">6</span>];</span><br><span class=\"line\">Array.prototype.push.apply(arr1, ar2);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//ES6的写法----因为push可以接受若干参数一次添加进数组，如果传入的是一个数组，那么这个数组就被当做整体添加就一个元素了。</span></span><br><span class=\"line\">arr1.push(...arr2);</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>复制数组</p>\n<figure class=\"highlight processing\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//ES5写法----concat用于连接两个数组，然后返回一个新数组，那么这两个数组就不是指向同一个地址了。</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> a1 = [<span class=\"number\">1</span>, <span class=\"number\">3</span>];</span><br><span class=\"line\"><span class=\"keyword\">const</span> a2 = a1.<span class=\"built_in\">concat</span>();</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//ES6写法</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> a1 = [<span class=\"number\">1</span>, <span class=\"number\">2</span>];</span><br><span class=\"line\"><span class=\"keyword\">const</span> a2 = [...a1];<span class=\"comment\">//创建了新数组，填入了a1的所有项</span></span><br></pre></td></tr></table></figure>\n</li>\n<li><p>合并数组</p>\n<figure class=\"highlight lsl\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//ES5写法</span></span><br><span class=\"line\">[<span class=\"number\">1</span>, <span class=\"number\">2</span>].concat(more);</span><br><span class=\"line\">var arr1 = [<span class=\"number\">1</span>, <span class=\"number\">2</span>];</span><br><span class=\"line\">var arr2 = [<span class=\"number\">3</span>, <span class=\"number\">4</span>];</span><br><span class=\"line\">var arr3 = [<span class=\"number\">5</span>, <span class=\"number\">6</span>];</span><br><span class=\"line\">arr1.concat(arr2, arr3);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//ES6写法</span></span><br><span class=\"line\">[<span class=\"number\">1</span>, <span class=\"number\">2</span>, ...more];</span><br><span class=\"line\">[...arr1, ...arr2, ...arr3];</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>将实现了Iterator接口的对象，转化为数组</p>\n</li>\n</ul>\n  <figure class=\"highlight clean\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//类数组对象</span></span><br><span class=\"line\"><span class=\"keyword\">let</span> nodeList = document.querySelectorAll(<span class=\"string\">'div'</span>);</span><br><span class=\"line\"><span class=\"keyword\">let</span> arr1 = [...nodeList];</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">let</span> arrayLike = &#123;</span><br><span class=\"line\">  <span class=\"string\">'0'</span>: <span class=\"string\">'a'</span>,</span><br><span class=\"line\">  <span class=\"string\">'1'</span>: <span class=\"string\">'b'</span>,</span><br><span class=\"line\">  <span class=\"string\">'2'</span>: <span class=\"string\">'c'</span>,</span><br><span class=\"line\">  <span class=\"string\">'length'</span>: <span class=\"number\">3</span></span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"><span class=\"keyword\">let</span> arr2 = [...arrayLike];<span class=\"comment\">// TypeError: Cannot spread non-iterable object.</span></span><br><span class=\"line\"><span class=\"comment\">//arrayLike没有部署Iterator接口，所以不能使用扩展运算符，可以使用Array.from将其装换为数组</span></span><br></pre></td></tr></table></figure>\n<ul>\n<li><p>Map和Set也实现了Iterator接口</p>\n<figure class=\"highlight prolog\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">let map = new <span class=\"symbol\">Map</span>([</span><br><span class=\"line\">  [<span class=\"number\">0</span>, <span class=\"string\">'a'</span>],</span><br><span class=\"line\">  [<span class=\"number\">1</span>, <span class=\"string\">'b'</span>],</span><br><span class=\"line\">  [<span class=\"number\">2</span>, <span class=\"string\">'c'</span>]</span><br><span class=\"line\">]);</span><br><span class=\"line\">let arr1 = [...map.keys()];//[<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>]</span><br><span class=\"line\">let arr2 = [...map.values()];//[a, b, c]</span><br><span class=\"line\">let arr3 = [...map.entries()];//[[<span class=\"number\">1</span>, <span class=\"string\">'a'</span>], [<span class=\"number\">2</span>, <span class=\"string\">'b'</span>], [<span class=\"number\">3</span>, <span class=\"string\">'c'</span>]]</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>Generator函数运行后，返回一个遍历器对象，因此也可以用扩展运算符</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> go = <span class=\"function\"><span class=\"keyword\">function</span>* (<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">yield</span> <span class=\"number\">1</span>;</span><br><span class=\"line\">  <span class=\"keyword\">yield</span> <span class=\"number\">2</span>;</span><br><span class=\"line\">  <span class=\"keyword\">yield</span> <span class=\"number\">3</span>;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\">[...go()]<span class=\"comment\">//[1, 2, 3]</span></span><br></pre></td></tr></table></figure>\n<p>​</p>\n</li>\n</ul>"},{"title":"NodeJS刷票程序","date":"2017-01-08T09:07:46.000Z","_content":"\n![buy_ticket](/images/buyTicket.jpg)\n\n这是一个脚本程序，运行在NodeJS环境之上，功能类似360抢票王。\n<!--more-->\n\n### 安装\n\n假设已经安装了node环境，从github上clone下源代码（[源码在这](https://github.com/renhongl/Buy_Ticket)）\n\n运行`npm install`安装依赖\n\n双击run.bat即可\n\n### 效果\n\n控制台每隔30秒打印最新票量信息，如果没有票，显示 **No data found**，如果有，则一一列出来。根目录文件夹也会生成一个log.txt文件，方便查看之前刷票的结果。在有票的时候，还会通过短信告知用户，效果图在文章开始已经列出。\n\n### 代码\n\n代码主要是通过request模块从携程网的查询票量的API中获取数据，经过筛选数据后，将符合要求的数据发给用户。\n\n**发送短信的代码：**\n\n\tvar App = require('alidayu-node');\n\tvar app = new App('App Key', 'App Secret');\n\n    var message = JSON.stringify({\n        \"name\": \"lrh\",\n        \"trainName\": 'D5154',\n        \"number\": '2'\n    });\n\n    var smsOptions = {\n        sms_free_sign_name: '提示信息',\n        sms_param: message,\n        rec_num: '81193903',\n        sms_template_code: 'SMS_39010188'\n    };\n    app.smsSend(options);\n\n这是使用的阿里大于的API，在官网注册账号后，需要创建新应用获取**App Key**和 **App Secret**，接着需要为自己的短信申请签名和模板。申请成功后，就可以用上面的方式来发送短信了。\n\n","source":"_posts/NodeJS刷票程序.md","raw":"---\ntitle: NodeJS刷票程序\ndate: 2017-01-08 17:07:46\ntags:\n\t- 分享\n---\n\n![buy_ticket](/images/buyTicket.jpg)\n\n这是一个脚本程序，运行在NodeJS环境之上，功能类似360抢票王。\n<!--more-->\n\n### 安装\n\n假设已经安装了node环境，从github上clone下源代码（[源码在这](https://github.com/renhongl/Buy_Ticket)）\n\n运行`npm install`安装依赖\n\n双击run.bat即可\n\n### 效果\n\n控制台每隔30秒打印最新票量信息，如果没有票，显示 **No data found**，如果有，则一一列出来。根目录文件夹也会生成一个log.txt文件，方便查看之前刷票的结果。在有票的时候，还会通过短信告知用户，效果图在文章开始已经列出。\n\n### 代码\n\n代码主要是通过request模块从携程网的查询票量的API中获取数据，经过筛选数据后，将符合要求的数据发给用户。\n\n**发送短信的代码：**\n\n\tvar App = require('alidayu-node');\n\tvar app = new App('App Key', 'App Secret');\n\n    var message = JSON.stringify({\n        \"name\": \"lrh\",\n        \"trainName\": 'D5154',\n        \"number\": '2'\n    });\n\n    var smsOptions = {\n        sms_free_sign_name: '提示信息',\n        sms_param: message,\n        rec_num: '81193903',\n        sms_template_code: 'SMS_39010188'\n    };\n    app.smsSend(options);\n\n这是使用的阿里大于的API，在官网注册账号后，需要创建新应用获取**App Key**和 **App Secret**，接着需要为自己的短信申请签名和模板。申请成功后，就可以用上面的方式来发送短信了。\n\n","slug":"NodeJS刷票程序","published":1,"updated":"2018-12-21T04:59:19.232Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjpxle9kh000hh8obqv7ld4ng","content":"<p><img src=\"/images/buyTicket.jpg\" alt=\"buy_ticket\"></p>\n<p>这是一个脚本程序，运行在NodeJS环境之上，功能类似360抢票王。<br><a id=\"more\"></a></p>\n<h3 id=\"安装\"><a href=\"#安装\" class=\"headerlink\" title=\"安装\"></a>安装</h3><p>假设已经安装了node环境，从github上clone下源代码（<a href=\"https://github.com/renhongl/Buy_Ticket\">源码在这</a>）</p>\n<p>运行<code>npm install</code>安装依赖</p>\n<p>双击run.bat即可</p>\n<h3 id=\"效果\"><a href=\"#效果\" class=\"headerlink\" title=\"效果\"></a>效果</h3><p>控制台每隔30秒打印最新票量信息，如果没有票，显示 <strong>No data found</strong>，如果有，则一一列出来。根目录文件夹也会生成一个log.txt文件，方便查看之前刷票的结果。在有票的时候，还会通过短信告知用户，效果图在文章开始已经列出。</p>\n<h3 id=\"代码\"><a href=\"#代码\" class=\"headerlink\" title=\"代码\"></a>代码</h3><p>代码主要是通过request模块从携程网的查询票量的API中获取数据，经过筛选数据后，将符合要求的数据发给用户。</p>\n<p><strong>发送短信的代码：</strong></p>\n<pre><code>var App = require(&apos;alidayu-node&apos;);\nvar app = new App(&apos;App Key&apos;, &apos;App Secret&apos;);\n\nvar message = JSON.stringify({\n    &quot;name&quot;: &quot;lrh&quot;,\n    &quot;trainName&quot;: &apos;D5154&apos;,\n    &quot;number&quot;: &apos;2&apos;\n});\n\nvar smsOptions = {\n    sms_free_sign_name: &apos;提示信息&apos;,\n    sms_param: message,\n    rec_num: &apos;81193903&apos;,\n    sms_template_code: &apos;SMS_39010188&apos;\n};\napp.smsSend(options);\n</code></pre><p>这是使用的阿里大于的API，在官网注册账号后，需要创建新应用获取<strong>App Key</strong>和 <strong>App Secret</strong>，接着需要为自己的短信申请签名和模板。申请成功后，就可以用上面的方式来发送短信了。</p>\n","site":{"data":{}},"excerpt":"<p><img src=\"/images/buyTicket.jpg\" alt=\"buy_ticket\"></p>\n<p>这是一个脚本程序，运行在NodeJS环境之上，功能类似360抢票王。<br>","more":"</p>\n<h3 id=\"安装\"><a href=\"#安装\" class=\"headerlink\" title=\"安装\"></a>安装</h3><p>假设已经安装了node环境，从github上clone下源代码（<a href=\"https://github.com/renhongl/Buy_Ticket\">源码在这</a>）</p>\n<p>运行<code>npm install</code>安装依赖</p>\n<p>双击run.bat即可</p>\n<h3 id=\"效果\"><a href=\"#效果\" class=\"headerlink\" title=\"效果\"></a>效果</h3><p>控制台每隔30秒打印最新票量信息，如果没有票，显示 <strong>No data found</strong>，如果有，则一一列出来。根目录文件夹也会生成一个log.txt文件，方便查看之前刷票的结果。在有票的时候，还会通过短信告知用户，效果图在文章开始已经列出。</p>\n<h3 id=\"代码\"><a href=\"#代码\" class=\"headerlink\" title=\"代码\"></a>代码</h3><p>代码主要是通过request模块从携程网的查询票量的API中获取数据，经过筛选数据后，将符合要求的数据发给用户。</p>\n<p><strong>发送短信的代码：</strong></p>\n<pre><code>var App = require(&apos;alidayu-node&apos;);\nvar app = new App(&apos;App Key&apos;, &apos;App Secret&apos;);\n\nvar message = JSON.stringify({\n    &quot;name&quot;: &quot;lrh&quot;,\n    &quot;trainName&quot;: &apos;D5154&apos;,\n    &quot;number&quot;: &apos;2&apos;\n});\n\nvar smsOptions = {\n    sms_free_sign_name: &apos;提示信息&apos;,\n    sms_param: message,\n    rec_num: &apos;81193903&apos;,\n    sms_template_code: &apos;SMS_39010188&apos;\n};\napp.smsSend(options);\n</code></pre><p>这是使用的阿里大于的API，在官网注册账号后，需要创建新应用获取<strong>App Key</strong>和 <strong>App Secret</strong>，接着需要为自己的短信申请签名和模板。申请成功后，就可以用上面的方式来发送短信了。</p>"},{"title":"实用工具推荐","date":"2016-12-07T14:49:59.000Z","_content":"\n分享一些好用的Windows工具。\n<!--more-->\n### VS Code\n\n我用过notepad++, sublime, atom, vscode, 各有各的特点，但是我更喜欢用后两个，因为作为一个前端开发，更喜欢用Web技术开发的工具。而VS Code 性能更好一点，就选择了它，功能也很强大，可以安装各种插件，丰富主题和功能，本身内置了很多有用的功能，比如：调试工具，终端，Git等等。\n\n很多工作区的设置还可以通过用户设置来重写配置，比如当我使用windows时，终端是cmd,命令特别不好用，就可以去首选项-用户设置中将终端路径改为git的bash，当然首先需要安装过git。改完之后，就可以在不用切换工具的情况下，使用bash。特别实用。\n### Ngrok\n\n这是内网穿透工具，比如在本地启动一个服务器 http://127.0.0.1:8080 使用ngrok可以将8080端口映射到外网，那么即使你没有外网ip地址，没有云服务器，也可以通过这种方式让别人访问到你的本地应用。\n\n如果百度sunny ngrok，可以找到国内免费的ngrok工具，以前是全免费，后来有收费提速的选择。就是不是很稳定，据说是同行nat123总是攻击他们的服务器。\n\n### Hexo\n\n引用官网的话——Hexo 是一个快速、简洁且高效的博客框架。Hexo 使用 Markdown（或其他渲染引擎）解析文章，在几秒内，即可利用靓丽的主题生成静态网页。\n\n本网站就是使用hexo搭建的，增加了多说评论功能，自己改了点主题的bug，用起来还是比较舒服。\n\n### Cmder\n\nWindows下非常好用的Linux终端。干净，漂亮，易于使用。\n\n### MarkdownPad2\n\nWindows下很少有免费且好用的markdown编辑器，而现在又很流行使用markdown写文章或者word，这款软件是不错的选择。","source":"_posts/实用工具推荐.md","raw":"---\ntitle: 实用工具推荐\ndate: 2016-12-07 22:49:59\ntags:\n\t- 分享\n---\n\n分享一些好用的Windows工具。\n<!--more-->\n### VS Code\n\n我用过notepad++, sublime, atom, vscode, 各有各的特点，但是我更喜欢用后两个，因为作为一个前端开发，更喜欢用Web技术开发的工具。而VS Code 性能更好一点，就选择了它，功能也很强大，可以安装各种插件，丰富主题和功能，本身内置了很多有用的功能，比如：调试工具，终端，Git等等。\n\n很多工作区的设置还可以通过用户设置来重写配置，比如当我使用windows时，终端是cmd,命令特别不好用，就可以去首选项-用户设置中将终端路径改为git的bash，当然首先需要安装过git。改完之后，就可以在不用切换工具的情况下，使用bash。特别实用。\n### Ngrok\n\n这是内网穿透工具，比如在本地启动一个服务器 http://127.0.0.1:8080 使用ngrok可以将8080端口映射到外网，那么即使你没有外网ip地址，没有云服务器，也可以通过这种方式让别人访问到你的本地应用。\n\n如果百度sunny ngrok，可以找到国内免费的ngrok工具，以前是全免费，后来有收费提速的选择。就是不是很稳定，据说是同行nat123总是攻击他们的服务器。\n\n### Hexo\n\n引用官网的话——Hexo 是一个快速、简洁且高效的博客框架。Hexo 使用 Markdown（或其他渲染引擎）解析文章，在几秒内，即可利用靓丽的主题生成静态网页。\n\n本网站就是使用hexo搭建的，增加了多说评论功能，自己改了点主题的bug，用起来还是比较舒服。\n\n### Cmder\n\nWindows下非常好用的Linux终端。干净，漂亮，易于使用。\n\n### MarkdownPad2\n\nWindows下很少有免费且好用的markdown编辑器，而现在又很流行使用markdown写文章或者word，这款软件是不错的选择。","slug":"实用工具推荐","published":1,"updated":"2018-12-21T04:59:19.435Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjpxle9kh000jh8obv666uq3y","content":"<p>分享一些好用的Windows工具。<br><a id=\"more\"></a></p>\n<h3 id=\"VS-Code\"><a href=\"#VS-Code\" class=\"headerlink\" title=\"VS Code\"></a>VS Code</h3><p>我用过notepad++, sublime, atom, vscode, 各有各的特点，但是我更喜欢用后两个，因为作为一个前端开发，更喜欢用Web技术开发的工具。而VS Code 性能更好一点，就选择了它，功能也很强大，可以安装各种插件，丰富主题和功能，本身内置了很多有用的功能，比如：调试工具，终端，Git等等。</p>\n<p>很多工作区的设置还可以通过用户设置来重写配置，比如当我使用windows时，终端是cmd,命令特别不好用，就可以去首选项-用户设置中将终端路径改为git的bash，当然首先需要安装过git。改完之后，就可以在不用切换工具的情况下，使用bash。特别实用。</p>\n<h3 id=\"Ngrok\"><a href=\"#Ngrok\" class=\"headerlink\" title=\"Ngrok\"></a>Ngrok</h3><p>这是内网穿透工具，比如在本地启动一个服务器 <a href=\"http://127.0.0.1:8080\" target=\"_blank\" rel=\"noopener\">http://127.0.0.1:8080</a> 使用ngrok可以将8080端口映射到外网，那么即使你没有外网ip地址，没有云服务器，也可以通过这种方式让别人访问到你的本地应用。</p>\n<p>如果百度sunny ngrok，可以找到国内免费的ngrok工具，以前是全免费，后来有收费提速的选择。就是不是很稳定，据说是同行nat123总是攻击他们的服务器。</p>\n<h3 id=\"Hexo\"><a href=\"#Hexo\" class=\"headerlink\" title=\"Hexo\"></a>Hexo</h3><p>引用官网的话——Hexo 是一个快速、简洁且高效的博客框架。Hexo 使用 Markdown（或其他渲染引擎）解析文章，在几秒内，即可利用靓丽的主题生成静态网页。</p>\n<p>本网站就是使用hexo搭建的，增加了多说评论功能，自己改了点主题的bug，用起来还是比较舒服。</p>\n<h3 id=\"Cmder\"><a href=\"#Cmder\" class=\"headerlink\" title=\"Cmder\"></a>Cmder</h3><p>Windows下非常好用的Linux终端。干净，漂亮，易于使用。</p>\n<h3 id=\"MarkdownPad2\"><a href=\"#MarkdownPad2\" class=\"headerlink\" title=\"MarkdownPad2\"></a>MarkdownPad2</h3><p>Windows下很少有免费且好用的markdown编辑器，而现在又很流行使用markdown写文章或者word，这款软件是不错的选择。</p>\n","site":{"data":{}},"excerpt":"<p>分享一些好用的Windows工具。<br>","more":"</p>\n<h3 id=\"VS-Code\"><a href=\"#VS-Code\" class=\"headerlink\" title=\"VS Code\"></a>VS Code</h3><p>我用过notepad++, sublime, atom, vscode, 各有各的特点，但是我更喜欢用后两个，因为作为一个前端开发，更喜欢用Web技术开发的工具。而VS Code 性能更好一点，就选择了它，功能也很强大，可以安装各种插件，丰富主题和功能，本身内置了很多有用的功能，比如：调试工具，终端，Git等等。</p>\n<p>很多工作区的设置还可以通过用户设置来重写配置，比如当我使用windows时，终端是cmd,命令特别不好用，就可以去首选项-用户设置中将终端路径改为git的bash，当然首先需要安装过git。改完之后，就可以在不用切换工具的情况下，使用bash。特别实用。</p>\n<h3 id=\"Ngrok\"><a href=\"#Ngrok\" class=\"headerlink\" title=\"Ngrok\"></a>Ngrok</h3><p>这是内网穿透工具，比如在本地启动一个服务器 <a href=\"http://127.0.0.1:8080\" target=\"_blank\" rel=\"noopener\">http://127.0.0.1:8080</a> 使用ngrok可以将8080端口映射到外网，那么即使你没有外网ip地址，没有云服务器，也可以通过这种方式让别人访问到你的本地应用。</p>\n<p>如果百度sunny ngrok，可以找到国内免费的ngrok工具，以前是全免费，后来有收费提速的选择。就是不是很稳定，据说是同行nat123总是攻击他们的服务器。</p>\n<h3 id=\"Hexo\"><a href=\"#Hexo\" class=\"headerlink\" title=\"Hexo\"></a>Hexo</h3><p>引用官网的话——Hexo 是一个快速、简洁且高效的博客框架。Hexo 使用 Markdown（或其他渲染引擎）解析文章，在几秒内，即可利用靓丽的主题生成静态网页。</p>\n<p>本网站就是使用hexo搭建的，增加了多说评论功能，自己改了点主题的bug，用起来还是比较舒服。</p>\n<h3 id=\"Cmder\"><a href=\"#Cmder\" class=\"headerlink\" title=\"Cmder\"></a>Cmder</h3><p>Windows下非常好用的Linux终端。干净，漂亮，易于使用。</p>\n<h3 id=\"MarkdownPad2\"><a href=\"#MarkdownPad2\" class=\"headerlink\" title=\"MarkdownPad2\"></a>MarkdownPad2</h3><p>Windows下很少有免费且好用的markdown编辑器，而现在又很流行使用markdown写文章或者word，这款软件是不错的选择。</p>"},{"title":"webpack全面理解","date":"2017-05-05T14:40:12.000Z","_content":"\n\n# Webpack\nWebpack是一个静态模块打包工具。将一切文件视为模块，可以像引入JavaScript文件一样，在代码中引入。\n\n<!--more-->\n\n## Entry Points\n入口点，就是打包的起始文件。有多种定义方式。\n1. 单入口，使用字符串:\n\n        const config = {\n            entry: './path/to/my/entry/file.js'\n        };\n        module.exports = config;\n2. 多入口，使用对象语法：\n\n        const config = {\n            entry: {\n                app: './src/app.js',\n                vendors: './src/vendors.js'\n            }\n        };\n\n## Output\n输出，告诉webpack怎样将编译后的文件写入磁盘。输出只有一个。\n1. 基本用法:\n\n        const config = {\n            output: {\n                filename: 'bundle.js',\n                path: '/home/proj/public/assets'\n            }\n        };\n        module.exports = config;\n2. 多入口点的用法:\n\n        {\n            entry: {\n                app: './src/app.js',\n                search: './src/search.js'\n            },\n            output: {\n                filename: '[name].js',\n                path: __dirname + '/dist'\n            }\n        }\n        // writes to disk: ./dist/app.js, ./dist/search.js\n\n## Loaders\n装载机，用于转换一个模块的源代码。类似于其他打包工具的任务功能。它允许你讲其他语言转换成JavaScript，或者像引入JavaScript文件一样引入图片，数据,CSS文件等。\n\n1. 安装: `npm install --save-dev style-loader css-loader`\n\n1. 配置:\n\n         module: {\n            rules: [\n            {\n                test: /\\.css$/,\n                use: [\n                { loader: 'style-loader' },\n                {\n                    loader: 'css-loader',\n                    options: {\n                    modules: true\n                    }\n                }\n                ]\n            }\n            ]\n        }\n\n## Plugins\n插件，是webpack的支柱，webpack本身就是创建在same plugin system之上的。它用来做loader不能做的事。\n\n1. 插件的结构：是一个有apply属性的JavaScript对象。apply属性会被webpack编译器调用，用于整个编译周期。\n\n2. 基本用法：\n\n        //installed via npm\n        const HtmlWebpackPlugin = require('html-webpack-plugin'); \n        const webpack = require('webpack'); //to access built-in plugins\n        const path = require('path');\n\n        const config = {\n            entry: './path/to/my/entry/file.js',\n            output: {\n                filename: 'my-first-webpack.bundle.js',\n                path: path.resolve(__dirname, 'dist')\n            },\n            module: {\n                rules: [\n                {\n                    test: /\\.(js|jsx)$/,\n                    use: 'babel-loader'\n                }\n                ]\n            },\n            plugins: [\n                new webpack.optimize.UglifyJsPlugin(),\n                new HtmlWebpackPlugin({template: './src/index.html'})\n            ]\n        };\n        module.exports = config;\n\n3. 常用插件：\n\n    * html-webpack-plugin（输出控制的插件）\n        1. 安装: `npm install --save-dev html-webpack-plugin`\n        2. 配置: \n\n                const path = require('path');\n                + const HtmlWebpackPlugin = require('html-webpack-plugin');\n\n                module.exports = {\n                    entry: {\n                    app: './src/index.js',\n                    print: './src/print.js'\n                    },\n                +   plugins: [\n                +     new HtmlWebpackPlugin({\n                +       title: 'Output Management'\n                +     })\n                +   ],\n                    output: {\n                    filename: '[name].bundle.js',\n                    path: path.resolve(__dirname, 'dist')\n                    }\n                };\n        3. 结论：使用该插件，每次创建会将index.html替换掉，自动引入多个入口的JavaScript文件。当我们在配置中新增、修改入口点时，就不用手动修改源代码。\n    * clean-webpack-plugin(清理/dist文件夹)\n        1. 安装: `npm install --save-dev clen-webpack-plugin`\n        2. 配置：\n\n                const path = require('path');\n                const HtmlWebpackPlugin = require('html-webpack-plugin');\n                + const CleanWebpackPlugin = require('clean-webpack-plugin');\n\n                module.exports = {\n                    entry: {\n                    app: './src/index.js',\n                    print: './src/print.js'\n                    },\n                    plugins: [\n                +     new CleanWebpackPlugin(['dist']),\n                    new HtmlWebpackPlugin({\n                        title: 'Output Management'\n                    })\n                    ],\n                    output: {\n                    filename: '[name].bundle.js',\n                    path: path.resolve(__dirname, 'dist')\n                    }\n                };\n        3. 结论：创建之后，不会再有旧文件，只有刚生成的文件。\n    * uglifyjs-webpack-plugin(Tree shaking插件，用于去除为使用的代码，以及最小化代码)\n        1. 安装: `npm install --save-dev uglifyjs-webpack-plugin`\n        2. 配置:\n\n                const path = require('path');\n                + const UglifyJSPlugin = require('uglifyjs-webpack-plugin');\n\n                module.exports = {\n                    entry: './src/index.js',\n                    output: {\n                        filename: 'bundle.js',\n                        path: path.resolve(__dirname, 'dist')\n                    - }\n                    + },\n                    + plugins: [\n                    +   new UglifyJSPlugin()\n                    + ]\n                };\n        3. 结论：创建后，最小化了代码文件，并且没有将未使用的代码创建进来。就像一棵树，源代码像绿色的活着的叶子，死代码像秋天到了棕色的，死了的叶子，通过摇动这棵树，将死去的叶子摇下。\n    * CommonsChunkPlugin(代码分裂插件)\n        1. 安装: 属于webpack内建插件\n        2. 配置: \n\n               const path = require('path');\n                + const webpack = require('webpack');\n                const HTMLWebpackPlugin = require('html-webpack-plugin');\n\n                module.exports = {\n                    entry: {\n                    index: './src/index.js',\n                    another: './src/another-module.js'\n                    },\n                    plugins: [\n                    new HTMLWebpackPlugin({\n                        title: 'Code Splitting'\n                -     })\n                +     }),\n                +     new webpack.optimize.CommonsChunkPlugin({\n                +       name: 'common' // Specify the common bundle's name.\n                +     })\n                    ],\n                    output: {\n                    filename: '[name].bundle.js',\n                    path: path.resolve(__dirname, 'dist')\n                    }\n                }; \n        3. 结论: 在没有使用该插件时，配置了多个入口，每个入口中都会存在共同使用的模块，代码就出现了重复。使用之后，共同使用的代码，会被创建在一个新的，单独的文件中。\n\n## Development\n开发时，我们需要做一些设置，使开发变得容易。\n\n1. Using source maps\n\n    * 描述: 在使用webpack创建代码时，我们很难通过错误和警告去追踪源代码位置。\n    * 配置: \n\n            module.exports = {\n                entry: {\n                app: './src/index.js',\n                print: './src/print.js'\n                },\n            +   devtool: 'inline-source-map',\n                plugins: [\n                new CleanWebpackPlugin(['dist']),\n                new HtmlWebpackPlugin({\n                    title: 'Development'\n                })\n                ],\n                output: {\n                filename: '[name].bundle.js',\n                path: path.resolve(__dirname, 'dist')\n                }\n            };\n    3. 结论: 在devtool属性中配置 `inline-source-map`之后，我们将可以在控制台中找到出错的行数，并可以链接进源代码。\n\n2. Using Watch Mode\n    * 描述: 如果每次修改源代码，我们都要去手动创建一次，这是一件很麻烦的事。\n    * 配置: \n\n             \"scripts\": {\n                \"test\": \"echo \\\"Error: no test specified\\\" && exit 1\",\n                +\"watch\": \"webpack --watch\",\n                \"build\": \"webpack\"\n            },\n    * 结论: 添加watch参数，每次修改源代码之后，webpack会帮忙自动创建。\n3. Using webpack-dev-server\n    * 描述: 提供一个简单的web服务器，并且能够自动刷新页面。\n    * 安装: `npm install --save-dev webpack-dev-server`\n    * 配置: \n\n            const path = require('path');\n            const HtmlWebpackPlugin = require('html-webpack-plugin');\n            const CleanWebpackPlugin = require('clean-webpack-plugin');\n\n            module.exports = {\n                entry: {\n                app: './src/index.js',\n                print: './src/print.js'\n                },\n                devtool: 'inline-source-map',\n            +   devServer: {\n            +     contentBase: './dist'\n            +   },\n                plugins: [\n                new CleanWebpackPlugin(['dist']),\n                new HtmlWebpackPlugin({\n                    title: 'Development'\n                })\n                ],\n                output: {\n                filename: '[name].bundle.js',\n                path: path.resolve(__dirname, 'dist')\n                }\n            };\n        \n        * 添加npm执行脚本: `\"start\": \"webpack-dev-server --open\"`\n\n## Production\n如何添加一个产品配置？我们需要将产品和开发时相同的配置提取出来，通过npm脚本传入不同的参数，在产品和开发时使用不同的webpack配置。\n\n1. 安装: `npm install --save-dev webpack-merge`\n2. 配置:\n\n    project: \n\n        webpack-demo\n        |- package.json\n        - |- webpack.config.js\n        + |- webpack.common.js\n        + |- webpack.dev.js\n        + |- webpack.prod.js\n        |- /dist\n        |- /src\n            |- index.js\n            |- math.js\n        |- /node_modules\n\n    webpack.common.js\n\n        + const path = require('path');\n        + const CleanWebpackPlugin = require('clean-webpack-plugin');\n        + const HtmlWebpackPlugin = require('html-webpack-plugin');\n        +\n        + module.exports = {\n        +   entry: {\n        +     app: './src/index.js'\n        +   },\n        +   plugins: [\n        +     new CleanWebpackPlugin(['dist']),\n        +     new HtmlWebpackPlugin({\n        +       title: 'Production'\n        +     })\n        +   ],\n        +   output: {\n        +     filename: '[name].bundle.js',\n        +     path: path.resolve(__dirname, 'dist')\n        +   }\n        + };\n\n    webpack.dev.js\n\n        + const merge = require('webpack-merge');\n        + const common = require('./webpack.common.js');\n        +\n        + module.exports = merge(common, {\n        +   devtool: 'inline-source-map',\n        +   devServer: {\n        +     contentBase: './dist'\n        +   }\n        + });\n\n    webpack.prod.js\n\n        + const merge = require('webpack-merge');\n        + const webpack = require('webpack');\n        + const UglifyJSPlugin = require('uglifyjs-webpack-plugin');\n        + const common = require('./webpack.common.js');\n        +\n        + module.exports = merge(common, {\n        +   devtool: 'source-map,\n        +   plugins: [\n        +     new UglifyJSPlugin({\n        +        sourceMap: true\n        +    }),\n        +     new webpack.DefinePlugin({\n        +        'process.env.NODE_ENV': JSON.stringify    +     ('produdction)\n        +      })\n        +   ]\n        + });\n\n    NPM Scripts\n\n        {\n            \"name\": \"development\",\n            \"version\": \"1.0.0\",\n            \"description\": \"\",\n            \"main\": \"webpack.config.js\",\n            \"scripts\": {\n        -     \"start\": \"webpack-dev-server --open\",\n        +     \"start\": \"webpack-dev-server --open --config webpack.dev.js\",\n        -     \"build\": \"webpack\"\n        +     \"build\": \"webpack --config webpack.prod.js\"\n            },\n            \"keywords\": [],\n            \"author\": \"\",\n            \"license\": \"ISC\",\n            \"devDependencies\": {\n            \"clean-webpack-plugin\": \"^0.1.17\",\n            \"css-loader\": \"^0.28.4\",\n            \"csv-loader\": \"^2.1.1\",\n            \"express\": \"^4.15.3\",\n            \"file-loader\": \"^0.11.2\",\n            \"html-webpack-plugin\": \"^2.29.0\",\n            \"style-loader\": \"^0.18.2\",\n            \"webpack\": \"^3.0.0\",\n            \"webpack-dev-middleware\": \"^1.12.0\",\n            \"webpack-dev-server\": \"^2.9.1\",\n            \"webpack-merge\": \"^4.1.0\",\n            \"xml-loader\": \"^1.2.1\"\n            }\n        }\n    Split CSS\n\n    1. 安装: `npm install --save-dev extract-text-webpack-plugin`\n    2. 配置:\n\n            const ExtractTextPlugin = require(\"extract-text-webpack-plugin\");\n\n                module.exports = {\n                module: {\n                    rules: [\n                    {\n                        test: /\\.css$/,\n                        use: ExtractTextPlugin.extract({\n                        fallback: \"style-loader\",\n                        use: \"css-loader\"\n                        })\n                    }\n                    ]\n                },\n                plugins: [\n                    new ExtractTextPlugin(\"styles.css\"),\n                ]\n            }\n\n","source":"_posts/webpack全面理解.md","raw":"---\ntitle: webpack全面理解\ndate: 2017-05-05 22:40:12\ntags: Webpack\n---\n\n\n# Webpack\nWebpack是一个静态模块打包工具。将一切文件视为模块，可以像引入JavaScript文件一样，在代码中引入。\n\n<!--more-->\n\n## Entry Points\n入口点，就是打包的起始文件。有多种定义方式。\n1. 单入口，使用字符串:\n\n        const config = {\n            entry: './path/to/my/entry/file.js'\n        };\n        module.exports = config;\n2. 多入口，使用对象语法：\n\n        const config = {\n            entry: {\n                app: './src/app.js',\n                vendors: './src/vendors.js'\n            }\n        };\n\n## Output\n输出，告诉webpack怎样将编译后的文件写入磁盘。输出只有一个。\n1. 基本用法:\n\n        const config = {\n            output: {\n                filename: 'bundle.js',\n                path: '/home/proj/public/assets'\n            }\n        };\n        module.exports = config;\n2. 多入口点的用法:\n\n        {\n            entry: {\n                app: './src/app.js',\n                search: './src/search.js'\n            },\n            output: {\n                filename: '[name].js',\n                path: __dirname + '/dist'\n            }\n        }\n        // writes to disk: ./dist/app.js, ./dist/search.js\n\n## Loaders\n装载机，用于转换一个模块的源代码。类似于其他打包工具的任务功能。它允许你讲其他语言转换成JavaScript，或者像引入JavaScript文件一样引入图片，数据,CSS文件等。\n\n1. 安装: `npm install --save-dev style-loader css-loader`\n\n1. 配置:\n\n         module: {\n            rules: [\n            {\n                test: /\\.css$/,\n                use: [\n                { loader: 'style-loader' },\n                {\n                    loader: 'css-loader',\n                    options: {\n                    modules: true\n                    }\n                }\n                ]\n            }\n            ]\n        }\n\n## Plugins\n插件，是webpack的支柱，webpack本身就是创建在same plugin system之上的。它用来做loader不能做的事。\n\n1. 插件的结构：是一个有apply属性的JavaScript对象。apply属性会被webpack编译器调用，用于整个编译周期。\n\n2. 基本用法：\n\n        //installed via npm\n        const HtmlWebpackPlugin = require('html-webpack-plugin'); \n        const webpack = require('webpack'); //to access built-in plugins\n        const path = require('path');\n\n        const config = {\n            entry: './path/to/my/entry/file.js',\n            output: {\n                filename: 'my-first-webpack.bundle.js',\n                path: path.resolve(__dirname, 'dist')\n            },\n            module: {\n                rules: [\n                {\n                    test: /\\.(js|jsx)$/,\n                    use: 'babel-loader'\n                }\n                ]\n            },\n            plugins: [\n                new webpack.optimize.UglifyJsPlugin(),\n                new HtmlWebpackPlugin({template: './src/index.html'})\n            ]\n        };\n        module.exports = config;\n\n3. 常用插件：\n\n    * html-webpack-plugin（输出控制的插件）\n        1. 安装: `npm install --save-dev html-webpack-plugin`\n        2. 配置: \n\n                const path = require('path');\n                + const HtmlWebpackPlugin = require('html-webpack-plugin');\n\n                module.exports = {\n                    entry: {\n                    app: './src/index.js',\n                    print: './src/print.js'\n                    },\n                +   plugins: [\n                +     new HtmlWebpackPlugin({\n                +       title: 'Output Management'\n                +     })\n                +   ],\n                    output: {\n                    filename: '[name].bundle.js',\n                    path: path.resolve(__dirname, 'dist')\n                    }\n                };\n        3. 结论：使用该插件，每次创建会将index.html替换掉，自动引入多个入口的JavaScript文件。当我们在配置中新增、修改入口点时，就不用手动修改源代码。\n    * clean-webpack-plugin(清理/dist文件夹)\n        1. 安装: `npm install --save-dev clen-webpack-plugin`\n        2. 配置：\n\n                const path = require('path');\n                const HtmlWebpackPlugin = require('html-webpack-plugin');\n                + const CleanWebpackPlugin = require('clean-webpack-plugin');\n\n                module.exports = {\n                    entry: {\n                    app: './src/index.js',\n                    print: './src/print.js'\n                    },\n                    plugins: [\n                +     new CleanWebpackPlugin(['dist']),\n                    new HtmlWebpackPlugin({\n                        title: 'Output Management'\n                    })\n                    ],\n                    output: {\n                    filename: '[name].bundle.js',\n                    path: path.resolve(__dirname, 'dist')\n                    }\n                };\n        3. 结论：创建之后，不会再有旧文件，只有刚生成的文件。\n    * uglifyjs-webpack-plugin(Tree shaking插件，用于去除为使用的代码，以及最小化代码)\n        1. 安装: `npm install --save-dev uglifyjs-webpack-plugin`\n        2. 配置:\n\n                const path = require('path');\n                + const UglifyJSPlugin = require('uglifyjs-webpack-plugin');\n\n                module.exports = {\n                    entry: './src/index.js',\n                    output: {\n                        filename: 'bundle.js',\n                        path: path.resolve(__dirname, 'dist')\n                    - }\n                    + },\n                    + plugins: [\n                    +   new UglifyJSPlugin()\n                    + ]\n                };\n        3. 结论：创建后，最小化了代码文件，并且没有将未使用的代码创建进来。就像一棵树，源代码像绿色的活着的叶子，死代码像秋天到了棕色的，死了的叶子，通过摇动这棵树，将死去的叶子摇下。\n    * CommonsChunkPlugin(代码分裂插件)\n        1. 安装: 属于webpack内建插件\n        2. 配置: \n\n               const path = require('path');\n                + const webpack = require('webpack');\n                const HTMLWebpackPlugin = require('html-webpack-plugin');\n\n                module.exports = {\n                    entry: {\n                    index: './src/index.js',\n                    another: './src/another-module.js'\n                    },\n                    plugins: [\n                    new HTMLWebpackPlugin({\n                        title: 'Code Splitting'\n                -     })\n                +     }),\n                +     new webpack.optimize.CommonsChunkPlugin({\n                +       name: 'common' // Specify the common bundle's name.\n                +     })\n                    ],\n                    output: {\n                    filename: '[name].bundle.js',\n                    path: path.resolve(__dirname, 'dist')\n                    }\n                }; \n        3. 结论: 在没有使用该插件时，配置了多个入口，每个入口中都会存在共同使用的模块，代码就出现了重复。使用之后，共同使用的代码，会被创建在一个新的，单独的文件中。\n\n## Development\n开发时，我们需要做一些设置，使开发变得容易。\n\n1. Using source maps\n\n    * 描述: 在使用webpack创建代码时，我们很难通过错误和警告去追踪源代码位置。\n    * 配置: \n\n            module.exports = {\n                entry: {\n                app: './src/index.js',\n                print: './src/print.js'\n                },\n            +   devtool: 'inline-source-map',\n                plugins: [\n                new CleanWebpackPlugin(['dist']),\n                new HtmlWebpackPlugin({\n                    title: 'Development'\n                })\n                ],\n                output: {\n                filename: '[name].bundle.js',\n                path: path.resolve(__dirname, 'dist')\n                }\n            };\n    3. 结论: 在devtool属性中配置 `inline-source-map`之后，我们将可以在控制台中找到出错的行数，并可以链接进源代码。\n\n2. Using Watch Mode\n    * 描述: 如果每次修改源代码，我们都要去手动创建一次，这是一件很麻烦的事。\n    * 配置: \n\n             \"scripts\": {\n                \"test\": \"echo \\\"Error: no test specified\\\" && exit 1\",\n                +\"watch\": \"webpack --watch\",\n                \"build\": \"webpack\"\n            },\n    * 结论: 添加watch参数，每次修改源代码之后，webpack会帮忙自动创建。\n3. Using webpack-dev-server\n    * 描述: 提供一个简单的web服务器，并且能够自动刷新页面。\n    * 安装: `npm install --save-dev webpack-dev-server`\n    * 配置: \n\n            const path = require('path');\n            const HtmlWebpackPlugin = require('html-webpack-plugin');\n            const CleanWebpackPlugin = require('clean-webpack-plugin');\n\n            module.exports = {\n                entry: {\n                app: './src/index.js',\n                print: './src/print.js'\n                },\n                devtool: 'inline-source-map',\n            +   devServer: {\n            +     contentBase: './dist'\n            +   },\n                plugins: [\n                new CleanWebpackPlugin(['dist']),\n                new HtmlWebpackPlugin({\n                    title: 'Development'\n                })\n                ],\n                output: {\n                filename: '[name].bundle.js',\n                path: path.resolve(__dirname, 'dist')\n                }\n            };\n        \n        * 添加npm执行脚本: `\"start\": \"webpack-dev-server --open\"`\n\n## Production\n如何添加一个产品配置？我们需要将产品和开发时相同的配置提取出来，通过npm脚本传入不同的参数，在产品和开发时使用不同的webpack配置。\n\n1. 安装: `npm install --save-dev webpack-merge`\n2. 配置:\n\n    project: \n\n        webpack-demo\n        |- package.json\n        - |- webpack.config.js\n        + |- webpack.common.js\n        + |- webpack.dev.js\n        + |- webpack.prod.js\n        |- /dist\n        |- /src\n            |- index.js\n            |- math.js\n        |- /node_modules\n\n    webpack.common.js\n\n        + const path = require('path');\n        + const CleanWebpackPlugin = require('clean-webpack-plugin');\n        + const HtmlWebpackPlugin = require('html-webpack-plugin');\n        +\n        + module.exports = {\n        +   entry: {\n        +     app: './src/index.js'\n        +   },\n        +   plugins: [\n        +     new CleanWebpackPlugin(['dist']),\n        +     new HtmlWebpackPlugin({\n        +       title: 'Production'\n        +     })\n        +   ],\n        +   output: {\n        +     filename: '[name].bundle.js',\n        +     path: path.resolve(__dirname, 'dist')\n        +   }\n        + };\n\n    webpack.dev.js\n\n        + const merge = require('webpack-merge');\n        + const common = require('./webpack.common.js');\n        +\n        + module.exports = merge(common, {\n        +   devtool: 'inline-source-map',\n        +   devServer: {\n        +     contentBase: './dist'\n        +   }\n        + });\n\n    webpack.prod.js\n\n        + const merge = require('webpack-merge');\n        + const webpack = require('webpack');\n        + const UglifyJSPlugin = require('uglifyjs-webpack-plugin');\n        + const common = require('./webpack.common.js');\n        +\n        + module.exports = merge(common, {\n        +   devtool: 'source-map,\n        +   plugins: [\n        +     new UglifyJSPlugin({\n        +        sourceMap: true\n        +    }),\n        +     new webpack.DefinePlugin({\n        +        'process.env.NODE_ENV': JSON.stringify    +     ('produdction)\n        +      })\n        +   ]\n        + });\n\n    NPM Scripts\n\n        {\n            \"name\": \"development\",\n            \"version\": \"1.0.0\",\n            \"description\": \"\",\n            \"main\": \"webpack.config.js\",\n            \"scripts\": {\n        -     \"start\": \"webpack-dev-server --open\",\n        +     \"start\": \"webpack-dev-server --open --config webpack.dev.js\",\n        -     \"build\": \"webpack\"\n        +     \"build\": \"webpack --config webpack.prod.js\"\n            },\n            \"keywords\": [],\n            \"author\": \"\",\n            \"license\": \"ISC\",\n            \"devDependencies\": {\n            \"clean-webpack-plugin\": \"^0.1.17\",\n            \"css-loader\": \"^0.28.4\",\n            \"csv-loader\": \"^2.1.1\",\n            \"express\": \"^4.15.3\",\n            \"file-loader\": \"^0.11.2\",\n            \"html-webpack-plugin\": \"^2.29.0\",\n            \"style-loader\": \"^0.18.2\",\n            \"webpack\": \"^3.0.0\",\n            \"webpack-dev-middleware\": \"^1.12.0\",\n            \"webpack-dev-server\": \"^2.9.1\",\n            \"webpack-merge\": \"^4.1.0\",\n            \"xml-loader\": \"^1.2.1\"\n            }\n        }\n    Split CSS\n\n    1. 安装: `npm install --save-dev extract-text-webpack-plugin`\n    2. 配置:\n\n            const ExtractTextPlugin = require(\"extract-text-webpack-plugin\");\n\n                module.exports = {\n                module: {\n                    rules: [\n                    {\n                        test: /\\.css$/,\n                        use: ExtractTextPlugin.extract({\n                        fallback: \"style-loader\",\n                        use: \"css-loader\"\n                        })\n                    }\n                    ]\n                },\n                plugins: [\n                    new ExtractTextPlugin(\"styles.css\"),\n                ]\n            }\n\n","slug":"webpack全面理解","published":1,"updated":"2018-12-21T04:59:19.435Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjpxle9kh000mh8obgvnv20os","content":"<h1 id=\"Webpack\"><a href=\"#Webpack\" class=\"headerlink\" title=\"Webpack\"></a>Webpack</h1><p>Webpack是一个静态模块打包工具。将一切文件视为模块，可以像引入JavaScript文件一样，在代码中引入。</p>\n<a id=\"more\"></a>\n<h2 id=\"Entry-Points\"><a href=\"#Entry-Points\" class=\"headerlink\" title=\"Entry Points\"></a>Entry Points</h2><p>入口点，就是打包的起始文件。有多种定义方式。</p>\n<ol>\n<li><p>单入口，使用字符串:</p>\n<pre><code>const config = {\n    entry: &apos;./path/to/my/entry/file.js&apos;\n};\nmodule.exports = config;\n</code></pre></li>\n<li><p>多入口，使用对象语法：</p>\n<pre><code>const config = {\n    entry: {\n        app: &apos;./src/app.js&apos;,\n        vendors: &apos;./src/vendors.js&apos;\n    }\n};\n</code></pre></li>\n</ol>\n<h2 id=\"Output\"><a href=\"#Output\" class=\"headerlink\" title=\"Output\"></a>Output</h2><p>输出，告诉webpack怎样将编译后的文件写入磁盘。输出只有一个。</p>\n<ol>\n<li><p>基本用法:</p>\n<pre><code>const config = {\n    output: {\n        filename: &apos;bundle.js&apos;,\n        path: &apos;/home/proj/public/assets&apos;\n    }\n};\nmodule.exports = config;\n</code></pre></li>\n<li><p>多入口点的用法:</p>\n<pre><code>{\n    entry: {\n        app: &apos;./src/app.js&apos;,\n        search: &apos;./src/search.js&apos;\n    },\n    output: {\n        filename: &apos;[name].js&apos;,\n        path: __dirname + &apos;/dist&apos;\n    }\n}\n// writes to disk: ./dist/app.js, ./dist/search.js\n</code></pre></li>\n</ol>\n<h2 id=\"Loaders\"><a href=\"#Loaders\" class=\"headerlink\" title=\"Loaders\"></a>Loaders</h2><p>装载机，用于转换一个模块的源代码。类似于其他打包工具的任务功能。它允许你讲其他语言转换成JavaScript，或者像引入JavaScript文件一样引入图片，数据,CSS文件等。</p>\n<ol>\n<li><p>安装: <code>npm install --save-dev style-loader css-loader</code></p>\n</li>\n<li><p>配置:</p>\n<pre><code> module: {\n    rules: [\n    {\n        test: /\\.css$/,\n        use: [\n        { loader: &apos;style-loader&apos; },\n        {\n            loader: &apos;css-loader&apos;,\n            options: {\n            modules: true\n            }\n        }\n        ]\n    }\n    ]\n}\n</code></pre></li>\n</ol>\n<h2 id=\"Plugins\"><a href=\"#Plugins\" class=\"headerlink\" title=\"Plugins\"></a>Plugins</h2><p>插件，是webpack的支柱，webpack本身就是创建在same plugin system之上的。它用来做loader不能做的事。</p>\n<ol>\n<li><p>插件的结构：是一个有apply属性的JavaScript对象。apply属性会被webpack编译器调用，用于整个编译周期。</p>\n</li>\n<li><p>基本用法：</p>\n<pre><code>//installed via npm\nconst HtmlWebpackPlugin = require(&apos;html-webpack-plugin&apos;); \nconst webpack = require(&apos;webpack&apos;); //to access built-in plugins\nconst path = require(&apos;path&apos;);\n\nconst config = {\n    entry: &apos;./path/to/my/entry/file.js&apos;,\n    output: {\n        filename: &apos;my-first-webpack.bundle.js&apos;,\n        path: path.resolve(__dirname, &apos;dist&apos;)\n    },\n    module: {\n        rules: [\n        {\n            test: /\\.(js|jsx)$/,\n            use: &apos;babel-loader&apos;\n        }\n        ]\n    },\n    plugins: [\n        new webpack.optimize.UglifyJsPlugin(),\n        new HtmlWebpackPlugin({template: &apos;./src/index.html&apos;})\n    ]\n};\nmodule.exports = config;\n</code></pre></li>\n<li><p>常用插件：</p>\n<ul>\n<li><p>html-webpack-plugin（输出控制的插件）</p>\n<ol>\n<li>安装: <code>npm install --save-dev html-webpack-plugin</code></li>\n<li><p>配置: </p>\n<pre><code>const path = require(&apos;path&apos;);\n+ const HtmlWebpackPlugin = require(&apos;html-webpack-plugin&apos;);\n\nmodule.exports = {\n    entry: {\n    app: &apos;./src/index.js&apos;,\n    print: &apos;./src/print.js&apos;\n    },\n+   plugins: [\n+     new HtmlWebpackPlugin({\n+       title: &apos;Output Management&apos;\n+     })\n+   ],\n    output: {\n    filename: &apos;[name].bundle.js&apos;,\n    path: path.resolve(__dirname, &apos;dist&apos;)\n    }\n};\n</code></pre></li>\n<li>结论：使用该插件，每次创建会将index.html替换掉，自动引入多个入口的JavaScript文件。当我们在配置中新增、修改入口点时，就不用手动修改源代码。</li>\n</ol>\n</li>\n<li><p>clean-webpack-plugin(清理/dist文件夹)</p>\n<ol>\n<li>安装: <code>npm install --save-dev clen-webpack-plugin</code></li>\n<li><p>配置：</p>\n<pre><code>const path = require(&apos;path&apos;);\nconst HtmlWebpackPlugin = require(&apos;html-webpack-plugin&apos;);\n+ const CleanWebpackPlugin = require(&apos;clean-webpack-plugin&apos;);\n\nmodule.exports = {\n    entry: {\n    app: &apos;./src/index.js&apos;,\n    print: &apos;./src/print.js&apos;\n    },\n    plugins: [\n+     new CleanWebpackPlugin([&apos;dist&apos;]),\n    new HtmlWebpackPlugin({\n        title: &apos;Output Management&apos;\n    })\n    ],\n    output: {\n    filename: &apos;[name].bundle.js&apos;,\n    path: path.resolve(__dirname, &apos;dist&apos;)\n    }\n};\n</code></pre></li>\n<li>结论：创建之后，不会再有旧文件，只有刚生成的文件。</li>\n</ol>\n</li>\n<li><p>uglifyjs-webpack-plugin(Tree shaking插件，用于去除为使用的代码，以及最小化代码)</p>\n<ol>\n<li>安装: <code>npm install --save-dev uglifyjs-webpack-plugin</code></li>\n<li><p>配置:</p>\n<pre><code>const path = require(&apos;path&apos;);\n+ const UglifyJSPlugin = require(&apos;uglifyjs-webpack-plugin&apos;);\n\nmodule.exports = {\n    entry: &apos;./src/index.js&apos;,\n    output: {\n        filename: &apos;bundle.js&apos;,\n        path: path.resolve(__dirname, &apos;dist&apos;)\n    - }\n    + },\n    + plugins: [\n    +   new UglifyJSPlugin()\n    + ]\n};\n</code></pre></li>\n<li>结论：创建后，最小化了代码文件，并且没有将未使用的代码创建进来。就像一棵树，源代码像绿色的活着的叶子，死代码像秋天到了棕色的，死了的叶子，通过摇动这棵树，将死去的叶子摇下。</li>\n</ol>\n</li>\n<li><p>CommonsChunkPlugin(代码分裂插件)</p>\n<ol>\n<li>安装: 属于webpack内建插件</li>\n<li><p>配置: </p>\n<pre><code>const path = require(&apos;path&apos;);\n + const webpack = require(&apos;webpack&apos;);\n const HTMLWebpackPlugin = require(&apos;html-webpack-plugin&apos;);\n\n module.exports = {\n     entry: {\n     index: &apos;./src/index.js&apos;,\n     another: &apos;./src/another-module.js&apos;\n     },\n     plugins: [\n     new HTMLWebpackPlugin({\n         title: &apos;Code Splitting&apos;\n -     })\n +     }),\n +     new webpack.optimize.CommonsChunkPlugin({\n +       name: &apos;common&apos; // Specify the common bundle&apos;s name.\n +     })\n     ],\n     output: {\n     filename: &apos;[name].bundle.js&apos;,\n     path: path.resolve(__dirname, &apos;dist&apos;)\n     }\n }; \n</code></pre></li>\n<li>结论: 在没有使用该插件时，配置了多个入口，每个入口中都会存在共同使用的模块，代码就出现了重复。使用之后，共同使用的代码，会被创建在一个新的，单独的文件中。</li>\n</ol>\n</li>\n</ul>\n</li>\n</ol>\n<h2 id=\"Development\"><a href=\"#Development\" class=\"headerlink\" title=\"Development\"></a>Development</h2><p>开发时，我们需要做一些设置，使开发变得容易。</p>\n<ol>\n<li><p>Using source maps</p>\n<ul>\n<li>描述: 在使用webpack创建代码时，我们很难通过错误和警告去追踪源代码位置。</li>\n<li><p>配置: </p>\n<pre><code>module.exports = {\n    entry: {\n    app: &apos;./src/index.js&apos;,\n    print: &apos;./src/print.js&apos;\n    },\n+   devtool: &apos;inline-source-map&apos;,\n    plugins: [\n    new CleanWebpackPlugin([&apos;dist&apos;]),\n    new HtmlWebpackPlugin({\n        title: &apos;Development&apos;\n    })\n    ],\n    output: {\n    filename: &apos;[name].bundle.js&apos;,\n    path: path.resolve(__dirname, &apos;dist&apos;)\n    }\n};\n</code></pre></li>\n</ul>\n<ol start=\"3\">\n<li>结论: 在devtool属性中配置 <code>inline-source-map</code>之后，我们将可以在控制台中找到出错的行数，并可以链接进源代码。</li>\n</ol>\n</li>\n<li><p>Using Watch Mode</p>\n<ul>\n<li>描述: 如果每次修改源代码，我们都要去手动创建一次，这是一件很麻烦的事。</li>\n<li><p>配置: </p>\n<pre><code> &quot;scripts&quot;: {\n    &quot;test&quot;: &quot;echo \\&quot;Error: no test specified\\&quot; &amp;&amp; exit 1&quot;,\n    +&quot;watch&quot;: &quot;webpack --watch&quot;,\n    &quot;build&quot;: &quot;webpack&quot;\n},\n</code></pre></li>\n<li>结论: 添加watch参数，每次修改源代码之后，webpack会帮忙自动创建。</li>\n</ul>\n</li>\n<li><p>Using webpack-dev-server</p>\n<ul>\n<li>描述: 提供一个简单的web服务器，并且能够自动刷新页面。</li>\n<li>安装: <code>npm install --save-dev webpack-dev-server</code></li>\n<li><p>配置: </p>\n<pre><code>const path = require(&apos;path&apos;);\nconst HtmlWebpackPlugin = require(&apos;html-webpack-plugin&apos;);\nconst CleanWebpackPlugin = require(&apos;clean-webpack-plugin&apos;);\n\nmodule.exports = {\n    entry: {\n    app: &apos;./src/index.js&apos;,\n    print: &apos;./src/print.js&apos;\n    },\n    devtool: &apos;inline-source-map&apos;,\n+   devServer: {\n+     contentBase: &apos;./dist&apos;\n+   },\n    plugins: [\n    new CleanWebpackPlugin([&apos;dist&apos;]),\n    new HtmlWebpackPlugin({\n        title: &apos;Development&apos;\n    })\n    ],\n    output: {\n    filename: &apos;[name].bundle.js&apos;,\n    path: path.resolve(__dirname, &apos;dist&apos;)\n    }\n};\n</code></pre><ul>\n<li>添加npm执行脚本: <code>&quot;start&quot;: &quot;webpack-dev-server --open&quot;</code></li>\n</ul>\n</li>\n</ul>\n</li>\n</ol>\n<h2 id=\"Production\"><a href=\"#Production\" class=\"headerlink\" title=\"Production\"></a>Production</h2><p>如何添加一个产品配置？我们需要将产品和开发时相同的配置提取出来，通过npm脚本传入不同的参数，在产品和开发时使用不同的webpack配置。</p>\n<ol>\n<li>安装: <code>npm install --save-dev webpack-merge</code></li>\n<li><p>配置:</p>\n<p> project: </p>\n<pre><code>webpack-demo\n|- package.json\n- |- webpack.config.js\n+ |- webpack.common.js\n+ |- webpack.dev.js\n+ |- webpack.prod.js\n|- /dist\n|- /src\n    |- index.js\n    |- math.js\n|- /node_modules\n</code></pre><p> webpack.common.js</p>\n<pre><code>+ const path = require(&apos;path&apos;);\n+ const CleanWebpackPlugin = require(&apos;clean-webpack-plugin&apos;);\n+ const HtmlWebpackPlugin = require(&apos;html-webpack-plugin&apos;);\n+\n+ module.exports = {\n+   entry: {\n+     app: &apos;./src/index.js&apos;\n+   },\n+   plugins: [\n+     new CleanWebpackPlugin([&apos;dist&apos;]),\n+     new HtmlWebpackPlugin({\n+       title: &apos;Production&apos;\n+     })\n+   ],\n+   output: {\n+     filename: &apos;[name].bundle.js&apos;,\n+     path: path.resolve(__dirname, &apos;dist&apos;)\n+   }\n+ };\n</code></pre><p> webpack.dev.js</p>\n<pre><code>+ const merge = require(&apos;webpack-merge&apos;);\n+ const common = require(&apos;./webpack.common.js&apos;);\n+\n+ module.exports = merge(common, {\n+   devtool: &apos;inline-source-map&apos;,\n+   devServer: {\n+     contentBase: &apos;./dist&apos;\n+   }\n+ });\n</code></pre><p> webpack.prod.js</p>\n<pre><code>+ const merge = require(&apos;webpack-merge&apos;);\n+ const webpack = require(&apos;webpack&apos;);\n+ const UglifyJSPlugin = require(&apos;uglifyjs-webpack-plugin&apos;);\n+ const common = require(&apos;./webpack.common.js&apos;);\n+\n+ module.exports = merge(common, {\n+   devtool: &apos;source-map,\n+   plugins: [\n+     new UglifyJSPlugin({\n+        sourceMap: true\n+    }),\n+     new webpack.DefinePlugin({\n+        &apos;process.env.NODE_ENV&apos;: JSON.stringify    +     (&apos;produdction)\n+      })\n+   ]\n+ });\n</code></pre><p> NPM Scripts</p>\n<pre><code>{\n    &quot;name&quot;: &quot;development&quot;,\n    &quot;version&quot;: &quot;1.0.0&quot;,\n    &quot;description&quot;: &quot;&quot;,\n    &quot;main&quot;: &quot;webpack.config.js&quot;,\n    &quot;scripts&quot;: {\n-     &quot;start&quot;: &quot;webpack-dev-server --open&quot;,\n+     &quot;start&quot;: &quot;webpack-dev-server --open --config webpack.dev.js&quot;,\n-     &quot;build&quot;: &quot;webpack&quot;\n+     &quot;build&quot;: &quot;webpack --config webpack.prod.js&quot;\n    },\n    &quot;keywords&quot;: [],\n    &quot;author&quot;: &quot;&quot;,\n    &quot;license&quot;: &quot;ISC&quot;,\n    &quot;devDependencies&quot;: {\n    &quot;clean-webpack-plugin&quot;: &quot;^0.1.17&quot;,\n    &quot;css-loader&quot;: &quot;^0.28.4&quot;,\n    &quot;csv-loader&quot;: &quot;^2.1.1&quot;,\n    &quot;express&quot;: &quot;^4.15.3&quot;,\n    &quot;file-loader&quot;: &quot;^0.11.2&quot;,\n    &quot;html-webpack-plugin&quot;: &quot;^2.29.0&quot;,\n    &quot;style-loader&quot;: &quot;^0.18.2&quot;,\n    &quot;webpack&quot;: &quot;^3.0.0&quot;,\n    &quot;webpack-dev-middleware&quot;: &quot;^1.12.0&quot;,\n    &quot;webpack-dev-server&quot;: &quot;^2.9.1&quot;,\n    &quot;webpack-merge&quot;: &quot;^4.1.0&quot;,\n    &quot;xml-loader&quot;: &quot;^1.2.1&quot;\n    }\n}\n</code></pre><p> Split CSS</p>\n<ol>\n<li>安装: <code>npm install --save-dev extract-text-webpack-plugin</code></li>\n<li><p>配置:</p>\n<pre><code>const ExtractTextPlugin = require(&quot;extract-text-webpack-plugin&quot;);\n\n    module.exports = {\n    module: {\n        rules: [\n        {\n            test: /\\.css$/,\n            use: ExtractTextPlugin.extract({\n            fallback: &quot;style-loader&quot;,\n            use: &quot;css-loader&quot;\n            })\n        }\n        ]\n    },\n    plugins: [\n        new ExtractTextPlugin(&quot;styles.css&quot;),\n    ]\n}\n</code></pre></li>\n</ol>\n</li>\n</ol>\n","site":{"data":{}},"excerpt":"<h1 id=\"Webpack\"><a href=\"#Webpack\" class=\"headerlink\" title=\"Webpack\"></a>Webpack</h1><p>Webpack是一个静态模块打包工具。将一切文件视为模块，可以像引入JavaScript文件一样，在代码中引入。</p>","more":"<h2 id=\"Entry-Points\"><a href=\"#Entry-Points\" class=\"headerlink\" title=\"Entry Points\"></a>Entry Points</h2><p>入口点，就是打包的起始文件。有多种定义方式。</p>\n<ol>\n<li><p>单入口，使用字符串:</p>\n<pre><code>const config = {\n    entry: &apos;./path/to/my/entry/file.js&apos;\n};\nmodule.exports = config;\n</code></pre></li>\n<li><p>多入口，使用对象语法：</p>\n<pre><code>const config = {\n    entry: {\n        app: &apos;./src/app.js&apos;,\n        vendors: &apos;./src/vendors.js&apos;\n    }\n};\n</code></pre></li>\n</ol>\n<h2 id=\"Output\"><a href=\"#Output\" class=\"headerlink\" title=\"Output\"></a>Output</h2><p>输出，告诉webpack怎样将编译后的文件写入磁盘。输出只有一个。</p>\n<ol>\n<li><p>基本用法:</p>\n<pre><code>const config = {\n    output: {\n        filename: &apos;bundle.js&apos;,\n        path: &apos;/home/proj/public/assets&apos;\n    }\n};\nmodule.exports = config;\n</code></pre></li>\n<li><p>多入口点的用法:</p>\n<pre><code>{\n    entry: {\n        app: &apos;./src/app.js&apos;,\n        search: &apos;./src/search.js&apos;\n    },\n    output: {\n        filename: &apos;[name].js&apos;,\n        path: __dirname + &apos;/dist&apos;\n    }\n}\n// writes to disk: ./dist/app.js, ./dist/search.js\n</code></pre></li>\n</ol>\n<h2 id=\"Loaders\"><a href=\"#Loaders\" class=\"headerlink\" title=\"Loaders\"></a>Loaders</h2><p>装载机，用于转换一个模块的源代码。类似于其他打包工具的任务功能。它允许你讲其他语言转换成JavaScript，或者像引入JavaScript文件一样引入图片，数据,CSS文件等。</p>\n<ol>\n<li><p>安装: <code>npm install --save-dev style-loader css-loader</code></p>\n</li>\n<li><p>配置:</p>\n<pre><code> module: {\n    rules: [\n    {\n        test: /\\.css$/,\n        use: [\n        { loader: &apos;style-loader&apos; },\n        {\n            loader: &apos;css-loader&apos;,\n            options: {\n            modules: true\n            }\n        }\n        ]\n    }\n    ]\n}\n</code></pre></li>\n</ol>\n<h2 id=\"Plugins\"><a href=\"#Plugins\" class=\"headerlink\" title=\"Plugins\"></a>Plugins</h2><p>插件，是webpack的支柱，webpack本身就是创建在same plugin system之上的。它用来做loader不能做的事。</p>\n<ol>\n<li><p>插件的结构：是一个有apply属性的JavaScript对象。apply属性会被webpack编译器调用，用于整个编译周期。</p>\n</li>\n<li><p>基本用法：</p>\n<pre><code>//installed via npm\nconst HtmlWebpackPlugin = require(&apos;html-webpack-plugin&apos;); \nconst webpack = require(&apos;webpack&apos;); //to access built-in plugins\nconst path = require(&apos;path&apos;);\n\nconst config = {\n    entry: &apos;./path/to/my/entry/file.js&apos;,\n    output: {\n        filename: &apos;my-first-webpack.bundle.js&apos;,\n        path: path.resolve(__dirname, &apos;dist&apos;)\n    },\n    module: {\n        rules: [\n        {\n            test: /\\.(js|jsx)$/,\n            use: &apos;babel-loader&apos;\n        }\n        ]\n    },\n    plugins: [\n        new webpack.optimize.UglifyJsPlugin(),\n        new HtmlWebpackPlugin({template: &apos;./src/index.html&apos;})\n    ]\n};\nmodule.exports = config;\n</code></pre></li>\n<li><p>常用插件：</p>\n<ul>\n<li><p>html-webpack-plugin（输出控制的插件）</p>\n<ol>\n<li>安装: <code>npm install --save-dev html-webpack-plugin</code></li>\n<li><p>配置: </p>\n<pre><code>const path = require(&apos;path&apos;);\n+ const HtmlWebpackPlugin = require(&apos;html-webpack-plugin&apos;);\n\nmodule.exports = {\n    entry: {\n    app: &apos;./src/index.js&apos;,\n    print: &apos;./src/print.js&apos;\n    },\n+   plugins: [\n+     new HtmlWebpackPlugin({\n+       title: &apos;Output Management&apos;\n+     })\n+   ],\n    output: {\n    filename: &apos;[name].bundle.js&apos;,\n    path: path.resolve(__dirname, &apos;dist&apos;)\n    }\n};\n</code></pre></li>\n<li>结论：使用该插件，每次创建会将index.html替换掉，自动引入多个入口的JavaScript文件。当我们在配置中新增、修改入口点时，就不用手动修改源代码。</li>\n</ol>\n</li>\n<li><p>clean-webpack-plugin(清理/dist文件夹)</p>\n<ol>\n<li>安装: <code>npm install --save-dev clen-webpack-plugin</code></li>\n<li><p>配置：</p>\n<pre><code>const path = require(&apos;path&apos;);\nconst HtmlWebpackPlugin = require(&apos;html-webpack-plugin&apos;);\n+ const CleanWebpackPlugin = require(&apos;clean-webpack-plugin&apos;);\n\nmodule.exports = {\n    entry: {\n    app: &apos;./src/index.js&apos;,\n    print: &apos;./src/print.js&apos;\n    },\n    plugins: [\n+     new CleanWebpackPlugin([&apos;dist&apos;]),\n    new HtmlWebpackPlugin({\n        title: &apos;Output Management&apos;\n    })\n    ],\n    output: {\n    filename: &apos;[name].bundle.js&apos;,\n    path: path.resolve(__dirname, &apos;dist&apos;)\n    }\n};\n</code></pre></li>\n<li>结论：创建之后，不会再有旧文件，只有刚生成的文件。</li>\n</ol>\n</li>\n<li><p>uglifyjs-webpack-plugin(Tree shaking插件，用于去除为使用的代码，以及最小化代码)</p>\n<ol>\n<li>安装: <code>npm install --save-dev uglifyjs-webpack-plugin</code></li>\n<li><p>配置:</p>\n<pre><code>const path = require(&apos;path&apos;);\n+ const UglifyJSPlugin = require(&apos;uglifyjs-webpack-plugin&apos;);\n\nmodule.exports = {\n    entry: &apos;./src/index.js&apos;,\n    output: {\n        filename: &apos;bundle.js&apos;,\n        path: path.resolve(__dirname, &apos;dist&apos;)\n    - }\n    + },\n    + plugins: [\n    +   new UglifyJSPlugin()\n    + ]\n};\n</code></pre></li>\n<li>结论：创建后，最小化了代码文件，并且没有将未使用的代码创建进来。就像一棵树，源代码像绿色的活着的叶子，死代码像秋天到了棕色的，死了的叶子，通过摇动这棵树，将死去的叶子摇下。</li>\n</ol>\n</li>\n<li><p>CommonsChunkPlugin(代码分裂插件)</p>\n<ol>\n<li>安装: 属于webpack内建插件</li>\n<li><p>配置: </p>\n<pre><code>const path = require(&apos;path&apos;);\n + const webpack = require(&apos;webpack&apos;);\n const HTMLWebpackPlugin = require(&apos;html-webpack-plugin&apos;);\n\n module.exports = {\n     entry: {\n     index: &apos;./src/index.js&apos;,\n     another: &apos;./src/another-module.js&apos;\n     },\n     plugins: [\n     new HTMLWebpackPlugin({\n         title: &apos;Code Splitting&apos;\n -     })\n +     }),\n +     new webpack.optimize.CommonsChunkPlugin({\n +       name: &apos;common&apos; // Specify the common bundle&apos;s name.\n +     })\n     ],\n     output: {\n     filename: &apos;[name].bundle.js&apos;,\n     path: path.resolve(__dirname, &apos;dist&apos;)\n     }\n }; \n</code></pre></li>\n<li>结论: 在没有使用该插件时，配置了多个入口，每个入口中都会存在共同使用的模块，代码就出现了重复。使用之后，共同使用的代码，会被创建在一个新的，单独的文件中。</li>\n</ol>\n</li>\n</ul>\n</li>\n</ol>\n<h2 id=\"Development\"><a href=\"#Development\" class=\"headerlink\" title=\"Development\"></a>Development</h2><p>开发时，我们需要做一些设置，使开发变得容易。</p>\n<ol>\n<li><p>Using source maps</p>\n<ul>\n<li>描述: 在使用webpack创建代码时，我们很难通过错误和警告去追踪源代码位置。</li>\n<li><p>配置: </p>\n<pre><code>module.exports = {\n    entry: {\n    app: &apos;./src/index.js&apos;,\n    print: &apos;./src/print.js&apos;\n    },\n+   devtool: &apos;inline-source-map&apos;,\n    plugins: [\n    new CleanWebpackPlugin([&apos;dist&apos;]),\n    new HtmlWebpackPlugin({\n        title: &apos;Development&apos;\n    })\n    ],\n    output: {\n    filename: &apos;[name].bundle.js&apos;,\n    path: path.resolve(__dirname, &apos;dist&apos;)\n    }\n};\n</code></pre></li>\n</ul>\n<ol start=\"3\">\n<li>结论: 在devtool属性中配置 <code>inline-source-map</code>之后，我们将可以在控制台中找到出错的行数，并可以链接进源代码。</li>\n</ol>\n</li>\n<li><p>Using Watch Mode</p>\n<ul>\n<li>描述: 如果每次修改源代码，我们都要去手动创建一次，这是一件很麻烦的事。</li>\n<li><p>配置: </p>\n<pre><code> &quot;scripts&quot;: {\n    &quot;test&quot;: &quot;echo \\&quot;Error: no test specified\\&quot; &amp;&amp; exit 1&quot;,\n    +&quot;watch&quot;: &quot;webpack --watch&quot;,\n    &quot;build&quot;: &quot;webpack&quot;\n},\n</code></pre></li>\n<li>结论: 添加watch参数，每次修改源代码之后，webpack会帮忙自动创建。</li>\n</ul>\n</li>\n<li><p>Using webpack-dev-server</p>\n<ul>\n<li>描述: 提供一个简单的web服务器，并且能够自动刷新页面。</li>\n<li>安装: <code>npm install --save-dev webpack-dev-server</code></li>\n<li><p>配置: </p>\n<pre><code>const path = require(&apos;path&apos;);\nconst HtmlWebpackPlugin = require(&apos;html-webpack-plugin&apos;);\nconst CleanWebpackPlugin = require(&apos;clean-webpack-plugin&apos;);\n\nmodule.exports = {\n    entry: {\n    app: &apos;./src/index.js&apos;,\n    print: &apos;./src/print.js&apos;\n    },\n    devtool: &apos;inline-source-map&apos;,\n+   devServer: {\n+     contentBase: &apos;./dist&apos;\n+   },\n    plugins: [\n    new CleanWebpackPlugin([&apos;dist&apos;]),\n    new HtmlWebpackPlugin({\n        title: &apos;Development&apos;\n    })\n    ],\n    output: {\n    filename: &apos;[name].bundle.js&apos;,\n    path: path.resolve(__dirname, &apos;dist&apos;)\n    }\n};\n</code></pre><ul>\n<li>添加npm执行脚本: <code>&quot;start&quot;: &quot;webpack-dev-server --open&quot;</code></li>\n</ul>\n</li>\n</ul>\n</li>\n</ol>\n<h2 id=\"Production\"><a href=\"#Production\" class=\"headerlink\" title=\"Production\"></a>Production</h2><p>如何添加一个产品配置？我们需要将产品和开发时相同的配置提取出来，通过npm脚本传入不同的参数，在产品和开发时使用不同的webpack配置。</p>\n<ol>\n<li>安装: <code>npm install --save-dev webpack-merge</code></li>\n<li><p>配置:</p>\n<p> project: </p>\n<pre><code>webpack-demo\n|- package.json\n- |- webpack.config.js\n+ |- webpack.common.js\n+ |- webpack.dev.js\n+ |- webpack.prod.js\n|- /dist\n|- /src\n    |- index.js\n    |- math.js\n|- /node_modules\n</code></pre><p> webpack.common.js</p>\n<pre><code>+ const path = require(&apos;path&apos;);\n+ const CleanWebpackPlugin = require(&apos;clean-webpack-plugin&apos;);\n+ const HtmlWebpackPlugin = require(&apos;html-webpack-plugin&apos;);\n+\n+ module.exports = {\n+   entry: {\n+     app: &apos;./src/index.js&apos;\n+   },\n+   plugins: [\n+     new CleanWebpackPlugin([&apos;dist&apos;]),\n+     new HtmlWebpackPlugin({\n+       title: &apos;Production&apos;\n+     })\n+   ],\n+   output: {\n+     filename: &apos;[name].bundle.js&apos;,\n+     path: path.resolve(__dirname, &apos;dist&apos;)\n+   }\n+ };\n</code></pre><p> webpack.dev.js</p>\n<pre><code>+ const merge = require(&apos;webpack-merge&apos;);\n+ const common = require(&apos;./webpack.common.js&apos;);\n+\n+ module.exports = merge(common, {\n+   devtool: &apos;inline-source-map&apos;,\n+   devServer: {\n+     contentBase: &apos;./dist&apos;\n+   }\n+ });\n</code></pre><p> webpack.prod.js</p>\n<pre><code>+ const merge = require(&apos;webpack-merge&apos;);\n+ const webpack = require(&apos;webpack&apos;);\n+ const UglifyJSPlugin = require(&apos;uglifyjs-webpack-plugin&apos;);\n+ const common = require(&apos;./webpack.common.js&apos;);\n+\n+ module.exports = merge(common, {\n+   devtool: &apos;source-map,\n+   plugins: [\n+     new UglifyJSPlugin({\n+        sourceMap: true\n+    }),\n+     new webpack.DefinePlugin({\n+        &apos;process.env.NODE_ENV&apos;: JSON.stringify    +     (&apos;produdction)\n+      })\n+   ]\n+ });\n</code></pre><p> NPM Scripts</p>\n<pre><code>{\n    &quot;name&quot;: &quot;development&quot;,\n    &quot;version&quot;: &quot;1.0.0&quot;,\n    &quot;description&quot;: &quot;&quot;,\n    &quot;main&quot;: &quot;webpack.config.js&quot;,\n    &quot;scripts&quot;: {\n-     &quot;start&quot;: &quot;webpack-dev-server --open&quot;,\n+     &quot;start&quot;: &quot;webpack-dev-server --open --config webpack.dev.js&quot;,\n-     &quot;build&quot;: &quot;webpack&quot;\n+     &quot;build&quot;: &quot;webpack --config webpack.prod.js&quot;\n    },\n    &quot;keywords&quot;: [],\n    &quot;author&quot;: &quot;&quot;,\n    &quot;license&quot;: &quot;ISC&quot;,\n    &quot;devDependencies&quot;: {\n    &quot;clean-webpack-plugin&quot;: &quot;^0.1.17&quot;,\n    &quot;css-loader&quot;: &quot;^0.28.4&quot;,\n    &quot;csv-loader&quot;: &quot;^2.1.1&quot;,\n    &quot;express&quot;: &quot;^4.15.3&quot;,\n    &quot;file-loader&quot;: &quot;^0.11.2&quot;,\n    &quot;html-webpack-plugin&quot;: &quot;^2.29.0&quot;,\n    &quot;style-loader&quot;: &quot;^0.18.2&quot;,\n    &quot;webpack&quot;: &quot;^3.0.0&quot;,\n    &quot;webpack-dev-middleware&quot;: &quot;^1.12.0&quot;,\n    &quot;webpack-dev-server&quot;: &quot;^2.9.1&quot;,\n    &quot;webpack-merge&quot;: &quot;^4.1.0&quot;,\n    &quot;xml-loader&quot;: &quot;^1.2.1&quot;\n    }\n}\n</code></pre><p> Split CSS</p>\n<ol>\n<li>安装: <code>npm install --save-dev extract-text-webpack-plugin</code></li>\n<li><p>配置:</p>\n<pre><code>const ExtractTextPlugin = require(&quot;extract-text-webpack-plugin&quot;);\n\n    module.exports = {\n    module: {\n        rules: [\n        {\n            test: /\\.css$/,\n            use: ExtractTextPlugin.extract({\n            fallback: &quot;style-loader&quot;,\n            use: &quot;css-loader&quot;\n            })\n        }\n        ]\n    },\n    plugins: [\n        new ExtractTextPlugin(&quot;styles.css&quot;),\n    ]\n}\n</code></pre></li>\n</ol>\n</li>\n</ol>"},{"title":"应用平台桌面版","date":"2016-11-15T14:16:38.000Z","_content":"\n应用平台这个系统，是想要做一个类似APP store这样的软件。\n<!--more-->\n可以将所有应用装在一起，只需要登录一次，就能用所有的应用。效果图如下：\n\n![ap](/images/applicationPlatform.png)\n\n目前做了三个应用，音乐播放器，多人聊天室，爱心鱼游戏。下面将\n会详细介绍它们。\n\n因为我写了一小部分后台，所以运行前需要启动服务器。在下载完\n源码后，打开一个cmd窗口，进入根目录，运行代码：\n`node server.js`\n将服务器跑起来。然后再打开一个cmd窗口，运行代码：\n`npm start`，\n应用就打开了。\n\n### 音乐播放器\n它只包含基本的功能：导入本地歌曲列表；切换一个主题；控制正在播放的歌曲。\n效果图如下：\n\n![ap](/images/musicPlayer2.png)\n\nUX方面做得不是很好，以后会更加注重这一块。\n\n\n### 聊天室\n聊天室是我觉得做得比较好的一个，因为它包含了很多功能。\n除了最基本的聊天外，还支持发一些表情，还可以设置字体，背景，以及主题。\n里面还集成了一个地图，如果是用电脑浏览器打开的，将会在地图上显示自己的\n位置。效果图如下：\n\n![ap](/images/chatRoom2.png)\n\n### 爱心鱼\n最后一个是个用js写的游戏，但这并不是原创，只是用来熟悉canvas的api。\n效果图如下：\n\n![ap](/images/loveFish.png)\n\n### 总结\n这些是我刚学Javascript不久做的东西，所以有很多地方不够完善。但是它们让我看到了Javascript强大的一面。","source":"_posts/应用平台桌面版.md","raw":"---\ntitle: 应用平台桌面版\ndate: 2016-11-15 22:16:38\ntags: \n\t- 分享\n\n---\n\n应用平台这个系统，是想要做一个类似APP store这样的软件。\n<!--more-->\n可以将所有应用装在一起，只需要登录一次，就能用所有的应用。效果图如下：\n\n![ap](/images/applicationPlatform.png)\n\n目前做了三个应用，音乐播放器，多人聊天室，爱心鱼游戏。下面将\n会详细介绍它们。\n\n因为我写了一小部分后台，所以运行前需要启动服务器。在下载完\n源码后，打开一个cmd窗口，进入根目录，运行代码：\n`node server.js`\n将服务器跑起来。然后再打开一个cmd窗口，运行代码：\n`npm start`，\n应用就打开了。\n\n### 音乐播放器\n它只包含基本的功能：导入本地歌曲列表；切换一个主题；控制正在播放的歌曲。\n效果图如下：\n\n![ap](/images/musicPlayer2.png)\n\nUX方面做得不是很好，以后会更加注重这一块。\n\n\n### 聊天室\n聊天室是我觉得做得比较好的一个，因为它包含了很多功能。\n除了最基本的聊天外，还支持发一些表情，还可以设置字体，背景，以及主题。\n里面还集成了一个地图，如果是用电脑浏览器打开的，将会在地图上显示自己的\n位置。效果图如下：\n\n![ap](/images/chatRoom2.png)\n\n### 爱心鱼\n最后一个是个用js写的游戏，但这并不是原创，只是用来熟悉canvas的api。\n效果图如下：\n\n![ap](/images/loveFish.png)\n\n### 总结\n这些是我刚学Javascript不久做的东西，所以有很多地方不够完善。但是它们让我看到了Javascript强大的一面。","slug":"应用平台桌面版","published":1,"updated":"2018-12-21T04:59:19.450Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjpxle9kh000oh8ob09henzqi","content":"<p>应用平台这个系统，是想要做一个类似APP store这样的软件。<br><a id=\"more\"></a><br>可以将所有应用装在一起，只需要登录一次，就能用所有的应用。效果图如下：</p>\n<p><img src=\"/images/applicationPlatform.png\" alt=\"ap\"></p>\n<p>目前做了三个应用，音乐播放器，多人聊天室，爱心鱼游戏。下面将<br>会详细介绍它们。</p>\n<p>因为我写了一小部分后台，所以运行前需要启动服务器。在下载完<br>源码后，打开一个cmd窗口，进入根目录，运行代码：<br><code>node server.js</code><br>将服务器跑起来。然后再打开一个cmd窗口，运行代码：<br><code>npm start</code>，<br>应用就打开了。</p>\n<h3 id=\"音乐播放器\"><a href=\"#音乐播放器\" class=\"headerlink\" title=\"音乐播放器\"></a>音乐播放器</h3><p>它只包含基本的功能：导入本地歌曲列表；切换一个主题；控制正在播放的歌曲。<br>效果图如下：</p>\n<p><img src=\"/images/musicPlayer2.png\" alt=\"ap\"></p>\n<p>UX方面做得不是很好，以后会更加注重这一块。</p>\n<h3 id=\"聊天室\"><a href=\"#聊天室\" class=\"headerlink\" title=\"聊天室\"></a>聊天室</h3><p>聊天室是我觉得做得比较好的一个，因为它包含了很多功能。<br>除了最基本的聊天外，还支持发一些表情，还可以设置字体，背景，以及主题。<br>里面还集成了一个地图，如果是用电脑浏览器打开的，将会在地图上显示自己的<br>位置。效果图如下：</p>\n<p><img src=\"/images/chatRoom2.png\" alt=\"ap\"></p>\n<h3 id=\"爱心鱼\"><a href=\"#爱心鱼\" class=\"headerlink\" title=\"爱心鱼\"></a>爱心鱼</h3><p>最后一个是个用js写的游戏，但这并不是原创，只是用来熟悉canvas的api。<br>效果图如下：</p>\n<p><img src=\"/images/loveFish.png\" alt=\"ap\"></p>\n<h3 id=\"总结\"><a href=\"#总结\" class=\"headerlink\" title=\"总结\"></a>总结</h3><p>这些是我刚学Javascript不久做的东西，所以有很多地方不够完善。但是它们让我看到了Javascript强大的一面。</p>\n","site":{"data":{}},"excerpt":"<p>应用平台这个系统，是想要做一个类似APP store这样的软件。<br>","more":"<br>可以将所有应用装在一起，只需要登录一次，就能用所有的应用。效果图如下：</p>\n<p><img src=\"/images/applicationPlatform.png\" alt=\"ap\"></p>\n<p>目前做了三个应用，音乐播放器，多人聊天室，爱心鱼游戏。下面将<br>会详细介绍它们。</p>\n<p>因为我写了一小部分后台，所以运行前需要启动服务器。在下载完<br>源码后，打开一个cmd窗口，进入根目录，运行代码：<br><code>node server.js</code><br>将服务器跑起来。然后再打开一个cmd窗口，运行代码：<br><code>npm start</code>，<br>应用就打开了。</p>\n<h3 id=\"音乐播放器\"><a href=\"#音乐播放器\" class=\"headerlink\" title=\"音乐播放器\"></a>音乐播放器</h3><p>它只包含基本的功能：导入本地歌曲列表；切换一个主题；控制正在播放的歌曲。<br>效果图如下：</p>\n<p><img src=\"/images/musicPlayer2.png\" alt=\"ap\"></p>\n<p>UX方面做得不是很好，以后会更加注重这一块。</p>\n<h3 id=\"聊天室\"><a href=\"#聊天室\" class=\"headerlink\" title=\"聊天室\"></a>聊天室</h3><p>聊天室是我觉得做得比较好的一个，因为它包含了很多功能。<br>除了最基本的聊天外，还支持发一些表情，还可以设置字体，背景，以及主题。<br>里面还集成了一个地图，如果是用电脑浏览器打开的，将会在地图上显示自己的<br>位置。效果图如下：</p>\n<p><img src=\"/images/chatRoom2.png\" alt=\"ap\"></p>\n<h3 id=\"爱心鱼\"><a href=\"#爱心鱼\" class=\"headerlink\" title=\"爱心鱼\"></a>爱心鱼</h3><p>最后一个是个用js写的游戏，但这并不是原创，只是用来熟悉canvas的api。<br>效果图如下：</p>\n<p><img src=\"/images/loveFish.png\" alt=\"ap\"></p>\n<h3 id=\"总结\"><a href=\"#总结\" class=\"headerlink\" title=\"总结\"></a>总结</h3><p>这些是我刚学Javascript不久做的东西，所以有很多地方不够完善。但是它们让我看到了Javascript强大的一面。</p>"},{"title":"爱听播放器","date":"2017-01-21T03:40:40.000Z","_content":"\n\n![AiTing](/images/aiting1.png)\n\n一个简洁、好看、功能丰富的歌曲，书籍播放器。\n<!--more-->\n\n### 下载\n\n0. 可以直接下载我打包好的windows版本： [点击这里下载免安装版爱听播放器](http://www.demodashi.com/demo/12542.html)。自己打包请看下面步骤。\n\n<!-- 1. 需要node环境支持。 -->\n\n1. [Github点赞](https://github.com/renhongl/AiTing)\n<!-- 上clone之后，运行`npm install`安装依赖。 -->\n\n<!-- 3. 依赖中没有包含打包工具，可以使用`npm install electron-packager -g`，在全局安装打包模块。\n\n4. 使用终端进入根目录，运行`npm run package`。\n\n5. 接着在根目录会生成**AiTing-win32-x64**文件，进入此目录，双击**AiTing.exe**即可运行此软件。 -->\n\n### 功能展示\n\n本软件是在网页中抓的API，音乐播放抓的是酷狗的API，书籍播放抓的是懒人听书的API。主要抓了搜索功能和基本推荐功能。\n\n**1.音乐播放**\n\n![AiTing](/images/aiting3.png)\n\n这是音乐主页，展示了推荐歌曲分类，以及热门歌手推荐。\n\n![AiTing](/images/aiting2.png)\n\n这是音乐搜索结果界面。\n\n![AiTing](/images/aiting4.png)\n\n这是歌词界面。\n\n**2.书籍播放**\n\n![AiTing](/images/aiting5.png)\n\n这是书籍的推荐页面。\n\n![AiTing](/images/aiting6.png)\n\n这是书籍搜索结果界面。\n\n![AiTing](/images/aiting7.png)\n\n由于书籍章节的搜索很慢，所以使用分页显示的方式。\n\n### 使用技术\n\nElectron, Webpack, React.\n\n","source":"_posts/爱听播放器.md","raw":"---\ntitle: 爱听播放器\ndate: 2017-01-21 11:40:40\ntags:\n\t- 分享 \n---\n\n\n![AiTing](/images/aiting1.png)\n\n一个简洁、好看、功能丰富的歌曲，书籍播放器。\n<!--more-->\n\n### 下载\n\n0. 可以直接下载我打包好的windows版本： [点击这里下载免安装版爱听播放器](http://www.demodashi.com/demo/12542.html)。自己打包请看下面步骤。\n\n<!-- 1. 需要node环境支持。 -->\n\n1. [Github点赞](https://github.com/renhongl/AiTing)\n<!-- 上clone之后，运行`npm install`安装依赖。 -->\n\n<!-- 3. 依赖中没有包含打包工具，可以使用`npm install electron-packager -g`，在全局安装打包模块。\n\n4. 使用终端进入根目录，运行`npm run package`。\n\n5. 接着在根目录会生成**AiTing-win32-x64**文件，进入此目录，双击**AiTing.exe**即可运行此软件。 -->\n\n### 功能展示\n\n本软件是在网页中抓的API，音乐播放抓的是酷狗的API，书籍播放抓的是懒人听书的API。主要抓了搜索功能和基本推荐功能。\n\n**1.音乐播放**\n\n![AiTing](/images/aiting3.png)\n\n这是音乐主页，展示了推荐歌曲分类，以及热门歌手推荐。\n\n![AiTing](/images/aiting2.png)\n\n这是音乐搜索结果界面。\n\n![AiTing](/images/aiting4.png)\n\n这是歌词界面。\n\n**2.书籍播放**\n\n![AiTing](/images/aiting5.png)\n\n这是书籍的推荐页面。\n\n![AiTing](/images/aiting6.png)\n\n这是书籍搜索结果界面。\n\n![AiTing](/images/aiting7.png)\n\n由于书籍章节的搜索很慢，所以使用分页显示的方式。\n\n### 使用技术\n\nElectron, Webpack, React.\n\n","slug":"爱听播放器","published":1,"updated":"2018-12-21T04:59:19.450Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjpxle9kh000qh8ob8noim412","content":"<p><img src=\"/images/aiting1.png\" alt=\"AiTing\"></p>\n<p>一个简洁、好看、功能丰富的歌曲，书籍播放器。<br><a id=\"more\"></a></p>\n<h3 id=\"下载\"><a href=\"#下载\" class=\"headerlink\" title=\"下载\"></a>下载</h3><ol start=\"0\">\n<li>可以直接下载我打包好的windows版本： <a href=\"http://www.demodashi.com/demo/12542.html\" target=\"_blank\" rel=\"noopener\">点击这里下载免安装版爱听播放器</a>。自己打包请看下面步骤。</li>\n</ol>\n<!-- 1. 需要node环境支持。 -->\n<ol>\n<li><a href=\"https://github.com/renhongl/AiTing\">Github点赞</a><!-- 上clone之后，运行`npm install`安装依赖。 -->\n</li>\n</ol>\n<!-- 3. 依赖中没有包含打包工具，可以使用`npm install electron-packager -g`，在全局安装打包模块。\n\n4. 使用终端进入根目录，运行`npm run package`。\n\n5. 接着在根目录会生成**AiTing-win32-x64**文件，进入此目录，双击**AiTing.exe**即可运行此软件。 -->\n<h3 id=\"功能展示\"><a href=\"#功能展示\" class=\"headerlink\" title=\"功能展示\"></a>功能展示</h3><p>本软件是在网页中抓的API，音乐播放抓的是酷狗的API，书籍播放抓的是懒人听书的API。主要抓了搜索功能和基本推荐功能。</p>\n<p><strong>1.音乐播放</strong></p>\n<p><img src=\"/images/aiting3.png\" alt=\"AiTing\"></p>\n<p>这是音乐主页，展示了推荐歌曲分类，以及热门歌手推荐。</p>\n<p><img src=\"/images/aiting2.png\" alt=\"AiTing\"></p>\n<p>这是音乐搜索结果界面。</p>\n<p><img src=\"/images/aiting4.png\" alt=\"AiTing\"></p>\n<p>这是歌词界面。</p>\n<p><strong>2.书籍播放</strong></p>\n<p><img src=\"/images/aiting5.png\" alt=\"AiTing\"></p>\n<p>这是书籍的推荐页面。</p>\n<p><img src=\"/images/aiting6.png\" alt=\"AiTing\"></p>\n<p>这是书籍搜索结果界面。</p>\n<p><img src=\"/images/aiting7.png\" alt=\"AiTing\"></p>\n<p>由于书籍章节的搜索很慢，所以使用分页显示的方式。</p>\n<h3 id=\"使用技术\"><a href=\"#使用技术\" class=\"headerlink\" title=\"使用技术\"></a>使用技术</h3><p>Electron, Webpack, React.</p>\n","site":{"data":{}},"excerpt":"<p><img src=\"/images/aiting1.png\" alt=\"AiTing\"></p>\n<p>一个简洁、好看、功能丰富的歌曲，书籍播放器。<br>","more":"</p>\n<h3 id=\"下载\"><a href=\"#下载\" class=\"headerlink\" title=\"下载\"></a>下载</h3><ol start=\"0\">\n<li>可以直接下载我打包好的windows版本： <a href=\"http://www.demodashi.com/demo/12542.html\" target=\"_blank\" rel=\"noopener\">点击这里下载免安装版爱听播放器</a>。自己打包请看下面步骤。</li>\n</ol>\n<!-- 1. 需要node环境支持。 -->\n<ol>\n<li><a href=\"https://github.com/renhongl/AiTing\">Github点赞</a><!-- 上clone之后，运行`npm install`安装依赖。 -->\n</li>\n</ol>\n<!-- 3. 依赖中没有包含打包工具，可以使用`npm install electron-packager -g`，在全局安装打包模块。\n\n4. 使用终端进入根目录，运行`npm run package`。\n\n5. 接着在根目录会生成**AiTing-win32-x64**文件，进入此目录，双击**AiTing.exe**即可运行此软件。 -->\n<h3 id=\"功能展示\"><a href=\"#功能展示\" class=\"headerlink\" title=\"功能展示\"></a>功能展示</h3><p>本软件是在网页中抓的API，音乐播放抓的是酷狗的API，书籍播放抓的是懒人听书的API。主要抓了搜索功能和基本推荐功能。</p>\n<p><strong>1.音乐播放</strong></p>\n<p><img src=\"/images/aiting3.png\" alt=\"AiTing\"></p>\n<p>这是音乐主页，展示了推荐歌曲分类，以及热门歌手推荐。</p>\n<p><img src=\"/images/aiting2.png\" alt=\"AiTing\"></p>\n<p>这是音乐搜索结果界面。</p>\n<p><img src=\"/images/aiting4.png\" alt=\"AiTing\"></p>\n<p>这是歌词界面。</p>\n<p><strong>2.书籍播放</strong></p>\n<p><img src=\"/images/aiting5.png\" alt=\"AiTing\"></p>\n<p>这是书籍的推荐页面。</p>\n<p><img src=\"/images/aiting6.png\" alt=\"AiTing\"></p>\n<p>这是书籍搜索结果界面。</p>\n<p><img src=\"/images/aiting7.png\" alt=\"AiTing\"></p>\n<p>由于书籍章节的搜索很慢，所以使用分页显示的方式。</p>\n<h3 id=\"使用技术\"><a href=\"#使用技术\" class=\"headerlink\" title=\"使用技术\"></a>使用技术</h3><p>Electron, Webpack, React.</p>"},{"title":"应用平台WEB","date":"2016-11-24T11:51:29.000Z","_content":"\n\n![ap](/images/chatHome.png)\n项目涉及技术：RequireJS, Vue.js, NodeJS, Express, MongoDB, Bootstrap, WebSocket, JQuery, ES2015。\n<!--more-->\n应用平台WEB版，是为了做一个网页版的APP store，也就是可以扩展出其他应用的一个平台。目前平台除了搭建了基本的结构之外，还做了一个简单的一对一聊天应用和简单的博客系统。下面将进行简单的介绍，源代码可在demo大师上下载：（[源码](http://www.demodashi.com/demo/12539.html)）。也可以点击下载（[应用说明视频](/other/AP_WEB.wmv)）介绍。\n### 图文介绍\n\n![ap](/images/signIn.png)\n\n这是登录页面，可以使用用户名和验证了的邮箱登录。\n\n![ap](/images/signUp.png)\n\n这是注册页面，很简单的注册一下。 \n\n![ap](/images/resetPwd.png)\n\n这是重置密码页面，需要通过验证邮箱的随机码，来实现重置密码。主要是通过后台服务器向邮箱发送信息。\n\n![ap](/images/chatHome.png)\n\n这是主模块，包含登录用户的信息显示，并且可以随意设置。可以修改头像，设置状态，还可以添加邮箱，设置是否有消息提示音和提示框。还有就是显示自己的好友分组信息。可以任意修改分组。\n\n![ap](/images/homeAndRoom.png)\n\n图的右边就是聊天的窗口，可以同时和多个人聊天，都会列在左边，点击就能切换聊天对象。窗口可以通过关闭所有聊天对象来关闭，或者通过右上角关闭按钮关闭。消息中可以发送一些表情。可以发送抖动窗口的消息。\n\n![ap](/images/docs.png)\n\n这个应用是聊天主页的按钮点击出来的，可以显示一些简单的文档，并且可以点击喜欢某个文档，以及添加简单的评论信息。\n\n### 后端代码介绍\n\nEmail.js: 用于发送邮件。\n\n\t'use strict';\n\tconst nodemailer = require('nodemailer');\n\tconst Config = require('./Config');\n\t\n\tclass Email {\n\t    constructor(to, subject, text, html) {\n\t        this.config = {\n\t            service: '126',\n\t            auth: {\n\t                user: Config.EMAIL_SERVER,\n\t                pass: Config.EMAIL_PWD            \n\t            }\n\t        };\n\t        this.mailOptions = {\n\t            from: Config.EMAIL_SERVER,\n\t            to: to,\n\t            subject: subject,\n\t            text: text,\n\t            //html: html\n\t        };\n\t        this._send();\n\t    }\n\t\n\t    _send() {\n\t        let transporter = nodemailer.createTransport(this.config);\n\t        transporter.sendMail(this.mailOptions, function (error, info) {\n\t            if (error) {\n\t                return console.log(error);\n\t            }\n\t            console.log('Message sent: ' + info.response);\n\t            transporter.close();\n\t        });\n\t    }\n\t}\n\t\n\tmodule.exports = Email;\nServer.js: 作为服务器，并且是Websocket的父类。\n\n\t'use strict';\n\t\n\tconst express = require('express');\n\tconst http = require('http');\n\tconst socket = require('socket.io');\n\tconst Router = require('./Router');\n\tconst bodyParser = require('body-parser');\n\t\n\tclass Server{\n\t    constructor(port){\n\t        this.port = port;\n\t        this.app = express();\n\t        this.server = http.createServer(this.app);\n\t        this.io = socket.listen(this.server);\n\t        this._run();\n\t    }\n\t\n\t    _run(){\n\t        this.server.listen(this.port);\n\t        this.app.use(bodyParser.json());\n\t        this.app.use(bodyParser.urlencoded({ extended: false }));\n\t        this.app.use(express.static(__dirname.replace(/server\\\\core/, 'app')));\n\t        new Router(this.app);\n\t        console.log('HTTP listening: 127.0.0.1:' + this.port);\n\t    }\n\t}\n\t\n\tmodule.exports = Server;\n\nUser.js: 和用户相关的所有接口都在这里。下面是一个获取验证码的接口，在获取请求后，会随机生成五位数验证码，发送到用户的邮箱中，并且在生成验证码的同时，会调用删除验证码的方法，在一定时间内将此验证码删除，那么用户就不能再使用此验证码修改密码了。\n\n\t_getCode(){\n\t    this.app.get('/getCode', (req, res) => {\n\t        let email = req.query.email;\n\t        let code = '';\n\t        for(let i = 0; i < 5; i++){\n\t            code += Math.floor(Math.random() * 10);\n\t        }\n\t        let queryData = {\n\t            email: email\n\t        };\n\t        let updateData = {\n\t            code: code\n\t        };\n\t        let callback = (db) => {\n\t            let collection = db.collection(this.userCollection);\n\t            collection.updateOne(queryData, {$set: updateData}, (err, result) => {\n\t                assert.equal(null, err);\n\t                db.close();\n\t                if(result.result.n === 1){\n\t                    new Email(email, '重置密码', '你的验证码是：' + code);\n\t                    this._removeCode(email);\n\t                    res.send({status: 'success', text: '验证码已发往你的邮箱，请查收。30分钟内有效。'});\n\t                }else{\n\t                    res.send({status: 'error', text: '没有此邮箱，或许你需要注册账号。'});\n\t                }\n\t            });\n\t        };\n\t        new MongoDB(this.currentDB, callback);\n\t    });\n\t}\n\n### 前端代码介绍\n\n前端模块化采用的是RequireJS，AP_WEB2.0会使用Webpack,那时候会使用ES2015的模块管理。前端的代码较多，这里主要介绍下自己写的特别的功能。QueryString.js用户获取url上的参数信息。\n\n\tdefine([], function() {\n\t    'use strict';\n\t    class QueryString {\n\t        constructor(){\n\t            let search = window.location.search.substring(1).split('&');\n\t            let tempGroup = [];\n\t\n\t            for (let p of search) {\n\t                tempGroup.push(p.split('='));\n\t            }\n\t            this.params = new Map(tempGroup);\n\t        }\n\t\n\t        getValue(name){\n\t            return this.params.get(name);\n\t        }\n\t    }\n\t\n\t    let queryString = new QueryString();\n\t    return queryString;\n\t});\n\nDraggable.js用于添加拖动功能，在创建时，传入需要拖动的元素，这个元素就能拖动了。\n\n\tdefine([], function() {\n\t    'use strict';\n\t    class Draggable {\n\t        constructor($container) {\n\t            this.$container = $container;\n\t            for (let subContainer of $container.children()) {\n\t                this._handleEvents($(subContainer));\n\t            }\n\t        }\n\t\n\t        _handleEvents($subContainer) {\n\t            $subContainer.on('mousedown', (e) => {\n\t                if (!$(e.target).hasClass('button')) {\n\t                    this._handleMousedown(e);\n\t                }\n\t            });\n\t\n\t            $(document).on('mousemove', (e) => {\n\t                if (!$(e.target).hasClass('button')) {\n\t                    this._handleMousemove(e);\n\t                }\n\t            });\n\t\n\t            $(document).on('mouseup', (e) => {\n\t                if (!$(e.target).hasClass('button')) {\n\t                    this._handleMouseup(e);\n\t                }\n\t            });\n\t        }\n\t\n\t        _handleMousedown(e) {\n\t            let {left, top} = this.$container.css(['left', 'top']);\n\t            this.offsetX = this._parseStr(left) - e.clientX;\n\t            this.offsetY = this._parseStr(top) - e.clientY;\n\t            this.mouseDown = true;\n\t        }\n\t\n\t        _handleMousemove(e) {\n\t            $(e.target).css('cursor', 'url(/images/m1.cur),default !important');\n\t            if (this.mouseDown) {\n\t                let x = e.clientX;\n\t                let y = e.clientY;\n\t                let positionX = x + this.offsetX;\n\t                let positionY = y + this.offsetY;\n\t                this.$container.css({\n\t                    left: positionX,\n\t                    top: positionY,\n\t                });\n\t            }\n\t        }\n\t\n\t        _handleMouseup(e) {\n\t            $(e.target).css('cursor', 'url(/images/m1.cur),default !important');\n\t            this.mouseDown = false;\n\t        }\n\t\n\t        _parseStr(str) {\n\t            if(typeof str !== 'string'){\n\t                str += ''; \n\t            }\n\t            return Number(str.split('px')[0]);\n\t        }\n\t    }\n\t\n\t    return Draggable;\n\t});\n\nRain.js用于添加鼠标点击效果，创建之后，在整个网页中，除了class中有button的元素，其他都会在点击时，出现像雨滴落在地上的效果。\n\n\tdefine([], function() {\n\t    'use strict';\n\t    class Rain {\n\t        constructor() {\n\t            this.settings = {\n\t                width: 10,\n\t                height: 10,\n\t                borderColor: '#c6cac9',\n\t                opacity: 0.7,\n\t                borderRadius: 5,\n\t                borderWidth: 5,\n\t                maxWidth: 70,\n\t                widthOffset: 2,\n\t                radiusOffset: 1,\n\t                opacityOffset: 0.05,\n\t                borderOffset: 1,\n\t                position: 'fixed',\n\t                zIndex: 100,\n\t                borderStyle: 'solid',\n\t                class: 'rain',\n\t            };\n\t            this._handleEvents();\n\t        }\n\t\n\t        _handleEvents() {\n\t            let settings = this.settings;\n\t            $(document).on('click', (e) => {\n\t                if($(e.target).hasClass('button')){\n\t                    return;\n\t                }\n\t                let $rain = $('<div>').attr('class', settings.class).css({\n\t                    position: settings.position,\n\t                    zIndex: settings.zIndex,\n\t                    borderStyle: settings.borderStyle,\n\t                });\n\t                $('body').append($rain);\n\t                let x = e.clientX;\n\t                let y = e.clientY;\n\t                this._initRain($rain, x, y);\n\t                this._updateRain($rain, x, y);\n\t            });\n\t        }\n\t\n\t        _updateRain($rain, x, y) {\n\t            let settings = this.settings;\n\t            let rainThread = setInterval( () => {\n\t                let {width, height,top, left, opacity, borderWidth, borderRadius} = $rain.css(['width', 'height','top', 'left', 'opacity', 'borderWidth', 'borderRadius']);\n\t                $rain.css({\n\t                    width: this._parseStr(width) + settings.widthOffset,\n\t                    height: this._parseStr(height) + settings.widthOffset,\n\t                    top: y - this._parseStr(height) / 2,\n\t                    left: x - this._parseStr(width) / 2,\n\t                    opacity: this._parseStr(opacity) - settings.opacityOffset,\n\t                    borderWidth: this._parseStr(borderWidth) + settings.borderOffset,\n\t                    borderRadius: this._parseStr(borderRadius) + settings.radiusOffset,\n\t                });\n\t                if (this._parseStr(width) > settings.maxWidth) {\n\t                    clearInterval(rainThread);\n\t                    $rain.remove();\n\t                }\n\t            }, 10);\n\t        }\n\t\n\t        _initRain($rain, x, y) {\n\t            let settings = this.settings;\n\t            $rain.css({\n\t                width: settings.width,\n\t                height: settings.height,\n\t                borderColor: settings.borderColor,\n\t                opacity: settings.opacity,\n\t                borderRadius: settings.borderRadius,\n\t                borderWidth: settings.borderWidth,\n\t                top: y - this._parseStr(settings.height) / 2,\n\t                left: x - this._parseStr(settings.width) / 2,\n\t            });\n\t        }\n\t\n\t        _parseStr(str){\n\t            if(typeof str !== 'string'){\n\t                str += ''; \n\t            }\n\t            return Number(str.split('px')[0]);\n\t        }\n\t\n\t    }\n\t\n\t    return Rain;\n\t});\n\n最后一个要介绍的是Message.js，它是一个全局提示的工具，项目中使用它做ajax返回信息的控制，做聊天室消息预览等。当有一些信息要发送给用户时，会在浏览器的右上角出现对话框，包含信息标题，信息内容等。并且分为几种类型的提示，不同类型会有不同主题的对话框出现。由于代码太多，这里只列出了它的构造方法。\n\n\tconstructor(type, content) {\n\t\tthis.title = '';\n\t\tthis.content = content;\n\t\tthis.showTime = 5000;\n\t\tthis.clearTime = 1000;\n\t\tthis.clearThread = null;\n\t\tthis.timeThread = null;\n\t\tthis.$Message = $('<div>').css({\n\t\t    color: '#fff',\n\t\t    borderRadius: 5,\n\t\t    width: 300,\n\t\t    display: 'none',\n\t\t    zIndex: 110,\n\t\t    margin: '2px 5px',\n\t\t    clear: 'both',\n\t\t    float: 'right',\n\t\t    position: 'relative',\n\t\t    boxShadow: '0px 0px 10px rgba(255, 255, 255, 1)',\n\t\t    opacity: 0.9,\n\t\t}).addClass('message');\n\t\t\n\t\tthis.$icon = $('<i>').css({\n\t\t    display: 'inline-block',\n\t\t    float: 'left',\n\t\t    marginLeft: 10,\n\t\t    width: 20,\n\t\t    textAlign: 'center',\n\t\t    fontSize: '1.2em',\n\t\t}).addClass('msgIcon').appendTo(this.$Message);\n\t\t\n\t\tthis.$title = $('<div>').css({\n\t\t    height: '45%',\n\t\t    width: 260,\n\t\t    float: 'right',\n\t\t    fontSize: '1.2em',\n\t\t}).addClass('msgTitle').appendTo(this.$Message);\n\t\t\n\t\tthis.$time = $('<span>').css({\n\t\t    position: 'absolute',\n\t\t    top: 2,\n\t\t    right: 2,\n\t\t    fontSize: '0.7em',\n\t\t}).addClass('msgTime').appendTo(this.$Message);\n\t\t\n\t\tthis.$content = $('<div>').css({\n\t\t    float: 'right',\n\t\t    height: '56%',\n\t\t    width: 260,\n\t\t    paddingBottom: 5,\n\t\t    paddingRight: 5,\n\t\t    fontSize: '0.8em',\n\t\t}).addClass('msgContent').appendTo(this.$Message);\n\t\t\n\t\tswitch (type) {\n\t\t    case 'infor':\n\t\t        this.title = '提示';\n\t\t        this._infor();\n\t\t        break;\n\t\t    case 'success':\n\t\t        this.title = '成功';\n\t\t        this._success();\n\t\t        break;\n\t\t    case 'error':\n\t\t        this.title = '错误';\n\t\t        this._error();\n\t\t        break;\n\t\t    case 'warning':\n\t\t        this.title = '警告';\n\t\t        this._warning();\n\t\t        break;\n\t\t    case 'message':\n\t\t        this._message();\n\t\t        break;\n\t\t    default:\n\t\t        break;\n\t}\n\n### 总结\n写代码很重要，调试也很重要，好的调试方法，可以更快的发现、解决问题。正视错误，用积极的态度去处理错误，会提升自己面临问题时的处理能力。","source":"_posts/应用平台WEB.md","raw":"---\ntitle: 应用平台WEB\ndate: 2016-11-24 19:51:29\ntags:\n\t- 分享\n\n---\n\n\n![ap](/images/chatHome.png)\n项目涉及技术：RequireJS, Vue.js, NodeJS, Express, MongoDB, Bootstrap, WebSocket, JQuery, ES2015。\n<!--more-->\n应用平台WEB版，是为了做一个网页版的APP store，也就是可以扩展出其他应用的一个平台。目前平台除了搭建了基本的结构之外，还做了一个简单的一对一聊天应用和简单的博客系统。下面将进行简单的介绍，源代码可在demo大师上下载：（[源码](http://www.demodashi.com/demo/12539.html)）。也可以点击下载（[应用说明视频](/other/AP_WEB.wmv)）介绍。\n### 图文介绍\n\n![ap](/images/signIn.png)\n\n这是登录页面，可以使用用户名和验证了的邮箱登录。\n\n![ap](/images/signUp.png)\n\n这是注册页面，很简单的注册一下。 \n\n![ap](/images/resetPwd.png)\n\n这是重置密码页面，需要通过验证邮箱的随机码，来实现重置密码。主要是通过后台服务器向邮箱发送信息。\n\n![ap](/images/chatHome.png)\n\n这是主模块，包含登录用户的信息显示，并且可以随意设置。可以修改头像，设置状态，还可以添加邮箱，设置是否有消息提示音和提示框。还有就是显示自己的好友分组信息。可以任意修改分组。\n\n![ap](/images/homeAndRoom.png)\n\n图的右边就是聊天的窗口，可以同时和多个人聊天，都会列在左边，点击就能切换聊天对象。窗口可以通过关闭所有聊天对象来关闭，或者通过右上角关闭按钮关闭。消息中可以发送一些表情。可以发送抖动窗口的消息。\n\n![ap](/images/docs.png)\n\n这个应用是聊天主页的按钮点击出来的，可以显示一些简单的文档，并且可以点击喜欢某个文档，以及添加简单的评论信息。\n\n### 后端代码介绍\n\nEmail.js: 用于发送邮件。\n\n\t'use strict';\n\tconst nodemailer = require('nodemailer');\n\tconst Config = require('./Config');\n\t\n\tclass Email {\n\t    constructor(to, subject, text, html) {\n\t        this.config = {\n\t            service: '126',\n\t            auth: {\n\t                user: Config.EMAIL_SERVER,\n\t                pass: Config.EMAIL_PWD            \n\t            }\n\t        };\n\t        this.mailOptions = {\n\t            from: Config.EMAIL_SERVER,\n\t            to: to,\n\t            subject: subject,\n\t            text: text,\n\t            //html: html\n\t        };\n\t        this._send();\n\t    }\n\t\n\t    _send() {\n\t        let transporter = nodemailer.createTransport(this.config);\n\t        transporter.sendMail(this.mailOptions, function (error, info) {\n\t            if (error) {\n\t                return console.log(error);\n\t            }\n\t            console.log('Message sent: ' + info.response);\n\t            transporter.close();\n\t        });\n\t    }\n\t}\n\t\n\tmodule.exports = Email;\nServer.js: 作为服务器，并且是Websocket的父类。\n\n\t'use strict';\n\t\n\tconst express = require('express');\n\tconst http = require('http');\n\tconst socket = require('socket.io');\n\tconst Router = require('./Router');\n\tconst bodyParser = require('body-parser');\n\t\n\tclass Server{\n\t    constructor(port){\n\t        this.port = port;\n\t        this.app = express();\n\t        this.server = http.createServer(this.app);\n\t        this.io = socket.listen(this.server);\n\t        this._run();\n\t    }\n\t\n\t    _run(){\n\t        this.server.listen(this.port);\n\t        this.app.use(bodyParser.json());\n\t        this.app.use(bodyParser.urlencoded({ extended: false }));\n\t        this.app.use(express.static(__dirname.replace(/server\\\\core/, 'app')));\n\t        new Router(this.app);\n\t        console.log('HTTP listening: 127.0.0.1:' + this.port);\n\t    }\n\t}\n\t\n\tmodule.exports = Server;\n\nUser.js: 和用户相关的所有接口都在这里。下面是一个获取验证码的接口，在获取请求后，会随机生成五位数验证码，发送到用户的邮箱中，并且在生成验证码的同时，会调用删除验证码的方法，在一定时间内将此验证码删除，那么用户就不能再使用此验证码修改密码了。\n\n\t_getCode(){\n\t    this.app.get('/getCode', (req, res) => {\n\t        let email = req.query.email;\n\t        let code = '';\n\t        for(let i = 0; i < 5; i++){\n\t            code += Math.floor(Math.random() * 10);\n\t        }\n\t        let queryData = {\n\t            email: email\n\t        };\n\t        let updateData = {\n\t            code: code\n\t        };\n\t        let callback = (db) => {\n\t            let collection = db.collection(this.userCollection);\n\t            collection.updateOne(queryData, {$set: updateData}, (err, result) => {\n\t                assert.equal(null, err);\n\t                db.close();\n\t                if(result.result.n === 1){\n\t                    new Email(email, '重置密码', '你的验证码是：' + code);\n\t                    this._removeCode(email);\n\t                    res.send({status: 'success', text: '验证码已发往你的邮箱，请查收。30分钟内有效。'});\n\t                }else{\n\t                    res.send({status: 'error', text: '没有此邮箱，或许你需要注册账号。'});\n\t                }\n\t            });\n\t        };\n\t        new MongoDB(this.currentDB, callback);\n\t    });\n\t}\n\n### 前端代码介绍\n\n前端模块化采用的是RequireJS，AP_WEB2.0会使用Webpack,那时候会使用ES2015的模块管理。前端的代码较多，这里主要介绍下自己写的特别的功能。QueryString.js用户获取url上的参数信息。\n\n\tdefine([], function() {\n\t    'use strict';\n\t    class QueryString {\n\t        constructor(){\n\t            let search = window.location.search.substring(1).split('&');\n\t            let tempGroup = [];\n\t\n\t            for (let p of search) {\n\t                tempGroup.push(p.split('='));\n\t            }\n\t            this.params = new Map(tempGroup);\n\t        }\n\t\n\t        getValue(name){\n\t            return this.params.get(name);\n\t        }\n\t    }\n\t\n\t    let queryString = new QueryString();\n\t    return queryString;\n\t});\n\nDraggable.js用于添加拖动功能，在创建时，传入需要拖动的元素，这个元素就能拖动了。\n\n\tdefine([], function() {\n\t    'use strict';\n\t    class Draggable {\n\t        constructor($container) {\n\t            this.$container = $container;\n\t            for (let subContainer of $container.children()) {\n\t                this._handleEvents($(subContainer));\n\t            }\n\t        }\n\t\n\t        _handleEvents($subContainer) {\n\t            $subContainer.on('mousedown', (e) => {\n\t                if (!$(e.target).hasClass('button')) {\n\t                    this._handleMousedown(e);\n\t                }\n\t            });\n\t\n\t            $(document).on('mousemove', (e) => {\n\t                if (!$(e.target).hasClass('button')) {\n\t                    this._handleMousemove(e);\n\t                }\n\t            });\n\t\n\t            $(document).on('mouseup', (e) => {\n\t                if (!$(e.target).hasClass('button')) {\n\t                    this._handleMouseup(e);\n\t                }\n\t            });\n\t        }\n\t\n\t        _handleMousedown(e) {\n\t            let {left, top} = this.$container.css(['left', 'top']);\n\t            this.offsetX = this._parseStr(left) - e.clientX;\n\t            this.offsetY = this._parseStr(top) - e.clientY;\n\t            this.mouseDown = true;\n\t        }\n\t\n\t        _handleMousemove(e) {\n\t            $(e.target).css('cursor', 'url(/images/m1.cur),default !important');\n\t            if (this.mouseDown) {\n\t                let x = e.clientX;\n\t                let y = e.clientY;\n\t                let positionX = x + this.offsetX;\n\t                let positionY = y + this.offsetY;\n\t                this.$container.css({\n\t                    left: positionX,\n\t                    top: positionY,\n\t                });\n\t            }\n\t        }\n\t\n\t        _handleMouseup(e) {\n\t            $(e.target).css('cursor', 'url(/images/m1.cur),default !important');\n\t            this.mouseDown = false;\n\t        }\n\t\n\t        _parseStr(str) {\n\t            if(typeof str !== 'string'){\n\t                str += ''; \n\t            }\n\t            return Number(str.split('px')[0]);\n\t        }\n\t    }\n\t\n\t    return Draggable;\n\t});\n\nRain.js用于添加鼠标点击效果，创建之后，在整个网页中，除了class中有button的元素，其他都会在点击时，出现像雨滴落在地上的效果。\n\n\tdefine([], function() {\n\t    'use strict';\n\t    class Rain {\n\t        constructor() {\n\t            this.settings = {\n\t                width: 10,\n\t                height: 10,\n\t                borderColor: '#c6cac9',\n\t                opacity: 0.7,\n\t                borderRadius: 5,\n\t                borderWidth: 5,\n\t                maxWidth: 70,\n\t                widthOffset: 2,\n\t                radiusOffset: 1,\n\t                opacityOffset: 0.05,\n\t                borderOffset: 1,\n\t                position: 'fixed',\n\t                zIndex: 100,\n\t                borderStyle: 'solid',\n\t                class: 'rain',\n\t            };\n\t            this._handleEvents();\n\t        }\n\t\n\t        _handleEvents() {\n\t            let settings = this.settings;\n\t            $(document).on('click', (e) => {\n\t                if($(e.target).hasClass('button')){\n\t                    return;\n\t                }\n\t                let $rain = $('<div>').attr('class', settings.class).css({\n\t                    position: settings.position,\n\t                    zIndex: settings.zIndex,\n\t                    borderStyle: settings.borderStyle,\n\t                });\n\t                $('body').append($rain);\n\t                let x = e.clientX;\n\t                let y = e.clientY;\n\t                this._initRain($rain, x, y);\n\t                this._updateRain($rain, x, y);\n\t            });\n\t        }\n\t\n\t        _updateRain($rain, x, y) {\n\t            let settings = this.settings;\n\t            let rainThread = setInterval( () => {\n\t                let {width, height,top, left, opacity, borderWidth, borderRadius} = $rain.css(['width', 'height','top', 'left', 'opacity', 'borderWidth', 'borderRadius']);\n\t                $rain.css({\n\t                    width: this._parseStr(width) + settings.widthOffset,\n\t                    height: this._parseStr(height) + settings.widthOffset,\n\t                    top: y - this._parseStr(height) / 2,\n\t                    left: x - this._parseStr(width) / 2,\n\t                    opacity: this._parseStr(opacity) - settings.opacityOffset,\n\t                    borderWidth: this._parseStr(borderWidth) + settings.borderOffset,\n\t                    borderRadius: this._parseStr(borderRadius) + settings.radiusOffset,\n\t                });\n\t                if (this._parseStr(width) > settings.maxWidth) {\n\t                    clearInterval(rainThread);\n\t                    $rain.remove();\n\t                }\n\t            }, 10);\n\t        }\n\t\n\t        _initRain($rain, x, y) {\n\t            let settings = this.settings;\n\t            $rain.css({\n\t                width: settings.width,\n\t                height: settings.height,\n\t                borderColor: settings.borderColor,\n\t                opacity: settings.opacity,\n\t                borderRadius: settings.borderRadius,\n\t                borderWidth: settings.borderWidth,\n\t                top: y - this._parseStr(settings.height) / 2,\n\t                left: x - this._parseStr(settings.width) / 2,\n\t            });\n\t        }\n\t\n\t        _parseStr(str){\n\t            if(typeof str !== 'string'){\n\t                str += ''; \n\t            }\n\t            return Number(str.split('px')[0]);\n\t        }\n\t\n\t    }\n\t\n\t    return Rain;\n\t});\n\n最后一个要介绍的是Message.js，它是一个全局提示的工具，项目中使用它做ajax返回信息的控制，做聊天室消息预览等。当有一些信息要发送给用户时，会在浏览器的右上角出现对话框，包含信息标题，信息内容等。并且分为几种类型的提示，不同类型会有不同主题的对话框出现。由于代码太多，这里只列出了它的构造方法。\n\n\tconstructor(type, content) {\n\t\tthis.title = '';\n\t\tthis.content = content;\n\t\tthis.showTime = 5000;\n\t\tthis.clearTime = 1000;\n\t\tthis.clearThread = null;\n\t\tthis.timeThread = null;\n\t\tthis.$Message = $('<div>').css({\n\t\t    color: '#fff',\n\t\t    borderRadius: 5,\n\t\t    width: 300,\n\t\t    display: 'none',\n\t\t    zIndex: 110,\n\t\t    margin: '2px 5px',\n\t\t    clear: 'both',\n\t\t    float: 'right',\n\t\t    position: 'relative',\n\t\t    boxShadow: '0px 0px 10px rgba(255, 255, 255, 1)',\n\t\t    opacity: 0.9,\n\t\t}).addClass('message');\n\t\t\n\t\tthis.$icon = $('<i>').css({\n\t\t    display: 'inline-block',\n\t\t    float: 'left',\n\t\t    marginLeft: 10,\n\t\t    width: 20,\n\t\t    textAlign: 'center',\n\t\t    fontSize: '1.2em',\n\t\t}).addClass('msgIcon').appendTo(this.$Message);\n\t\t\n\t\tthis.$title = $('<div>').css({\n\t\t    height: '45%',\n\t\t    width: 260,\n\t\t    float: 'right',\n\t\t    fontSize: '1.2em',\n\t\t}).addClass('msgTitle').appendTo(this.$Message);\n\t\t\n\t\tthis.$time = $('<span>').css({\n\t\t    position: 'absolute',\n\t\t    top: 2,\n\t\t    right: 2,\n\t\t    fontSize: '0.7em',\n\t\t}).addClass('msgTime').appendTo(this.$Message);\n\t\t\n\t\tthis.$content = $('<div>').css({\n\t\t    float: 'right',\n\t\t    height: '56%',\n\t\t    width: 260,\n\t\t    paddingBottom: 5,\n\t\t    paddingRight: 5,\n\t\t    fontSize: '0.8em',\n\t\t}).addClass('msgContent').appendTo(this.$Message);\n\t\t\n\t\tswitch (type) {\n\t\t    case 'infor':\n\t\t        this.title = '提示';\n\t\t        this._infor();\n\t\t        break;\n\t\t    case 'success':\n\t\t        this.title = '成功';\n\t\t        this._success();\n\t\t        break;\n\t\t    case 'error':\n\t\t        this.title = '错误';\n\t\t        this._error();\n\t\t        break;\n\t\t    case 'warning':\n\t\t        this.title = '警告';\n\t\t        this._warning();\n\t\t        break;\n\t\t    case 'message':\n\t\t        this._message();\n\t\t        break;\n\t\t    default:\n\t\t        break;\n\t}\n\n### 总结\n写代码很重要，调试也很重要，好的调试方法，可以更快的发现、解决问题。正视错误，用积极的态度去处理错误，会提升自己面临问题时的处理能力。","slug":"应用平台WEB","published":1,"updated":"2018-12-21T04:59:19.435Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjpxle9kx000sh8obdcxb7emw","content":"<p><img src=\"/images/chatHome.png\" alt=\"ap\"><br>项目涉及技术：RequireJS, Vue.js, NodeJS, Express, MongoDB, Bootstrap, WebSocket, JQuery, ES2015。<br><a id=\"more\"></a><br>应用平台WEB版，是为了做一个网页版的APP store，也就是可以扩展出其他应用的一个平台。目前平台除了搭建了基本的结构之外，还做了一个简单的一对一聊天应用和简单的博客系统。下面将进行简单的介绍，源代码可在demo大师上下载：（<a href=\"http://www.demodashi.com/demo/12539.html\" target=\"_blank\" rel=\"noopener\">源码</a>）。也可以点击下载（<a href=\"/other/AP_WEB.wmv\">应用说明视频</a>）介绍。</p>\n<h3 id=\"图文介绍\"><a href=\"#图文介绍\" class=\"headerlink\" title=\"图文介绍\"></a>图文介绍</h3><p><img src=\"/images/signIn.png\" alt=\"ap\"></p>\n<p>这是登录页面，可以使用用户名和验证了的邮箱登录。</p>\n<p><img src=\"/images/signUp.png\" alt=\"ap\"></p>\n<p>这是注册页面，很简单的注册一下。 </p>\n<p><img src=\"/images/resetPwd.png\" alt=\"ap\"></p>\n<p>这是重置密码页面，需要通过验证邮箱的随机码，来实现重置密码。主要是通过后台服务器向邮箱发送信息。</p>\n<p><img src=\"/images/chatHome.png\" alt=\"ap\"></p>\n<p>这是主模块，包含登录用户的信息显示，并且可以随意设置。可以修改头像，设置状态，还可以添加邮箱，设置是否有消息提示音和提示框。还有就是显示自己的好友分组信息。可以任意修改分组。</p>\n<p><img src=\"/images/homeAndRoom.png\" alt=\"ap\"></p>\n<p>图的右边就是聊天的窗口，可以同时和多个人聊天，都会列在左边，点击就能切换聊天对象。窗口可以通过关闭所有聊天对象来关闭，或者通过右上角关闭按钮关闭。消息中可以发送一些表情。可以发送抖动窗口的消息。</p>\n<p><img src=\"/images/docs.png\" alt=\"ap\"></p>\n<p>这个应用是聊天主页的按钮点击出来的，可以显示一些简单的文档，并且可以点击喜欢某个文档，以及添加简单的评论信息。</p>\n<h3 id=\"后端代码介绍\"><a href=\"#后端代码介绍\" class=\"headerlink\" title=\"后端代码介绍\"></a>后端代码介绍</h3><p>Email.js: 用于发送邮件。</p>\n<pre><code>&apos;use strict&apos;;\nconst nodemailer = require(&apos;nodemailer&apos;);\nconst Config = require(&apos;./Config&apos;);\n\nclass Email {\n    constructor(to, subject, text, html) {\n        this.config = {\n            service: &apos;126&apos;,\n            auth: {\n                user: Config.EMAIL_SERVER,\n                pass: Config.EMAIL_PWD            \n            }\n        };\n        this.mailOptions = {\n            from: Config.EMAIL_SERVER,\n            to: to,\n            subject: subject,\n            text: text,\n            //html: html\n        };\n        this._send();\n    }\n\n    _send() {\n        let transporter = nodemailer.createTransport(this.config);\n        transporter.sendMail(this.mailOptions, function (error, info) {\n            if (error) {\n                return console.log(error);\n            }\n            console.log(&apos;Message sent: &apos; + info.response);\n            transporter.close();\n        });\n    }\n}\n\nmodule.exports = Email;\n</code></pre><p>Server.js: 作为服务器，并且是Websocket的父类。</p>\n<pre><code>&apos;use strict&apos;;\n\nconst express = require(&apos;express&apos;);\nconst http = require(&apos;http&apos;);\nconst socket = require(&apos;socket.io&apos;);\nconst Router = require(&apos;./Router&apos;);\nconst bodyParser = require(&apos;body-parser&apos;);\n\nclass Server{\n    constructor(port){\n        this.port = port;\n        this.app = express();\n        this.server = http.createServer(this.app);\n        this.io = socket.listen(this.server);\n        this._run();\n    }\n\n    _run(){\n        this.server.listen(this.port);\n        this.app.use(bodyParser.json());\n        this.app.use(bodyParser.urlencoded({ extended: false }));\n        this.app.use(express.static(__dirname.replace(/server\\\\core/, &apos;app&apos;)));\n        new Router(this.app);\n        console.log(&apos;HTTP listening: 127.0.0.1:&apos; + this.port);\n    }\n}\n\nmodule.exports = Server;\n</code></pre><p>User.js: 和用户相关的所有接口都在这里。下面是一个获取验证码的接口，在获取请求后，会随机生成五位数验证码，发送到用户的邮箱中，并且在生成验证码的同时，会调用删除验证码的方法，在一定时间内将此验证码删除，那么用户就不能再使用此验证码修改密码了。</p>\n<pre><code>_getCode(){\n    this.app.get(&apos;/getCode&apos;, (req, res) =&gt; {\n        let email = req.query.email;\n        let code = &apos;&apos;;\n        for(let i = 0; i &lt; 5; i++){\n            code += Math.floor(Math.random() * 10);\n        }\n        let queryData = {\n            email: email\n        };\n        let updateData = {\n            code: code\n        };\n        let callback = (db) =&gt; {\n            let collection = db.collection(this.userCollection);\n            collection.updateOne(queryData, {$set: updateData}, (err, result) =&gt; {\n                assert.equal(null, err);\n                db.close();\n                if(result.result.n === 1){\n                    new Email(email, &apos;重置密码&apos;, &apos;你的验证码是：&apos; + code);\n                    this._removeCode(email);\n                    res.send({status: &apos;success&apos;, text: &apos;验证码已发往你的邮箱，请查收。30分钟内有效。&apos;});\n                }else{\n                    res.send({status: &apos;error&apos;, text: &apos;没有此邮箱，或许你需要注册账号。&apos;});\n                }\n            });\n        };\n        new MongoDB(this.currentDB, callback);\n    });\n}\n</code></pre><h3 id=\"前端代码介绍\"><a href=\"#前端代码介绍\" class=\"headerlink\" title=\"前端代码介绍\"></a>前端代码介绍</h3><p>前端模块化采用的是RequireJS，AP_WEB2.0会使用Webpack,那时候会使用ES2015的模块管理。前端的代码较多，这里主要介绍下自己写的特别的功能。QueryString.js用户获取url上的参数信息。</p>\n<pre><code>define([], function() {\n    &apos;use strict&apos;;\n    class QueryString {\n        constructor(){\n            let search = window.location.search.substring(1).split(&apos;&amp;&apos;);\n            let tempGroup = [];\n\n            for (let p of search) {\n                tempGroup.push(p.split(&apos;=&apos;));\n            }\n            this.params = new Map(tempGroup);\n        }\n\n        getValue(name){\n            return this.params.get(name);\n        }\n    }\n\n    let queryString = new QueryString();\n    return queryString;\n});\n</code></pre><p>Draggable.js用于添加拖动功能，在创建时，传入需要拖动的元素，这个元素就能拖动了。</p>\n<pre><code>define([], function() {\n    &apos;use strict&apos;;\n    class Draggable {\n        constructor($container) {\n            this.$container = $container;\n            for (let subContainer of $container.children()) {\n                this._handleEvents($(subContainer));\n            }\n        }\n\n        _handleEvents($subContainer) {\n            $subContainer.on(&apos;mousedown&apos;, (e) =&gt; {\n                if (!$(e.target).hasClass(&apos;button&apos;)) {\n                    this._handleMousedown(e);\n                }\n            });\n\n            $(document).on(&apos;mousemove&apos;, (e) =&gt; {\n                if (!$(e.target).hasClass(&apos;button&apos;)) {\n                    this._handleMousemove(e);\n                }\n            });\n\n            $(document).on(&apos;mouseup&apos;, (e) =&gt; {\n                if (!$(e.target).hasClass(&apos;button&apos;)) {\n                    this._handleMouseup(e);\n                }\n            });\n        }\n\n        _handleMousedown(e) {\n            let {left, top} = this.$container.css([&apos;left&apos;, &apos;top&apos;]);\n            this.offsetX = this._parseStr(left) - e.clientX;\n            this.offsetY = this._parseStr(top) - e.clientY;\n            this.mouseDown = true;\n        }\n\n        _handleMousemove(e) {\n            $(e.target).css(&apos;cursor&apos;, &apos;url(/images/m1.cur),default !important&apos;);\n            if (this.mouseDown) {\n                let x = e.clientX;\n                let y = e.clientY;\n                let positionX = x + this.offsetX;\n                let positionY = y + this.offsetY;\n                this.$container.css({\n                    left: positionX,\n                    top: positionY,\n                });\n            }\n        }\n\n        _handleMouseup(e) {\n            $(e.target).css(&apos;cursor&apos;, &apos;url(/images/m1.cur),default !important&apos;);\n            this.mouseDown = false;\n        }\n\n        _parseStr(str) {\n            if(typeof str !== &apos;string&apos;){\n                str += &apos;&apos;; \n            }\n            return Number(str.split(&apos;px&apos;)[0]);\n        }\n    }\n\n    return Draggable;\n});\n</code></pre><p>Rain.js用于添加鼠标点击效果，创建之后，在整个网页中，除了class中有button的元素，其他都会在点击时，出现像雨滴落在地上的效果。</p>\n<pre><code>define([], function() {\n    &apos;use strict&apos;;\n    class Rain {\n        constructor() {\n            this.settings = {\n                width: 10,\n                height: 10,\n                borderColor: &apos;#c6cac9&apos;,\n                opacity: 0.7,\n                borderRadius: 5,\n                borderWidth: 5,\n                maxWidth: 70,\n                widthOffset: 2,\n                radiusOffset: 1,\n                opacityOffset: 0.05,\n                borderOffset: 1,\n                position: &apos;fixed&apos;,\n                zIndex: 100,\n                borderStyle: &apos;solid&apos;,\n                class: &apos;rain&apos;,\n            };\n            this._handleEvents();\n        }\n\n        _handleEvents() {\n            let settings = this.settings;\n            $(document).on(&apos;click&apos;, (e) =&gt; {\n                if($(e.target).hasClass(&apos;button&apos;)){\n                    return;\n                }\n                let $rain = $(&apos;&lt;div&gt;&apos;).attr(&apos;class&apos;, settings.class).css({\n                    position: settings.position,\n                    zIndex: settings.zIndex,\n                    borderStyle: settings.borderStyle,\n                });\n                $(&apos;body&apos;).append($rain);\n                let x = e.clientX;\n                let y = e.clientY;\n                this._initRain($rain, x, y);\n                this._updateRain($rain, x, y);\n            });\n        }\n\n        _updateRain($rain, x, y) {\n            let settings = this.settings;\n            let rainThread = setInterval( () =&gt; {\n                let {width, height,top, left, opacity, borderWidth, borderRadius} = $rain.css([&apos;width&apos;, &apos;height&apos;,&apos;top&apos;, &apos;left&apos;, &apos;opacity&apos;, &apos;borderWidth&apos;, &apos;borderRadius&apos;]);\n                $rain.css({\n                    width: this._parseStr(width) + settings.widthOffset,\n                    height: this._parseStr(height) + settings.widthOffset,\n                    top: y - this._parseStr(height) / 2,\n                    left: x - this._parseStr(width) / 2,\n                    opacity: this._parseStr(opacity) - settings.opacityOffset,\n                    borderWidth: this._parseStr(borderWidth) + settings.borderOffset,\n                    borderRadius: this._parseStr(borderRadius) + settings.radiusOffset,\n                });\n                if (this._parseStr(width) &gt; settings.maxWidth) {\n                    clearInterval(rainThread);\n                    $rain.remove();\n                }\n            }, 10);\n        }\n\n        _initRain($rain, x, y) {\n            let settings = this.settings;\n            $rain.css({\n                width: settings.width,\n                height: settings.height,\n                borderColor: settings.borderColor,\n                opacity: settings.opacity,\n                borderRadius: settings.borderRadius,\n                borderWidth: settings.borderWidth,\n                top: y - this._parseStr(settings.height) / 2,\n                left: x - this._parseStr(settings.width) / 2,\n            });\n        }\n\n        _parseStr(str){\n            if(typeof str !== &apos;string&apos;){\n                str += &apos;&apos;; \n            }\n            return Number(str.split(&apos;px&apos;)[0]);\n        }\n\n    }\n\n    return Rain;\n});\n</code></pre><p>最后一个要介绍的是Message.js，它是一个全局提示的工具，项目中使用它做ajax返回信息的控制，做聊天室消息预览等。当有一些信息要发送给用户时，会在浏览器的右上角出现对话框，包含信息标题，信息内容等。并且分为几种类型的提示，不同类型会有不同主题的对话框出现。由于代码太多，这里只列出了它的构造方法。</p>\n<pre><code>constructor(type, content) {\n    this.title = &apos;&apos;;\n    this.content = content;\n    this.showTime = 5000;\n    this.clearTime = 1000;\n    this.clearThread = null;\n    this.timeThread = null;\n    this.$Message = $(&apos;&lt;div&gt;&apos;).css({\n        color: &apos;#fff&apos;,\n        borderRadius: 5,\n        width: 300,\n        display: &apos;none&apos;,\n        zIndex: 110,\n        margin: &apos;2px 5px&apos;,\n        clear: &apos;both&apos;,\n        float: &apos;right&apos;,\n        position: &apos;relative&apos;,\n        boxShadow: &apos;0px 0px 10px rgba(255, 255, 255, 1)&apos;,\n        opacity: 0.9,\n    }).addClass(&apos;message&apos;);\n\n    this.$icon = $(&apos;&lt;i&gt;&apos;).css({\n        display: &apos;inline-block&apos;,\n        float: &apos;left&apos;,\n        marginLeft: 10,\n        width: 20,\n        textAlign: &apos;center&apos;,\n        fontSize: &apos;1.2em&apos;,\n    }).addClass(&apos;msgIcon&apos;).appendTo(this.$Message);\n\n    this.$title = $(&apos;&lt;div&gt;&apos;).css({\n        height: &apos;45%&apos;,\n        width: 260,\n        float: &apos;right&apos;,\n        fontSize: &apos;1.2em&apos;,\n    }).addClass(&apos;msgTitle&apos;).appendTo(this.$Message);\n\n    this.$time = $(&apos;&lt;span&gt;&apos;).css({\n        position: &apos;absolute&apos;,\n        top: 2,\n        right: 2,\n        fontSize: &apos;0.7em&apos;,\n    }).addClass(&apos;msgTime&apos;).appendTo(this.$Message);\n\n    this.$content = $(&apos;&lt;div&gt;&apos;).css({\n        float: &apos;right&apos;,\n        height: &apos;56%&apos;,\n        width: 260,\n        paddingBottom: 5,\n        paddingRight: 5,\n        fontSize: &apos;0.8em&apos;,\n    }).addClass(&apos;msgContent&apos;).appendTo(this.$Message);\n\n    switch (type) {\n        case &apos;infor&apos;:\n            this.title = &apos;提示&apos;;\n            this._infor();\n            break;\n        case &apos;success&apos;:\n            this.title = &apos;成功&apos;;\n            this._success();\n            break;\n        case &apos;error&apos;:\n            this.title = &apos;错误&apos;;\n            this._error();\n            break;\n        case &apos;warning&apos;:\n            this.title = &apos;警告&apos;;\n            this._warning();\n            break;\n        case &apos;message&apos;:\n            this._message();\n            break;\n        default:\n            break;\n}\n</code></pre><h3 id=\"总结\"><a href=\"#总结\" class=\"headerlink\" title=\"总结\"></a>总结</h3><p>写代码很重要，调试也很重要，好的调试方法，可以更快的发现、解决问题。正视错误，用积极的态度去处理错误，会提升自己面临问题时的处理能力。</p>\n","site":{"data":{}},"excerpt":"<p><img src=\"/images/chatHome.png\" alt=\"ap\"><br>项目涉及技术：RequireJS, Vue.js, NodeJS, Express, MongoDB, Bootstrap, WebSocket, JQuery, ES2015。<br>","more":"<br>应用平台WEB版，是为了做一个网页版的APP store，也就是可以扩展出其他应用的一个平台。目前平台除了搭建了基本的结构之外，还做了一个简单的一对一聊天应用和简单的博客系统。下面将进行简单的介绍，源代码可在demo大师上下载：（<a href=\"http://www.demodashi.com/demo/12539.html\" target=\"_blank\" rel=\"noopener\">源码</a>）。也可以点击下载（<a href=\"/other/AP_WEB.wmv\">应用说明视频</a>）介绍。</p>\n<h3 id=\"图文介绍\"><a href=\"#图文介绍\" class=\"headerlink\" title=\"图文介绍\"></a>图文介绍</h3><p><img src=\"/images/signIn.png\" alt=\"ap\"></p>\n<p>这是登录页面，可以使用用户名和验证了的邮箱登录。</p>\n<p><img src=\"/images/signUp.png\" alt=\"ap\"></p>\n<p>这是注册页面，很简单的注册一下。 </p>\n<p><img src=\"/images/resetPwd.png\" alt=\"ap\"></p>\n<p>这是重置密码页面，需要通过验证邮箱的随机码，来实现重置密码。主要是通过后台服务器向邮箱发送信息。</p>\n<p><img src=\"/images/chatHome.png\" alt=\"ap\"></p>\n<p>这是主模块，包含登录用户的信息显示，并且可以随意设置。可以修改头像，设置状态，还可以添加邮箱，设置是否有消息提示音和提示框。还有就是显示自己的好友分组信息。可以任意修改分组。</p>\n<p><img src=\"/images/homeAndRoom.png\" alt=\"ap\"></p>\n<p>图的右边就是聊天的窗口，可以同时和多个人聊天，都会列在左边，点击就能切换聊天对象。窗口可以通过关闭所有聊天对象来关闭，或者通过右上角关闭按钮关闭。消息中可以发送一些表情。可以发送抖动窗口的消息。</p>\n<p><img src=\"/images/docs.png\" alt=\"ap\"></p>\n<p>这个应用是聊天主页的按钮点击出来的，可以显示一些简单的文档，并且可以点击喜欢某个文档，以及添加简单的评论信息。</p>\n<h3 id=\"后端代码介绍\"><a href=\"#后端代码介绍\" class=\"headerlink\" title=\"后端代码介绍\"></a>后端代码介绍</h3><p>Email.js: 用于发送邮件。</p>\n<pre><code>&apos;use strict&apos;;\nconst nodemailer = require(&apos;nodemailer&apos;);\nconst Config = require(&apos;./Config&apos;);\n\nclass Email {\n    constructor(to, subject, text, html) {\n        this.config = {\n            service: &apos;126&apos;,\n            auth: {\n                user: Config.EMAIL_SERVER,\n                pass: Config.EMAIL_PWD            \n            }\n        };\n        this.mailOptions = {\n            from: Config.EMAIL_SERVER,\n            to: to,\n            subject: subject,\n            text: text,\n            //html: html\n        };\n        this._send();\n    }\n\n    _send() {\n        let transporter = nodemailer.createTransport(this.config);\n        transporter.sendMail(this.mailOptions, function (error, info) {\n            if (error) {\n                return console.log(error);\n            }\n            console.log(&apos;Message sent: &apos; + info.response);\n            transporter.close();\n        });\n    }\n}\n\nmodule.exports = Email;\n</code></pre><p>Server.js: 作为服务器，并且是Websocket的父类。</p>\n<pre><code>&apos;use strict&apos;;\n\nconst express = require(&apos;express&apos;);\nconst http = require(&apos;http&apos;);\nconst socket = require(&apos;socket.io&apos;);\nconst Router = require(&apos;./Router&apos;);\nconst bodyParser = require(&apos;body-parser&apos;);\n\nclass Server{\n    constructor(port){\n        this.port = port;\n        this.app = express();\n        this.server = http.createServer(this.app);\n        this.io = socket.listen(this.server);\n        this._run();\n    }\n\n    _run(){\n        this.server.listen(this.port);\n        this.app.use(bodyParser.json());\n        this.app.use(bodyParser.urlencoded({ extended: false }));\n        this.app.use(express.static(__dirname.replace(/server\\\\core/, &apos;app&apos;)));\n        new Router(this.app);\n        console.log(&apos;HTTP listening: 127.0.0.1:&apos; + this.port);\n    }\n}\n\nmodule.exports = Server;\n</code></pre><p>User.js: 和用户相关的所有接口都在这里。下面是一个获取验证码的接口，在获取请求后，会随机生成五位数验证码，发送到用户的邮箱中，并且在生成验证码的同时，会调用删除验证码的方法，在一定时间内将此验证码删除，那么用户就不能再使用此验证码修改密码了。</p>\n<pre><code>_getCode(){\n    this.app.get(&apos;/getCode&apos;, (req, res) =&gt; {\n        let email = req.query.email;\n        let code = &apos;&apos;;\n        for(let i = 0; i &lt; 5; i++){\n            code += Math.floor(Math.random() * 10);\n        }\n        let queryData = {\n            email: email\n        };\n        let updateData = {\n            code: code\n        };\n        let callback = (db) =&gt; {\n            let collection = db.collection(this.userCollection);\n            collection.updateOne(queryData, {$set: updateData}, (err, result) =&gt; {\n                assert.equal(null, err);\n                db.close();\n                if(result.result.n === 1){\n                    new Email(email, &apos;重置密码&apos;, &apos;你的验证码是：&apos; + code);\n                    this._removeCode(email);\n                    res.send({status: &apos;success&apos;, text: &apos;验证码已发往你的邮箱，请查收。30分钟内有效。&apos;});\n                }else{\n                    res.send({status: &apos;error&apos;, text: &apos;没有此邮箱，或许你需要注册账号。&apos;});\n                }\n            });\n        };\n        new MongoDB(this.currentDB, callback);\n    });\n}\n</code></pre><h3 id=\"前端代码介绍\"><a href=\"#前端代码介绍\" class=\"headerlink\" title=\"前端代码介绍\"></a>前端代码介绍</h3><p>前端模块化采用的是RequireJS，AP_WEB2.0会使用Webpack,那时候会使用ES2015的模块管理。前端的代码较多，这里主要介绍下自己写的特别的功能。QueryString.js用户获取url上的参数信息。</p>\n<pre><code>define([], function() {\n    &apos;use strict&apos;;\n    class QueryString {\n        constructor(){\n            let search = window.location.search.substring(1).split(&apos;&amp;&apos;);\n            let tempGroup = [];\n\n            for (let p of search) {\n                tempGroup.push(p.split(&apos;=&apos;));\n            }\n            this.params = new Map(tempGroup);\n        }\n\n        getValue(name){\n            return this.params.get(name);\n        }\n    }\n\n    let queryString = new QueryString();\n    return queryString;\n});\n</code></pre><p>Draggable.js用于添加拖动功能，在创建时，传入需要拖动的元素，这个元素就能拖动了。</p>\n<pre><code>define([], function() {\n    &apos;use strict&apos;;\n    class Draggable {\n        constructor($container) {\n            this.$container = $container;\n            for (let subContainer of $container.children()) {\n                this._handleEvents($(subContainer));\n            }\n        }\n\n        _handleEvents($subContainer) {\n            $subContainer.on(&apos;mousedown&apos;, (e) =&gt; {\n                if (!$(e.target).hasClass(&apos;button&apos;)) {\n                    this._handleMousedown(e);\n                }\n            });\n\n            $(document).on(&apos;mousemove&apos;, (e) =&gt; {\n                if (!$(e.target).hasClass(&apos;button&apos;)) {\n                    this._handleMousemove(e);\n                }\n            });\n\n            $(document).on(&apos;mouseup&apos;, (e) =&gt; {\n                if (!$(e.target).hasClass(&apos;button&apos;)) {\n                    this._handleMouseup(e);\n                }\n            });\n        }\n\n        _handleMousedown(e) {\n            let {left, top} = this.$container.css([&apos;left&apos;, &apos;top&apos;]);\n            this.offsetX = this._parseStr(left) - e.clientX;\n            this.offsetY = this._parseStr(top) - e.clientY;\n            this.mouseDown = true;\n        }\n\n        _handleMousemove(e) {\n            $(e.target).css(&apos;cursor&apos;, &apos;url(/images/m1.cur),default !important&apos;);\n            if (this.mouseDown) {\n                let x = e.clientX;\n                let y = e.clientY;\n                let positionX = x + this.offsetX;\n                let positionY = y + this.offsetY;\n                this.$container.css({\n                    left: positionX,\n                    top: positionY,\n                });\n            }\n        }\n\n        _handleMouseup(e) {\n            $(e.target).css(&apos;cursor&apos;, &apos;url(/images/m1.cur),default !important&apos;);\n            this.mouseDown = false;\n        }\n\n        _parseStr(str) {\n            if(typeof str !== &apos;string&apos;){\n                str += &apos;&apos;; \n            }\n            return Number(str.split(&apos;px&apos;)[0]);\n        }\n    }\n\n    return Draggable;\n});\n</code></pre><p>Rain.js用于添加鼠标点击效果，创建之后，在整个网页中，除了class中有button的元素，其他都会在点击时，出现像雨滴落在地上的效果。</p>\n<pre><code>define([], function() {\n    &apos;use strict&apos;;\n    class Rain {\n        constructor() {\n            this.settings = {\n                width: 10,\n                height: 10,\n                borderColor: &apos;#c6cac9&apos;,\n                opacity: 0.7,\n                borderRadius: 5,\n                borderWidth: 5,\n                maxWidth: 70,\n                widthOffset: 2,\n                radiusOffset: 1,\n                opacityOffset: 0.05,\n                borderOffset: 1,\n                position: &apos;fixed&apos;,\n                zIndex: 100,\n                borderStyle: &apos;solid&apos;,\n                class: &apos;rain&apos;,\n            };\n            this._handleEvents();\n        }\n\n        _handleEvents() {\n            let settings = this.settings;\n            $(document).on(&apos;click&apos;, (e) =&gt; {\n                if($(e.target).hasClass(&apos;button&apos;)){\n                    return;\n                }\n                let $rain = $(&apos;&lt;div&gt;&apos;).attr(&apos;class&apos;, settings.class).css({\n                    position: settings.position,\n                    zIndex: settings.zIndex,\n                    borderStyle: settings.borderStyle,\n                });\n                $(&apos;body&apos;).append($rain);\n                let x = e.clientX;\n                let y = e.clientY;\n                this._initRain($rain, x, y);\n                this._updateRain($rain, x, y);\n            });\n        }\n\n        _updateRain($rain, x, y) {\n            let settings = this.settings;\n            let rainThread = setInterval( () =&gt; {\n                let {width, height,top, left, opacity, borderWidth, borderRadius} = $rain.css([&apos;width&apos;, &apos;height&apos;,&apos;top&apos;, &apos;left&apos;, &apos;opacity&apos;, &apos;borderWidth&apos;, &apos;borderRadius&apos;]);\n                $rain.css({\n                    width: this._parseStr(width) + settings.widthOffset,\n                    height: this._parseStr(height) + settings.widthOffset,\n                    top: y - this._parseStr(height) / 2,\n                    left: x - this._parseStr(width) / 2,\n                    opacity: this._parseStr(opacity) - settings.opacityOffset,\n                    borderWidth: this._parseStr(borderWidth) + settings.borderOffset,\n                    borderRadius: this._parseStr(borderRadius) + settings.radiusOffset,\n                });\n                if (this._parseStr(width) &gt; settings.maxWidth) {\n                    clearInterval(rainThread);\n                    $rain.remove();\n                }\n            }, 10);\n        }\n\n        _initRain($rain, x, y) {\n            let settings = this.settings;\n            $rain.css({\n                width: settings.width,\n                height: settings.height,\n                borderColor: settings.borderColor,\n                opacity: settings.opacity,\n                borderRadius: settings.borderRadius,\n                borderWidth: settings.borderWidth,\n                top: y - this._parseStr(settings.height) / 2,\n                left: x - this._parseStr(settings.width) / 2,\n            });\n        }\n\n        _parseStr(str){\n            if(typeof str !== &apos;string&apos;){\n                str += &apos;&apos;; \n            }\n            return Number(str.split(&apos;px&apos;)[0]);\n        }\n\n    }\n\n    return Rain;\n});\n</code></pre><p>最后一个要介绍的是Message.js，它是一个全局提示的工具，项目中使用它做ajax返回信息的控制，做聊天室消息预览等。当有一些信息要发送给用户时，会在浏览器的右上角出现对话框，包含信息标题，信息内容等。并且分为几种类型的提示，不同类型会有不同主题的对话框出现。由于代码太多，这里只列出了它的构造方法。</p>\n<pre><code>constructor(type, content) {\n    this.title = &apos;&apos;;\n    this.content = content;\n    this.showTime = 5000;\n    this.clearTime = 1000;\n    this.clearThread = null;\n    this.timeThread = null;\n    this.$Message = $(&apos;&lt;div&gt;&apos;).css({\n        color: &apos;#fff&apos;,\n        borderRadius: 5,\n        width: 300,\n        display: &apos;none&apos;,\n        zIndex: 110,\n        margin: &apos;2px 5px&apos;,\n        clear: &apos;both&apos;,\n        float: &apos;right&apos;,\n        position: &apos;relative&apos;,\n        boxShadow: &apos;0px 0px 10px rgba(255, 255, 255, 1)&apos;,\n        opacity: 0.9,\n    }).addClass(&apos;message&apos;);\n\n    this.$icon = $(&apos;&lt;i&gt;&apos;).css({\n        display: &apos;inline-block&apos;,\n        float: &apos;left&apos;,\n        marginLeft: 10,\n        width: 20,\n        textAlign: &apos;center&apos;,\n        fontSize: &apos;1.2em&apos;,\n    }).addClass(&apos;msgIcon&apos;).appendTo(this.$Message);\n\n    this.$title = $(&apos;&lt;div&gt;&apos;).css({\n        height: &apos;45%&apos;,\n        width: 260,\n        float: &apos;right&apos;,\n        fontSize: &apos;1.2em&apos;,\n    }).addClass(&apos;msgTitle&apos;).appendTo(this.$Message);\n\n    this.$time = $(&apos;&lt;span&gt;&apos;).css({\n        position: &apos;absolute&apos;,\n        top: 2,\n        right: 2,\n        fontSize: &apos;0.7em&apos;,\n    }).addClass(&apos;msgTime&apos;).appendTo(this.$Message);\n\n    this.$content = $(&apos;&lt;div&gt;&apos;).css({\n        float: &apos;right&apos;,\n        height: &apos;56%&apos;,\n        width: 260,\n        paddingBottom: 5,\n        paddingRight: 5,\n        fontSize: &apos;0.8em&apos;,\n    }).addClass(&apos;msgContent&apos;).appendTo(this.$Message);\n\n    switch (type) {\n        case &apos;infor&apos;:\n            this.title = &apos;提示&apos;;\n            this._infor();\n            break;\n        case &apos;success&apos;:\n            this.title = &apos;成功&apos;;\n            this._success();\n            break;\n        case &apos;error&apos;:\n            this.title = &apos;错误&apos;;\n            this._error();\n            break;\n        case &apos;warning&apos;:\n            this.title = &apos;警告&apos;;\n            this._warning();\n            break;\n        case &apos;message&apos;:\n            this._message();\n            break;\n        default:\n            break;\n}\n</code></pre><h3 id=\"总结\"><a href=\"#总结\" class=\"headerlink\" title=\"总结\"></a>总结</h3><p>写代码很重要，调试也很重要，好的调试方法，可以更快的发现、解决问题。正视错误，用积极的态度去处理错误，会提升自己面临问题时的处理能力。</p>"},{"title":"对象的扩展","date":"2017-06-22T11:57:38.000Z","_content":"\n\n\n\n## 对象的扩展\n\n### 属性，方法的简洁写法\n\n* 属性名为变量名，属性值为变量值。\n\n<!--more-->\n\n  ```\n  const name = 'lrh';\n  const age = 19;\n  const person = {\n    name,\n    age,\n  };\n\n  //用于方法返回值\n  function getInfor() {\n    const name = 'lrh';\n    const age = 18;\n    return {name, age};\n  }\n  ```\n\n* 方法的简写\n\n  ```\n  const age = 18;\n  const person = {\n      name: 'lrh',\n      age,\n      getName() {\n        return this.name\n      }\n  }\n  ```\n\n\n\n\n\n\n\n### 属性名可以使用表达式\n\n```\n//ES5定义对象的属性\nconst person = {};\nperson.name = 'lrh';\nperson.['a' + 'ge'] = 18;\n\n//ES5使用字面量定义属性时，只有下面一种方式\nconst person = {\n  name: 'lrh',\n  age: 18\n};\n\n//ES6可以使用表达式为对象字面量定义属性\nconst person = {\n  name: 'lrh',\n  ['a' + 'ge']: 18\n};\n```\n\n\n\n\n\n\n\n### 使用Object.is()方法比较两个值相等\n\n* 相等运算符（==）会自动转换数据类型。\n* 严格相等运算符（===）会导致NaN不等于NaN，+0等于-0。\n* Object.is()方法与严格相等基本一致，并弥补了以上两个不足。\n\n  ```\n  NaN === NaN;\n  +0 === -0;\n  Object.is(NaN, NaN);\n  Object.is(+0, -0);\n  ```\n\n\n\n\n\n### 使用Object.assign()方法浅拷贝对象\n\n* 将源对象合并到目标对象\n\n* 如果有同名属性，源对象的属性会覆盖掉目标对象的属性。\n\n* 该方法是浅拷贝，即如果源对象的某个属性值是对象，那么目标对象拷贝的是这个对象的引用，源对象的任何变化，都会反映到目标对象上。\n\n  ```\n    const target = {a: 1};\n    const source1 = {b: 2};\n    const source2 = {c: 3};\n    Object.assign(target, source1, source2);\n    target;//{ a: 1, b: 2, c: 3 }\n  ```\n\n* 常见用途\n\n  1. 为对象添加属性\n\n    ```\n    class Person{\n    \tconstructor(name, age) {\n          Object.assign(this, {name, age});\n    \t}\n    }\n\n    new Person('lrh', 18); \n\n    ```\n\n  2. 为对象添加方法\n\n\n     ```\n     class Person{\n       constructor(name, age) {\n         Object.assign(this, {name, age});\n       }\n     }\n    \n     Object.assign(Person.prototype, {\n       getName() {\n         return this.name;\n       },\n       getAge() {\n         return this.age;\n       }\n     });\n    \n     new Person('lrh', 18).getName();//lrh\n    \n     //等同于\n     Person.prototype.getName = function() {\n       return this.name;\n     };\n     ```\n\n  3. 克隆对象\n\n     ```\n     const person = {\n       name: 'lrh',\n       age: 18\n     };\n\n     const p = Object.assign({}, person);//{ name: 'lrh', age: 18 }\n     Object.is(person, p);//false\n     ```\n\n  4. 合并对象\n\n     ```tiki wiki\n     const source1 = {name: 'lrh'};\n     const source2 = {age: 18};\n     const p = Object.assign({}, source1, source2);//{ name: 'lrh', age: 18 }\n     ```\n\n  5. 为属性指定默认值\n\n     ```\n     const options = {\n       container: '#wrap',\n       draggable: true,\n       resizable: true,\n       blinkTime: 4000\n     };\n\n     class Draggable{\n       constructor(options) {\n         const DEFAULT = {\n           container: '',\n           draggable: true,\n           resizable: false,\n         }\n         this.options = Object.assign({}, DEFAULT, options);\n       }\n     }\n     ```\n\n     ​\n\n### 遍历属性\n\n* for...in遍历对象自身的和继承的可枚举属性，不包含Symbol属性。\n\n  ```\n  class Person{\n    constructor(name, age) {\n      Object.assign(this, {name, age});\n    }\n  }\n\n  Person.prototype.type = 'Person';\n\n  const person = new Person('lrh', 18, 'male');\n  for (let p in person) {\n    console.log(p);\n  }\n  //name\n  //age\n  //gender\n\n  for (let p in person) {\n    if (person.hasOwnProperty(p)) {\n      console.log(p);\n    }\n  }\n  //name\n  //age\n  ```\n\n* Object.keys(obj)返回一个数组，包含对象自身所有的可枚举属性，不包含继承的属性，不包含Symbol属性。\n\n  ```\n  const type = Symbol('type');\n  const person = {\n    name: 'lrh',\n    age: 18,\n    [type]: 'Student'\n  };\n  Object.keys(person);//['name', 'age']\n  ```\n\n* Object.getOwnPropertyNames(obj)返回一个数组，包含对象自身所有的可枚举属性和不可枚举属性，不包含Symbol属性。\n\n  ```\n  const arr = [1, 2, 3]\n  Object.getOwnPropertyNames(arr);//['0', '1', '2', 'length']\n  ```\n\n* Object.getOwnPropertySymbols(obj)返回一个数组，包含所有Symbol属性。\n\n* Reflect.ownKeys(obj)返回一个数组，包含所有可枚举属性，不可枚举属性，Symbol属性。\n\n* ES2015新增遍历法：Object.keys()， ES2017新增遍历方法：Object.values(), Object.entries()。\n\n  ```\n  const person = {\n    name: 'lrh',\n    age: 18\n  };\n  Object.keys(person);//[ 'name', 'age' ]\n  Object.values(person);//[ 'lrh', 18 ]\n  Object.entries(person);//[ [ 'name', 'lrh' ], [ 'age', 18 ] ]\n\n  //自己实现entries()方法\n  function* entries(obj) {\n    for (let key of Object.keys(obj)) {\n      yield [key, obj[key]];\n    }\n  }\n\n  let personEntries = entries(person);\n  for(let p of personEntries) {\n    console.log(p)\n  }\n  //[ 'name', 'lrh' ]\n  //[ 'age', 18 ]\n\n  //如果没有使用entries()方法，可以给Symbol.iterator配置默认的迭代器\n  Object.assign(person, {\n    * [Symbol.iterator]() {\n      for (let key of Object.keys(this)) {\n        yield [key, this[key]];\n      }\n    }\n  });\n  for (let entries of person) {\n    console.log(entries);\n  }\n  //[ 'name', 'lrh' ]\n  //[ 'age', 18 ]\n  ```\n\n\n\n\n\n### 使用扩展运算符\n\n* 扩展运算符是用于操作数组的\n\n* ES2018将这个运算符引入到了对象中\n\n* 用于取出参数对象的所有可遍历属性，拷贝到当前对象中，等同于使用Object.assign()。\n\n  ```\n  const person = {\n    name: 'lrh',\n    age: 18\n  };\n  const p = {...person, type: 'student'};\n  p;//{ name: 'lrh', age: 18, type: 'student' }\n  ```\n\n  ​","source":"_posts/对象的扩展.md","raw":"\n---\ntitle: 对象的扩展\ndate: 2017-06-22 19:57:38\ntags: ES6\n---\n\n\n\n\n## 对象的扩展\n\n### 属性，方法的简洁写法\n\n* 属性名为变量名，属性值为变量值。\n\n<!--more-->\n\n  ```\n  const name = 'lrh';\n  const age = 19;\n  const person = {\n    name,\n    age,\n  };\n\n  //用于方法返回值\n  function getInfor() {\n    const name = 'lrh';\n    const age = 18;\n    return {name, age};\n  }\n  ```\n\n* 方法的简写\n\n  ```\n  const age = 18;\n  const person = {\n      name: 'lrh',\n      age,\n      getName() {\n        return this.name\n      }\n  }\n  ```\n\n\n\n\n\n\n\n### 属性名可以使用表达式\n\n```\n//ES5定义对象的属性\nconst person = {};\nperson.name = 'lrh';\nperson.['a' + 'ge'] = 18;\n\n//ES5使用字面量定义属性时，只有下面一种方式\nconst person = {\n  name: 'lrh',\n  age: 18\n};\n\n//ES6可以使用表达式为对象字面量定义属性\nconst person = {\n  name: 'lrh',\n  ['a' + 'ge']: 18\n};\n```\n\n\n\n\n\n\n\n### 使用Object.is()方法比较两个值相等\n\n* 相等运算符（==）会自动转换数据类型。\n* 严格相等运算符（===）会导致NaN不等于NaN，+0等于-0。\n* Object.is()方法与严格相等基本一致，并弥补了以上两个不足。\n\n  ```\n  NaN === NaN;\n  +0 === -0;\n  Object.is(NaN, NaN);\n  Object.is(+0, -0);\n  ```\n\n\n\n\n\n### 使用Object.assign()方法浅拷贝对象\n\n* 将源对象合并到目标对象\n\n* 如果有同名属性，源对象的属性会覆盖掉目标对象的属性。\n\n* 该方法是浅拷贝，即如果源对象的某个属性值是对象，那么目标对象拷贝的是这个对象的引用，源对象的任何变化，都会反映到目标对象上。\n\n  ```\n    const target = {a: 1};\n    const source1 = {b: 2};\n    const source2 = {c: 3};\n    Object.assign(target, source1, source2);\n    target;//{ a: 1, b: 2, c: 3 }\n  ```\n\n* 常见用途\n\n  1. 为对象添加属性\n\n    ```\n    class Person{\n    \tconstructor(name, age) {\n          Object.assign(this, {name, age});\n    \t}\n    }\n\n    new Person('lrh', 18); \n\n    ```\n\n  2. 为对象添加方法\n\n\n     ```\n     class Person{\n       constructor(name, age) {\n         Object.assign(this, {name, age});\n       }\n     }\n    \n     Object.assign(Person.prototype, {\n       getName() {\n         return this.name;\n       },\n       getAge() {\n         return this.age;\n       }\n     });\n    \n     new Person('lrh', 18).getName();//lrh\n    \n     //等同于\n     Person.prototype.getName = function() {\n       return this.name;\n     };\n     ```\n\n  3. 克隆对象\n\n     ```\n     const person = {\n       name: 'lrh',\n       age: 18\n     };\n\n     const p = Object.assign({}, person);//{ name: 'lrh', age: 18 }\n     Object.is(person, p);//false\n     ```\n\n  4. 合并对象\n\n     ```tiki wiki\n     const source1 = {name: 'lrh'};\n     const source2 = {age: 18};\n     const p = Object.assign({}, source1, source2);//{ name: 'lrh', age: 18 }\n     ```\n\n  5. 为属性指定默认值\n\n     ```\n     const options = {\n       container: '#wrap',\n       draggable: true,\n       resizable: true,\n       blinkTime: 4000\n     };\n\n     class Draggable{\n       constructor(options) {\n         const DEFAULT = {\n           container: '',\n           draggable: true,\n           resizable: false,\n         }\n         this.options = Object.assign({}, DEFAULT, options);\n       }\n     }\n     ```\n\n     ​\n\n### 遍历属性\n\n* for...in遍历对象自身的和继承的可枚举属性，不包含Symbol属性。\n\n  ```\n  class Person{\n    constructor(name, age) {\n      Object.assign(this, {name, age});\n    }\n  }\n\n  Person.prototype.type = 'Person';\n\n  const person = new Person('lrh', 18, 'male');\n  for (let p in person) {\n    console.log(p);\n  }\n  //name\n  //age\n  //gender\n\n  for (let p in person) {\n    if (person.hasOwnProperty(p)) {\n      console.log(p);\n    }\n  }\n  //name\n  //age\n  ```\n\n* Object.keys(obj)返回一个数组，包含对象自身所有的可枚举属性，不包含继承的属性，不包含Symbol属性。\n\n  ```\n  const type = Symbol('type');\n  const person = {\n    name: 'lrh',\n    age: 18,\n    [type]: 'Student'\n  };\n  Object.keys(person);//['name', 'age']\n  ```\n\n* Object.getOwnPropertyNames(obj)返回一个数组，包含对象自身所有的可枚举属性和不可枚举属性，不包含Symbol属性。\n\n  ```\n  const arr = [1, 2, 3]\n  Object.getOwnPropertyNames(arr);//['0', '1', '2', 'length']\n  ```\n\n* Object.getOwnPropertySymbols(obj)返回一个数组，包含所有Symbol属性。\n\n* Reflect.ownKeys(obj)返回一个数组，包含所有可枚举属性，不可枚举属性，Symbol属性。\n\n* ES2015新增遍历法：Object.keys()， ES2017新增遍历方法：Object.values(), Object.entries()。\n\n  ```\n  const person = {\n    name: 'lrh',\n    age: 18\n  };\n  Object.keys(person);//[ 'name', 'age' ]\n  Object.values(person);//[ 'lrh', 18 ]\n  Object.entries(person);//[ [ 'name', 'lrh' ], [ 'age', 18 ] ]\n\n  //自己实现entries()方法\n  function* entries(obj) {\n    for (let key of Object.keys(obj)) {\n      yield [key, obj[key]];\n    }\n  }\n\n  let personEntries = entries(person);\n  for(let p of personEntries) {\n    console.log(p)\n  }\n  //[ 'name', 'lrh' ]\n  //[ 'age', 18 ]\n\n  //如果没有使用entries()方法，可以给Symbol.iterator配置默认的迭代器\n  Object.assign(person, {\n    * [Symbol.iterator]() {\n      for (let key of Object.keys(this)) {\n        yield [key, this[key]];\n      }\n    }\n  });\n  for (let entries of person) {\n    console.log(entries);\n  }\n  //[ 'name', 'lrh' ]\n  //[ 'age', 18 ]\n  ```\n\n\n\n\n\n### 使用扩展运算符\n\n* 扩展运算符是用于操作数组的\n\n* ES2018将这个运算符引入到了对象中\n\n* 用于取出参数对象的所有可遍历属性，拷贝到当前对象中，等同于使用Object.assign()。\n\n  ```\n  const person = {\n    name: 'lrh',\n    age: 18\n  };\n  const p = {...person, type: 'student'};\n  p;//{ name: 'lrh', age: 18, type: 'student' }\n  ```\n\n  ​","slug":"对象的扩展","published":1,"updated":"2018-12-21T04:59:19.435Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjpxle9kx000uh8obijnh9i1q","content":"<h2 id=\"对象的扩展\"><a href=\"#对象的扩展\" class=\"headerlink\" title=\"对象的扩展\"></a>对象的扩展</h2><h3 id=\"属性，方法的简洁写法\"><a href=\"#属性，方法的简洁写法\" class=\"headerlink\" title=\"属性，方法的简洁写法\"></a>属性，方法的简洁写法</h3><ul>\n<li>属性名为变量名，属性值为变量值。</li>\n</ul>\n<a id=\"more\"></a>\n  <figure class=\"highlight actionscript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> name = <span class=\"string\">'lrh'</span>;</span><br><span class=\"line\"><span class=\"keyword\">const</span> age = <span class=\"number\">19</span>;</span><br><span class=\"line\"><span class=\"keyword\">const</span> person = &#123;</span><br><span class=\"line\">  name,</span><br><span class=\"line\">  age,</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//用于方法返回值</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">getInfor</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">const</span> name = <span class=\"string\">'lrh'</span>;</span><br><span class=\"line\">  <span class=\"keyword\">const</span> age = <span class=\"number\">18</span>;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> &#123;name, age&#125;;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<ul>\n<li><p>方法的简写</p>\n<figure class=\"highlight kotlin\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> age = <span class=\"number\">18</span>;</span><br><span class=\"line\"><span class=\"keyword\">const</span> person = &#123;</span><br><span class=\"line\">    name: <span class=\"string\">'lrh'</span>,</span><br><span class=\"line\">    age,</span><br><span class=\"line\">    getName() &#123;</span><br><span class=\"line\">      <span class=\"keyword\">return</span> <span class=\"keyword\">this</span>.name</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n<h3 id=\"属性名可以使用表达式\"><a href=\"#属性名可以使用表达式\" class=\"headerlink\" title=\"属性名可以使用表达式\"></a>属性名可以使用表达式</h3><figure class=\"highlight actionscript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//ES5定义对象的属性</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> person = &#123;&#125;;</span><br><span class=\"line\">person.name = <span class=\"string\">'lrh'</span>;</span><br><span class=\"line\">person.[<span class=\"string\">'a'</span> + <span class=\"string\">'ge'</span>] = <span class=\"number\">18</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//ES5使用字面量定义属性时，只有下面一种方式</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> person = &#123;</span><br><span class=\"line\">  name: <span class=\"string\">'lrh'</span>,</span><br><span class=\"line\">  age: <span class=\"number\">18</span></span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//ES6可以使用表达式为对象字面量定义属性</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> person = &#123;</span><br><span class=\"line\">  name: <span class=\"string\">'lrh'</span>,</span><br><span class=\"line\">  [<span class=\"string\">'a'</span> + <span class=\"string\">'ge'</span>]: <span class=\"number\">18</span></span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n<h3 id=\"使用Object-is-方法比较两个值相等\"><a href=\"#使用Object-is-方法比较两个值相等\" class=\"headerlink\" title=\"使用Object.is()方法比较两个值相等\"></a>使用Object.is()方法比较两个值相等</h3><ul>\n<li>相等运算符（==）会自动转换数据类型。</li>\n<li>严格相等运算符（===）会导致NaN不等于NaN，+0等于-0。</li>\n<li><p>Object.is()方法与严格相等基本一致，并弥补了以上两个不足。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"literal\">NaN</span> === <span class=\"literal\">NaN</span>;</span><br><span class=\"line\">+<span class=\"number\">0</span> === <span class=\"number\">-0</span>;</span><br><span class=\"line\"><span class=\"built_in\">Object</span>.is(<span class=\"literal\">NaN</span>, <span class=\"literal\">NaN</span>);</span><br><span class=\"line\"><span class=\"built_in\">Object</span>.is(+<span class=\"number\">0</span>, <span class=\"number\">-0</span>);</span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n<h3 id=\"使用Object-assign-方法浅拷贝对象\"><a href=\"#使用Object-assign-方法浅拷贝对象\" class=\"headerlink\" title=\"使用Object.assign()方法浅拷贝对象\"></a>使用Object.assign()方法浅拷贝对象</h3><ul>\n<li><p>将源对象合并到目标对象</p>\n</li>\n<li><p>如果有同名属性，源对象的属性会覆盖掉目标对象的属性。</p>\n</li>\n<li><p>该方法是浅拷贝，即如果源对象的某个属性值是对象，那么目标对象拷贝的是这个对象的引用，源对象的任何变化，都会反映到目标对象上。</p>\n<figure class=\"highlight aspectj\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> <span class=\"keyword\">target</span> = &#123;a: 1&#125;;</span><br><span class=\"line\"><span class=\"keyword\">const</span> source1 = &#123;b: 2&#125;;</span><br><span class=\"line\"><span class=\"keyword\">const</span> source2 = &#123;c: 3&#125;;</span><br><span class=\"line\">Object.assign(<span class=\"keyword\">target</span>, source1, source2);</span><br><span class=\"line\"><span class=\"keyword\">target</span>;<span class=\"comment\">//&#123; a: 1, b: 2, c: 3 &#125;</span></span><br></pre></td></tr></table></figure>\n</li>\n<li><p>常见用途</p>\n<ol>\n<li><p>为对象添加属性</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Person</span></span>&#123;</span><br><span class=\"line\">\t<span class=\"keyword\">constructor</span>(name, age) &#123;</span><br><span class=\"line\">      <span class=\"built_in\">Object</span>.assign(<span class=\"keyword\">this</span>, &#123;name, age&#125;);</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">new</span> Person(<span class=\"string\">'lrh'</span>, <span class=\"number\">18</span>);</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>为对象添加方法</p>\n</li>\n</ol>\n</li>\n</ul>\n<pre><code><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Person</span></span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">constructor</span>(name, age) &#123;</span><br><span class=\"line\">    <span class=\"built_in\">Object</span>.assign(<span class=\"keyword\">this</span>, &#123;name, age&#125;);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">    </span><br><span class=\"line\"><span class=\"built_in\">Object</span>.assign(Person.prototype, &#123;</span><br><span class=\"line\">  getName() &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"keyword\">this</span>.name;</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  getAge() &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"keyword\">this</span>.age;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\">    </span><br><span class=\"line\"><span class=\"keyword\">new</span> Person(<span class=\"string\">'lrh'</span>, <span class=\"number\">18</span>).getName();<span class=\"comment\">//lrh</span></span><br><span class=\"line\">    </span><br><span class=\"line\"><span class=\"comment\">//等同于</span></span><br><span class=\"line\">Person.prototype.getName = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> <span class=\"keyword\">this</span>.name;</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n</code></pre><ol start=\"3\">\n<li><p>克隆对象</p>\n<figure class=\"highlight dart\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> person = &#123;</span><br><span class=\"line\">  name: <span class=\"string\">'lrh'</span>,</span><br><span class=\"line\">  age: <span class=\"number\">18</span></span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> p = <span class=\"built_in\">Object</span>.assign(&#123;&#125;, person);<span class=\"comment\">//&#123; name: 'lrh', age: 18 &#125;</span></span><br><span class=\"line\"><span class=\"built_in\">Object</span>.<span class=\"keyword\">is</span>(person, p);<span class=\"comment\">//false</span></span><br></pre></td></tr></table></figure>\n</li>\n<li><p>合并对象</p>\n<figure class=\"highlight plain\"><figcaption><span>wiki</span></figcaption><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">const source1 = &#123;name: &apos;lrh&apos;&#125;;</span><br><span class=\"line\">const source2 = &#123;age: 18&#125;;</span><br><span class=\"line\">const p = Object.assign(&#123;&#125;, source1, source2);//&#123; name: &apos;lrh&apos;, age: 18 &#125;</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>为属性指定默认值</p>\n<figure class=\"highlight yaml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"string\">const</span> <span class=\"string\">options</span> <span class=\"string\">=</span> <span class=\"string\">&#123;</span></span><br><span class=\"line\"><span class=\"attr\">  container:</span> <span class=\"string\">'#wrap'</span><span class=\"string\">,</span></span><br><span class=\"line\"><span class=\"attr\">  draggable:</span> <span class=\"literal\">true</span><span class=\"string\">,</span></span><br><span class=\"line\"><span class=\"attr\">  resizable:</span> <span class=\"literal\">true</span><span class=\"string\">,</span></span><br><span class=\"line\"><span class=\"attr\">  blinkTime:</span> <span class=\"number\">4000</span></span><br><span class=\"line\"><span class=\"string\">&#125;;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"string\">class</span> <span class=\"string\">Draggable&#123;</span></span><br><span class=\"line\">  <span class=\"string\">constructor(options)</span> <span class=\"string\">&#123;</span></span><br><span class=\"line\">    <span class=\"string\">const</span> <span class=\"string\">DEFAULT</span> <span class=\"string\">=</span> <span class=\"string\">&#123;</span></span><br><span class=\"line\"><span class=\"attr\">      container:</span> <span class=\"string\">''</span><span class=\"string\">,</span></span><br><span class=\"line\"><span class=\"attr\">      draggable:</span> <span class=\"literal\">true</span><span class=\"string\">,</span></span><br><span class=\"line\"><span class=\"attr\">      resizable:</span> <span class=\"literal\">false</span><span class=\"string\">,</span></span><br><span class=\"line\">    <span class=\"string\">&#125;</span></span><br><span class=\"line\">    <span class=\"string\">this.options</span> <span class=\"string\">=</span> <span class=\"string\">Object.assign(&#123;&#125;,</span> <span class=\"string\">DEFAULT,</span> <span class=\"string\">options);</span></span><br><span class=\"line\">  <span class=\"string\">&#125;</span></span><br><span class=\"line\"><span class=\"string\">&#125;</span></span><br></pre></td></tr></table></figure>\n<p>​</p>\n</li>\n</ol>\n<h3 id=\"遍历属性\"><a href=\"#遍历属性\" class=\"headerlink\" title=\"遍历属性\"></a>遍历属性</h3><ul>\n<li><p>for…in遍历对象自身的和继承的可枚举属性，不包含Symbol属性。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Person</span></span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">constructor</span>(name, age) &#123;</span><br><span class=\"line\">    <span class=\"built_in\">Object</span>.assign(<span class=\"keyword\">this</span>, &#123;name, age&#125;);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">Person.prototype.type = <span class=\"string\">'Person'</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> person = <span class=\"keyword\">new</span> Person(<span class=\"string\">'lrh'</span>, <span class=\"number\">18</span>, <span class=\"string\">'male'</span>);</span><br><span class=\"line\"><span class=\"keyword\">for</span> (<span class=\"keyword\">let</span> p <span class=\"keyword\">in</span> person) &#123;</span><br><span class=\"line\">  <span class=\"built_in\">console</span>.log(p);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">//name</span></span><br><span class=\"line\"><span class=\"comment\">//age</span></span><br><span class=\"line\"><span class=\"comment\">//gender</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">for</span> (<span class=\"keyword\">let</span> p <span class=\"keyword\">in</span> person) &#123;</span><br><span class=\"line\">  <span class=\"keyword\">if</span> (person.hasOwnProperty(p)) &#123;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(p);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">//name</span></span><br><span class=\"line\"><span class=\"comment\">//age</span></span><br></pre></td></tr></table></figure>\n</li>\n<li><p>Object.keys(obj)返回一个数组，包含对象自身所有的可枚举属性，不包含继承的属性，不包含Symbol属性。</p>\n<figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> <span class=\"keyword\">type</span> = Symbol(<span class=\"string\">'type'</span>);</span><br><span class=\"line\"><span class=\"keyword\">const</span> person = &#123;</span><br><span class=\"line\">  name: <span class=\"string\">'lrh'</span>,</span><br><span class=\"line\">  age: <span class=\"number\">18</span>,</span><br><span class=\"line\">  [<span class=\"keyword\">type</span>]: <span class=\"string\">'Student'</span></span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"><span class=\"built_in\">Object</span>.keys(person);<span class=\"comment\">//['name', 'age']</span></span><br></pre></td></tr></table></figure>\n</li>\n<li><p>Object.getOwnPropertyNames(obj)返回一个数组，包含对象自身所有的可枚举属性和不可枚举属性，不包含Symbol属性。</p>\n<figure class=\"highlight prolog\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">const arr = [<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>]</span><br><span class=\"line\"><span class=\"symbol\">Object</span>.getOwnPropertyNames(arr);//[<span class=\"string\">'0'</span>, <span class=\"string\">'1'</span>, <span class=\"string\">'2'</span>, <span class=\"string\">'length'</span>]</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>Object.getOwnPropertySymbols(obj)返回一个数组，包含所有Symbol属性。</p>\n</li>\n<li><p>Reflect.ownKeys(obj)返回一个数组，包含所有可枚举属性，不可枚举属性，Symbol属性。</p>\n</li>\n<li><p>ES2015新增遍历法：Object.keys()， ES2017新增遍历方法：Object.values(), Object.entries()。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> person = &#123;</span><br><span class=\"line\">  name: <span class=\"string\">'lrh'</span>,</span><br><span class=\"line\">  age: <span class=\"number\">18</span></span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"><span class=\"built_in\">Object</span>.keys(person);<span class=\"comment\">//[ 'name', 'age' ]</span></span><br><span class=\"line\"><span class=\"built_in\">Object</span>.values(person);<span class=\"comment\">//[ 'lrh', 18 ]</span></span><br><span class=\"line\"><span class=\"built_in\">Object</span>.entries(person);<span class=\"comment\">//[ [ 'name', 'lrh' ], [ 'age', 18 ] ]</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//自己实现entries()方法</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span>* <span class=\"title\">entries</span>(<span class=\"params\">obj</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">for</span> (<span class=\"keyword\">let</span> key <span class=\"keyword\">of</span> <span class=\"built_in\">Object</span>.keys(obj)) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">yield</span> [key, obj[key]];</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">let</span> personEntries = entries(person);</span><br><span class=\"line\"><span class=\"keyword\">for</span>(<span class=\"keyword\">let</span> p <span class=\"keyword\">of</span> personEntries) &#123;</span><br><span class=\"line\">  <span class=\"built_in\">console</span>.log(p)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">//[ 'name', 'lrh' ]</span></span><br><span class=\"line\"><span class=\"comment\">//[ 'age', 18 ]</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//如果没有使用entries()方法，可以给Symbol.iterator配置默认的迭代器</span></span><br><span class=\"line\"><span class=\"built_in\">Object</span>.assign(person, &#123;</span><br><span class=\"line\">  * [<span class=\"built_in\">Symbol</span>.iterator]() &#123;</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">let</span> key <span class=\"keyword\">of</span> <span class=\"built_in\">Object</span>.keys(<span class=\"keyword\">this</span>)) &#123;</span><br><span class=\"line\">      <span class=\"keyword\">yield</span> [key, <span class=\"keyword\">this</span>[key]];</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\"><span class=\"keyword\">for</span> (<span class=\"keyword\">let</span> entries <span class=\"keyword\">of</span> person) &#123;</span><br><span class=\"line\">  <span class=\"built_in\">console</span>.log(entries);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">//[ 'name', 'lrh' ]</span></span><br><span class=\"line\"><span class=\"comment\">//[ 'age', 18 ]</span></span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n<h3 id=\"使用扩展运算符\"><a href=\"#使用扩展运算符\" class=\"headerlink\" title=\"使用扩展运算符\"></a>使用扩展运算符</h3><ul>\n<li><p>扩展运算符是用于操作数组的</p>\n</li>\n<li><p>ES2018将这个运算符引入到了对象中</p>\n</li>\n<li><p>用于取出参数对象的所有可遍历属性，拷贝到当前对象中，等同于使用Object.assign()。</p>\n<figure class=\"highlight xquery\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">const person = &#123;</span><br><span class=\"line\">  name: <span class=\"string\">'lrh'</span>,</span><br><span class=\"line\">  age: <span class=\"number\">18</span></span><br><span class=\"line\">&#125;;</span><br><span class=\"line\">const p = &#123;...person, type: <span class=\"string\">'student'</span>&#125;;</span><br><span class=\"line\">p;//&#123; name: <span class=\"string\">'lrh'</span>, age: <span class=\"number\">18</span>, type: <span class=\"string\">'student'</span> &#125;</span><br></pre></td></tr></table></figure>\n<p>​</p>\n</li>\n</ul>\n","site":{"data":{}},"excerpt":"<h2 id=\"对象的扩展\"><a href=\"#对象的扩展\" class=\"headerlink\" title=\"对象的扩展\"></a>对象的扩展</h2><h3 id=\"属性，方法的简洁写法\"><a href=\"#属性，方法的简洁写法\" class=\"headerlink\" title=\"属性，方法的简洁写法\"></a>属性，方法的简洁写法</h3><ul>\n<li>属性名为变量名，属性值为变量值。</li>\n</ul>","more":"<figure class=\"highlight actionscript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> name = <span class=\"string\">'lrh'</span>;</span><br><span class=\"line\"><span class=\"keyword\">const</span> age = <span class=\"number\">19</span>;</span><br><span class=\"line\"><span class=\"keyword\">const</span> person = &#123;</span><br><span class=\"line\">  name,</span><br><span class=\"line\">  age,</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//用于方法返回值</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">getInfor</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">const</span> name = <span class=\"string\">'lrh'</span>;</span><br><span class=\"line\">  <span class=\"keyword\">const</span> age = <span class=\"number\">18</span>;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> &#123;name, age&#125;;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<ul>\n<li><p>方法的简写</p>\n<figure class=\"highlight kotlin\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> age = <span class=\"number\">18</span>;</span><br><span class=\"line\"><span class=\"keyword\">const</span> person = &#123;</span><br><span class=\"line\">    name: <span class=\"string\">'lrh'</span>,</span><br><span class=\"line\">    age,</span><br><span class=\"line\">    getName() &#123;</span><br><span class=\"line\">      <span class=\"keyword\">return</span> <span class=\"keyword\">this</span>.name</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n<h3 id=\"属性名可以使用表达式\"><a href=\"#属性名可以使用表达式\" class=\"headerlink\" title=\"属性名可以使用表达式\"></a>属性名可以使用表达式</h3><figure class=\"highlight actionscript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//ES5定义对象的属性</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> person = &#123;&#125;;</span><br><span class=\"line\">person.name = <span class=\"string\">'lrh'</span>;</span><br><span class=\"line\">person.[<span class=\"string\">'a'</span> + <span class=\"string\">'ge'</span>] = <span class=\"number\">18</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//ES5使用字面量定义属性时，只有下面一种方式</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> person = &#123;</span><br><span class=\"line\">  name: <span class=\"string\">'lrh'</span>,</span><br><span class=\"line\">  age: <span class=\"number\">18</span></span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//ES6可以使用表达式为对象字面量定义属性</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> person = &#123;</span><br><span class=\"line\">  name: <span class=\"string\">'lrh'</span>,</span><br><span class=\"line\">  [<span class=\"string\">'a'</span> + <span class=\"string\">'ge'</span>]: <span class=\"number\">18</span></span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n<h3 id=\"使用Object-is-方法比较两个值相等\"><a href=\"#使用Object-is-方法比较两个值相等\" class=\"headerlink\" title=\"使用Object.is()方法比较两个值相等\"></a>使用Object.is()方法比较两个值相等</h3><ul>\n<li>相等运算符（==）会自动转换数据类型。</li>\n<li>严格相等运算符（===）会导致NaN不等于NaN，+0等于-0。</li>\n<li><p>Object.is()方法与严格相等基本一致，并弥补了以上两个不足。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"literal\">NaN</span> === <span class=\"literal\">NaN</span>;</span><br><span class=\"line\">+<span class=\"number\">0</span> === <span class=\"number\">-0</span>;</span><br><span class=\"line\"><span class=\"built_in\">Object</span>.is(<span class=\"literal\">NaN</span>, <span class=\"literal\">NaN</span>);</span><br><span class=\"line\"><span class=\"built_in\">Object</span>.is(+<span class=\"number\">0</span>, <span class=\"number\">-0</span>);</span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n<h3 id=\"使用Object-assign-方法浅拷贝对象\"><a href=\"#使用Object-assign-方法浅拷贝对象\" class=\"headerlink\" title=\"使用Object.assign()方法浅拷贝对象\"></a>使用Object.assign()方法浅拷贝对象</h3><ul>\n<li><p>将源对象合并到目标对象</p>\n</li>\n<li><p>如果有同名属性，源对象的属性会覆盖掉目标对象的属性。</p>\n</li>\n<li><p>该方法是浅拷贝，即如果源对象的某个属性值是对象，那么目标对象拷贝的是这个对象的引用，源对象的任何变化，都会反映到目标对象上。</p>\n<figure class=\"highlight aspectj\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> <span class=\"keyword\">target</span> = &#123;a: 1&#125;;</span><br><span class=\"line\"><span class=\"keyword\">const</span> source1 = &#123;b: 2&#125;;</span><br><span class=\"line\"><span class=\"keyword\">const</span> source2 = &#123;c: 3&#125;;</span><br><span class=\"line\">Object.assign(<span class=\"keyword\">target</span>, source1, source2);</span><br><span class=\"line\"><span class=\"keyword\">target</span>;<span class=\"comment\">//&#123; a: 1, b: 2, c: 3 &#125;</span></span><br></pre></td></tr></table></figure>\n</li>\n<li><p>常见用途</p>\n<ol>\n<li><p>为对象添加属性</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Person</span></span>&#123;</span><br><span class=\"line\">\t<span class=\"keyword\">constructor</span>(name, age) &#123;</span><br><span class=\"line\">      <span class=\"built_in\">Object</span>.assign(<span class=\"keyword\">this</span>, &#123;name, age&#125;);</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">new</span> Person(<span class=\"string\">'lrh'</span>, <span class=\"number\">18</span>);</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>为对象添加方法</p>\n</li>\n</ol>\n</li>\n</ul>\n<pre><code><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Person</span></span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">constructor</span>(name, age) &#123;</span><br><span class=\"line\">    <span class=\"built_in\">Object</span>.assign(<span class=\"keyword\">this</span>, &#123;name, age&#125;);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">    </span><br><span class=\"line\"><span class=\"built_in\">Object</span>.assign(Person.prototype, &#123;</span><br><span class=\"line\">  getName() &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"keyword\">this</span>.name;</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  getAge() &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"keyword\">this</span>.age;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\">    </span><br><span class=\"line\"><span class=\"keyword\">new</span> Person(<span class=\"string\">'lrh'</span>, <span class=\"number\">18</span>).getName();<span class=\"comment\">//lrh</span></span><br><span class=\"line\">    </span><br><span class=\"line\"><span class=\"comment\">//等同于</span></span><br><span class=\"line\">Person.prototype.getName = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> <span class=\"keyword\">this</span>.name;</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n</code></pre><ol start=\"3\">\n<li><p>克隆对象</p>\n<figure class=\"highlight dart\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> person = &#123;</span><br><span class=\"line\">  name: <span class=\"string\">'lrh'</span>,</span><br><span class=\"line\">  age: <span class=\"number\">18</span></span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> p = <span class=\"built_in\">Object</span>.assign(&#123;&#125;, person);<span class=\"comment\">//&#123; name: 'lrh', age: 18 &#125;</span></span><br><span class=\"line\"><span class=\"built_in\">Object</span>.<span class=\"keyword\">is</span>(person, p);<span class=\"comment\">//false</span></span><br></pre></td></tr></table></figure>\n</li>\n<li><p>合并对象</p>\n<figure class=\"highlight plain\"><figcaption><span>wiki</span></figcaption><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">const source1 = &#123;name: &apos;lrh&apos;&#125;;</span><br><span class=\"line\">const source2 = &#123;age: 18&#125;;</span><br><span class=\"line\">const p = Object.assign(&#123;&#125;, source1, source2);//&#123; name: &apos;lrh&apos;, age: 18 &#125;</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>为属性指定默认值</p>\n<figure class=\"highlight yaml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"string\">const</span> <span class=\"string\">options</span> <span class=\"string\">=</span> <span class=\"string\">&#123;</span></span><br><span class=\"line\"><span class=\"attr\">  container:</span> <span class=\"string\">'#wrap'</span><span class=\"string\">,</span></span><br><span class=\"line\"><span class=\"attr\">  draggable:</span> <span class=\"literal\">true</span><span class=\"string\">,</span></span><br><span class=\"line\"><span class=\"attr\">  resizable:</span> <span class=\"literal\">true</span><span class=\"string\">,</span></span><br><span class=\"line\"><span class=\"attr\">  blinkTime:</span> <span class=\"number\">4000</span></span><br><span class=\"line\"><span class=\"string\">&#125;;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"string\">class</span> <span class=\"string\">Draggable&#123;</span></span><br><span class=\"line\">  <span class=\"string\">constructor(options)</span> <span class=\"string\">&#123;</span></span><br><span class=\"line\">    <span class=\"string\">const</span> <span class=\"string\">DEFAULT</span> <span class=\"string\">=</span> <span class=\"string\">&#123;</span></span><br><span class=\"line\"><span class=\"attr\">      container:</span> <span class=\"string\">''</span><span class=\"string\">,</span></span><br><span class=\"line\"><span class=\"attr\">      draggable:</span> <span class=\"literal\">true</span><span class=\"string\">,</span></span><br><span class=\"line\"><span class=\"attr\">      resizable:</span> <span class=\"literal\">false</span><span class=\"string\">,</span></span><br><span class=\"line\">    <span class=\"string\">&#125;</span></span><br><span class=\"line\">    <span class=\"string\">this.options</span> <span class=\"string\">=</span> <span class=\"string\">Object.assign(&#123;&#125;,</span> <span class=\"string\">DEFAULT,</span> <span class=\"string\">options);</span></span><br><span class=\"line\">  <span class=\"string\">&#125;</span></span><br><span class=\"line\"><span class=\"string\">&#125;</span></span><br></pre></td></tr></table></figure>\n<p>​</p>\n</li>\n</ol>\n<h3 id=\"遍历属性\"><a href=\"#遍历属性\" class=\"headerlink\" title=\"遍历属性\"></a>遍历属性</h3><ul>\n<li><p>for…in遍历对象自身的和继承的可枚举属性，不包含Symbol属性。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Person</span></span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">constructor</span>(name, age) &#123;</span><br><span class=\"line\">    <span class=\"built_in\">Object</span>.assign(<span class=\"keyword\">this</span>, &#123;name, age&#125;);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">Person.prototype.type = <span class=\"string\">'Person'</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> person = <span class=\"keyword\">new</span> Person(<span class=\"string\">'lrh'</span>, <span class=\"number\">18</span>, <span class=\"string\">'male'</span>);</span><br><span class=\"line\"><span class=\"keyword\">for</span> (<span class=\"keyword\">let</span> p <span class=\"keyword\">in</span> person) &#123;</span><br><span class=\"line\">  <span class=\"built_in\">console</span>.log(p);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">//name</span></span><br><span class=\"line\"><span class=\"comment\">//age</span></span><br><span class=\"line\"><span class=\"comment\">//gender</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">for</span> (<span class=\"keyword\">let</span> p <span class=\"keyword\">in</span> person) &#123;</span><br><span class=\"line\">  <span class=\"keyword\">if</span> (person.hasOwnProperty(p)) &#123;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(p);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">//name</span></span><br><span class=\"line\"><span class=\"comment\">//age</span></span><br></pre></td></tr></table></figure>\n</li>\n<li><p>Object.keys(obj)返回一个数组，包含对象自身所有的可枚举属性，不包含继承的属性，不包含Symbol属性。</p>\n<figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> <span class=\"keyword\">type</span> = Symbol(<span class=\"string\">'type'</span>);</span><br><span class=\"line\"><span class=\"keyword\">const</span> person = &#123;</span><br><span class=\"line\">  name: <span class=\"string\">'lrh'</span>,</span><br><span class=\"line\">  age: <span class=\"number\">18</span>,</span><br><span class=\"line\">  [<span class=\"keyword\">type</span>]: <span class=\"string\">'Student'</span></span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"><span class=\"built_in\">Object</span>.keys(person);<span class=\"comment\">//['name', 'age']</span></span><br></pre></td></tr></table></figure>\n</li>\n<li><p>Object.getOwnPropertyNames(obj)返回一个数组，包含对象自身所有的可枚举属性和不可枚举属性，不包含Symbol属性。</p>\n<figure class=\"highlight prolog\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">const arr = [<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>]</span><br><span class=\"line\"><span class=\"symbol\">Object</span>.getOwnPropertyNames(arr);//[<span class=\"string\">'0'</span>, <span class=\"string\">'1'</span>, <span class=\"string\">'2'</span>, <span class=\"string\">'length'</span>]</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>Object.getOwnPropertySymbols(obj)返回一个数组，包含所有Symbol属性。</p>\n</li>\n<li><p>Reflect.ownKeys(obj)返回一个数组，包含所有可枚举属性，不可枚举属性，Symbol属性。</p>\n</li>\n<li><p>ES2015新增遍历法：Object.keys()， ES2017新增遍历方法：Object.values(), Object.entries()。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> person = &#123;</span><br><span class=\"line\">  name: <span class=\"string\">'lrh'</span>,</span><br><span class=\"line\">  age: <span class=\"number\">18</span></span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"><span class=\"built_in\">Object</span>.keys(person);<span class=\"comment\">//[ 'name', 'age' ]</span></span><br><span class=\"line\"><span class=\"built_in\">Object</span>.values(person);<span class=\"comment\">//[ 'lrh', 18 ]</span></span><br><span class=\"line\"><span class=\"built_in\">Object</span>.entries(person);<span class=\"comment\">//[ [ 'name', 'lrh' ], [ 'age', 18 ] ]</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//自己实现entries()方法</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span>* <span class=\"title\">entries</span>(<span class=\"params\">obj</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">for</span> (<span class=\"keyword\">let</span> key <span class=\"keyword\">of</span> <span class=\"built_in\">Object</span>.keys(obj)) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">yield</span> [key, obj[key]];</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">let</span> personEntries = entries(person);</span><br><span class=\"line\"><span class=\"keyword\">for</span>(<span class=\"keyword\">let</span> p <span class=\"keyword\">of</span> personEntries) &#123;</span><br><span class=\"line\">  <span class=\"built_in\">console</span>.log(p)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">//[ 'name', 'lrh' ]</span></span><br><span class=\"line\"><span class=\"comment\">//[ 'age', 18 ]</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//如果没有使用entries()方法，可以给Symbol.iterator配置默认的迭代器</span></span><br><span class=\"line\"><span class=\"built_in\">Object</span>.assign(person, &#123;</span><br><span class=\"line\">  * [<span class=\"built_in\">Symbol</span>.iterator]() &#123;</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">let</span> key <span class=\"keyword\">of</span> <span class=\"built_in\">Object</span>.keys(<span class=\"keyword\">this</span>)) &#123;</span><br><span class=\"line\">      <span class=\"keyword\">yield</span> [key, <span class=\"keyword\">this</span>[key]];</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\"><span class=\"keyword\">for</span> (<span class=\"keyword\">let</span> entries <span class=\"keyword\">of</span> person) &#123;</span><br><span class=\"line\">  <span class=\"built_in\">console</span>.log(entries);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">//[ 'name', 'lrh' ]</span></span><br><span class=\"line\"><span class=\"comment\">//[ 'age', 18 ]</span></span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n<h3 id=\"使用扩展运算符\"><a href=\"#使用扩展运算符\" class=\"headerlink\" title=\"使用扩展运算符\"></a>使用扩展运算符</h3><ul>\n<li><p>扩展运算符是用于操作数组的</p>\n</li>\n<li><p>ES2018将这个运算符引入到了对象中</p>\n</li>\n<li><p>用于取出参数对象的所有可遍历属性，拷贝到当前对象中，等同于使用Object.assign()。</p>\n<figure class=\"highlight xquery\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">const person = &#123;</span><br><span class=\"line\">  name: <span class=\"string\">'lrh'</span>,</span><br><span class=\"line\">  age: <span class=\"number\">18</span></span><br><span class=\"line\">&#125;;</span><br><span class=\"line\">const p = &#123;...person, type: <span class=\"string\">'student'</span>&#125;;</span><br><span class=\"line\">p;//&#123; name: <span class=\"string\">'lrh'</span>, age: <span class=\"number\">18</span>, type: <span class=\"string\">'student'</span> &#125;</span><br></pre></td></tr></table></figure>\n<p>​</p>\n</li>\n</ul>"},{"title":"电脑远程控制工具","date":"2016-12-04T06:12:27.000Z","_content":"\n今天分享的这个项目是用Python写的。通过手机远程控制电脑关机，或者接收指定的文件。\n<!--more-->\n### 图文介绍\n\n通过输入简单的命令，就可以控制目标电脑，当别人在使用自己的电脑时，就可以远程关闭。如果想用来偷看别人电脑的信息，也是很方便的工具。只需要将程序复制到目标电脑中，双击运行一次，此程序就会在后台中悄悄运行，并且每次都会随电脑一起启动。接下来就可以获取此电脑的文件了。下面的第一张图片列出了所有符合的信息的具体地址，第二张拿的是具体的那几张图片。\n\n![ap](/images/pc2.png)\n\n![ap](/images/pc1.png)\n\n\n源代码地址（[点这里](https://github.com/renhongl/PCControl)） ，自己玩玩就好了。。别去偷看别人的隐私。。\n\n\n\n","source":"_posts/电脑远程控制工具.md","raw":"---\ntitle: 电脑远程控制工具\ndate: 2016-12-04 14:12:27\ntags:\n\t- 分享\n---\n\n今天分享的这个项目是用Python写的。通过手机远程控制电脑关机，或者接收指定的文件。\n<!--more-->\n### 图文介绍\n\n通过输入简单的命令，就可以控制目标电脑，当别人在使用自己的电脑时，就可以远程关闭。如果想用来偷看别人电脑的信息，也是很方便的工具。只需要将程序复制到目标电脑中，双击运行一次，此程序就会在后台中悄悄运行，并且每次都会随电脑一起启动。接下来就可以获取此电脑的文件了。下面的第一张图片列出了所有符合的信息的具体地址，第二张拿的是具体的那几张图片。\n\n![ap](/images/pc2.png)\n\n![ap](/images/pc1.png)\n\n\n源代码地址（[点这里](https://github.com/renhongl/PCControl)） ，自己玩玩就好了。。别去偷看别人的隐私。。\n\n\n\n","slug":"电脑远程控制工具","published":1,"updated":"2018-12-21T04:59:19.450Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjpxle9kx000wh8obfsxu3n94","content":"<p>今天分享的这个项目是用Python写的。通过手机远程控制电脑关机，或者接收指定的文件。<br><a id=\"more\"></a></p>\n<h3 id=\"图文介绍\"><a href=\"#图文介绍\" class=\"headerlink\" title=\"图文介绍\"></a>图文介绍</h3><p>通过输入简单的命令，就可以控制目标电脑，当别人在使用自己的电脑时，就可以远程关闭。如果想用来偷看别人电脑的信息，也是很方便的工具。只需要将程序复制到目标电脑中，双击运行一次，此程序就会在后台中悄悄运行，并且每次都会随电脑一起启动。接下来就可以获取此电脑的文件了。下面的第一张图片列出了所有符合的信息的具体地址，第二张拿的是具体的那几张图片。</p>\n<p><img src=\"/images/pc2.png\" alt=\"ap\"></p>\n<p><img src=\"/images/pc1.png\" alt=\"ap\"></p>\n<p>源代码地址（<a href=\"https://github.com/renhongl/PCControl\">点这里</a>） ，自己玩玩就好了。。别去偷看别人的隐私。。</p>\n","site":{"data":{}},"excerpt":"<p>今天分享的这个项目是用Python写的。通过手机远程控制电脑关机，或者接收指定的文件。<br>","more":"</p>\n<h3 id=\"图文介绍\"><a href=\"#图文介绍\" class=\"headerlink\" title=\"图文介绍\"></a>图文介绍</h3><p>通过输入简单的命令，就可以控制目标电脑，当别人在使用自己的电脑时，就可以远程关闭。如果想用来偷看别人电脑的信息，也是很方便的工具。只需要将程序复制到目标电脑中，双击运行一次，此程序就会在后台中悄悄运行，并且每次都会随电脑一起启动。接下来就可以获取此电脑的文件了。下面的第一张图片列出了所有符合的信息的具体地址，第二张拿的是具体的那几张图片。</p>\n<p><img src=\"/images/pc2.png\" alt=\"ap\"></p>\n<p><img src=\"/images/pc1.png\" alt=\"ap\"></p>\n<p>源代码地址（<a href=\"https://github.com/renhongl/PCControl\">点这里</a>） ，自己玩玩就好了。。别去偷看别人的隐私。。</p>"}],"PostAsset":[],"PostCategory":[],"PostTag":[{"post_id":"cjpxle9k20000h8ob24bimxaw","tag_id":"cjpxle9k20002h8obhdg00qvq","_id":"cjpxle9kh0007h8ob19rrdf19"},{"post_id":"cjpxle9kh0008h8obj0a2czh8","tag_id":"cjpxle9k20006h8ob7a0n507p","_id":"cjpxle9kh000bh8obawoxiz2p"},{"post_id":"cjpxle9k20001h8obur9nd58h","tag_id":"cjpxle9k20006h8ob7a0n507p","_id":"cjpxle9kh000dh8obto1q8t14"},{"post_id":"cjpxle9kh000ch8ob443absnu","tag_id":"cjpxle9k20006h8ob7a0n507p","_id":"cjpxle9kh000gh8ob0m3ga0ec"},{"post_id":"cjpxle9k20003h8ob853l45hx","tag_id":"cjpxle9k20006h8ob7a0n507p","_id":"cjpxle9kh000ih8obh89ig5vb"},{"post_id":"cjpxle9kh000eh8obwz9ogvjb","tag_id":"cjpxle9k20006h8ob7a0n507p","_id":"cjpxle9kh000lh8obkbj3qkeu"},{"post_id":"cjpxle9k20004h8obt9jwm1i0","tag_id":"cjpxle9kh000fh8obhmgxln2y","_id":"cjpxle9kh000nh8obvcgv2mn2"},{"post_id":"cjpxle9k20005h8obc1a5z7wu","tag_id":"cjpxle9kh000kh8obj3bcx4bg","_id":"cjpxle9kx000rh8obneodp3w6"},{"post_id":"cjpxle9kh0009h8obfzq8fft7","tag_id":"cjpxle9kh000kh8obj3bcx4bg","_id":"cjpxle9kx000vh8ob1nu044ks"},{"post_id":"cjpxle9kx000uh8obijnh9i1q","tag_id":"cjpxle9k20006h8ob7a0n507p","_id":"cjpxle9kx000xh8oblq8qcvnk"},{"post_id":"cjpxle9kx000wh8obfsxu3n94","tag_id":"cjpxle9kx000th8obml60w2f9","_id":"cjpxle9kx000zh8ober344sck"},{"post_id":"cjpxle9kh000hh8obqv7ld4ng","tag_id":"cjpxle9kx000th8obml60w2f9","_id":"cjpxle9kx0010h8ob0qs71ozu"},{"post_id":"cjpxle9kh000jh8obv666uq3y","tag_id":"cjpxle9kx000th8obml60w2f9","_id":"cjpxle9kx0012h8ob5ebdv3e0"},{"post_id":"cjpxle9kh000mh8obgvnv20os","tag_id":"cjpxle9kx0011h8obtychhwph","_id":"cjpxle9kx0014h8ob9r4wwamf"},{"post_id":"cjpxle9kh000oh8ob09henzqi","tag_id":"cjpxle9kx000th8obml60w2f9","_id":"cjpxle9kx0016h8obwf36jg7b"},{"post_id":"cjpxle9kh000qh8ob8noim412","tag_id":"cjpxle9kx000th8obml60w2f9","_id":"cjpxle9kx0018h8ob1myayqiq"},{"post_id":"cjpxle9kx000sh8obdcxb7emw","tag_id":"cjpxle9kx000th8obml60w2f9","_id":"cjpxle9kx0019h8obpztelr8q"}],"Tag":[{"name":"Git","_id":"cjpxle9k20002h8obhdg00qvq"},{"name":"ES6","_id":"cjpxle9k20006h8ob7a0n507p"},{"name":"Mongo","_id":"cjpxle9kh000fh8obhmgxln2y"},{"name":"Javascript","_id":"cjpxle9kh000kh8obj3bcx4bg"},{"name":"分享","_id":"cjpxle9kx000th8obml60w2f9"},{"name":"Webpack","_id":"cjpxle9kx0011h8obtychhwph"}]}}